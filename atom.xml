<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Victory&#39;s Blog</title>
  
  <subtitle>非淡泊无以明志，非宁静无以致远</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-06T01:04:22.628Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>victory-liao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python | 统计字符串中各个字符出现的次数并返回出现次数最多的字符</title>
    <link href="http://example.com/2022/04/05/%E7%BB%9F%E8%AE%A1%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%90%84%E4%B8%AA%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E5%B9%B6%E8%BF%94%E5%9B%9E%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%97%E7%AC%A6/"/>
    <id>http://example.com/2022/04/05/%E7%BB%9F%E8%AE%A1%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%90%84%E4%B8%AA%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E5%B9%B6%E8%BF%94%E5%9B%9E%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%97%E7%AC%A6/</id>
    <published>2022-04-06T00:50:00.000Z</published>
    <updated>2022-04-06T01:04:22.628Z</updated>
    
    <content type="html"><![CDATA[<h1 id="找出字符串中出现次数最多的字符"><a href="#找出字符串中出现次数最多的字符" class="headerlink" title="找出字符串中出现次数最多的字符"></a>找出字符串中出现次数最多的字符</h1><pre><code>string = &quot;abcdaab&quot;word_frequency = dict()for ch in string:    if ch not in word_frequency.keys():        word_frequency[ch] = 1    else:        word_frequency[ch] += 1print(word_frequency)print(max(word_frequency, key=word_frequency.get))</code></pre><p><a href="https://blog.csdn.net/weixin_42444693/article/details/104203479?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&utm_relevant_index=1">参考资料</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;找出字符串中出现次数最多的字符&quot;&gt;&lt;a href=&quot;#找出字符串中出现次数最多的字符&quot; class=&quot;headerlink&quot; title=&quot;找出字符串中出现次数最多的字符&quot;&gt;&lt;/a&gt;找出字符串中出现次数最多的字符&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;string = &amp;</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="基础" scheme="http://example.com/categories/python/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="找出字符串中出现次数最多的字符" scheme="http://example.com/categories/python/%E5%9F%BA%E7%A1%80/%E6%89%BE%E5%87%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%97%E7%AC%A6/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="找出字符串中出现次数最多的字符" scheme="http://example.com/tags/%E6%89%BE%E5%87%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis | 多对一查询自定义映射</title>
    <link href="http://example.com/2022/04/03/%E5%A4%9A%E5%AF%B9%E4%B8%80%E6%9F%A5%E8%AF%A2%E8%87%AA%E5%AE%9A%E4%B9%89%E6%98%A0%E5%B0%84/"/>
    <id>http://example.com/2022/04/03/%E5%A4%9A%E5%AF%B9%E4%B8%80%E6%9F%A5%E8%AF%A2%E8%87%AA%E5%AE%9A%E4%B9%89%E6%98%A0%E5%B0%84/</id>
    <published>2022-04-03T09:38:59.000Z</published>
    <updated>2022-04-03T09:44:07.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多对一查询自定义映射"><a href="#多对一查询自定义映射" class="headerlink" title="多对一查询自定义映射"></a>多对一查询自定义映射</h1><p>1.项目目录<br><img src="/2022/04/03/%E5%A4%9A%E5%AF%B9%E4%B8%80%E6%9F%A5%E8%AF%A2%E8%87%AA%E5%AE%9A%E4%B9%89%E6%98%A0%E5%B0%84/1.PNG"><br>2.Emp.java</p><pre><code>package com.atguigu.bean;public class Emp &#123;    private Integer eid;    private String ename;    private Integer age;    private String sex;    private Dept dept;            public Dept getDept() &#123;        return dept;    &#125;    public void setDept(Dept dept) &#123;        this.dept = dept;    &#125;    public Integer getEid() &#123;        return eid;    &#125;    public void setEid(Integer eid) &#123;        this.eid = eid;    &#125;    public String getEname() &#123;        return ename;    &#125;    public void setEname(String ename) &#123;        this.ename = ename;    &#125;    public Integer getAge() &#123;        return age;    &#125;    public void setAge(Integer age) &#123;        this.age = age;    &#125;    public String getSex() &#123;        return sex;    &#125;    public void setSex(String sex) &#123;        this.sex = sex;    &#125;        @Override    public String toString() &#123;        return &quot;Emp [eid=&quot; + eid + &quot;, ename=&quot; + ename + &quot;, age=&quot; + age + &quot;, sex=&quot; + sex + &quot;, dept=&quot; + dept + &quot;]&quot;;    &#125;    public Emp(Integer eid, String ename, Integer age, String sex) &#123;        super();        this.eid = eid;        this.ename = ename;        this.age = age;        this.sex = sex;    &#125;    public Emp() &#123;        super();        // TODO Auto-generated constructor stub    &#125;&#125;</code></pre><p>3.Dept.java</p><pre><code>package com.atguigu.bean;public class Dept &#123;    private Integer did;    private String dname;    public Integer getDid() &#123;        return did;    &#125;    public void setDid(Integer did) &#123;        this.did = did;    &#125;    public String getDname() &#123;        return dname;    &#125;    public void setDname(String dname) &#123;        this.dname = dname;    &#125;    @Override    public String toString() &#123;        return &quot;Dept [did=&quot; + did + &quot;, dname=&quot; + dname + &quot;]&quot;;    &#125;    &#125;</code></pre><p>4.EmpDeptMapper.java</p><pre><code>package com.atguigu.mapper;import java.util.List;import com.atguigu.bean.Emp;public interface EmpDeptMapper &#123;    List&lt;Emp&gt; getAllEmp();&#125;</code></pre><p>5.EmpDeptMapper.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.atguigu.mapper.EmpDeptMapper&quot;&gt;        &lt;!-- &lt;select id=&quot;getAllEmp&quot; resultType=&quot;Emp&quot;&gt;        select e.eid,e.ename,e.age,e.sex,e.did,d.dname from emp e left join dept d on e.did=d.did                    查询结果：            [Emp [eid=1, ename=张三, age=12, sex=男, dept=null],             不能够查询出员工所对应的部门，需要进行自定义映射            &lt;/select&gt; --&gt;        &lt;!-- 自定义映射-第一种方式 --&gt;    &lt;!-- &lt;resultMap type=&quot;Emp&quot; id=&quot;empMap&quot;&gt;        &lt;id column=&quot;eid&quot; property=&quot;eid&quot;/&gt;        &lt;result column=&quot;ename&quot; property=&quot;ename&quot;/&gt;        &lt;result column=&quot;age&quot; property=&quot;age&quot;/&gt;        &lt;result column=&quot;sex&quot; property=&quot;sex&quot;/&gt;        &lt;result column=&quot;did&quot; property=&quot;dept.did&quot;/&gt;        &lt;result column=&quot;dname&quot; property=&quot;dept.dname&quot;/&gt;    &lt;/resultMap&gt; --&gt;    &lt;!--        &lt;resultMap&gt;:自定义映射，处理复杂的表关系        &lt;id/&gt;:设置主键的映射关系，column设置字段名，property设置属性名        &lt;result/&gt;:设置非主键的映射关系， column设置字段名，property设置属性名     --&gt;          &lt;!-- 自定义映射-第二种方式 --&gt;     &lt;resultMap type=&quot;Emp&quot; id=&quot;empMap&quot;&gt;        &lt;id column=&quot;eid&quot; property=&quot;eid&quot;/&gt;        &lt;result column=&quot;ename&quot; property=&quot;ename&quot;/&gt;        &lt;result column=&quot;age&quot; property=&quot;age&quot;/&gt;        &lt;result column=&quot;sex&quot; property=&quot;sex&quot;/&gt;        &lt;association property=&quot;dept&quot; javaType=&quot;Dept&quot;&gt;            &lt;id column=&quot;did&quot; property=&quot;did&quot;/&gt;            &lt;result column=&quot;dname&quot; property=&quot;dname&quot;/&gt;        &lt;/association&gt;     &lt;/resultMap&gt;        &lt;!-- List&lt;Emp&gt; getAllEmp(); --&gt;    &lt;select id=&quot;getAllEmp&quot; resultMap=&quot;empMap&quot;&gt;        &lt;!-- select * from emp e, dept d where e.did = d.did --&gt;        select e.eid,e.ename,e.age,e.sex,e.did,d.dname from emp e left join dept d on e.did=d.did    &lt;/select&gt;&lt;/mapper&gt;</code></pre><p>6.TestEmpDept.java</p><pre><code>package com.atguigu.test;import java.io.IOException;import java.io.InputStream;import java.util.List;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import com.atguigu.bean.Emp;import com.atguigu.mapper.EmpDeptMapper;public class TestEmpDept &#123;    public static void main(String[] args) throws IOException &#123;        InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);        SqlSession sqlSession = sqlSessionFactory.openSession(true);        EmpDeptMapper mapper = sqlSession.getMapper(EmpDeptMapper.class);                List&lt;Emp&gt; empList = mapper.getAllEmp();        System.out.println(empList);    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;多对一查询自定义映射&quot;&gt;&lt;a href=&quot;#多对一查询自定义映射&quot; class=&quot;headerlink&quot; title=&quot;多对一查询自定义映射&quot;&gt;&lt;/a&gt;多对一查询自定义映射&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/04/03/%E5%A4</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyBatis" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/"/>
    
    <category term="多对一查询自定义映射" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/%E5%A4%9A%E5%AF%B9%E4%B8%80%E6%9F%A5%E8%AF%A2%E8%87%AA%E5%AE%9A%E4%B9%89%E6%98%A0%E5%B0%84/"/>
    
    
    <category term="MyBatis" scheme="http://example.com/tags/MyBatis/"/>
    
    <category term="自定义映射" scheme="http://example.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%98%A0%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis | 获取参数值的两种方式</title>
    <link href="http://example.com/2022/04/02/MyBatis%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E5%80%BC%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2022/04/02/MyBatis%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E5%80%BC%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2022-04-02T13:00:31.000Z</published>
    <updated>2022-04-03T04:10:52.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis获取参数值的两种方式"><a href="#MyBatis获取参数值的两种方式" class="headerlink" title="MyBatis获取参数值的两种方式"></a>MyBatis获取参数值的两种方式</h1><p>1.${}:insert into emp values(null,admin,23,男)<br>Statement:<br>    必须使用字符串拼接的方式操作SQL，一定要注意单引号问题<br>    不能防止SQL注入<br>2.#{}:insert into emp values(null,?,?,?)<br>PreparedStatement：<br>    可以使用通配符操作SQL，因为在为String赋值时可以自动加单引号，因此不需要注意单引号问题<br>    <strong>可以防止SQL注入</strong><br>使用建议：**建议使用#{}**，在特殊情况下，需要使用${}，例如模糊查询和批量删除</p><h2 id="不同的参数类型，-和-的不同取值方式："><a href="#不同的参数类型，-和-的不同取值方式：" class="headerlink" title="不同的参数类型，${}和#{}的不同取值方式："></a>不同的参数类型，${}和#{}的不同取值方式：</h2><p>1、当传输参数为单个String或基本数据类型和其包装类型<br>#{}：可以以任意的名字获取参数值<br>${}：只能以${value}或${_parameter}获取<br>2、当传输参数为JavaBean时<br>#{}和${}都可以通过属性名直接获取属性值，但是要注意${}的单引号问题<br>3、当传输多个参数时，mybatis会默认将这些参数放在map集合中<br>两种方式：<br>（1）键为0，1，2，3…N-1,以参数为值<br>（2）键为param1,param2,param3…paramN，以参数为值<br>#{}:#{0}、#{1}；#{param1}、#{param2}<br>${}:#{param1}、{param2}，但是要注意${}的单引号问题<br>4、当传输Map参数时<br>#{}和${}都可以通过键的名字直接获取值，但是要注意${}的单引号问题<br>5、命名参数<br>可以通过@Param(“key”)为map集合指定键的名字<br>Emp getEmpByEidAndEnameByParam(@Param(“eid”)String eid, @Param(“ename”)String ename);<br>6、当传输参数为List或Array,mybatis会将List或Array放在map中<br>List以list为键，Array以array为键</p><h2 id="Statement与PreparedStatement"><a href="#Statement与PreparedStatement" class="headerlink" title="Statement与PreparedStatement"></a>Statement与PreparedStatement</h2><pre><code>package com.atguigu.test;import java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.Statement;import com.atguigu.bean.Emp;public class TestJDBC &#123;    public static void main(String[] args) throws Exception &#123;        Class.forName(&quot;&quot;);        Connection conn = DriverManager.getConnection(&quot;&quot;,&quot;&quot;,&quot;&quot;);        //可以使用通配符赋值        PreparedStatement ps = conn.prepareStatement(&quot;insert into emp values(null, ?, ?,?&quot;);        ps.setString(1, &quot;root&quot;);        ps.setString(2, &quot;23&quot;);        ps.setString(3, &quot;男&quot;);        ps.executeUpdate();                Statement statement = conn.createStatement();        Emp emp = new Emp(null, &quot;a&quot;, 1, &quot;b&quot;);        //不可以使用通配符赋值        statement.executeUpdate(&quot;insert into emp values(null, &#39;&quot;+emp.getEname()+&quot;&#39;, &quot;+emp.getAge()+&quot;, &#39;&quot;+emp.getSex()+&quot;&#39;)&quot;);    &#125;&#125;</code></pre><span id="more"></span><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>1.项目目录<br><img src="/2022/04/02/MyBatis%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E5%80%BC%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/1.PNG"><br>2.ParamMapper.java</p><pre><code>package com.atguigu.mapper;import java.util.List;import java.util.Map;import org.apache.ibatis.annotations.Param;import com.atguigu.bean.Emp;public interface ParamMapper &#123;    //添加员工信息    void insertEmp(Emp emp);        //获取名字中包含以name开头且后面多一个任意字符的员工信息    List&lt;Emp&gt; getAllEmp(String name);            //删除名字中包含name的员工信息    void deleteEmp(String name);        //根据eid获取员工信息    Emp getEmpByEid(String eid);        //根据eid和ename获取员工信息    Emp getEmpByEidAndEname(String eid, String ename);        //根据map查询员工信息    Emp getEmpByMap(Map&lt;String, Object&gt; map);        //根据eid和ename获取员工信息    Emp getEmpByEidAndEnameByParam(@Param(&quot;eid&quot;)String eid, @Param(&quot;ename&quot;)String ename);&#125;</code></pre><p>3.ParamMapper.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.atguigu.mapper.ParamMapper&quot;&gt;    &lt;!--        useGeneratedKeys:可以使用自动生成的主键         keyProperty:将自动生成的主键赋值给传递过来的参数的哪一个属性     --&gt;    &lt;insert id=&quot;insertEmp&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;eid&quot;&gt;        &lt;!-- insert into emp values(null, #&#123;ename&#125;, #&#123;age&#125;, #&#123;sex&#125;) --&gt;                insert into emp values(null, &#39;$&#123;ename&#125;&#39;, $&#123;age&#125;, &#39;$&#123;sex&#125;&#39;)    &lt;/insert&gt;        &lt;select id=&quot;getAllEmp&quot; resultType=&quot;Emp&quot;&gt;        &lt;!-- 模糊查询 --&gt;        select eid,ename,age,sex from emp where ename like &#39;$&#123;value&#125;_&#39;    &lt;/select&gt;        &lt;delete id=&quot;deleteEmp&quot;&gt;        &lt;!-- 批量删除 --&gt;        delete from emp where ename like &#39;%$&#123;value&#125;%&#39;    &lt;/delete&gt;        &lt;!-- Emp getEmpByEid(String eid); --&gt;    &lt;select id=&quot;getEmpByEid&quot; resultType=&quot;Emp&quot;&gt;        &lt;!-- select eid,ename,age,sex from emp where eid=#&#123;eid&#125; --&gt;                &lt;!-- 参数与接口中的参数不一致也可以 --&gt;        &lt;!-- select eid,ename,age,sex from emp where eid=#&#123;eids&#125; --&gt;                &lt;!--             报错：            org.apache.ibatis.reflection.ReflectionException:             There is no getter for property named &#39;eid&#39; in             &#39;class java.lang.String&#39;         --&gt;        &lt;!-- select eid,ename,age,sex from emp where eid = $&#123;eid&#125; --&gt;                &lt;!-- 成功 --&gt;        &lt;!-- select eid,ename,age,sex from emp where eid = $&#123;value&#125; --&gt;                select eid,ename,age,sex from emp where eid = $&#123;_parameter&#125;    &lt;/select&gt;        &lt;!-- Emp getEmpByEidAndEname(String eid, String ename); --&gt;    &lt;select id=&quot;getEmpByEidAndEname&quot; resultType=&quot;Emp&quot;&gt;        &lt;!-- select eid,ename,age,sex from emp where eid=#&#123;0&#125; and ename=#&#123;1&#125; --&gt;        &lt;!-- select eid,ename,age,sex from emp where eid=#&#123;param1&#125; and ename=#&#123;param2&#125; --&gt;                select eid,ename,age,sex from emp where eid=$&#123;param1&#125; and ename=&#39;$&#123;param2&#125;&#39;        &lt;!-- select eid,ename,age,sex from emp where eid=$&#123;0&#125; and ename=$&#123;1&#125; --&gt;&lt;!-- 不可行 --&gt;    &lt;/select&gt;        &lt;!-- Emp getEmpByMap(Map&lt;String, Object&gt; map); --&gt;    &lt;select id=&quot;getEmpByMap&quot; resultType=&quot;Emp&quot;&gt;        select eid,ename,age,sex from emp where eid=$&#123;eid&#125; and ename=&#39;$&#123;ename&#125;&#39;    &lt;/select&gt;        &lt;!-- Emp getEmpByEidAndEnameByParam(@Param(&quot;eid&quot;)String eid, @Param(&quot;ename&quot;)String ename); --&gt;    &lt;select id=&quot;getEmpByEidAndEnameByParam&quot; resultType=&quot;Emp&quot;&gt;        select eid,ename,age,sex from emp where eid=#&#123;eid&#125; and ename=#&#123;ename&#125;    &lt;/select&gt;    &lt;/mapper&gt;</code></pre><p>4.TestParam.java</p><pre><code>package com.atguigu.test;import java.io.IOException;import java.io.InputStream;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.Test;import com.atguigu.bean.Emp;import com.atguigu.mapper.ParamMapper;public class TestParam &#123;    @Test    public void testCRUD() throws IOException&#123;        InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);//        SqlSession sqlSession = sqlSessionFactory.openSession();//需要手动处理事务        SqlSession sqlSession = sqlSessionFactory.openSession(true);//自动处理事务        ParamMapper mapper = sqlSession.getMapper(ParamMapper.class);                //获取名字中包含admin的所有员工信息(模糊查询)//        List&lt;Emp&gt; allEmp = mapper.getAllEmp(&quot;admin&quot;);//        System.out.println(allEmp);                //删除名字中包含admin的所有员工信息(批量删除)//        mapper.deleteEmp(&quot;admin&quot;);                //        Emp emp = new Emp(null, &quot;admin&quot;, 23, &quot;男&quot;);//        mapper.insertEmp(emp);//        System.out.println(emp.getEid());        //        Emp emp = mapper.getEmpByEid(&quot;1&quot;);//        System.out.println(emp);        //        Emp emp = mapper.getEmpByEidAndEname(&quot;1&quot;, &quot;张三&quot;);//        System.out.println(emp);        //        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();//        map.put(&quot;eid&quot;, &quot;1&quot;);//        map.put(&quot;ename&quot;, &quot;张三&quot;);//        Emp emp = mapper.getEmpByMap(map);//        System.out.println(emp);                Emp emp = mapper.getEmpByEidAndEnameByParam(&quot;1&quot;, &quot;张三&quot;);        System.out.println(emp);    &#125;&#125; </code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;MyBatis获取参数值的两种方式&quot;&gt;&lt;a href=&quot;#MyBatis获取参数值的两种方式&quot; class=&quot;headerlink&quot; title=&quot;MyBatis获取参数值的两种方式&quot;&gt;&lt;/a&gt;MyBatis获取参数值的两种方式&lt;/h1&gt;&lt;p&gt;1.${}:insert into emp values(null,admin,23,男)&lt;br&gt;Statement:&lt;br&gt;    必须使用字符串拼接的方式操作SQL，一定要注意单引号问题&lt;br&gt;    不能防止SQL注入&lt;br&gt;2.#{}:insert into emp values(null,?,?,?)&lt;br&gt;PreparedStatement：&lt;br&gt;    可以使用通配符操作SQL，因为在为String赋值时可以自动加单引号，因此不需要注意单引号问题&lt;br&gt;    &lt;strong&gt;可以防止SQL注入&lt;/strong&gt;&lt;br&gt;使用建议：**建议使用#{}**，在特殊情况下，需要使用${}，例如模糊查询和批量删除&lt;/p&gt;
&lt;h2 id=&quot;不同的参数类型，-和-的不同取值方式：&quot;&gt;&lt;a href=&quot;#不同的参数类型，-和-的不同取值方式：&quot; class=&quot;headerlink&quot; title=&quot;不同的参数类型，${}和#{}的不同取值方式：&quot;&gt;&lt;/a&gt;不同的参数类型，${}和#{}的不同取值方式：&lt;/h2&gt;&lt;p&gt;1、当传输参数为单个String或基本数据类型和其包装类型&lt;br&gt;#{}：可以以任意的名字获取参数值&lt;br&gt;${}：只能以${value}或${_parameter}获取&lt;br&gt;2、当传输参数为JavaBean时&lt;br&gt;#{}和${}都可以通过属性名直接获取属性值，但是要注意${}的单引号问题&lt;br&gt;3、当传输多个参数时，mybatis会默认将这些参数放在map集合中&lt;br&gt;两种方式：&lt;br&gt;（1）键为0，1，2，3…N-1,以参数为值&lt;br&gt;（2）键为param1,param2,param3…paramN，以参数为值&lt;br&gt;#{}:#{0}、#{1}；#{param1}、#{param2}&lt;br&gt;${}:#{param1}、{param2}，但是要注意${}的单引号问题&lt;br&gt;4、当传输Map参数时&lt;br&gt;#{}和${}都可以通过键的名字直接获取值，但是要注意${}的单引号问题&lt;br&gt;5、命名参数&lt;br&gt;可以通过@Param(“key”)为map集合指定键的名字&lt;br&gt;Emp getEmpByEidAndEnameByParam(@Param(“eid”)String eid, @Param(“ename”)String ename);&lt;br&gt;6、当传输参数为List或Array,mybatis会将List或Array放在map中&lt;br&gt;List以list为键，Array以array为键&lt;/p&gt;
&lt;h2 id=&quot;Statement与PreparedStatement&quot;&gt;&lt;a href=&quot;#Statement与PreparedStatement&quot; class=&quot;headerlink&quot; title=&quot;Statement与PreparedStatement&quot;&gt;&lt;/a&gt;Statement与PreparedStatement&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;package com.atguigu.test;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.Statement;

import com.atguigu.bean.Emp;

public class TestJDBC &amp;#123;
    public static void main(String[] args) throws Exception &amp;#123;
        Class.forName(&amp;quot;&amp;quot;);
        Connection conn = DriverManager.getConnection(&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;);
        //可以使用通配符赋值
        PreparedStatement ps = conn.prepareStatement(&amp;quot;insert into emp values(null, ?, ?,?&amp;quot;);
        ps.setString(1, &amp;quot;root&amp;quot;);
        ps.setString(2, &amp;quot;23&amp;quot;);
        ps.setString(3, &amp;quot;男&amp;quot;);
        ps.executeUpdate();
        
        Statement statement = conn.createStatement();
        Emp emp = new Emp(null, &amp;quot;a&amp;quot;, 1, &amp;quot;b&amp;quot;);
        //不可以使用通配符赋值
        statement.executeUpdate(&amp;quot;insert into emp values(null, &amp;#39;&amp;quot;+emp.getEname()+&amp;quot;&amp;#39;, &amp;quot;+emp.getAge()+&amp;quot;, &amp;#39;&amp;quot;+emp.getSex()+&amp;quot;&amp;#39;)&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyBatis" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/"/>
    
    <category term="MyBatis获取参数值的两种方式" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/MyBatis%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E5%80%BC%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    
    
    <category term="Mybatis" scheme="http://example.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis | 三种查询方式</title>
    <link href="http://example.com/2022/04/02/MyBatis%E4%B8%89%E7%A7%8D%E6%9F%A5%E8%AF%A2%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2022/04/02/MyBatis%E4%B8%89%E7%A7%8D%E6%9F%A5%E8%AF%A2%E6%96%B9%E5%BC%8F/</id>
    <published>2022-04-02T12:55:34.000Z</published>
    <updated>2022-04-02T12:59:18.223Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis三种查询方式"><a href="#MyBatis三种查询方式" class="headerlink" title="MyBatis三种查询方式"></a>MyBatis三种查询方式</h1><p>1.项目目录<br><img src="/2022/04/02/MyBatis%E4%B8%89%E7%A7%8D%E6%9F%A5%E8%AF%A2%E6%96%B9%E5%BC%8F/1.PNG"><br>2.EmpSelectMapper.java</p><pre><code>package com.atguigu.mapper;import java.util.Map;import org.apache.ibatis.annotations.MapKey;import com.atguigu.bean.Emp;public interface EmpSelectMapper &#123;    //根据eid查询一个员工信息    Emp getEmpByEid(String eid);        //获取所有的员工数量    Integer getCount();        //以map集合获取一个员工信息    Map&lt;String, Object&gt; getEmpMapByEid(String eid);        //以map集合获取所有员工信息        @MapKey(&quot;eid&quot;)//设置map的建，因为在查询时传出所有的员工信息，可以把员工信息作为值，但是必须设置键    Map&lt;String, Object&gt; getAllEmpMap();&#125;</code></pre><p>3.EmpSelectMapper.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.atguigu.mapper.EmpSelectMapper&quot;&gt;            &lt;!-- //根据eid查询一个员工信息    Emp getEmpByEid(String eid); --&gt;    &lt;select id=&quot;getEmpByEid&quot; resultType=&quot;Emp&quot;&gt;        select eid,ename,age,sex from emp where eid=#&#123;eid&#125;    &lt;/select&gt;        &lt;!-- //获取所有的员工数量    Integer getCount(); --&gt;    &lt;select id=&quot;getCount&quot; resultType=&quot;Integer&quot;&gt;        select count(eid) from emp    &lt;/select&gt;        &lt;!-- //以map集合获取一个员工信息    Map&lt;String, Object&gt; getEmpMapByEid(String eid); --&gt;    &lt;select id=&quot;getEmpMapByEid&quot; resultType=&quot;java.util.HashMap&quot;&gt;        select eid,ename,age,sex from emp where eid=#&#123;eid&#125;    &lt;/select&gt;        &lt;!-- //以map集合获取所有员工信息    @MapKey(&quot;eid&quot;)//设置map的建，因为在查询时传出所有的员工信息，可以把员工信息作为值，但是必须设置键    Map&lt;String, Object&gt; getAllEmpMap(); --&gt;    &lt;select id=&quot;getAllEmpMap&quot; resultType=&quot;Emp&quot;&gt;    select eid,ename,age,sex from emp    &lt;/select&gt;    &lt;/mapper&gt;</code></pre><p>4.TestSelect.java</p><pre><code>package com.atguigu.test;import java.io.IOException;import java.io.InputStream;import java.util.Map;import javax.annotation.Resource;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.Test;import com.atguigu.bean.Emp;import com.atguigu.mapper.EmpSelectMapper;public class TestSelect &#123;    @Test    public void testSelect() throws IOException&#123;        InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);        SqlSession sqlSession = sqlSessionFactory.openSession(true);        EmpSelectMapper mapper = sqlSession.getMapper(EmpSelectMapper.class);        //若查询出的数据有多条，则绝不能将接口中方法的返回值设置为Javabean//        Emp emp = mapper.getEmpByEid(&quot;3&quot;);//        System.out.println(emp);                //获取员工总记录数//        Integer i = mapper.getCount();//        System.out.println(i);                //以map获取单个emp//        Map&lt;String, Object&gt; map = mapper.getEmpMapByEid(&quot;6&quot;);//        System.out.println(map);                //以map获取所有emp        Map&lt;String, Object&gt; map = mapper.getAllEmpMap();        System.out.println(map);    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MyBatis三种查询方式&quot;&gt;&lt;a href=&quot;#MyBatis三种查询方式&quot; class=&quot;headerlink&quot; title=&quot;MyBatis三种查询方式&quot;&gt;&lt;/a&gt;MyBatis三种查询方式&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyBatis" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/"/>
    
    <category term="MyBatis三种查询方式" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/MyBatis%E4%B8%89%E7%A7%8D%E6%9F%A5%E8%AF%A2%E6%96%B9%E5%BC%8F/"/>
    
    
    <category term="Mybatis" scheme="http://example.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis | 增删改查</title>
    <link href="http://example.com/2022/04/02/MyBatis%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>http://example.com/2022/04/02/MyBatis%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</id>
    <published>2022-04-02T12:43:59.000Z</published>
    <updated>2022-04-02T12:53:47.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis-CRUD"><a href="#MyBatis-CRUD" class="headerlink" title="MyBatis CRUD"></a>MyBatis CRUD</h1><p>按照<a href="https://victory-liao.github.io/2022/04/01/MyBatis%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/">MyBatis搭建过程</a>进行项目搭建，<br>并在mybatis-config.xml中将按如下方式引入映射文件：</p><pre><code>&lt;!-- 引入映射文件 --&gt;&lt;mappers&gt;    &lt;!-- &lt;mapper resource=&quot;EmpMapper.xml&quot; /&gt;    &lt;mapper resource=&quot;DeptMapper.xml&quot;&gt;&lt;/mapper&gt; --&gt;        &lt;!-- 此种写法要求mapper接口和mapper映射文件在同一个包下 --&gt;    &lt;package name=&quot;com.atguigu.mapper&quot;/&gt;    &lt;/mappers&gt;</code></pre><h2 id="CRUD-案例"><a href="#CRUD-案例" class="headerlink" title="CRUD 案例"></a>CRUD 案例</h2><p>1.项目目录<br><img src="/2022/04/02/MyBatis%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/1.PNG"><br>2.Emp.java</p><pre><code>package com.atguigu.bean;public class Emp &#123;    private Integer eid;    private String ename;    private Integer age;    private String sex;    public Integer getEid() &#123;        return eid;    &#125;    public void setEid(Integer eid) &#123;        this.eid = eid;    &#125;    public String getEname() &#123;        return ename;    &#125;    public void setEname(String ename) &#123;        this.ename = ename;    &#125;    public Integer getAge() &#123;        return age;    &#125;    public void setAge(Integer age) &#123;        this.age = age;    &#125;    public String getSex() &#123;        return sex;    &#125;    public void setSex(String sex) &#123;        this.sex = sex;    &#125;    @Override    public String toString() &#123;        return &quot;Emp [eid=&quot; + eid + &quot;, ename=&quot; + ename + &quot;, age=&quot; + age + &quot;, sex=&quot; + sex + &quot;]&quot;;    &#125;    public Emp(Integer eid, String ename, Integer age, String sex) &#123;        super();        this.eid = eid;        this.ename = ename;        this.age = age;        this.sex = sex;    &#125;    public Emp() &#123;        super();        // TODO Auto-generated constructor stub    &#125;            &#125;</code></pre><p>3.EmpMapper.java</p><pre><code>package com.atguigu.mapper;import java.util.List;import com.atguigu.bean.Emp;public interface EmpMapper &#123;    //根据eid查询员工信息    Emp getEmpByEid(String eid);        //获取所有的员工信息    List&lt;Emp&gt; getAllEmp();        //添加员工信息    void addEmp(Emp emp);        //修改员工信息    void updateEmp(Emp emp);        //删除员工信息    Integer deleteEmp(String id);&#125;</code></pre><p>4.EmpMapper.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.atguigu.mapper.EmpMapper&quot;&gt;    &lt;!-- Emp getEmpByEid(String eid); --&gt;    &lt;select id=&quot;getEmpByEid&quot; resultType=&quot;Emp&quot;&gt;        select eid,ename,age,sex from emp where eid=#&#123;eid&#125;    &lt;/select&gt;        &lt;!-- List&lt;Emp&gt; getAllEmp(); --&gt;    &lt;select id=&quot;getAllEmp&quot; resultType=&quot;Emp&quot;&gt;        select eid,ename,age,sex from emp    &lt;/select&gt;        &lt;!-- void addEmp(Emp emp); --&gt;    &lt;insert id=&quot;addEmp&quot;&gt;        insert into emp values(null, #&#123;ename&#125;, #&#123;age&#125;, #&#123;sex&#125;)    &lt;/insert&gt;        &lt;!-- void updateEmp(Emp emp); --&gt;    &lt;update id=&quot;updateEmp&quot; parameterType=&quot;Emp&quot;&gt;        update emp set ename=#&#123;ename&#125;,age=#&#123;age&#125;,sex=#&#123;sex&#125; where eid=#&#123;eid&#125;    &lt;/update&gt;        &lt;!-- void deleteEmp(String id);  --&gt;    &lt;delete id=&quot;deleteEmp&quot;&gt;        delete from emp where eid=#&#123;eid&#125;    &lt;/delete&gt;&lt;/mapper&gt;</code></pre><p>5.TestCRUD.java</p><pre><code>package com.atguigu.test;import java.io.IOException;import java.io.InputStream;import java.util.List;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.Test;import com.atguigu.bean.Emp;import com.atguigu.mapper.EmpMapper;public class TestCRUD &#123;    @Test    public void testCRUD() throws IOException&#123;        InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);//        SqlSession sqlSession = sqlSessionFactory.openSession();//需要手动处理事务        SqlSession sqlSession = sqlSessionFactory.openSession(true);//自动处理事务        EmpMapper empMapper = sqlSession.getMapper(EmpMapper.class);        //测试：根据eid获取员工信息//        Emp emp = empMapper.getEmpByEid(&quot;3&quot;);//        System.out.println(emp);                //测试：获取所有的员工信息//        List&lt;Emp&gt; list = empMapper.getAllEmp();//        System.out.println(list);                //测试：添加员工信息//        empMapper.addEmp(new Emp(null,&quot;admin&quot;,23,&quot;女&quot;));//        sqlSession.commit();//提交事务                //测试：修改员工信息        empMapper.updateEmp(new Emp(2, &quot;张二&quot;, 33, &quot;女&quot;));                //测试：删除员工信息//        Integer rowNum = empMapper.deleteEmp(&quot;5&quot;);//        System.out.println(rowNum);//返回值类型为Integer:返回受影响的行数 Boolean:·    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MyBatis-CRUD&quot;&gt;&lt;a href=&quot;#MyBatis-CRUD&quot; class=&quot;headerlink&quot; title=&quot;MyBatis CRUD&quot;&gt;&lt;/a&gt;MyBatis CRUD&lt;/h1&gt;&lt;p&gt;按照&lt;a href=&quot;https://victory-lia</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyBatis" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/"/>
    
    <category term="CRUD" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/CRUD/"/>
    
    
    <category term="Mybatis" scheme="http://example.com/tags/Mybatis/"/>
    
    <category term="CRUD" scheme="http://example.com/tags/CRUD/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis | MyBatis搭建过程</title>
    <link href="http://example.com/2022/04/01/MyBatis%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    <id>http://example.com/2022/04/01/MyBatis%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/</id>
    <published>2022-04-01T13:16:26.000Z</published>
    <updated>2022-04-02T12:45:02.095Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis搭建过程"><a href="#MyBatis搭建过程" class="headerlink" title="MyBatis搭建过程"></a>MyBatis搭建过程</h1><p>1.导入MyBatis框架的jar包、Mysql驱动包、log4j的jar包</p><pre><code>myBatis-3.4.1.jarmysql-connector-java-5.1.37-bin.jarlog4j.jar</code></pre><p>2.创建MyBatis的核心（全局）配置文件mybatis-config.xml并配置（如何连接数据库）<br>3.创建映射文件XxxMapper.xml并配置（如何操作数据库）<br>4.创建mapper接口，实现两个绑定:<br>4.1接口全限定名要和映射文件的namespace保持一致<br>4.2接口中方法名和SQL语句的id保持一致<br>5.获取MyBatis操作数据库的会话对象SqlSession，通过getMapper()获取接口的动态代理实现类</p><pre><code>InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);SqlSession sqlSession = sqlSessionFactory.openSession();UserMapper mapper = sqlSession.getMapper(UserMapper.class);</code></pre><p>6、测试</p><span id="more"></span><h2 id="搭建过程案例"><a href="#搭建过程案例" class="headerlink" title="搭建过程案例"></a>搭建过程案例</h2><p>1.项目目录<br><img src="/2022/04/01/MyBatis%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/1.PNG"></p><p><strong>user表</strong><br><img src="/2022/04/01/MyBatis%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/2.PNG"></p><p><strong>log4j.xml</strong></p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE log4j:configuration SYSTEM &quot;log4j.dtd&quot;&gt; &lt;log4j:configuration xmlns:log4j=&quot;http://jakarta.apache.org/log4j/&quot;&gt;  &lt;appender name=&quot;STDOUT&quot; class=&quot;org.apache.log4j.ConsoleAppender&quot;&gt;   &lt;param name=&quot;Encoding&quot; value=&quot;UTF-8&quot; /&gt;   &lt;layout class=&quot;org.apache.log4j.PatternLayout&quot;&gt;    &lt;param name=&quot;ConversionPattern&quot; value=&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m  (%F:%L) \n&quot; /&gt;   &lt;/layout&gt; &lt;/appender&gt; &lt;logger name=&quot;java.sql&quot;&gt;   &lt;level value=&quot;debug&quot; /&gt; &lt;/logger&gt; &lt;logger name=&quot;org.apache.ibatis&quot;&gt;   &lt;level value=&quot;info&quot; /&gt; &lt;/logger&gt; &lt;root&gt;   &lt;level value=&quot;debug&quot; /&gt;   &lt;appender-ref ref=&quot;STDOUT&quot; /&gt; &lt;/root&gt;&lt;/log4j:configuration&gt;</code></pre><p>2.导入上图中所示的jar包<br>3.jdbc.properties</p><pre><code>jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/ssmjdbc.username=rootjdbc.password=root</code></pre><p>4.mybatis-config.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;    &lt;!-- &lt;properties&gt;        &lt;property name=&quot;jdbc.driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;    &lt;/properties&gt; --&gt;        &lt;!--         &lt;properties&gt;:设置或引入资源文件        resource:在类路径下访问资源文件        url:在网络路径或磁盘路径下访问资源文件     --&gt;    &lt;properties resource=&quot;jdbc.properties&quot;&gt;&lt;/properties&gt;        &lt;settings&gt;        &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;&gt;&lt;/setting&gt;    &lt;/settings&gt;        &lt;typeAliases&gt;        &lt;!--             为类型设置类型别名            type:Java类型，若只设置type，默认的别名就是类型，且不区分大小写         --&gt;         &lt;!-- &lt;typeAlias type=&quot;com.atguigu.bean.User&quot; alias=&quot;User&quot;/&gt; --&gt;                  &lt;package name=&quot;com.atguigu.bean&quot;/&gt;    &lt;/typeAliases&gt;    &lt;!--        &lt;environments&gt;:设置连接数据库的环境        default:设置默认使用的数据库环境     --&gt;    &lt;environments default=&quot;development&quot;&gt;        &lt;!--             &lt;environment&gt;:设置某个具体的数据库环境            id:数据库环境的唯一标识         --&gt;        &lt;environment id=&quot;development&quot;&gt;            &lt;!--                type=&quot;JDBC|MANAGED&quot;              --&gt;            &lt;transactionManager type=&quot;JDBC&quot; /&gt;            &lt;!--                type=&quot;POOLED|UNPOOLED|JNDI&quot;              --&gt;            &lt;dataSource type=&quot;POOLED&quot;&gt;                &lt;property name=&quot;driver&quot; value=&quot;$&#123;jdbc.driver&#125;&quot; /&gt;                &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt;                &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt;                &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;        &lt;!-- 引入映射文件 --&gt;    &lt;mappers&gt;        &lt;mapper resource=&quot;UserMapper.xml&quot; /&gt;    &lt;/mappers&gt;&lt;/configuration&gt;</code></pre><p>5.User.java</p><pre><code>package com.atguigu.bean;public class User &#123;    private Integer uid;    private String userName;    private String password;    private Integer age;    private String sex;    public Integer getUid() &#123;        return uid;    &#125;    public void setUid(Integer uid) &#123;        this.uid = uid;    &#125;    public String getUserName() &#123;        return userName;    &#125;    public void setUserName(String userName) &#123;        this.userName = userName;    &#125;    public String getPassword() &#123;        return password;    &#125;    public void setPassword(String password) &#123;        this.password = password;    &#125;    public Integer getAge() &#123;        return age;    &#125;    public void setAge(Integer age) &#123;        this.age = age;    &#125;    public String getSex() &#123;        return sex;    &#125;    public void setSex(String sex) &#123;        this.sex = sex;    &#125;    @Override    public String toString() &#123;        return &quot;User [uid=&quot; + uid + &quot;, userName=&quot; + userName + &quot;, password=&quot; + password + &quot;, age=&quot; + age + &quot;, sex=&quot;                + sex + &quot;]&quot;;    &#125;    &#125;</code></pre><p>6.UserMapper.xml(举例：操作数据库中的user表)</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.atguigu.mapper.UserMapper&quot;&gt;    &lt;!--         &lt;select&gt;:定义查询语句         id:设置SQL语句的唯一标识        resultType:结果类型，即实体类的全限定名    --&gt;    &lt;select id=&quot;getUserByUid&quot; resultType=&quot;User&quot;&gt;        &lt;!--         当数据库表中的字段与类中的属性名不一样时，可以在查询时指定别名        select uid,user_name userName,password,age,sex from user where uid = #&#123;id&#125;         --&gt;                &lt;!--         当数据库表中的字段与类中的属性名不一样时，如果不指定别名，需要在核心配置文件mybatis-config.xml中做以下配置：         &lt;settings&gt;            &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;&gt;&lt;/setting&gt;         &lt;/settings&gt;                  注：此配置通常不使用，即在开发时将数据库的字段名与类的属性名保持一致         --&gt;        select uid,user_name,password,age,sex from user where uid = #&#123;id&#125;    &lt;/select&gt;&lt;/mapper&gt;</code></pre><p>7.UserMapper.java(mapper接口)</p><pre><code>package com.atguigu.mapper;import com.atguigu.bean.User;public interface UserMapper &#123;    User getUserByUid(String uid);&#125;</code></pre><p>8.TestMybatis.java(测试类)</p><pre><code>package com.atguigu.mapper;import java.io.IOException;import java.io.InputStream;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.Test;import com.atguigu.bean.User;public class TestMybatis &#123;    @Test    public void test() throws IOException&#123;        InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);        SqlSession sqlSession = sqlSessionFactory.openSession();        //getMapper():会通过动态代理动态生成UserMapper的代理实现类        UserMapper mapper = sqlSession.getMapper(UserMapper.class);        //System.out.println(mapper.getClass().getName());        User user = mapper.getUserByUid(&quot;1&quot;);        System.out.println(user);      &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;MyBatis搭建过程&quot;&gt;&lt;a href=&quot;#MyBatis搭建过程&quot; class=&quot;headerlink&quot; title=&quot;MyBatis搭建过程&quot;&gt;&lt;/a&gt;MyBatis搭建过程&lt;/h1&gt;&lt;p&gt;1.导入MyBatis框架的jar包、Mysql驱动包、log4j的jar包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;myBatis-3.4.1.jar
mysql-connector-java-5.1.37-bin.jar
log4j.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2.创建MyBatis的核心（全局）配置文件mybatis-config.xml并配置（如何连接数据库）&lt;br&gt;3.创建映射文件XxxMapper.xml并配置（如何操作数据库）&lt;br&gt;4.创建mapper接口，实现两个绑定:&lt;br&gt;4.1接口全限定名要和映射文件的namespace保持一致&lt;br&gt;4.2接口中方法名和SQL语句的id保持一致&lt;br&gt;5.获取MyBatis操作数据库的会话对象SqlSession，通过getMapper()获取接口的动态代理实现类&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;InputStream is = Resources.getResourceAsStream(&amp;quot;mybatis-config.xml&amp;quot;);
SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);
SqlSession sqlSession = sqlSessionFactory.openSession();
UserMapper mapper = sqlSession.getMapper(UserMapper.class);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6、测试&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyBatis" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/"/>
    
    <category term="MyBatis搭建过程" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/MyBatis%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="MyBatis" scheme="http://example.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>python | 迭代器</title>
    <link href="http://example.com/2022/03/27/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>http://example.com/2022/03/27/%E8%BF%AD%E4%BB%A3%E5%99%A8/</id>
    <published>2022-03-27T10:02:05.000Z</published>
    <updated>2022-03-27T10:06:05.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><pre><code># 创建一个返回数字的迭代器，初始值为 1，逐步递增 1：class MyNumbers:    def __iter__(self):        self.a = 0        return self    def __next__(self):        self.a = self.a + 1        return self.a# 奇数迭代器class MyOddNumbers:    def __iter__(self):        self.num = 1        return self    def __next__(self):        self.num = self.num + 2        return self.num# 偶数迭代器class MyEvenNumbers:    def __iter__(self):        self.num = 0        return self    def __next__(self):        self.num = self.num + 2        return self.nummyclass = MyNumbers()myiter = iter(myclass)print(next(myiter))print(next(myiter))print(next(myiter))print(next(myiter))print(next(myiter))print(&quot;======================================&quot;)my_odd_numbers = MyOddNumbers()my_odd_numbers_iter = iter(my_odd_numbers)print(next(my_odd_numbers_iter))print(next(my_odd_numbers_iter))print(next(my_odd_numbers_iter))print(next(my_odd_numbers_iter))print(&quot;======================================&quot;)my_even_numbers = MyEvenNumbers()my_even_numbers_iter = iter(my_even_numbers)print(next(my_even_numbers_iter))print(next(my_even_numbers_iter))print(next(my_even_numbers_iter))print(next(my_even_numbers_iter))</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;迭代器&quot;&gt;&lt;a href=&quot;#迭代器&quot; class=&quot;headerlink&quot; title=&quot;迭代器&quot;&gt;&lt;/a&gt;迭代器&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;# 创建一个返回数字的迭代器，初始值为 1，逐步递增 1：
class MyNumbers:
    def __i</summary>
      
    
    
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="迭代器" scheme="http://example.com/tags/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    
    <category term="iterator" scheme="http://example.com/tags/iterator/"/>
    
  </entry>
  
  <entry>
    <title>python | property和property装饰器</title>
    <link href="http://example.com/2022/03/25/property%E5%92%8Cproperty%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>http://example.com/2022/03/25/property%E5%92%8Cproperty%E8%A3%85%E9%A5%B0%E5%99%A8/</id>
    <published>2022-03-25T11:35:27.000Z</published>
    <updated>2022-03-25T11:36:33.956Z</updated>
    
    <content type="html"><![CDATA[<h1 id="property和property装饰器"><a href="#property和property装饰器" class="headerlink" title="property和property装饰器"></a>property和property装饰器</h1><pre><code>class Student:    def __init__(self, name):        self.__name = name    def get_name(self):        return self.__name    def set_name(self, new_name):        self.__name = new_name    name = property(get_name, set_name)s = Student(&quot;张三&quot;)s.name = &quot;李四&quot;print(s.name)class Student:    def __init__(self, name):        self.__name = name    @property    def name(self):        return self.__name    @name.setter    def name(self, new_name):        self.__name = new_names = Student(&quot;张三&quot;)s.name = &quot;李四&quot;print(s.name)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;property和property装饰器&quot;&gt;&lt;a href=&quot;#property和property装饰器&quot; class=&quot;headerlink&quot; title=&quot;property和property装饰器&quot;&gt;&lt;/a&gt;property和property装饰器&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="property" scheme="http://example.com/tags/property/"/>
    
    <category term="property装饰器" scheme="http://example.com/tags/property%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java | java引用</title>
    <link href="http://example.com/2022/03/24/java%E5%BC%95%E7%94%A8/"/>
    <id>http://example.com/2022/03/24/java%E5%BC%95%E7%94%A8/</id>
    <published>2022-03-25T04:32:36.000Z</published>
    <updated>2022-03-25T04:33:44.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="强软弱虚四大引用"><a href="#强软弱虚四大引用" class="headerlink" title="强软弱虚四大引用"></a>强软弱虚四大引用</h1><pre><code>import java.lang.ref.PhantomReference;import java.lang.ref.Reference;import java.lang.ref.ReferenceQueue;import java.lang.ref.SoftReference;import java.lang.ref.WeakReference;import java.util.ArrayList;import java.util.List;import java.util.Scanner;class StudentClass&#123;    @Override    protected void finalize() throws Throwable&#123;        System.out.println(&quot;student对象被回收了&quot;);    &#125;&#125;public class ReferencesTest &#123;    public static void main(String[] args) &#123;                /**         * 强引用         * 只要某个对象有强引用与之关联，这个对象永远不会被回收，即使内存不足，JVM宁愿抛出OOM，也不会去回收。         */        //StudentClass student = new StudentClass();        //student = null;//断开强引用与对象之间的关联        //System.gc();                        /**         * 软引用         * 内存不足时，JVM会回收软引用关联的对象         *          * 比较适合用作缓存，当内存足够，可以正常的拿到缓存，当内存不够，就会先干掉缓存，不至于马上抛出OOM。         *///        SoftReference&lt;byte[]&gt; softReference = new SoftReference&lt;byte[]&gt;(new byte[1024*1024*10]);//        System.out.println(softReference.get());//        System.gc();//        System.out.println(softReference.get());//        byte[] bytes = new byte[1024 * 1024 * 10];//        System.out.println(softReference.get());                /**         * 弱引用         * 不管内存是否足够，只要发生GC，都会被回收         *///        WeakReference&lt;byte[]&gt; weakReference = new WeakReference&lt;byte[]&gt;(new byte[1]);//        System.out.println(weakReference.get());//        System.gc();//        System.out.println(weakReference.get());        //        [B@15db9742//         null                /**         * 虚引用         * 特点一：无法通过虚引用来获取对一个对象的真实引用         * 特点二：虚引用必须与ReferenceQueue一起使用，当GC准备回收一个对象，如果发现它还有虚引用，就会在回收之前，把这个虚引用加入到与之关联的ReferenceQueue中。         *          *          * Unlike soft and weak references, phantom references are not automatically cleared by the garbage collector as they are enqueued.  Anobject that is reachable via phantom references will remain so until allsuch references are cleared or themselves become unreachable.         */        ReferenceQueue&lt;Object&gt; referenceQueue = new ReferenceQueue&lt;&gt;();        List&lt;byte[]&gt; bytes = new ArrayList&lt;&gt;();        PhantomReference&lt;StudentClass&gt; reference = new PhantomReference&lt;StudentClass&gt;(new StudentClass(),referenceQueue);                new Thread(() -&gt; &#123;            for (int i = 0; i &lt; 100;i++ ) &#123;                bytes.add(new byte[1024 * 1024]);            &#125;        &#125;).start();         new Thread(() -&gt; &#123;            while (true) &#123;                Reference poll = referenceQueue.poll();                if (poll != null) &#123;                    System.out.println(&quot;虚引用被回收了：&quot; + poll);                &#125;            &#125;        &#125;).start();        Scanner scanner = new Scanner(System.in);        scanner.hasNext();    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;强软弱虚四大引用&quot;&gt;&lt;a href=&quot;#强软弱虚四大引用&quot; class=&quot;headerlink&quot; title=&quot;强软弱虚四大引用&quot;&gt;&lt;/a&gt;强软弱虚四大引用&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;import java.lang.ref.PhantomReference;</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="基础" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="强软弱虚四大引用" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/%E5%BC%BA%E8%BD%AF%E5%BC%B1%E8%99%9A%E5%9B%9B%E5%A4%A7%E5%BC%95%E7%94%A8/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="引用" scheme="http://example.com/tags/%E5%BC%95%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>绘图 | ConfusionMatrix</title>
    <link href="http://example.com/2022/03/24/ConfusionMatrix/"/>
    <id>http://example.com/2022/03/24/ConfusionMatrix/</id>
    <published>2022-03-25T02:41:00.000Z</published>
    <updated>2022-03-25T02:43:56.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Confusion-Matrix"><a href="#Confusion-Matrix" class="headerlink" title="Confusion Matrix"></a>Confusion Matrix</h1><p><a href="https://www.cnblogs.com/yexionglin/p/11432180.html">混淆矩阵</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Confusion-Matrix&quot;&gt;&lt;a href=&quot;#Confusion-Matrix&quot; class=&quot;headerlink&quot; title=&quot;Confusion Matrix&quot;&gt;&lt;/a&gt;Confusion Matrix&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="绘图" scheme="http://example.com/categories/python/%E7%BB%98%E5%9B%BE/"/>
    
    <category term="Confusion Matrix" scheme="http://example.com/categories/python/%E7%BB%98%E5%9B%BE/Confusion-Matrix/"/>
    
    
    <category term="ConfusionMatrix" scheme="http://example.com/tags/ConfusionMatrix/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 | 抽象工厂模式</title>
    <link href="http://example.com/2022/03/21/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/03/21/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-03-22T04:20:47.000Z</published>
    <updated>2022-03-22T07:01:45.986Z</updated>
    
    <content type="html"><![CDATA[<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><p>抽象工厂模式(Abstract Factory),提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p><p><a href="https://blog.csdn.net/qq_33732195/article/details/110101808">抽象工厂模式(通俗易懂)</a></p><span id="more"></span><p><strong>案例</strong><br>类图：<br><img src="/2022/03/21/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/1.jpg"></p><pre><code>class Department&#123;    private int id;    private String deptName;        public int getId() &#123;        return id;    &#125;        public void setId(int id) &#123;        this.id = id;    &#125;        public String getDeptName() &#123;        return deptName;    &#125;        public void setDeptName(String deptName) &#123;        this.deptName = deptName;    &#125;&#125;interface IDepartment&#123;    void insert(Department deparment);    Department getDepartment(int id);&#125;//用于访问SQL Server中的Departmentclass SqlserverDepartment implements IDepartment&#123;    @Override    public void insert(Department department) &#123;        System.out.println(&quot;在SQL Server中给Department表增加一条记录&quot;);    &#125;    @Override    public Department getDepartment(int id) &#123;        System.out.println(&quot;在SQL Server中根据ID得到Department表一条记录&quot;);        return null;    &#125;&#125;//用于访问Access的Departmentclass AccessDepartment implements IDepartment&#123;    @Override    public void insert(Department deparment) &#123;        System.out.println(&quot;在Access中给Department表增加一条记录&quot;);    &#125;    @Override    public Department getDepartment(int id) &#123;        System.out.println(&quot;在Access中根据ID得到Department表一条记录&quot;);        return null;    &#125;&#125;class User&#123;    private int id;    private String name;        public int getId() &#123;        return id;    &#125;        public void setId(int id) &#123;        this.id = id;    &#125;        public String getName() &#123;        return name;    &#125;        public void setName(String name) &#123;        this.name = name;    &#125;&#125;interface IUser&#123;    public void insert(User user);    public User getUser(int id);&#125;//用于访问SQL Server中的Userclass SqlserverUser implements IUser&#123;    @Override    public void insert(User user) &#123;        System.out.println(&quot;在SQL Server中给User表增加一条记录&quot;);    &#125;    @Override    public User getUser(int id) &#123;        System.out.println(&quot;在SQL Server中根据ID得到User表一条记录&quot;);        return null;    &#125;&#125;//用于访问Access的Userclass AccessUser implements IUser&#123;    @Override    public void insert(User user) &#123;        System.out.println(&quot;在Access中给User表增加一条记录&quot;);    &#125;    @Override    public User getUser(int id) &#123;        System.out.println(&quot;在Access中根据ID得到User表一条记录&quot;);        return null;    &#125;&#125;//定义创建访问User、Department表对象的抽象的工厂接口interface IFactory1&#123;    IUser createUser();    IDepartment createDepartment();&#125;//实现IFactory1接口，实例化SqlserverUser和SqlserverDepartmentclass SqlserverFactory implements IFactory1&#123;    @Override    public IUser createUser() &#123;        return new SqlserverUser();    &#125;    @Override    public IDepartment createDepartment() &#123;        return new SqlserverDepartment();    &#125;&#125;//实现IFactory1接口，实例化AccessUser和AccessDepartmentclass AccessFactory implements IFactory1&#123;    @Override    public IUser createUser() &#123;        return new AccessUser();    &#125;    @Override    public IDepartment createDepartment() &#123;        return new AccessDepartment();    &#125;&#125;public class AbstractFactory &#123;    public static void main(String[] args) &#123;        User user = new User();        Department dept = new Department();                //只需确定实例化哪一个数据库访问对象给factory        IFactory1 factory = new SqlserverFactory();        //IFactory1 factory = new AccessFactory();                IUser iu = factory.createUser();                iu.insert(user);        iu.getUser(1);                IDepartment id = factory.createDepartment();        id.insert(dept);        id.getDepartment(1);            &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;抽象工厂模式&quot;&gt;&lt;a href=&quot;#抽象工厂模式&quot; class=&quot;headerlink&quot; title=&quot;抽象工厂模式&quot;&gt;&lt;/a&gt;抽象工厂模式&lt;/h1&gt;&lt;p&gt;抽象工厂模式(Abstract Factory),提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_33732195/article/details/110101808&quot;&gt;抽象工厂模式(通俗易懂)&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="抽象工厂模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="抽象工厂模式" scheme="http://example.com/tags/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 | 单例模式</title>
    <link href="http://example.com/2022/03/21/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/03/21/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-03-22T02:10:43.000Z</published>
    <updated>2022-03-22T02:14:41.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>单例模式(Singleton)，保证一个类有一个实例，并提供一个访问它的全局访问点。</p><p>“通常我们可以让一个全局变量使得一个对象被访问，但它不能防止你实例化多个对象。一个最好的办法就是，让类自身保存<br>它的唯一实例。这个类可以保证没有其他实例可以被创建，并且它可以提供一个访问该实例的方法。</p><span id="more"></span><pre><code>class Singleton&#123;    private static Singleton instance;        //构造方法让其private，这就堵死了外界利用new创建此类实例的可能    private Singleton()&#123;            &#125;        //此方法是获得本类实例实例的唯一全局访问点    public static Singleton getInstance()&#123;        //若实例不存在，则new一个新的实例，否则返回已有的实例        if(instance == null)&#123;            instance = new Singleton();        &#125;        return instance;    &#125;&#125;public class SingletonTest &#123;    public static void main(String[] args) &#123;        Singleton instance = Singleton.getInstance();        Singleton instance2 = Singleton.getInstance();        //比较两侧实例化后对象的结果是实例相同        System.out.println(instance.equals(instance2));//true    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h1&gt;&lt;p&gt;单例模式(Singleton)，保证一个类有一个实例，并提供一个访问它的全局访问点。&lt;/p&gt;
&lt;p&gt;“通常我们可以让一个全局变量使得一个对象被访问，但它不能防止你实例化多个对象。一个最好的办法就是，让类自身保存&lt;br&gt;它的唯一实例。这个类可以保证没有其他实例可以被创建，并且它可以提供一个访问该实例的方法。&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="单例模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="单例模式" scheme="http://example.com/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 | 工厂方法模式</title>
    <link href="http://example.com/2022/03/21/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/03/21/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-03-21T10:11:59.000Z</published>
    <updated>2022-03-22T01:48:06.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><p><strong>why 工厂方法模式？</strong><br>简单工厂模式违背了开放封闭原则（开放了拓展，也开放了修改），如果需要增加功能就需要在工厂类中修改逻辑判断，于是工厂方法模式应运而生。</p><p>工厂方法模式：定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法是一个类的实例化延迟到子类。</p><span id="more"></span><p><strong>案例</strong><br>类图：<br><img src="/2022/03/21/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/2.jpg"></p><pre><code>class Operation&#123;    private double numberA = 0;    private double numberB = 0;    public double getNumberA() &#123;        return numberA;    &#125;    public void setNumberA(double numberA) &#123;        this.numberA = numberA;    &#125;    public double getNumberB() &#123;        return numberB;    &#125;    public void setNumberB(double numberB) &#123;        this.numberB = numberB;    &#125;    public double getResult() throws Exception&#123;        double result = 0;        return result;    &#125;&#125;class Add extends Operation&#123;    public double getResult()    &#123;        double result = 0;        result = getNumberA() + getNumberB();        return result;    &#125;&#125;class Sub extends Operation&#123;    public double getResult()    &#123;        double result = 0;        result = getNumberA() - getNumberB();        return result;    &#125;&#125;class Mul extends Operation&#123;    public double getResult()    &#123;        double result = 0;        result = getNumberA() * getNumberB();        return result;    &#125;&#125;class Div extends Operation&#123;    public double getResult() throws Exception    &#123;        double result = 0;        if (getNumberB() == 0)&#123;            throw new Exception(&quot;除数不能为0&quot;);        &#125;        result = getNumberA() / getNumberB();        return result;    &#125;&#125;//定义一个用于创建对象的接口interface IFactory&#123;    Operation createOperation();&#125;class AddFactory implements IFactory&#123;    @Override    public Operation createOperation() &#123;        return new Add();    &#125;&#125;class SubFactory implements IFactory&#123;    @Override    public Operation createOperation() &#123;        return new Add();    &#125;&#125;class MulFactory implements IFactory&#123;    @Override    public Operation createOperation() &#123;        return new Add();    &#125;&#125;class DivFactory implements IFactory&#123;    @Override    public Operation createOperation() &#123;        return new Add();    &#125;&#125;public class FactoryMethodPatternTest &#123;    public static void main(String[] args) throws Exception &#123;        IFactory operFactory = new AddFactory();        Operation oper = operFactory.createOperation();        oper.setNumberA(1);        oper.setNumberB(2);        double result = oper.getResult();        System.out.println(result);    &#125;&#125;</code></pre><p>在使用工厂方法模式的情况下，如果我们要增加新的功能，比如说现在要增加一个求余操作，我们只需在上面代码的基础上增加两个类，即可实现。</p><pre><code>class Mod extends Operation&#123;    public double getResult()&#123;        double result = 0;        result = getNumberA() % getNumberB();        return result;    &#125;&#125;class ModFactory implements IFactory&#123;    @Override    public Operation createOperation() &#123;        return new Mod();    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;工厂方法模式&quot;&gt;&lt;a href=&quot;#工厂方法模式&quot; class=&quot;headerlink&quot; title=&quot;工厂方法模式&quot;&gt;&lt;/a&gt;工厂方法模式&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;why 工厂方法模式？&lt;/strong&gt;&lt;br&gt;简单工厂模式违背了开放封闭原则（开放了拓展，也开放了修改），如果需要增加功能就需要在工厂类中修改逻辑判断，于是工厂方法模式应运而生。&lt;/p&gt;
&lt;p&gt;工厂方法模式：定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法是一个类的实例化延迟到子类。&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="工厂方法模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="工厂方法模式" scheme="http://example.com/tags/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 | 简单工厂模式</title>
    <link href="http://example.com/2022/03/21/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/03/21/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-03-21T09:57:40.000Z</published>
    <updated>2022-03-22T01:51:35.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><p>工厂：用一个单独的类来完成创造实例的过程。<br><strong>案例</strong><br>类图：<br><img src="/2022/03/21/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/1.jpg"></p><pre><code>class Operation&#123;    private double numberA = 0;    private double numberB = 0;    public double getNumberA() &#123;        return numberA;    &#125;    public void setNumberA(double numberA) &#123;        this.numberA = numberA;    &#125;    public double getNumberB() &#123;        return numberB;    &#125;    public void setNumberB(double numberB) &#123;        this.numberB = numberB;    &#125;    public double getResult() throws Exception&#123;        double result = 0;        return result;    &#125;&#125;class Add extends Operation&#123;    public double getResult()    &#123;        double result = 0;        result = getNumberA() + getNumberB();        return result;    &#125;&#125;class Sub extends Operation&#123;    public double getResult()    &#123;        double result = 0;        result = getNumberA() - getNumberB();        return result;    &#125;&#125;class Mul extends Operation&#123;    public double getResult()    &#123;        double result = 0;        result = getNumberA() * getNumberB();        return result;    &#125;&#125;class Div extends Operation&#123;    public double getResult() throws Exception    &#123;        double result = 0;        if (getNumberB() == 0)&#123;            throw new Exception(&quot;除数不能为0&quot;);        &#125;        result = getNumberA() / getNumberB();        return result;    &#125;&#125;//工厂：用一个单独的类来做这个创造实例的过程class OperationFactory&#123;    public static Operation createOperate(String operate)&#123;        Operation oper = null;                if(operate.equals(&quot;+&quot;))&#123;            oper = new Add();        &#125;else if(operate.equals(&quot;-&quot;))&#123;            oper = new Sub();        &#125;else if(operate.equals(&quot;*&quot;))&#123;            oper = new Mul();        &#125;else if(operate.equals(&quot;/&quot;))&#123;            oper = new Div();        &#125;        return oper;    &#125;&#125;public class SimpleFactoryTest &#123;    public static void main(String[] args) throws Exception &#123;        Operation oper = OperationFactory.createOperate(&quot;+&quot;);        oper.setNumberA(1);        oper.setNumberB(2);        double result = oper.getResult();        System.out.println(result);    &#125;&#125;</code></pre><p>在使用简单工厂模式的情况下，如果我们要增加新的功能，比如说现在要增加一个求余操作，<br>我们需要增加一个用于求余运算的类，然后在OperationFactory中增加对于求余运算的逻辑判断，这样的做法违背了<br>开放封闭原则，即在开放拓展的同时也开放了修改。</p><pre><code>class Mod extends Operation&#123;    public double getResult()&#123;        double result = 0;        result = getNumberA() % getNumberB();        return result;    &#125;&#125;class OperationFactory&#123;    public static Operation createOperate(String operate)&#123;        ......        else if(operate.equals(&quot;%&quot;))&#123;            oper = new Div();        &#125;        ......    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简单工厂模式&quot;&gt;&lt;a href=&quot;#简单工厂模式&quot; class=&quot;headerlink&quot; title=&quot;简单工厂模式&quot;&gt;&lt;/a&gt;简单工厂模式&lt;/h1&gt;&lt;p&gt;工厂：用一个单独的类来完成创造实例的过程。&lt;br&gt;&lt;strong&gt;案例&lt;/strong&gt;&lt;br&gt;类图：&lt;br</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="简单工厂模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="简单工厂模式" scheme="http://example.com/tags/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 | 代理模式</title>
    <link href="http://example.com/2022/03/21/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/03/21/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-03-21T09:55:37.000Z</published>
    <updated>2022-03-21T09:57:24.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p><a href="https://victory-liao.github.io/2022/03/10/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/">动态代理</a><br><a href="https://victory-liao.github.io/2022/03/10/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/">静态代理</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;代理模式&quot;&gt;&lt;a href=&quot;#代理模式&quot; class=&quot;headerlink&quot; title=&quot;代理模式&quot;&gt;&lt;/a&gt;代理模式&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://victory-liao.github.io/2022/03/10/%E5%8A%A8%E</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="代理模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="代理模式" scheme="http://example.com/tags/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="动态代理" scheme="http://example.com/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
    <category term="静态代理" scheme="http://example.com/tags/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | spring和springMVC的整合</title>
    <link href="http://example.com/2022/03/18/spring%E5%92%8CspringMVC%E7%9A%84%E6%95%B4%E5%90%88/"/>
    <id>http://example.com/2022/03/18/spring%E5%92%8CspringMVC%E7%9A%84%E6%95%B4%E5%90%88/</id>
    <published>2022-03-18T12:22:49.000Z</published>
    <updated>2022-03-18T13:22:54.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring和springMVC的整合"><a href="#spring和springMVC的整合" class="headerlink" title="spring和springMVC的整合"></a>spring和springMVC的整合</h1><p>1、不整合：需要将spring所管理的内容都交给springMVC管理，这样会造成业务逻辑混乱<br>2、整合：spring的配置文件什么时候加载？怎么加载？<br>解决办法：监听器，可以在ServletContext加载时，通过监听器加载spring的配置文件，创建spring容器<br>spring提供的监听器：ContextLoaderListener<br>3、bean被创建两次的问题：在springMVC中只扫描控制层，在spring中，通过包含或排除对所扫描的包进行指定<br>4、spring和springMVC的关系<br>spring是父容器<br>springMVC是子容器<br>规定：子容器能够调用父容器的bean，而父容器不能够调用访问子容器中的bean</p><span id="more"></span><p>1.项目目录<br><img src="/2022/03/18/spring%E5%92%8CspringMVC%E7%9A%84%E6%95%B4%E5%90%88/1.PNG"><br>2.web.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&gt;  &lt;display-name&gt;SpringMVC04&lt;/display-name&gt;  &lt;welcome-file-list&gt;    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;  &lt;/welcome-file-list&gt;    &lt;filter&gt;    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;    &lt;init-param&gt;      &lt;param-name&gt;encoding&lt;/param-name&gt;      &lt;param-value&gt;UTF-8&lt;/param-value&gt;    &lt;/init-param&gt;  &lt;/filter&gt;  &lt;filter-mapping&gt;    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  &lt;/filter-mapping&gt;    &lt;servlet&gt;    &lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;    &lt;init-param&gt;      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;      &lt;param-value&gt;classpath:springMVC.xml&lt;/param-value&gt;    &lt;/init-param&gt;    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;  &lt;/servlet&gt;  &lt;servlet-mapping&gt;    &lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;    &lt;url-pattern&gt;/&lt;/url-pattern&gt;  &lt;/servlet-mapping&gt;    &lt;!-- 使用自定义监听器模拟spring、springMVC整合 --&gt;  &lt;!-- &lt;listener&gt;    &lt;listener-class&gt;com.atguigu.listener.SpringListener&lt;/listener-class&gt;  &lt;/listener&gt; --&gt;    &lt;!-- 使用spring提供的监听器模整合spring、springMVC --&gt;  &lt;!-- needed for ContextLoaderListener --&gt;    &lt;context-param&gt;        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;        &lt;param-value&gt;classpath:spring.xml&lt;/param-value&gt;    &lt;/context-param&gt;    &lt;!-- Bootstraps the root web application context before servlet initialization --&gt;    &lt;listener&gt;        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;    &lt;/listener&gt;&lt;/web-app&gt;</code></pre><p>3.spring.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;    &lt;!-- &lt;bean id=&quot;user&quot; class=&quot;com.atguigu.bean.User&quot;&gt;&lt;/bean&gt; --&gt;        &lt;context:component-scan base-package=&quot;com.atguigu&quot;&gt;        &lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;    &lt;/context:component-scan&gt;        &lt;bean id=&quot;teacher&quot; class=&quot;com.atguigu.bean.Teacher&quot;&gt;&lt;/bean&gt;&lt;/beans&gt;</code></pre><p>4.springMVC.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;        &lt;context:component-scan base-package=&quot;com.atguigu.controller&quot;&gt;&lt;/context:component-scan&gt;        &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/view/&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;mvc:default-servlet-handler/&gt;    &lt;mvc:annotation-driven /&gt;        &lt;!--         处理文件，将客户端上传的File文件处理为MultipartFile        注意：文件解析器bean中的id必须设置为multipartResolver     --&gt;    &lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;        &lt;!-- 设置文件解析的编码，注意一定要和页面的pageEncoding保持一致 --&gt;        &lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/property&gt;        &lt;!-- 设置最大上传文件大小 --&gt;        &lt;property name=&quot;maxUploadSize&quot; value=&quot;88888888&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;!-- 异常处理 --&gt;    &lt;bean class=&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;&gt;        &lt;property name=&quot;exceptionMappings&quot;&gt;            &lt;props&gt;                &lt;prop key=&quot;java.lang.NullPointerException&quot;&gt;error&lt;/prop&gt;            &lt;/props&gt;        &lt;/property&gt;    &lt;/bean&gt;        &lt;!-- &lt;mvc:interceptors&gt;        默认拦截所有请求        第一种方式        &lt;bean class=&quot;com.atguigu.interceptor.FirstInterceptor&quot;&gt;&lt;/bean&gt;        &lt;bean class=&quot;com.atguigu.interceptor.SecondInterceptor&quot;&gt;&lt;/bean&gt;                    第二种方式            此方式要求拦截器上必须加注解@Component                &lt;ref bean=&quot;firstInterceptor&quot; /&gt;                设置自定义拦截方式        &lt;mvc:interceptor&gt;            &lt;bean&gt;&lt;/bean&gt;            &lt;mvc:mapping path=&quot;&quot;/&gt;            &lt;mvc:exclude-mapping path=&quot;&quot;/&gt;        &lt;/mvc:interceptor&gt;    &lt;/mvc:interceptors&gt; --&gt;&lt;/beans&gt;</code></pre><p>5.index.jsp</p><pre><code>&lt;a href=&quot;testListener&quot;&gt;测试监听器&lt;/a&gt;</code></pre><p>6.User.java</p><pre><code>package com.atguigu.bean;import org.springframework.stereotype.Component;@Componentpublic class User &#123;    private Integer id;    private String username;    public Integer getId() &#123;        return id;    &#125;    public void setId(Integer id) &#123;        this.id = id;    &#125;    public String getUsername() &#123;        return username;    &#125;    public void setUsername(String username) &#123;        this.username = username;    &#125;    public User() &#123;        System.out.println(&quot;User==&gt;构造方法&quot;);    &#125;&#125;</code></pre><p>7.Teacher.java</p><pre><code>package com.atguigu.bean;public class Teacher &#123;    private Integer id;        private String name;    public Integer getId() &#123;        return id;    &#125;    public void setId(Integer id) &#123;        this.id = id;    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name = name;    &#125;    public Teacher() &#123;        System.out.println(&quot;Teacher==&gt;构造方法&quot;);    &#125;    @Override    public String toString() &#123;        return &quot;Teacher [id=&quot; + id + &quot;, name=&quot; + name + &quot;]&quot;;    &#125;&#125;</code></pre><p>8.SpringListener.java（自定义监听器）</p><pre><code>package com.atguigu.listener;import javax.servlet.ServletContext;import javax.servlet.ServletContextEvent;import javax.servlet.ServletContextListener;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;/** * Application Lifecycle Listener implementation class SpringListener * */public class SpringListener implements ServletContextListener &#123;    /**     * Default constructor.      */    public SpringListener() &#123;        // TODO Auto-generated constructor stub    &#125;    /**     * @see ServletContextListener#contextDestroyed(ServletContextEvent)     */    public void contextDestroyed(ServletContextEvent arg0)  &#123;          // TODO Auto-generated method stub    &#125;    /**     * @see ServletContextListener#contextInitialized(ServletContextEvent)     */    public void contextInitialized(ServletContextEvent sce)  &#123;         ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;spring.xml&quot;);        ServletContext servletContext = sce.getServletContext();        servletContext.setAttribute(&quot;ac&quot;, ac);    &#125;&#125;</code></pre><p>9.TestController.java</p><pre><code>package com.atguigu.controller;import javax.servlet.ServletContext;import javax.servlet.http.HttpSession;import org.springframework.context.ApplicationContext;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import com.atguigu.bean.Teacher;@Controllerpublic class TestController &#123;    @RequestMapping(&quot;/testListener&quot;)    public void testListener(HttpSession session)&#123;        //获取spring所管理的teacher对象        ServletContext servletContext = session.getServletContext();        ApplicationContext ac = (ApplicationContext)servletContext.getAttribute(&quot;ac&quot;);        Teacher teacher = ac.getBean(&quot;teacher&quot;, Teacher.class);        System.out.println(teacher);    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;spring和springMVC的整合&quot;&gt;&lt;a href=&quot;#spring和springMVC的整合&quot; class=&quot;headerlink&quot; title=&quot;spring和springMVC的整合&quot;&gt;&lt;/a&gt;spring和springMVC的整合&lt;/h1&gt;&lt;p&gt;1、不整合：需要将spring所管理的内容都交给springMVC管理，这样会造成业务逻辑混乱&lt;br&gt;2、整合：spring的配置文件什么时候加载？怎么加载？&lt;br&gt;解决办法：监听器，可以在ServletContext加载时，通过监听器加载spring的配置文件，创建spring容器&lt;br&gt;spring提供的监听器：ContextLoaderListener&lt;br&gt;3、bean被创建两次的问题：在springMVC中只扫描控制层，在spring中，通过包含或排除对所扫描的包进行指定&lt;br&gt;4、spring和springMVC的关系&lt;br&gt;spring是父容器&lt;br&gt;springMVC是子容器&lt;br&gt;规定：子容器能够调用父容器的bean，而父容器不能够调用访问子容器中的bean&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="spring和springMVC的整合" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/spring%E5%92%8CspringMVC%E7%9A%84%E6%95%B4%E5%90%88/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | 异常处理</title>
    <link href="http://example.com/2022/03/17/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://example.com/2022/03/17/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2022-03-18T03:48:21.000Z</published>
    <updated>2022-03-18T03:53:34.916Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>1.在SpringMVC配置文件（springMVC.xml）中做以下配置：</p><pre><code>&lt;!-- 异常处理 --&gt;&lt;bean class=&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;&gt;    &lt;property name=&quot;exceptionMappings&quot;&gt;        &lt;props&gt;            &lt;prop key=&quot;java.lang.NullPointerException&quot;&gt;error&lt;/prop&gt;        &lt;/props&gt;    &lt;/property&gt;&lt;/bean&gt;</code></pre><span id="more"></span><p>2.index.jsp</p><pre><code>&lt;a href=&quot;testException&quot;&gt;测试异常&lt;/a&gt;</code></pre><p>3.TestExceptionController.java</p><pre><code>package com.atguigu.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;@Controllerpublic class TestExceptionController &#123;    @RequestMapping(value=&quot;/testException&quot;, method=RequestMethod.GET)    public String testException()&#123;        String s = null;        System.err.println(s.substring(0, 5));        return &quot;success&quot;;    &#125;&#125;</code></pre><p>4.error.jsp</p><pre><code>&lt;a href=&quot;&quot;&gt;操作异常，请稍后重试&lt;/a&gt;$&#123;exception&#125;</code></pre><p>5.运行结果<br><img src="/2022/03/17/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/1.PNG"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;异常处理&quot;&gt;&lt;a href=&quot;#异常处理&quot; class=&quot;headerlink&quot; title=&quot;异常处理&quot;&gt;&lt;/a&gt;异常处理&lt;/h1&gt;&lt;p&gt;1.在SpringMVC配置文件（springMVC.xml）中做以下配置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 异常处理 --&amp;gt;
&amp;lt;bean class=&amp;quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;exceptionMappings&amp;quot;&amp;gt;
        &amp;lt;props&amp;gt;
            &amp;lt;prop key=&amp;quot;java.lang.NullPointerException&amp;quot;&amp;gt;error&amp;lt;/prop&amp;gt;
        &amp;lt;/props&amp;gt;
    &amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="异常处理" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
    <category term="异常处理" scheme="http://example.com/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | 拦截器</title>
    <link href="http://example.com/2022/03/17/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>http://example.com/2022/03/17/%E6%8B%A6%E6%88%AA%E5%99%A8/</id>
    <published>2022-03-18T02:15:04.000Z</published>
    <updated>2022-03-18T02:22:02.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="拦截器-HandlerInterceptor"><a href="#拦截器-HandlerInterceptor" class="headerlink" title="拦截器 HandlerInterceptor"></a>拦截器 HandlerInterceptor</h1><p>1.在SpringMVC配置文件（springMVC.xml）中进行以下配置：</p><pre><code>&lt;mvc:interceptors&gt;    &lt;!-- 默认拦截所有请求 --&gt;    &lt;!-- 第一种方式 --&gt;    &lt;bean class=&quot;com.atguigu.interceptor.FirstInterceptor&quot;&gt;&lt;/bean&gt;    &lt;bean class=&quot;com.atguigu.interceptor.SecondInterceptor&quot;&gt;&lt;/bean&gt;    &lt;!--         第二种方式        此方式要求拦截器上必须加注解@Component     --&gt;    &lt;!-- &lt;ref bean=&quot;firstInterceptor&quot; /&gt; --&gt;        &lt;!-- 设置自定义拦截方式 --&gt;    &lt;!-- &lt;mvc:interceptor&gt;        &lt;bean&gt;&lt;/bean&gt;        &lt;mvc:mapping path=&quot;&quot;/&gt;        &lt;mvc:exclude-mapping path=&quot;&quot;/&gt;    &lt;/mvc:interceptor&gt; --&gt;&lt;/mvc:interceptors&gt;</code></pre><span id="more"></span><p>2.test.jsp</p><pre><code>&lt;a href=&quot;testInterceptor&quot;&gt;测试拦截器&lt;/a&gt;</code></pre><p>3.TestInterceptorController.java(测试类)</p><pre><code>package com.atguigu.test;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;@Controllerpublic class TestInterceptorController &#123;    /**     * 当有多个拦截器时，     * preHandle:按照拦截器数组正向顺序执行     * postHandle:按照拦截器数组反向顺序执行     * afterCompletion:按照拦截器数组反向顺序执行     *      * 当多个拦截器的preHandle有不同的值时     * 第一个返回false，第二个返回false：只有第一个的preHandle会执行     *      * 第一个返回true，第二个返回false：两个（全部）拦截器的preHandle都会执行，     * 但是（全部）postHandle都不会执行，     * 而afterCompletion只有第一个（返回false的拦截器之前的所有afterCompletion）会执行     *      * 第一个返回false，第二个返回true：只有第一个的preHandle会执行     */    @RequestMapping(&quot;/testInterceptor&quot;)    public String testInterceptor()&#123;        //System.out.println(1/0);        return &quot;success&quot;;    &#125;&#125;</code></pre><p>4.FirstInterceptor.java</p><pre><code>package com.atguigu.interceptor;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.springframework.stereotype.Component;import org.springframework.web.servlet.HandlerInterceptor;import org.springframework.web.servlet.ModelAndView;@Componentpublic class FirstInterceptor implements HandlerInterceptor&#123;    @Override    public void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)            throws Exception &#123;        System.out.println(&quot;First:afterCompletion&quot;);    &#125;    @Override    public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)            throws Exception &#123;        System.out.println(&quot;First:posthandle&quot;);    &#125;    @Override    public boolean preHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2) throws Exception &#123;        System.out.println(&quot;First:preHandle&quot;);        return true;//true:放行 false:拦截    &#125;&#125;</code></pre><p>5.SecondInterceptor.java</p><pre><code>package com.atguigu.interceptor;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.springframework.stereotype.Component;import org.springframework.web.servlet.HandlerInterceptor;import org.springframework.web.servlet.ModelAndView;@Componentpublic class SecondInterceptor implements HandlerInterceptor&#123;    @Override    public void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)            throws Exception &#123;        System.out.println(&quot;Second:afterCompletion&quot;);    &#125;    @Override    public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)            throws Exception &#123;        System.out.println(&quot;Second:posthandle&quot;);    &#125;    @Override    public boolean preHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2) throws Exception &#123;        System.out.println(&quot;Second:preHandle&quot;);        return false;//true:放行 false:拦截    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;拦截器-HandlerInterceptor&quot;&gt;&lt;a href=&quot;#拦截器-HandlerInterceptor&quot; class=&quot;headerlink&quot; title=&quot;拦截器 HandlerInterceptor&quot;&gt;&lt;/a&gt;拦截器 HandlerInterceptor&lt;/h1&gt;&lt;p&gt;1.在SpringMVC配置文件（springMVC.xml）中进行以下配置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;mvc:interceptors&amp;gt;
    &amp;lt;!-- 默认拦截所有请求 --&amp;gt;
    &amp;lt;!-- 第一种方式 --&amp;gt;
    &amp;lt;bean class=&amp;quot;com.atguigu.interceptor.FirstInterceptor&amp;quot;&amp;gt;&amp;lt;/bean&amp;gt;
    &amp;lt;bean class=&amp;quot;com.atguigu.interceptor.SecondInterceptor&amp;quot;&amp;gt;&amp;lt;/bean&amp;gt;
    &amp;lt;!-- 
        第二种方式
        此方式要求拦截器上必须加注解@Component
     --&amp;gt;
    &amp;lt;!-- &amp;lt;ref bean=&amp;quot;firstInterceptor&amp;quot; /&amp;gt; --&amp;gt;
    
    &amp;lt;!-- 设置自定义拦截方式 --&amp;gt;
    &amp;lt;!-- &amp;lt;mvc:interceptor&amp;gt;
        &amp;lt;bean&amp;gt;&amp;lt;/bean&amp;gt;
        &amp;lt;mvc:mapping path=&amp;quot;&amp;quot;/&amp;gt;
        &amp;lt;mvc:exclude-mapping path=&amp;quot;&amp;quot;/&amp;gt;
    &amp;lt;/mvc:interceptor&amp;gt; --&amp;gt;
&amp;lt;/mvc:interceptors&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="拦截器 HandlerInterceptor" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/%E6%8B%A6%E6%88%AA%E5%99%A8-HandlerInterceptor/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
    <category term="拦截器" scheme="http://example.com/tags/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    
    <category term="HandlerInterceptor" scheme="http://example.com/tags/HandlerInterceptor/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | 上传和下载文件</title>
    <link href="http://example.com/2022/03/16/%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2022/03/16/%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</id>
    <published>2022-03-16T10:01:39.000Z</published>
    <updated>2022-03-16T10:07:30.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="上传和下载文件"><a href="#上传和下载文件" class="headerlink" title="上传和下载文件"></a>上传和下载文件</h1><p>注意：上传文件需要在springMVC.xml中配置如下所示bean：</p><pre><code>&lt;!--     处理文件，将客户端上传的File文件处理为MultipartFile    注意：文件解析器bean中的id必须设置为multipartResolver --&gt;&lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;    &lt;!-- 设置文件解析的编码，注意一定要和页面的pageEncoding保持一致 --&gt;    &lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/property&gt;    &lt;!-- 设置最大上传文件大小 --&gt;    &lt;property name=&quot;maxUploadSize&quot; value=&quot;88888888&quot;&gt;&lt;/property&gt;&lt;/bean&gt;</code></pre><span id="more"></span><p><strong>file.jsp</strong></p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;a href=&quot;down&quot;&gt;下载图片&lt;/a&gt;        &lt;form action=&quot;up&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;        头像：&lt;input type=&quot;file&quot; name=&quot;uploadFile&quot; /&gt;        描述：&lt;input type=&quot;text&quot; name=&quot;desc&quot; /&gt;        &lt;input type=&quot;submit&quot; value=&quot;上传&quot; /&gt;    &lt;/form&gt;        &lt;form action=&quot;up_old&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;        头像：&lt;input type=&quot;file&quot; name=&quot;uploadFile&quot; /&gt;        描述：&lt;input type=&quot;text&quot; name=&quot;desc&quot; /&gt;        &lt;input type=&quot;submit&quot; value=&quot;上传&quot; /&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><strong>TestUploadAndDownController.java</strong></p><pre><code>package com.atguigu.test;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.UUID;import javax.servlet.http.HttpSession;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.multipart.MultipartFile;import com.sun.org.apache.xalan.internal.xsltc.trax.OutputSettings;@Controllerpublic class TestUploadAndDownController&#123;    @RequestMapping(&quot;/down&quot;)    public ResponseEntity&lt;byte[]&gt; down(HttpSession session) throws IOException&#123;        //获取下载文件的路径        String realPath = session.getServletContext().getRealPath(&quot;img&quot;);        String finalPath = realPath + File.separator + &quot;1.jpg&quot;;        InputStream is = new FileInputStream(finalPath);        //available():获取输入流所读取的文件的最大字节数        byte[] b = new byte[is.available()];        is.read(b);        //设置请求头        HttpHeaders headers = new HttpHeaders();        headers.add(&quot;Content-Disposition&quot;, &quot;attachment;filename=zzz.jpg&quot;);        HttpStatus statusCode = HttpStatus.OK;        ResponseEntity&lt;byte[]&gt; entity = new ResponseEntity&lt;byte[]&gt;(b, headers, statusCode);        return entity;    &#125;        //第一种上传方式    @RequestMapping(value=&quot;/up_old&quot;, method=RequestMethod.POST)    public String up_old(String desc, MultipartFile uploadFile, HttpSession session) throws IOException&#123;        //String name = uploadFile.getName();        //String originalFilename = uploadFile.getOriginalFilename();        //System.out.println(name+&quot;,&quot;+originalFilename);                //获取上传文件的名称        String filename = uploadFile.getOriginalFilename();        String path = session.getServletContext().getRealPath(&quot;photo&quot;) + File.separator + filename;                //获取输入流        InputStream is = uploadFile.getInputStream();                //获取输出流        File file = new File(path);        OutputStream os = new FileOutputStream(file);                //文件上传//        int i = 0;//        while((i = is.read()) != -1)&#123;//            os.write(i);//        &#125;                int i = 0;        byte[] b = new byte[1024];        while((i = is.read(b)) != -1)&#123;            os.write(b, 0, i);        &#125;                //关闭流        os.close();        is.close();        return &quot;success&quot;;    &#125;        //第二种上传方式    @RequestMapping(value=&quot;/up&quot;, method=RequestMethod.POST)    public String up(String desc, MultipartFile uploadFile, HttpSession session) throws IOException&#123;        //获取上传文件的名称        String fileName = uploadFile.getOriginalFilename();        String finalFileName = UUID.randomUUID() + fileName.substring(fileName.lastIndexOf(&quot;.&quot;));        String path = session.getServletContext().getRealPath(&quot;photo&quot;) + File.separator + finalFileName;                File file = new File(path);        uploadFile.transferTo(file);        return &quot;success&quot;;    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;上传和下载文件&quot;&gt;&lt;a href=&quot;#上传和下载文件&quot; class=&quot;headerlink&quot; title=&quot;上传和下载文件&quot;&gt;&lt;/a&gt;上传和下载文件&lt;/h1&gt;&lt;p&gt;注意：上传文件需要在springMVC.xml中配置如下所示bean：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 
    处理文件，将客户端上传的File文件处理为MultipartFile
    注意：文件解析器bean中的id必须设置为multipartResolver 
--&amp;gt;
&amp;lt;bean id=&amp;quot;multipartResolver&amp;quot; class=&amp;quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&amp;quot;&amp;gt;
    &amp;lt;!-- 设置文件解析的编码，注意一定要和页面的pageEncoding保持一致 --&amp;gt;
    &amp;lt;property name=&amp;quot;defaultEncoding&amp;quot; value=&amp;quot;UTF-8&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;!-- 设置最大上传文件大小 --&amp;gt;
    &amp;lt;property name=&amp;quot;maxUploadSize&amp;quot; value=&amp;quot;88888888&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="上传和下载文件" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | 处理json</title>
    <link href="http://example.com/2022/03/15/%E5%A4%84%E7%90%86json/"/>
    <id>http://example.com/2022/03/15/%E5%A4%84%E7%90%86json/</id>
    <published>2022-03-16T07:23:48.000Z</published>
    <updated>2022-03-16T07:36:59.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="处理json"><a href="#处理json" class="headerlink" title="处理json"></a>处理json</h1><p>1.项目目录<br><img src="/2022/03/15/%E5%A4%84%E7%90%86json/1.PNG"><br><strong>注意：</strong><br>1.按照上图创建项目、导入图中所示的jar包并按照<a href="https://victory-liao.github.io/2022/03/13/REST-CRUD/">REST-CRUD</a>中的<br>web.xml、springMVC配置配置文件；<br>2.src下的dao、bean包中的代码参照REST CRUD；</p><span id="more"></span><p>3.index.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;$&#123;pageContext.servletContext.contextPath&#125;/css/index_work.css&quot; /&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;$&#123;pageContext.servletContext.contextPath&#125;/js/jquery-1.8.2.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;    $(function()&#123;        $(&quot;#btn&quot;).click(function()&#123;            $.ajax(&#123;                url:&quot;testJson&quot;,                type:&quot;POST&quot;,                dataType:&quot;json&quot;,//dataType=&quot;text&quot; 原样显示                success:function(msg)&#123;                    //alert(msg);                    /*                    [&#123;&quot;id&quot;:1001,&quot;lastName&quot;:&quot;E-AA&quot;,&quot;email&quot;:&quot;aa@163.com&quot;,&quot;gender&quot;:1,&quot;department&quot;:&#123;&quot;id&quot;:101,&quot;departmentName&quot;:&quot;D-AA&quot;&#125;&#125;,                     &#123;&quot;id&quot;:1002,&quot;lastName&quot;:&quot;E-BB&quot;,&quot;email&quot;:&quot;bb@163.com&quot;,&quot;gender&quot;:1,&quot;department&quot;:&#123;&quot;id&quot;:102,&quot;departmentName&quot;:&quot;D-BB&quot;&#125;&#125;,                     &#123;&quot;id&quot;:1003,&quot;lastName&quot;:&quot;E-CC&quot;,&quot;email&quot;:&quot;cc@163.com&quot;,&quot;gender&quot;:0,&quot;department&quot;:&#123;&quot;id&quot;:103,&quot;departmentName&quot;:&quot;D-CC&quot;&#125;&#125;,                     &#123;&quot;id&quot;:1004,&quot;lastName&quot;:&quot;E-DD&quot;,&quot;email&quot;:&quot;dd@163.com&quot;,&quot;gender&quot;:0,&quot;department&quot;:&#123;&quot;id&quot;:104,&quot;departmentName&quot;:&quot;D-DD&quot;&#125;&#125;,                     &#123;&quot;id&quot;:1005,&quot;lastName&quot;:&quot;E-EE&quot;,&quot;email&quot;:&quot;ee@163.com&quot;,&quot;gender&quot;:1,&quot;department&quot;:&#123;&quot;id&quot;:105,&quot;departmentName&quot;:&quot;D-EE&quot;&#125;&#125;]                    */                    /* for(var i in msg) &#123;                        var emp = msg[i]                        alert(&quot;id=&quot;+emp.id+&quot;,lastName=&quot;+emp.lastName+&quot;,departmentName=&quot;+emp.department.departmentName);                    &#125; */                                        //第一种实现方式                    /* var tb = &quot;&lt;table&gt;&quot;                    tb += &quot;&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;lastName&lt;/th&gt;&lt;th&gt;email&lt;/th&gt;&lt;th&gt;gender&lt;/th&gt;&lt;th&gt;departmentName&lt;/th&gt;&lt;/tr&gt;&quot;                    for(var i in msg) &#123;                        var emp = msg[i]                        tb += &quot;&lt;tr&gt;&lt;td&gt;&quot;+emp.id+&quot;&lt;/td&gt;&lt;td&gt;&quot;+emp.lastName+&quot;&lt;/td&gt;&lt;td&gt;&quot;+emp.email+&quot;&lt;/td&gt;&lt;td&gt;&quot;+emp.gender+&quot;&lt;/td&gt;&lt;td&gt;&quot;+emp.department.departmentName+&quot;&lt;/td&gt;&lt;/tr&gt;&quot;                    &#125;                     tb += &quot;&lt;/table&gt;&quot;                    $(&quot;body&quot;).append(tb); */                                        //第二种实现方式                    $(&quot;body&quot;).append(&quot;&lt;table&gt;&lt;/table&gt;&quot;);                    $(&quot;table&quot;).append(&quot;&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;lastName&lt;/th&gt;&lt;th&gt;email&lt;/th&gt;&lt;th&gt;gender&lt;/th&gt;&lt;th&gt;departmentName&lt;/th&gt;&lt;/tr&gt;&quot;)                    for(var i in msg)&#123;                        var emp = msg[i]                        $(&quot;table&quot;).append(&quot;&lt;tr&gt;&lt;td&gt;&quot;+emp.id+&quot;&lt;/td&gt;&lt;td&gt;&quot;+emp.lastName+&quot;&lt;/td&gt;&lt;td&gt;&quot;+emp.email+&quot;&lt;/td&gt;&lt;td&gt;&quot;+emp.gender+&quot;&lt;/td&gt;&lt;td&gt;&quot;+emp.department.departmentName+&quot;&lt;/td&gt;&lt;/tr&gt;&quot;);                    &#125;                &#125;            &#125;);        &#125;)    &#125;);&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;input id=&quot;btn&quot; type=&quot;button&quot; value=&quot;测试ajax&quot; /&gt;        &lt;a href=&quot;testJson&quot;&gt;测试json&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>2.TestJsonController.java</p><pre><code>package com.atguigu.test;import java.util.Collection;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import com.atguigu.bean.Employee;import com.atguigu.dao.EmployeeDao;@Controllerpublic class TestJsonController &#123;        @Autowired    private EmployeeDao dao;        /**     * springMVC处理json的四个条件     * 1、导入jackson的jar包     * 2、在springMVC的配置文件中开启MVC驱动，&lt;mvc:annotation-driven /&gt;     * 3、在处理ajax请求的方法上加上注解@ResponseBody     * 4、将要转为为json且响应到客户端的数据，直接作为该方法的返回值返回     * @ResponseBody     */    @RequestMapping(&quot;testJson&quot;)    @ResponseBody    public Collection&lt;Employee&gt; testJson()&#123;        Collection&lt;Employee&gt; emps = dao.getAll();        return emps;    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;处理json&quot;&gt;&lt;a href=&quot;#处理json&quot; class=&quot;headerlink&quot; title=&quot;处理json&quot;&gt;&lt;/a&gt;处理json&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/03/15/%E5%A4%84%E7%90%86json/1.PNG&quot;&gt;&lt;br&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;br&gt;1.按照上图创建项目、导入图中所示的jar包并按照&lt;a href=&quot;https://victory-liao.github.io/2022/03/13/REST-CRUD/&quot;&gt;REST-CRUD&lt;/a&gt;中的&lt;br&gt;web.xml、springMVC配置配置文件；&lt;br&gt;2.src下的dao、bean包中的代码参照REST CRUD；&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="处理json" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/%E5%A4%84%E7%90%86json/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
    <category term="json" scheme="http://example.com/tags/json/"/>
    
  </entry>
  
</feed>
