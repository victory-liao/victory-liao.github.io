<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Victory&#39;s Blog</title>
  
  <subtitle>非淡泊无以明志，非宁静无以致远</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-10-24T13:29:34.948Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>victory-liao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python-docx | 向Word文档中添加图片</title>
    <link href="http://example.com/2021/10/24/%E5%90%91Word%E6%96%87%E6%A1%A3%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87/"/>
    <id>http://example.com/2021/10/24/%E5%90%91Word%E6%96%87%E6%A1%A3%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87/</id>
    <published>2021-10-24T12:59:45.000Z</published>
    <updated>2021-10-24T13:29:34.948Z</updated>
    
    <content type="html"><![CDATA[<h1 id="向Word文档中添加图片"><a href="#向Word文档中添加图片" class="headerlink" title="向Word文档中添加图片"></a>向Word文档中添加图片</h1><p>以下代码使用python-docx向Word文档中的指定位置添加图片</p><span id="more"></span><pre><code># 提取Excel表中的数据from openpyxl import load_workbook  # 用于读取Excel中的信息wb = load_workbook(&#39;数据.xlsx&#39;)ws = wb.activedata = []for row in range(2, ws.max_row + 1):    number = ws[&#39;A&#39; + str(row)].value    problem = ws[&#39;B&#39; + str(row)].value    owner = ws[&#39;C&#39; + str(row)].value    info_list = [number, problem, owner]    data.append(info_list)# print(data)from docx import Documentfrom docx.shared import Cmimport osdoc = Document(&quot;6S稽查问题模板.docx&quot;)# 将图片按修改时间排序(这样才能与图片的描述一致)，将路径存入列表，以便后面逐个插入图片时调用path = &quot;6s_pictures&quot;list_p = [path + &quot;\\&quot; + i for i in os.listdir(path)]  # 获取图片的文件名,并拼接完整路径list_p.sort(key=lambda path: os.path.getmtime(path))  # 将列表中的文件按其修改时间排序，os.path.getmtime() 函数是获取文件最后修改时间table = doc.tables[0]  # 已确定是第一个表格，其索引是0# 增加需要的行，以便足够填入数据for i in range(len(data) - 1):    table.add_row()# 写入数据及图片for row in range(1, len(data) + 1):    table.cell(row, 0).text = str(data[row - 1][0])  # 往第1列写入序号    table.cell(row, 1).text = data[row - 1][1]  # 往第2列写入问题描述    table.cell(row, 3).text = data[row - 1][2]  # 往第4列写入责任部门    # 插入图片并调整图片的高度和宽度，以适合模板中的单元格尺寸    run = table.cell(row, 2).paragraphs[0].add_run()  # 新增一个文字块    picture = run.add_picture(list_p[row - 1])  # 插入图片    picture.height = Cm(4.4)  # 设置图片高度    picture.width = Cm(6.2)  # 设置图片宽度doc.save(&quot;6S稽查问题.docx&quot;)</code></pre><p><a href="6S稽查问题模板.docx">6S稽查问题模板.docx</a><br><a href="数据.xlsx">数据.xlsx</a><br><a href="https://github.com/victory-liao/victory-liao.github.io/tree/master/source/images/6s_pictures">6s_pictures</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;向Word文档中添加图片&quot;&gt;&lt;a href=&quot;#向Word文档中添加图片&quot; class=&quot;headerlink&quot; title=&quot;向Word文档中添加图片&quot;&gt;&lt;/a&gt;向Word文档中添加图片&lt;/h1&gt;&lt;p&gt;以下代码使用python-docx向Word文档中的指定位置添加图片&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="第三方库" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="python-docx" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/python-docx/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="openpyxl" scheme="http://example.com/tags/openpyxl/"/>
    
    <category term="python-docx" scheme="http://example.com/tags/python-docx/"/>
    
  </entry>
  
  <entry>
    <title>python-docx | 设置word文档里表格的格式</title>
    <link href="http://example.com/2021/10/24/%E8%AE%BE%E7%BD%AEword%E6%96%87%E6%A1%A3%E9%87%8C%E8%A1%A8%E6%A0%BC%E7%9A%84%E6%A0%BC%E5%BC%8F/"/>
    <id>http://example.com/2021/10/24/%E8%AE%BE%E7%BD%AEword%E6%96%87%E6%A1%A3%E9%87%8C%E8%A1%A8%E6%A0%BC%E7%9A%84%E6%A0%BC%E5%BC%8F/</id>
    <published>2021-10-24T09:51:06.000Z</published>
    <updated>2021-10-24T09:53:55.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设置word文档里表格的格式"><a href="#设置word文档里表格的格式" class="headerlink" title="设置word文档里表格的格式"></a>设置word文档里表格的格式</h1><p>以下代码实现使用python-docx对word文档里表格的格式进行设置。</p><span id="more"></span><pre><code># 单元格边框设置函数from docx.table import _Cellfrom docx.oxml import OxmlElementfrom docx.oxml.ns import qndef Set_cell_border(cell: _Cell, **kwargs):    &quot;&quot;&quot;    设置单元格边框函数    使用方法:    Set_cell_border(        cell,        top=&#123;&quot;sz&quot;: 12, &quot;val&quot;: &quot;single&quot;, &quot;color&quot;: &quot;#FF0000&quot;, &quot;space&quot;: &quot;0&quot;&#125;,        bottom=&#123;&quot;sz&quot;: 12, &quot;color&quot;: &quot;#00FF00&quot;, &quot;val&quot;: &quot;single&quot;&#125;,        start=&#123;&quot;sz&quot;: 24, &quot;val&quot;: &quot;dashed&quot;, &quot;shadow&quot;: &quot;true&quot;&#125;,        end=&#123;&quot;sz&quot;: 12, &quot;val&quot;: &quot;dashed&quot;&#125;,    )    传入参数有cell, 即单元格；top指上边框；bottom指下边框；start指左边框；end指右边框。    &quot;sz&quot;指线的粗细程度；&quot;val&quot;指线型，比如单线，虚线等；&quot;color&quot;指颜色，颜色编码可百度；    &quot;space&quot;指间隔，一般不设置，设置的值大于0会导致线错开；&quot;shadow&quot;指边框阴影    &quot;&quot;&quot;    tc = cell._tc    tcPr = tc.get_or_add_tcPr()    tcBorders = tcPr.first_child_found_in(&quot;w:tcBorders&quot;)    if tcBorders is None:        tcBorders = OxmlElement(&#39;w:tcBorders&#39;)        tcPr.append(tcBorders)    for edge in (&#39;start&#39;, &#39;top&#39;, &#39;end&#39;, &#39;bottom&#39;, &#39;insideH&#39;, &#39;insideV&#39;):        edge_data = kwargs.get(edge)        if edge_data:            tag = &#39;w:&#123;&#125;&#39;.format(edge)            element = tcBorders.find(qn(tag))            if element is None:                element = OxmlElement(tag)                tcBorders.append(element)            for key in [&quot;sz&quot;, &quot;val&quot;, &quot;color&quot;, &quot;space&quot;, &quot;shadow&quot;]:                if key in edge_data:                    element.set(qn(&#39;w:&#123;&#125;&#39;.format(key)), str(edge_data[key]))# 定义单元格填充颜色函数from docx.oxml.ns import nsdeclsfrom docx.oxml import parse_xmldef Set_Background_Color(cell, rgbColor):    shading_elm = parse_xml(        r&#39;&lt;w:shd &#123;&#125; w:fill=&quot;&#123;color_value&#125;&quot;/&gt;&#39;.format(nsdecls(&#39;w&#39;), color_value=rgbColor))  # 固定写法，照抄即可    cell._tc.get_or_add_tcPr().append(shading_elm)from docx.enum.text import WD_ALIGN_PARAGRAPH  # 设置水平居中对齐需要用到的库from docx.enum.table import WD_ALIGN_VERTICAL  # 设置垂直居中对齐需要用到的库from docx.shared import Cm  # 长度单位（厘米cm用到的库)from docx import Documentdoc = Document(&quot;收货记录.docx&quot;)  # 打开word文件table = doc.tables[0]max_row = len(table.rows)  # 获取表格总行数# 1.最后一行中，“总数”两个字要加粗run = table.cell(max_row - 1, 4).paragraphs[0].runs[0]  # 获取最后一行第五列对应单元格中的文字块，即“总数”字样所在单元格run.font.bold = True  # 将文字块设置为粗体# 2.最后一行的行高要调大一点，现在这样扁扁的，难看table.rows[max_row - 1].height = Cm(1)  # 将最后一行的行高设置为1厘米# 3.最后一行那几个空单元格有框线，太碍眼，得去掉，将总数及左边两个cell左边框和下边框设成白色for i in range(3):    cell = table.cell(max_row - 1, i)    Set_cell_border(        cell,        bottom=&#123;&quot;color&quot;: &quot;#FFFFFF&quot;&#125;,        start=&#123;&quot;color&quot;: &quot;#FFFFFF&quot;&#125;,        end=&#123;&quot;color&quot;: &quot;#FFFFFF&quot;&#125;    )cell_1 = table.cell(max_row - 1, 3)Set_cell_border(cell_1, start=&#123;&quot;color&quot;: &quot;#FFFFFF&quot;&#125;, bottom=&#123;&quot;color&quot;: &quot;#FFFFFF&quot;&#125;)cell_2 = table.cell(max_row - 1, 6)Set_cell_border(cell_2, end=&#123;&quot;color&quot;: &quot;#FFFFFF&quot;&#125;, bottom=&#123;&quot;color&quot;: &quot;#FFFFFF&quot;&#125;)# 4.各单元格水平和垂直方向都要居中对齐for row in range(1, max_row):    for col in range(len(table.columns)):        table.cell(row, col).paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER        table.cell(row, col).vertical_alignment = WD_ALIGN_VERTICAL.CENTER# 5.数量列≥85的，底色设置为橙色qty = []  # 存储数量信息# 读取第二行到29行，第2，3列中的数据for i in range(1, max_row - 1):    qty_info = table.rows[i].cells[5].text  # cells[5]指表格第6列    qty.append(int(qty_info))# 将数量≥85的单元格填色row = 1  # 行计数器for i in qty:    if i &gt;= 85:        cell = table.cell(row, 5)  # 第6列数据为数量，列索引是5        Set_Background_Color(cell, &quot;98F5FF&quot;)  # 填充颜色，&quot;98F5FF&quot;是蓝色的编码    row += 1  # 跳转到下一行doc.save(&quot;收货记录-整理.docx&quot;)</code></pre><p><a href="收货记录.docx">收货记录.docx</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;设置word文档里表格的格式&quot;&gt;&lt;a href=&quot;#设置word文档里表格的格式&quot; class=&quot;headerlink&quot; title=&quot;设置word文档里表格的格式&quot;&gt;&lt;/a&gt;设置word文档里表格的格式&lt;/h1&gt;&lt;p&gt;以下代码实现使用python-docx对word文档里表格的格式进行设置。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="第三方库" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="python-docx" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/python-docx/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="python-docx" scheme="http://example.com/tags/python-docx/"/>
    
  </entry>
  
  <entry>
    <title>python-docx | 向word中的表格写入数据</title>
    <link href="http://example.com/2021/10/24/%E5%90%91word%E4%B8%AD%E7%9A%84%E8%A1%A8%E6%A0%BC%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE/"/>
    <id>http://example.com/2021/10/24/%E5%90%91word%E4%B8%AD%E7%9A%84%E8%A1%A8%E6%A0%BC%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE/</id>
    <published>2021-10-24T09:32:31.000Z</published>
    <updated>2021-10-24T09:36:06.260Z</updated>
    
    <content type="html"><![CDATA[<h1 id="向word中的表格写入数据"><a href="#向word中的表格写入数据" class="headerlink" title="向word中的表格写入数据"></a>向word中的表格写入数据</h1><p>以下代码实现一键往word文档的表格中填写数据。</p><span id="more"></span><pre><code># 从Excel表中提取数据from openpyxl import load_workbookwb = load_workbook(&quot;收货数据.xlsx&quot;)ws = wb.activedata = []for row in range(2, ws.max_row + 1):    seq = ws[&quot;A&quot; + str(row)].value    supplier = ws[&quot;B&quot; + str(row)].value    material_pn = ws[&quot;C&quot; + str(row)].value    material_model = ws[&quot;D&quot; + str(row)].value    desp = ws[&quot;E&quot; + str(row)].value    qty = ws[&quot;F&quot; + str(row)].value    date = ws[&quot;G&quot; + str(row)].value.date()    info = [seq, supplier, material_pn, material_model, desp, qty, date]    data.append(info)# 定义数量加总函数def Sum_list(list):    s = 0    for i in list:  # 累加列表中的所有数        s += i    return s# 加总数量列的所有数字qty_list = []for i in data:    qty_list.append(i[5])  # 数量在内层列表的第6个位置，索引是5sum_qty = Sum_list(qty_list)  # 调用加总函数加总# 定义合并单元格的函数def Merge_cells(table, target_list, start_row, col):    &#39;&#39;&#39;    table: 是需要操作的表格    target_list: 是目标列表，即含有重复数据的列表    start_row: 是开始行，即表格中开始比对数据的行（需要将标题除开）    col: 是需要处理数据的列    &#39;&#39;&#39;    start = 0  # 开始行计数    end = 0  # 结束行计数    reference = target_list[0]  # 设定基准，以列表中的第一个字符串开始    for i in range(len(target_list)):  # 遍历列表        if target_list[i] != reference:  # 开始比对，如果内容不同执行如下            reference = target_list[i]  # 基准变成列表中下一个字符串            end = i - 1            table.cell(start + start_row, col).merge(table.cell(end + start_row, col))            start = end + 1        if i == len(target_list) - 1:  # 遍历到最后一行，按如下操作            end = i            table.cell(start + start_row, col).merge(table.cell(end + start_row, col))# 数据提取即处理完毕后，就可以往Word的表格中写入数据了from docx import Documentdoc = Document(&quot;收货记录模板.docx&quot;)# 读取word文档中的第一个表格的第二和第三列除标题和尾部总数行的数据table = doc.tables[0]  # 已确定是第一个表格，其索引是0supplier = []  # 存储供应商名称pn = []  # 存储物料编码for i in data:    supplier.append(i[1])    pn.append(i[2])# 按需增加行，以便填写数据for i in range(len(supplier)):  # 模板中已经有一行了，所以总共只需增加len(supplier)行    table.add_row()# 增加好行后先做合并单元格操作Merge_cells(table, supplier, 1, 1)  # 开始合并行为2，索引为1；供应商名称是在2列，索引为1Merge_cells(table, pn, 1, 2)  # 开始合并行为2，索引为1；物料编码是在3列，索引为2# 写入数据到表格for row in range(1, len(supplier) + 1):    for col in range(7):        table.cell(row, col).text = str(data[row - 1][col])max_row = len(table.rows)  # 获取最大一行qty_row = max_row - 1  # 确定需要写入加总数据的一行table.cell(qty_row, 5).merge(table.cell(qty_row, 6))  # 合并右下角用于填写数量的两个单元格table.cell(qty_row, 4).text = &#39;总数：&#39;table.cell(qty_row, 5).text = str(sum_qty)doc.save(&quot;收货记录3.docx&quot;)</code></pre><p><a href="收货数据.xlsx">收货数据.xlsx</a><br><a href="收货记录模板.docx">收货记录模板.docx</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;向word中的表格写入数据&quot;&gt;&lt;a href=&quot;#向word中的表格写入数据&quot; class=&quot;headerlink&quot; title=&quot;向word中的表格写入数据&quot;&gt;&lt;/a&gt;向word中的表格写入数据&lt;/h1&gt;&lt;p&gt;以下代码实现一键往word文档的表格中填写数据。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="第三方库" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="python-docx" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/python-docx/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="openpyxl" scheme="http://example.com/tags/openpyxl/"/>
    
    <category term="python-docx" scheme="http://example.com/tags/python-docx/"/>
    
  </entry>
  
  <entry>
    <title>python-docx | 合并word表格中上下行那内容相同的单元格</title>
    <link href="http://example.com/2021/10/21/%E5%90%88%E5%B9%B6word%E8%A1%A8%E6%A0%BC%E4%B8%AD%E4%B8%8A%E4%B8%8B%E8%A1%8C%E9%82%A3%E5%86%85%E5%AE%B9%E7%9B%B8%E5%90%8C%E7%9A%84%E5%8D%95%E5%85%83%E6%A0%BC/"/>
    <id>http://example.com/2021/10/21/%E5%90%88%E5%B9%B6word%E8%A1%A8%E6%A0%BC%E4%B8%AD%E4%B8%8A%E4%B8%8B%E8%A1%8C%E9%82%A3%E5%86%85%E5%AE%B9%E7%9B%B8%E5%90%8C%E7%9A%84%E5%8D%95%E5%85%83%E6%A0%BC/</id>
    <published>2021-10-21T09:53:10.000Z</published>
    <updated>2021-10-21T09:55:56.693Z</updated>
    
    <content type="html"><![CDATA[<h1 id="合并word表格中上下行那内容相同的单元格"><a href="#合并word表格中上下行那内容相同的单元格" class="headerlink" title="合并word表格中上下行那内容相同的单元格"></a>合并word表格中上下行那内容相同的单元格</h1><p>以下代码实现自动合并excel表格中上下行内容相同的单元格</p><span id="more"></span><pre><code>from docx import Document# 定义合并单元格的函数def Merge_cells(table, target_list, start_row, col):    &quot;&quot;&quot;    table: 是需要操作的表格    target_list: 是目标列表，即含有重复数据的列表    start_row: 是开始行，即表格中开始比对数据的行（需要将标题除开）    col: 是需要处理数据的列    &quot;&quot;&quot;    start = 0  # 开始行计数    end = 0  # 结束行计数    reference = target_list[0]  # 设定基准，以列表中的第一个字符串开始    for i in range(len(target_list)):  # 遍历列表        if target_list[i] != reference:  # 开始比对，如果内容不同执行如下            reference = target_list[i]  # 基准变成列表中下一个字符串            end = i - 1            table.cell(start + start_row, col).merge(table.cell(end + start_row, col))            start = end + 1        if i == len(target_list) - 1:  # 遍历到最后一行，按如下操作            end = i            table.cell(start + start_row, col).merge(table.cell(end + start_row, col))doc = Document(&quot;收货记录.docx&quot;)# 读取word文档中的第一个表格的第二和第三列除标题和尾部总数行的数据table = doc.tables[0]  # 已确定是第一个表格，其索引是0supplier = []  # 存储供应商名称pn = []  # 存储物料编码max_row = len(table.rows)  # 获取第最大一行# 读取第二行到29行，第2，3列中的数据for i in range(1, max_row - 1):    supplier_name = table.rows[i].cells[1].text  # cells[1]指表格第二列    supplier.append(supplier_name)for i in range(1, max_row - 1):    material_pn = table.rows[i].cells[2].text  # cells[2]指表格第三列    pn.append(material_pn)Merge_cells(table, supplier, 1, 1)  # 开始合并行为2，索引为1；供应商名称是在2列，索引为1Merge_cells(table, pn, 1, 2)  # 开始合并行为2，索引为1；物料编码是在3列，索引为2# 重新往第2和第3列写入数据，以覆盖之前重复的数据for row in range(1, len(supplier) + 1):    table.cell(row, 1).text = supplier[row - 2]    table.cell(row, 2).text = pn[row - 2]doc.save(&quot;收货记录-合并单元格.docx&quot;)</code></pre><p><a href="收货记录.docx">收货记录.docx</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;合并word表格中上下行那内容相同的单元格&quot;&gt;&lt;a href=&quot;#合并word表格中上下行那内容相同的单元格&quot; class=&quot;headerlink&quot; title=&quot;合并word表格中上下行那内容相同的单元格&quot;&gt;&lt;/a&gt;合并word表格中上下行那内容相同的单元格&lt;/h1&gt;&lt;p&gt;以下代码实现自动合并excel表格中上下行内容相同的单元格&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="第三方库" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="python-docx" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/python-docx/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="python-docx" scheme="http://example.com/tags/python-docx/"/>
    
  </entry>
  
  <entry>
    <title>openpyxl | 合并excel表格中上下行内容相同的单元格</title>
    <link href="http://example.com/2021/10/21/%E5%90%88%E5%B9%B6excel%E8%A1%A8%E6%A0%BC%E4%B8%AD%E4%B8%8A%E4%B8%8B%E8%A1%8C%E5%86%85%E5%AE%B9%E7%9B%B8%E5%90%8C%E7%9A%84%E5%8D%95%E5%85%83%E6%A0%BC/"/>
    <id>http://example.com/2021/10/21/%E5%90%88%E5%B9%B6excel%E8%A1%A8%E6%A0%BC%E4%B8%AD%E4%B8%8A%E4%B8%8B%E8%A1%8C%E5%86%85%E5%AE%B9%E7%9B%B8%E5%90%8C%E7%9A%84%E5%8D%95%E5%85%83%E6%A0%BC/</id>
    <published>2021-10-21T09:35:15.000Z</published>
    <updated>2021-10-21T09:37:48.441Z</updated>
    
    <content type="html"><![CDATA[<h1 id="合并excel表格中上下行内容相同的单元格"><a href="#合并excel表格中上下行内容相同的单元格" class="headerlink" title="合并excel表格中上下行内容相同的单元格"></a>合并excel表格中上下行内容相同的单元格</h1><p>以下代码实现自动合并excel表格中上下行内容相同的单元格</p><span id="more"></span><pre><code># 获取Excel表格中的数据from openpyxl import load_workbook  # 用于读取Excel中的信息def merge_cells(ws, target_list, start_row, col):    &quot;&quot;&quot;    ws: 是需要操作的工作表    target_list: 是目标列表，即含有重复数据的列表    start_row: 是开始行，即工作表中开始比对数据的行（需要将标题除开）    col: 是需要处理数据的列    &quot;&quot;&quot;    start = 0  # 开始行计数，初试值为0，对应列表中的第1个元素的位置0    end = 0  # 结束行计数，初试值为0，对应列表中的第1个元素的位置0    reference = target_list[0]  # 设定基准，以列表中的第一个字符串开始    for i in range(len(target_list)):  # 遍历列表        if target_list[i] != reference:  # 开始比对，如果内容不同执行如下            reference = target_list[i]  # 基准变成列表中下一个字符串            end = i - 1  # 列计数器            ws.merge_cells(col + str(start + start_row) + &quot;:&quot; + col + str(end + start_row))            start = end + 1        if i == len(target_list) - 1:  # 遍历到最后一行，按如下操作            end = i            ws.merge_cells(col + str(start + start_row) + &quot;:&quot; + col + str(end + start_row))wb = load_workbook(&#39;产品清单.xlsx&#39;)sheet_names = wb.get_sheet_names()for sheet_name in sheet_names:  # 遍历每个工作表，抓取数据，并根据要求合并单元格    ws = wb[sheet_name]    customer_list = []  # 客户名称    pn_list = []  # 产品编码    for row in range(6, ws.max_row - 2):        customer = ws[&#39;B&#39; + str(row)].value        pn = ws[&#39;C&#39; + str(row)].value        customer_list.append(customer)        pn_list.append(pn)    # 调用以上定义的合并单元格函数`Merge_cells`做单元格合并操作    start_row = 6  # 开始行是第六行    merge_cells(ws, customer_list, start_row, &quot;B&quot;)  # &quot;B&quot; - 客户名称是在B列    merge_cells(ws, pn_list, start_row, &quot;C&quot;)  # &quot;C&quot; - 产品编码是在C列wb.save(&quot;产品清单-合并单元.xlsx&quot;)</code></pre><p><a href="产品清单.xlsx">产品清单.xlsx</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;合并excel表格中上下行内容相同的单元格&quot;&gt;&lt;a href=&quot;#合并excel表格中上下行内容相同的单元格&quot; class=&quot;headerlink&quot; title=&quot;合并excel表格中上下行内容相同的单元格&quot;&gt;&lt;/a&gt;合并excel表格中上下行内容相同的单元格&lt;/h1&gt;&lt;p&gt;以下代码实现自动合并excel表格中上下行内容相同的单元格&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="第三方库" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="openpyxl" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/openpyxl/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="openpyxl" scheme="http://example.com/tags/openpyxl/"/>
    
  </entry>
  
  <entry>
    <title>openpyxl | 快速提取一串字符中的中文</title>
    <link href="http://example.com/2021/10/21/%E5%BF%AB%E9%80%9F%E6%8F%90%E5%8F%96%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6%E4%B8%AD%E7%9A%84%E4%B8%AD%E6%96%87/"/>
    <id>http://example.com/2021/10/21/%E5%BF%AB%E9%80%9F%E6%8F%90%E5%8F%96%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6%E4%B8%AD%E7%9A%84%E4%B8%AD%E6%96%87/</id>
    <published>2021-10-21T09:11:03.000Z</published>
    <updated>2021-10-21T09:14:24.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速提取一串字符中的中文"><a href="#快速提取一串字符中的中文" class="headerlink" title="快速提取一串字符中的中文"></a>快速提取一串字符中的中文</h1><p>以下代码实现了快速提取（正则表达式）一串字符串中的中文。</p><span id="more"></span><pre><code>import refrom openpyxl import load_workbookdata = []wb = load_workbook(&#39;data/data.xlsx&#39;)ws = wb.activefor row in range(2, ws.max_row + 1):  # 从第二行开始遍历excel文件所有行    info = ws[&#39;A&#39; + str(row)].value    data.append(info)chinese_list = []for i in data:    chinese = re.findall(&#39;[\u4e00-\u9fa5]&#39;, i)    chinese_list.append(&#39;&#39;.join(chinese))for row in range(2, ws.max_row + 1):    ws[&#39;B&#39; + str(row)].value = chinese_list[row - 2]wb.save(&quot;./data/data_chinese.xlsx&quot;)</code></pre><p><a href="data.xlsx">下载data.xlsx</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;快速提取一串字符中的中文&quot;&gt;&lt;a href=&quot;#快速提取一串字符中的中文&quot; class=&quot;headerlink&quot; title=&quot;快速提取一串字符中的中文&quot;&gt;&lt;/a&gt;快速提取一串字符中的中文&lt;/h1&gt;&lt;p&gt;以下代码实现了快速提取（正则表达式）一串字符串中的中文。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="第三方库" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="openpyxl" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/openpyxl/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="re" scheme="http://example.com/tags/re/"/>
    
    <category term="openpyxl" scheme="http://example.com/tags/openpyxl/"/>
    
    <category term="正则表达式" scheme="http://example.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>python-pptx | 提取ppt中的文字到word中</title>
    <link href="http://example.com/2021/10/21/%E6%8F%90%E5%8F%96ppt%E4%B8%AD%E7%9A%84%E6%96%87%E5%AD%97%E5%88%B0word%E4%B8%AD/"/>
    <id>http://example.com/2021/10/21/%E6%8F%90%E5%8F%96ppt%E4%B8%AD%E7%9A%84%E6%96%87%E5%AD%97%E5%88%B0word%E4%B8%AD/</id>
    <published>2021-10-21T08:37:48.000Z</published>
    <updated>2021-10-21T08:41:37.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="提取ppt中的文字到word中"><a href="#提取ppt中的文字到word中" class="headerlink" title="提取ppt中的文字到word中"></a>提取ppt中的文字到word中</h1><p>以下代码实现了将ppt中的所有文字提取到word中。</p><span id="more"></span><pre><code>from pptx import Presentationdata = []prs = Presentation(&#39;data\制造业必修课.pptx&#39;)for slide in prs.slides:  # 遍历每页ppt    for shape in slide.shapes:  # 遍历ppt中的每个形状        if shape.has_text_frame:  # 判断该形状是否包含文本，保证有文本才提取            for paragraph in shape.text_frame.paragraphs:  # 按文本框中的段落提取                data.append(paragraph.text)  # 提取一个段落的文本，就存到列表data中# 写入文本文件TxtFile = open(&#39;data\制造业必修课.txt&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;)for i in data:    TxtFile.write(i + &#39;\n&#39;)  # 写入并换行，以保证正确分段TxtFile.close()  # 保存# 写入word文件import docxdoc = docx.Document()  # 创建一个word文件对象for i in data:    doc.add_paragraph(i)  # 增加一个段落，并将列表中的一个字符串写入word文件doc.save(&#39;data\制造业必修课.docx&#39;)</code></pre><p><a href="制造业必修课.pptx">制造业必修课.pptx</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;提取ppt中的文字到word中&quot;&gt;&lt;a href=&quot;#提取ppt中的文字到word中&quot; class=&quot;headerlink&quot; title=&quot;提取ppt中的文字到word中&quot;&gt;&lt;/a&gt;提取ppt中的文字到word中&lt;/h1&gt;&lt;p&gt;以下代码实现了将ppt中的所有文字提取到word中。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="第三方库" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="python-pptx" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/python-pptx/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="python-docx" scheme="http://example.com/tags/python-docx/"/>
    
    <category term="python-pptx" scheme="http://example.com/tags/python-pptx/"/>
    
  </entry>
  
  <entry>
    <title>sviewgui | 对数据文件中的数据进行可视化</title>
    <link href="http://example.com/2021/10/19/%E5%AF%B9%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>http://example.com/2021/10/19/%E5%AF%B9%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%8F%AF%E8%A7%86%E5%8C%96/</id>
    <published>2021-10-20T07:38:43.000Z</published>
    <updated>2021-10-20T09:34:53.001Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用sviewgui对csv文件或Pandas的DataFrame的数据可视化"><a href="#使用sviewgui对csv文件或Pandas的DataFrame的数据可视化" class="headerlink" title="使用sviewgui对csv文件或Pandas的DataFrame的数据可视化"></a>使用sviewgui对csv文件或Pandas的DataFrame的数据可视化</h1><p><a href="https://mp.weixin.qq.com/s/6ftmwDzlyuCgN5YsX81pKQ">参考资料</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用sviewgui对csv文件或Pandas的DataFrame的数据可视化&quot;&gt;&lt;a href=&quot;#使用sviewgui对csv文件或Pandas的DataFrame的数据可视化&quot; class=&quot;headerlink&quot; title=&quot;使用sviewgui对csv</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="第三方库" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="sviewgui" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/sviewgui/"/>
    
    
    <category term="sviewgui" scheme="http://example.com/tags/sviewgui/"/>
    
  </entry>
  
  <entry>
    <title>hexo | hexo博客上传PDF、PPT、EXCEL等资源</title>
    <link href="http://example.com/2021/10/18/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0PdfPptExcel%E7%AD%89%E8%B5%84%E6%BA%90/"/>
    <id>http://example.com/2021/10/18/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0PdfPptExcel%E7%AD%89%E8%B5%84%E6%BA%90/</id>
    <published>2021-10-18T14:03:12.000Z</published>
    <updated>2021-10-18T14:07:52.409Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo博客上传PDF、PPT、EXCEL等资源"><a href="#hexo博客上传PDF、PPT、EXCEL等资源" class="headerlink" title="hexo博客上传PDF、PPT、EXCEL等资源"></a>hexo博客上传PDF、PPT、EXCEL等资源</h1><p><a href="https://benpaodewoniu.github.io/2020/04/28/hexo27/">hexo博客上传PDF、PPT、EXCEL等资源</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo博客上传PDF、PPT、EXCEL等资源&quot;&gt;&lt;a href=&quot;#hexo博客上传PDF、PPT、EXCEL等资源&quot; class=&quot;headerlink&quot; title=&quot;hexo博客上传PDF、PPT、EXCEL等资源&quot;&gt;&lt;/a&gt;hexo博客上传PDF、PP</summary>
      
    
    
    
    <category term="hexo" scheme="http://example.com/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>python-pptx | 批量生成PPT版荣誉证书</title>
    <link href="http://example.com/2021/10/16/%E6%89%B9%E9%87%8F%E7%94%9F%E6%88%90PPT%E7%89%88%E8%8D%A3%E8%AA%89%E8%AF%81%E4%B9%A6/"/>
    <id>http://example.com/2021/10/16/%E6%89%B9%E9%87%8F%E7%94%9F%E6%88%90PPT%E7%89%88%E8%8D%A3%E8%AA%89%E8%AF%81%E4%B9%A6/</id>
    <published>2021-10-16T13:52:18.000Z</published>
    <updated>2021-10-18T13:57:24.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="批量生成PPT版荣誉证书"><a href="#批量生成PPT版荣誉证书" class="headerlink" title="批量生成PPT版荣誉证书"></a>批量生成PPT版荣誉证书</h1><p>以下代码实现了根据一个excel名单和一个荣誉证书模板批量生成名单中所有人的荣誉证书。</p><span id="more"></span><pre><code>import timefrom pptx import Presentationfrom openpyxl import load_workbookprs = Presentation(r&#39;data\荣誉证书模板.pptx&#39;)slide = prs.slides.add_slide(prs.slide_layouts[0])  # 第一个模板的第0个板式for ph in slide.placeholders:  # 遍历这页PPT的所有占位符    phf = ph.placeholder_format  # 获取占位符的格式    print(phf.idx)  # 打印其ID编号    ph.text = str(phf.idx)  # 将编号写入PPT对应的位置中，以便后面一一对应# 以上读取到占位符的ID方便后面调用prs.save(r&#39;data\荣誉证书模板-占位符编号.pptx&#39;)wb = load_workbook(r&quot;data\名单.xlsx&quot;)ws = wb.activedata = &#123;&#125;for row in range(2, ws.max_row + 1):    class_id = ws[&#39;A&#39; + str(row)].value    name = ws[&#39;B&#39; + str(row)].value    data.setdefault(class_id, [])    data[class_id].append(name)t0 = time.time()  # 程序开始运行的时间prs = Presentation(r&#39;data\荣誉证书模板.pptx&#39;)slide_layout = prs.slide_layouts[0]  # 调用设置好的母版，因为是母版的第一版式，所以取[0]for class_id in data:    for name in data[class_id]:        slide = prs.slides.add_slide(slide_layout)  # 以母版的版式为基础新增一页幻灯片        # 往幻灯片中写入内容        slide.placeholders[10].text = &quot;&#123;&#125; 班 &#123;&#125; 同学：&quot;.format(class_id, name)  # 此处是班级和姓名        slide.placeholders[11].text = &quot;在2019-2020学年度第一学期获得&quot;        slide.placeholders[12].text = &quot;“好孩子”称号。&quot;        slide.placeholders[13].text = &quot;特发此证，以资鼓励。&quot;        slide.placeholders[14].text = &quot;市幼儿园&quot;        slide.placeholders[15].text = &quot;2020年1月&quot;prs.save(&#39;data\荣誉证书(总).pptx&#39;)t1 = time.time()print(&#39;程序用时：&#39;, str(round(t1 - t0)) + &#39;秒。&#39;)</code></pre><p><a href="荣誉证书模板.pptx">荣誉证书模板.pptx</a><br><a href="名单.xlsx">下载名单.xlsx</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;批量生成PPT版荣誉证书&quot;&gt;&lt;a href=&quot;#批量生成PPT版荣誉证书&quot; class=&quot;headerlink&quot; title=&quot;批量生成PPT版荣誉证书&quot;&gt;&lt;/a&gt;批量生成PPT版荣誉证书&lt;/h1&gt;&lt;p&gt;以下代码实现了根据一个excel名单和一个荣誉证书模板批量生成名单中所有人的荣誉证书。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="第三方库" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="python-pptx" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/python-pptx/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="openpyxl" scheme="http://example.com/tags/openpyxl/"/>
    
    <category term="python-pptx" scheme="http://example.com/tags/python-pptx/"/>
    
  </entry>
  
  <entry>
    <title>itchat | python微信轰炸</title>
    <link href="http://example.com/2021/10/16/python%E5%BE%AE%E4%BF%A1%E8%BD%B0%E7%82%B8/"/>
    <id>http://example.com/2021/10/16/python%E5%BE%AE%E4%BF%A1%E8%BD%B0%E7%82%B8/</id>
    <published>2021-10-16T13:20:30.000Z</published>
    <updated>2021-10-16T13:22:12.154Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python微信轰炸"><a href="#python微信轰炸" class="headerlink" title="python微信轰炸"></a>python微信轰炸</h1><p><a href="https://www.bilibili.com/read/cv11064085/">python微信轰炸</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;python微信轰炸&quot;&gt;&lt;a href=&quot;#python微信轰炸&quot; class=&quot;headerlink&quot; title=&quot;python微信轰炸&quot;&gt;&lt;/a&gt;python微信轰炸&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/read</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="第三方库" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="itchat" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/itchat/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="itchat" scheme="http://example.com/tags/itchat/"/>
    
    <category term="微信轰炸" scheme="http://example.com/tags/%E5%BE%AE%E4%BF%A1%E8%BD%B0%E7%82%B8/"/>
    
  </entry>
  
  <entry>
    <title>openpyxl | 修改excel表中的单元格内容</title>
    <link href="http://example.com/2021/10/16/%E4%BF%AE%E6%94%B9excel%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%8D%95%E5%85%83%E6%A0%BC%E5%86%85%E5%AE%B9/"/>
    <id>http://example.com/2021/10/16/%E4%BF%AE%E6%94%B9excel%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%8D%95%E5%85%83%E6%A0%BC%E5%86%85%E5%AE%B9/</id>
    <published>2021-10-16T12:20:02.000Z</published>
    <updated>2021-10-18T14:00:49.238Z</updated>
    
    <content type="html"><![CDATA[<h1 id="修改excel表中的单元格内容"><a href="#修改excel表中的单元格内容" class="headerlink" title="修改excel表中的单元格内容"></a>修改excel表中的单元格内容</h1><p>以下代码实现了修改 领料单（每日）.xlsx 中的所有表中某单元格的内容。</p><span id="more"></span><pre><code>from openpyxl import load_workbookwb = load_workbook(&quot;领料单（每日）.xlsx&quot;)print(wb.sheetnames)for sheet_name in wb.sheetnames:  # 遍历每个工作表，更改A4单元格的数据    print(sheet_name)    ws = wb[sheet_name]    ws[&#39;A4&#39;].value = &quot;零件测试领料单&quot; #直接将A4单元格的值改为需要的wb.save(&quot;资料单（每日）-更改后.xlsx&quot;)</code></pre><p><a href="https://blog.csdn.net/weixin_41546513/article/details/109555832">openpyxl参考资料</a><br><a href="https://openpyxl.readthedocs.io/en/stable/index.html">openpyxl官方文档</a><br><a href="领料单（每日）.xlsx">下载领料单（每日）.xlsx</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;修改excel表中的单元格内容&quot;&gt;&lt;a href=&quot;#修改excel表中的单元格内容&quot; class=&quot;headerlink&quot; title=&quot;修改excel表中的单元格内容&quot;&gt;&lt;/a&gt;修改excel表中的单元格内容&lt;/h1&gt;&lt;p&gt;以下代码实现了修改 领料单（每日）.xlsx 中的所有表中某单元格的内容。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="第三方库" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="openpyxl" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/openpyxl/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="openpyxl" scheme="http://example.com/tags/openpyxl/"/>
    
  </entry>
  
  <entry>
    <title>python | 68个python内置函数详解</title>
    <link href="http://example.com/2021/10/16/68%E4%B8%AApython%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2021/10/16/68%E4%B8%AApython%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-10-16T09:45:14.000Z</published>
    <updated>2021-10-16T11:27:26.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="68个python内置函数详解"><a href="#68个python内置函数详解" class="headerlink" title="68个python内置函数详解"></a>68个python内置函数详解</h1><p>内置函数就是Python给你提供的，拿来直接用的函数，比如print.，input等。<br>截止到python版本3.6.2 ，python一共提供了68个内置函数，具体如下👇</p><pre><code>abs()           dict()        help()         min()         setattr()all()           dir()         hex()          next()        slice() any()           divmod()      id()           object()      sorted() ascii()         enumerate()   input()        oct()         staticmethod() bin()           eval()        int()          open()        str() bool()          exec()        isinstance()   ord()         sum() bytearray()     ﬁlter()       issubclass()   pow()         super() bytes()         ﬂoat()        iter()         print()       tuple() callable()      format()      len()          property()    type() chr()           frozenset()   list()         range()       vars() classmethod()   getattr()     locals()       repr()        zip() compile()       globals()     map()          reversed()    __import__() complex()       hasattr()     max()          round() delattr()       hash()        memoryview()   set()</code></pre><span id="more"></span><p>本文将这68个内置函数综合整理为12大类，正在学习Python基础的读者一定不要错过，建议收藏学习！<br>和数字相关</p><ol><li>数据类型</li></ol><p>bool : 布尔型(True,False)<br>int : 整型(整数)<br>float : 浮点型(小数)<br>complex : 复数</p><ol start="2"><li>进制转换</li></ol><p>bin() 将给的参数转换成二进制<br>otc() 将给的参数转换成八进制<br>hex() 将给的参数转换成十六进制</p><pre><code>print(bin(10))  # 二进制:0b1010print(hex(10))  # 十六进制:0xaprint(oct(10))  # 八进制:0o12</code></pre><ol start="3"><li>数学运算</li></ol><p>abs() 返回绝对值<br>divmode() 返回商和余数<br>round() 四舍五入<br>pow(a, b) 求a的b次幂, 如果有三个参数. 则求完次幂后对第三个数取余<br>sum() 求和<br>min() 求最小值<br>max() 求最大值</p><pre><code>print(abs(-2))  # 绝对值:2print(divmod(20,3)) # 求商和余数:(6,2)print(round(4.50))   # 五舍六入:4print(round(4.51))   #5print(pow(10,2,3))  # 如果给了第三个参数. 表示最后取余:1print(sum([1,2,3,4,5,6,7,8,9,10]))  # 求和:55print(min(5,3,9,12,7,2))  #求最小值:2print(max(7,3,15,9,4,13))  #求最大值:15</code></pre><p>和数据结构相关</p><ol><li>序列</li></ol><p>（1）列表和元组</p><p>list() 将一个可迭代对象转换成列表<br>tuple() 将一个可迭代对象转换成元组</p><pre><code>print(list((1,2,3,4,5,6)))  #[1, 2, 3, 4, 5, 6]print(tuple([1,2,3,4,5,6]))  #(1, 2, 3, 4, 5, 6)</code></pre><p>（2）相关内置函数</p><p>reversed() 将一个序列翻转, 返回翻转序列的迭代器<br>slice() 列表的切片</p><pre><code>lst = &quot;你好啊&quot;it = reversed(lst)   # 不会改变原列表. 返回一个迭代器, 设计上的一个规则print(list(it))  #[&#39;啊&#39;, &#39;好&#39;, &#39;你&#39;]lst = [1, 2, 3, 4, 5, 6, 7]print(lst[1:3:1])  #[2,3]s = slice(1, 3, 1)  #  切片用的print(lst[s])  #[2,3]</code></pre><p>（3）字符串</p><p>str() 将数据转化成字符串</p><pre><code>print(str(123)+&#39;456&#39;)  #123456</code></pre><p>format() 与具体数据相关, 用于计算各种小数, 精算等.</p><pre><code>s = &quot;hello world!&quot;print(format(s, &quot;^20&quot;))  #剧中print(format(s, &quot;&lt;20&quot;))  #左对齐print(format(s, &quot;&gt;20&quot;))  #右对齐#     hello world!    # hello world!        #         hello world!print(format(3, &#39;b&#39; ))    # 二进制:11print(format(97, &#39;c&#39; ))   # 转换成unicode字符:aprint(format(11, &#39;d&#39; ))   # ⼗进制:11print(format(11, &#39;o&#39; ))   # 八进制:13 print(format(11, &#39;x&#39; ))   # 十六进制(⼩写字母):bprint(format(11, &#39;X&#39; ))   # 十六进制(大写字母):Bprint(format(11, &#39;n&#39; ))   # 和d⼀样:11print(format(11))         # 和d⼀样:11print(format(123456789, &#39;e&#39; ))      # 科学计数法. 默认保留6位小数:1.234568e+08print(format(123456789, &#39;0.2e&#39; ))   # 科学计数法. 保留2位小数(小写):1.23e+08print(format(123456789, &#39;0.2E&#39; ))   # 科学计数法. 保留2位小数(大写):1.23E+08print(format(1.23456789, &#39;f&#39; ))     # 小数点计数法. 保留6位小数:1.234568print(format(1.23456789, &#39;0.2f&#39; ))  # 小数点计数法. 保留2位小数:1.23print(format(1.23456789, &#39;0.10f&#39;))  # 小数点计数法. 保留10位小数:1.2345678900print(format(1.23456789e+3, &#39;F&#39;))   # 小数点计数法. 很大的时候输出INF:1234.567890</code></pre><p>bytes() 把字符串转化成bytes类型</p><pre><code>bs = bytes(&quot;今天吃饭了吗&quot;, encoding=&quot;utf-8&quot;)print(bs)  #b&#39;\xe4\xbb\x8a\xe5\xa4\xa9\xe5\x90\x83\xe9\xa5\xad\xe4\xba\x86\xe5\x90\x97&#39;</code></pre><p>bytearray()    返回一个新字节数组. 这个数字的元素是可变的, 并且每个元素的值得范围是[0,256)</p><pre><code>ret = bytearray(&quot;alex&quot; ,encoding =&#39;utf-8&#39;)print(ret[0])  #97print(ret)  #bytearray(b&#39;alex&#39;)ret[0] = 65  #把65的位置A赋值给ret[0]print(str(ret))  #bytearray(b&#39;Alex&#39;)</code></pre><p>ord() 输入字符找带字符编码的位置<br>chr() 输入位置数字找出对应的字符<br>ascii() 是ascii码中的返回该值 不是就返回u</p><pre><code>print(ord(&#39;a&#39;))  # 字母a在编码表中的码位:97print(ord(&#39;中&#39;))  # &#39;中&#39;字在编码表中的位置:20013print(chr(65))  # 已知码位,求字符是什么:Aprint(chr(19999))  #丟for i in range(65536):  #打印出0到65535的字符    print(chr(i), end=&quot; &quot;)print(ascii(&quot;@&quot;))  #&#39;@&#39;</code></pre><p>repr() 返回一个对象的string形式</p><pre><code>s = &quot;今天\n吃了%s顿\t饭&quot; % 3print(s)#今天# 吃了3顿    饭print(repr(s))   # 原样输出,过滤掉转义字符 \n \t \r 不管百分号%#&#39;今天\n吃了3顿\t饭&#39;</code></pre><ol start="2"><li>数据集合</li></ol><p>字典：dict 创建一个字典</p><p>集合：set 创建一个集合</p><p>frozenset() 创建一个冻结的集合，冻结的集合不能进行添加和删除操作。<br>3. 相关内置函数</p><p>len() 返回一个对象中的元素的个数<br>sorted() 对可迭代对象进行排序操作 (lamda)</p><p>语法：sorted(Iterable, key=函数(排序规则), reverse=False)</p><p>Iterable: 可迭代对象<br>key: 排序规则(排序函数), 在sorted内部会将可迭代对象中的每一个元素传递给这个函数的参数. 根据函数运算的结果进行排序<br>reverse: 是否是倒叙. True: 倒叙, False: 正序</p><pre><code>lst = [5,7,6,12,1,13,9,18,5]lst.sort()  # sort是list里面的一个方法print(lst)  #[1, 5, 5, 6, 7, 9, 12, 13, 18]ll = sorted(lst) # 内置函数. 返回给你一个新列表  新列表是被排序的print(ll)  #[1, 5, 5, 6, 7, 9, 12, 13, 18]l2 = sorted(lst,reverse=True)  #倒序print(l2)  #[18, 13, 12, 9, 7, 6, 5, 5, 1]</code></pre><p>#根据字符串长度给列表排序<br>    lst = [‘one’, ‘two’, ‘three’, ‘four’, ‘five’, ‘six’]<br>    def f(s):<br>        return len(s)<br>    l1 = sorted(lst, key=f, )<br>    print(l1)  #[‘one’, ‘two’, ‘six’, ‘four’, ‘five’, ‘three’]</p><p>enumerate() 获取集合的枚举对象</p><pre><code>lst = [&#39;one&#39;,&#39;two&#39;,&#39;three&#39;,&#39;four&#39;,&#39;five&#39;]for index, el in enumerate(lst,1):    # 把索引和元素一起获取,索引默认从0开始. 可以更改    print(index)    print(el)# 1# one# 2# two# 3# three# 4# four# 5# five</code></pre><p>all() 可迭代对象中全部是True, 结果才是True<br>any() 可迭代对象中有一个是True, 结果就是True</p><pre><code>print(all([1,&#39;hello&#39;,True,9]))  #Trueprint(any([0,0,0,False,1,&#39;good&#39;]))  #True</code></pre><p>zip() 函数用于将可迭代的对象作为参数, 将对象中对应的元素打包成一个元组, 然后返回由这些元组组成的列表. 如果各个迭代器的元素个数不一致, 则返回列表长度与最短的对象相同</p><pre><code>lst1 = [1, 2, 3, 4, 5, 6]lst2 = [&#39;醉乡民谣&#39;, &#39;驴得水&#39;, &#39;放牛班的春天&#39;, &#39;美丽人生&#39;, &#39;辩护人&#39;, &#39;被嫌弃的松子的一生&#39;]lst3 = [&#39;美国&#39;, &#39;中国&#39;, &#39;法国&#39;, &#39;意大利&#39;, &#39;韩国&#39;, &#39;日本&#39;]print(zip(lst1, lst1, lst3))  #&lt;zip object at 0x00000256CA6C7A88&gt;for el in zip(lst1, lst2, lst3):    print(el)# (1, &#39;醉乡民谣&#39;, &#39;美国&#39;)# (2, &#39;驴得水&#39;, &#39;中国&#39;)# (3, &#39;放牛班的春天&#39;, &#39;法国&#39;)# (4, &#39;美丽人生&#39;, &#39;意大利&#39;)# (5, &#39;辩护人&#39;, &#39;韩国&#39;)# (6, &#39;被嫌弃的松子的一生&#39;, &#39;日本&#39;)</code></pre><p>fiter() 过滤 (lamda)</p><p>语法：fiter(function. Iterable)</p><p>function: 用来筛选的函数. 在ﬁlter中会自动的把iterable中的元素传递给function. 然后根据function返回的True或者False来判断是否保留留此项数据 , Iterable: 可迭代对象</p><pre><code>def func(i):    # 判断奇数    return i % 2 == 1    lst = [1,2,3,4,5,6,7,8,9]l1 = filter(func, lst)  #l1是迭代器print(l1)  #&lt;filter object at 0x000001CE3CA98AC8&gt;print(list(l1))  #[1, 3, 5, 7, 9]</code></pre><p>map() 会根据提供的函数对指定序列列做映射(lamda)</p><p>语法 : map(function, iterable)</p><p>可以对可迭代对象中的每一个元素进行映射. 分别去执行 function</p><pre><code>def f(i):    return ilst = [1,2,3,4,5,6,7,]it = map(f, lst) # 把可迭代对象中的每一个元素传递给前面的函数进行处理. 处理的结果会返回成迭代器print(list(it))  #[1, 2, 3, 4, 5, 6, 7]</code></pre><p>和作用域相关</p><p>locals() 返回当前作用域中的名字<br>globals() 返回全局作用域中的名字</p><pre><code>def func():    a = 10    print(locals())  # 当前作用域中的内容    print(globals())  # 全局作用域中的内容    print(&quot;今天内容很多&quot;)func()# &#123;&#39;a&#39;: 10&#125;# &#123;&#39;__name__&#39;: &#39;__main__&#39;, &#39;__doc__&#39;: None, &#39;__package__&#39;: None, &#39;__loader__&#39;: # &lt;_frozen_importlib_external.SourceFileLoader object at 0x0000026F8D566080&gt;, # &#39;__spec__&#39;: None, &#39;__annotations__&#39;: &#123;&#125;, &#39;__builtins__&#39;: &lt;module &#39;builtins&#39; # (built-in)&gt;, &#39;__file__&#39;: &#39;D:/pycharm/练习/week03/new14.py&#39;, &#39;__cached__&#39;: None,#  &#39;func&#39;: &lt;function func at 0x0000026F8D6B97B8&gt;&#125;# 今天内容很多</code></pre><p>和迭代器生成器相关</p><p>range() 生成数据<br>next() 迭代器向下执行一次, 内部实际使⽤用了__ next__()⽅方法返回迭代器的下一个项目<br>iter() 获取迭代器, 内部实际使用的是__ iter__()⽅方法来获取迭代器</p><pre><code>for i in range(15,-1,-5):    print(i)# 15# 10# 5# 0lst = [1,2,3,4,5]it = iter(lst)  #  __iter__()获得迭代器print(it.__next__())  #1print(next(it)) #2  __next__()  print(next(it))  #3print(next(it))  #4</code></pre><p>字符串类型代码的执行</p><p>eval() 执行字符串类型的代码. 并返回最终结果<br>exec() 执行字符串类型的代码<br>compile() 将字符串类型的代码编码. 代码对象能够通过exec语句来执行或者eval()进行求值</p><pre><code>s1 = input(&quot;请输入a+b:&quot;)  #输入:8+9print(eval(s1))  # 17 可以动态的执行代码. 代码必须有返回值s2 = &quot;for i in range(5): print(i)&quot;a = exec(s2) # exec 执行代码不返回任何内容# 0# 1# 2# 3# 4print(a)  #None# 动态执行代码exec(&quot;&quot;&quot;def func():    print(&quot; 我是周杰伦&quot;)&quot;&quot;&quot; )func()  #我是周杰伦code1 = &quot;for i in range(3): print(i)&quot;com = compile(code1, &quot;&quot;, mode=&quot;exec&quot;)   # compile并不会执行你的代码.只是编译exec(com)   # 执行编译的结果# 0# 1# 2code2 = &quot;5+6+7&quot;com2 = compile(code2, &quot;&quot;, mode=&quot;eval&quot;)print(eval(com2))  # 18code3 = &quot;name = input(&#39;请输入你的名字:&#39;)&quot;  #输入:hellocom3 = compile(code3, &quot;&quot;, mode=&quot;single&quot;)exec(com3)print(name)  #hello</code></pre><p>输入输出</p><p>print() : 打印输出<br>input() : 获取用户输出的内容</p><pre><code>print(&quot;hello&quot;, &quot;world&quot;, sep=&quot;*&quot;, end=&quot;@&quot;) # sep:打印出的内容用什么连接,end:以什么为结尾#hello*world@</code></pre><p>内存相关</p><p>hash() : 获取到对象的哈希值(int, str, bool, tuple). hash算法:(1) 目的是唯一性 (2) dict 查找效率非常高, hash表.用空间换的时间 比较耗费内存</p><pre><code>s = &#39;alex&#39;print(hash(s))  #-168324845050430382lst = [1, 2, 3, 4, 5]print(hash(lst))  #报错,列表是不可哈希的  id() :  获取到对象的内存地址s = &#39;alex&#39;print(id(s))  #2278345368944</code></pre><p>文件操作相关</p><p>open() : 用于打开一个文件, 创建一个文件句柄</p><pre><code>f = open(&#39;file&#39;,mode=&#39;r&#39;,encoding=&#39;utf-8&#39;)f.read()f.close()</code></pre><p>模块相关</p><p>__ import__() : 用于动态加载类和函数</p><pre><code># 让用户输入一个要导入的模块import osname = input(&quot;请输入你要导入的模块:&quot;)__import__(name)    # 可以动态导入模块</code></pre><p>帮 助</p><p>help() : 函数用于查看函数或模块用途的详细说明</p><pre><code>print(help(str))  #查看字符串的用途</code></pre><p>调用相关</p><p>callable() : 用于检查一个对象是否是可调用的. 如果返回True, object有可能调用失败, 但如果返回False. 那调用绝对不会成功</p><pre><code>a = 10print(callable(a))  #False  变量a不能被调用#def f():    print(&quot;hello&quot;)    print(callable(f))   # True 函数是可以被调用的</code></pre><p>查看内置属性</p><p>dir() : 查看对象的内置属性, 访问的是对象中的<strong>dir</strong>()方法</p><pre><code>print(dir(tuple))  #查看元组的方法</code></pre><p><a href="https://mp.weixin.qq.com/s/RE07ReitUyQDwG2yYcugPQ">68个python内置函数详解!!!</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;68个python内置函数详解&quot;&gt;&lt;a href=&quot;#68个python内置函数详解&quot; class=&quot;headerlink&quot; title=&quot;68个python内置函数详解&quot;&gt;&lt;/a&gt;68个python内置函数详解&lt;/h1&gt;&lt;p&gt;内置函数就是Python给你提供的，拿来直接用的函数，比如print.，input等。&lt;br&gt;截止到python版本3.6.2 ，python一共提供了68个内置函数，具体如下👇&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;abs()           dict()        help()         min()         setattr()
all()           dir()         hex()          next()        slice() 
any()           divmod()      id()           object()      sorted() 
ascii()         enumerate()   input()        oct()         staticmethod() 
bin()           eval()        int()          open()        str() 
bool()          exec()        isinstance()   ord()         sum() 
bytearray()     ﬁlter()       issubclass()   pow()         super() 
bytes()         ﬂoat()        iter()         print()       tuple() 
callable()      format()      len()          property()    type() 
chr()           frozenset()   list()         range()       vars() 
classmethod()   getattr()     locals()       repr()        zip() 
compile()       globals()     map()          reversed()    __import__() 
complex()       hasattr()     max()          round() 
delattr()       hash()        memoryview()   set()
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="基础" scheme="http://example.com/categories/python/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="内置函数" scheme="http://example.com/tags/%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>python | 50条有趣的python一行代码</title>
    <link href="http://example.com/2021/10/16/50%E6%9D%A1%E6%9C%89%E8%B6%A3%E7%9A%84python%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81/"/>
    <id>http://example.com/2021/10/16/50%E6%9D%A1%E6%9C%89%E8%B6%A3%E7%9A%84python%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81/</id>
    <published>2021-10-16T08:26:03.000Z</published>
    <updated>2021-10-16T08:34:35.942Z</updated>
    
    <content type="html"><![CDATA[<h1 id="50条有趣的python一行代码！"><a href="#50条有趣的python一行代码！" class="headerlink" title="50条有趣的python一行代码！"></a>50条有趣的python一行代码！</h1><p><a href="https://mp.weixin.qq.com/s/LVEPw7QAPqfLvi151aproQ">50条有趣的python一行代码！</a></p><span id="more"></span><p>1.字母异位词</p><pre><code>from collections import Counter# Counter: Elements are stored as dictionary keys and their counts are stored as dictionary values.s1 = &#39;below&#39;s2 = &#39;elbow&#39;print(Counter(s1)) # Counter(&#123;&#39;b&#39;: 1, &#39;e&#39;: 1, &#39;l&#39;: 1, &#39;o&#39;: 1, &#39;w&#39;: 1&#125;)print(&#39;anagram&#39;) if Counter(s1) == Counter(s2) else print(&#39;not an anagram&#39;)</code></pre><p>2.二进制转十进制</p><pre><code>decimal = int(&quot;1010&quot;, 2)print(decimal)</code></pre><p>3.将字符串转换为小写</p><pre><code>print(&quot;Hi my name is XiaoF&quot;.lower())# &#39;hi my name is xiaof&#39;print(&quot;Hi my name is XiaoF&quot;.casefold())# &#39;hi my name is xiaof&#39;</code></pre><p>4.将字符串转换为大写</p><pre><code>print(&quot;hi my name is XiaoF&quot;.upper())# &#39;HI MY NAME IS XIAOF&#39;</code></pre><p>5.将字符串转换为字节</p><pre><code>print(&quot;convert string to bytes using encode method&quot;.encode())print(type(&quot;convert string to bytes using encode method&quot;.encode()))b&#39;convert string to bytes using encode method&#39;</code></pre><p>6.拷贝文件</p><pre><code>import shutilshutil.copyfile(&#39;source.txt&#39;, &#39;dest.txt&#39;)</code></pre><p>7.快速排序</p><pre><code>qsort = lambda l: l if len(l) &lt;= 1 else qsort([x for x in l[1:] if x &lt; l[0]]) + [l[0]] + qsort([x for x in l[1:] if x &gt;= l[0]])print(qsort([1]))print(qsort([17, 29, 11, 97, 103, 5]))</code></pre><p>8.n个连续数的和</p><pre><code>n = 10print(sum(range(0, n+1)))# 55</code></pre><p>9.交换两个变量的值</p><pre><code>a = 1b = 2print(a, b)a,b = b,aprint(a, b)</code></pre><p>10.斐波纳契数列</p><pre><code>fib = lambda x: x if x&lt;=1 else fib(x-1) + fib(x-2)def fib(x):    if x &lt;= 1:        return x    else:        return fib(x-1) + fib(x-2)print(fib(20))# 6765</code></pre><p>11.将嵌套列表合并为一个列表</p><pre><code>main_list = [[0, 1, 2], [11, 12, 13], [52, 53, 54]]result = [item for sublist in main_list for item in sublist]print(result)# [0, 1, 2, 11, 12, 13, 52, 53, 54]</code></pre><p>12.运行一个HTTP服务器</p><pre><code>python3 -m http.server 8000python2 -m SimpleHTTPServer</code></pre><p>13.反转列表</p><pre><code>numbers = [0, 1, 2, 11, 12, 13, 52, 53, 54]print(numbers[::-1])# [54, 53, 52, 13, 12, 11, 2, 1, 0]</code></pre><p>14.阶乘</p><pre><code>import mathfact_5 = math.factorial(5)print(fact_5)# 120</code></pre><p>15.在列表推导式中使用for和if</p><pre><code>even_list = [number for number in [1, 2, 3, 4] if number % 2 == 0]print(even_list)# [2, 4]</code></pre><p>16.列表中最长的字符串</p><pre><code>words = [&#39;This&#39;, &#39;is&#39;, &#39;a&#39;, &#39;list&#39;, &#39;of&#39;, &#39;words&#39;]result = max(words, key=len)print(result)# &#39;words&#39;</code></pre><p>17.列表推导式</p><pre><code>li = [num for num in range(0, 10)]print(li)# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</code></pre><p>18.集合推导式</p><pre><code>num_set = &#123;num for num in range(0, 10)&#125;print(num_set)# &#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&#125;</code></pre><p>19.字典推导式</p><pre><code>dict_numbers = &#123;x: x*x for x in range(1, 5)&#125;print(dict_numbers)# &#123;1: 1, 2: 4, 3: 9, 4: 16&#125;</code></pre><p>20.if-else</p><pre><code>print(&quot;even&quot;) if 4 % 2==0 else print(&quot;odd&quot;)</code></pre><p>21.无限循环</p><pre><code>while 1:0</code></pre><p>22.检查数据类型</p><pre><code>print(isinstance(2, int))# Trueprint(isinstance(&quot;allwin&quot;, str))# Trueprint(isinstance([3, 4, 1997], list))# True</code></pre><p>23.While循环</p><pre><code>a = 5while a &gt; 0:    a = a - 1print(a)# 0</code></pre><p>24.使用print语句写入文件</p><pre><code>print(&quot;Hello, World!&quot;, file=open(&#39;file.txt&#39;, &#39;w&#39;))# 既可打印出信息，还能将信息保存文件。</code></pre><p>25.计算一个字符在字符串中出现的频率</p><pre><code>print(&quot;umbrella&quot;.count(&#39;l&#39;))# 2</code></pre><p>26.合并列表</p><pre><code>list1 = [1, 2, 4]list2 = [&#39;XiaoF&#39;]list1.extend(list2)print(list1)# [1, 2, 4, &#39;XiaoF&#39;]</code></pre><p>27.合并字典</p><pre><code>dict1 = &#123;&#39;name&#39;: &#39;weiwei&#39;, &#39;age&#39;: 23&#125;dict2 = &#123;&#39;city&#39;: &#39;Beijing&#39;&#125;dict1.update(dict2)print(dict1)# &#123;&#39;name&#39;: &#39;weiwei&#39;, &#39;age&#39;: 23, &#39;city&#39;: &#39;Beijing&#39;&#125;</code></pre><p>28.合并集合</p><pre><code>set1 = &#123;0, 1, 2&#125;set2 = &#123;11, 12, 13&#125;set1.update(set2)print(set1)# &#123;0, 1, 2, 11, 12, 13&#125;</code></pre><p>29.时间戳</p><pre><code>import timeprint(time.time())</code></pre><p>30.列表中出现次数最多的元素</p><pre><code>test_list = [9, 4, 5, 4, 4, 5, 9, 5, 4]most_frequent_element = max(set(test_list), key=test_list.count)print(most_frequent_element)# 4</code></pre><p>31.嵌套列表</p><pre><code>numbers = [[num] for num in range(10)]print(numbers)# [[0], [1], [2], [3], [4], [5], [6], [7], [8], [9]]</code></pre><p>32.八进制转十进制</p><pre><code>print(int(&#39;30&#39;, 8))# 24</code></pre><p>33.将键值对转换为字典</p><pre><code>result = dict(name=&#39;XiaoF&#39;, age=23)print(result)# &#123;&#39;name&#39;: &#39;XiaoF&#39;, &#39;age&#39;: 23&#125;</code></pre><p>34.求商和余数</p><pre><code>quotient, remainder = divmod(4, 5)print(quotient, remainder)# 0 4# divmod()函数返回当参数1除以参数2时，包含商和余数的元组。</code></pre><p>35.删除列表中的重复项</p><pre><code>print(list(set([4, 4, 5, 5, 6])))# [4, 5, 6]</code></pre><p>36.按升序排序列表</p><pre><code>print(sorted([5, 2, 9, 1]))# [1, 2, 5, 9]</code></pre><p>37.按降序排序列表</p><pre><code>print(sorted([5, 2, 9, 1], reverse=True))# [9, 5, 2, 1]</code></pre><p>38.获取小写字母表</p><pre><code>import stringprint(string.ascii_lowercase)print(type(string.ascii_lowercase))# abcdefghijklmnopqrstuvwxyz</code></pre><p>39.获取大写字母表</p><pre><code>import stringprint(string.ascii_uppercase)# ABCDEFGHIJKLMNOPQRSTUVWXYZ</code></pre><p>40.获取0到9字符串</p><pre><code>import stringprint(string.digits)# 0123456789</code></pre><p>41.十六进制转十进制</p><pre><code>print(int(&#39;da9&#39;, 16))# 3497</code></pre><p>42.日期时间</p><pre><code>import timeprint(time.ctime())# Thu Aug 13 20:00:00 2021</code></pre><p>43.将列表中的字符串转换为整数</p><pre><code>print(list(map(int, [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;])))# [1, 2, 3]</code></pre><p>44.用键对字典进行排序</p><pre><code>d = &#123;&#39;one&#39;: 1, &#39;four&#39;: 4, &#39;eight&#39;: 8&#125;result = &#123;key: d[key] for key in sorted(d.keys())&#125;print(result)# &#123;&#39;eight&#39;: 8, &#39;four&#39;: 4, &#39;one&#39;: 1&#125;</code></pre><p>45.用键值对字典进行排序</p><pre><code>x = &#123;1: 2, 3: 4, 4: 3, 2: 1, 0: 0&#125;result = &#123;k: v for k, v in sorted(x.items(), key=lambda item: item[0])&#125;print(result)# &#123;0: 0, 2: 1, 1: 2, 4: 3, 3: 4&#125;</code></pre><p>46.列表旋转</p><pre><code>li = [1, 2, 3, 4, 5]# li[n:] + li[:n], 右变左print(li[2:] + li[:2])# [3, 4, 5, 1, 2]# li[-n:] + li[:-n], 左变右print(li[-1:] + li[:-1])# [5, 1, 2, 3, 4]</code></pre><p>47.将字符串中的数字移除</p><pre><code>message = &#39;&#39;.join(list(filter(lambda x: x.isalpha(), &#39;abc123def4fg56vcg2&#39;)))print(message)# abcdeffgvcg</code></pre><p>48.矩阵变换</p><pre><code>old_list = [[1, 2, 3], [3, 4, 6], [5, 6, 7]]result = list(list(x) for x in zip(*old_list))print(result)# [[1, 3, 5], [2, 4, 6], [3, 6, 7]]</code></pre><p>49.列表过滤</p><pre><code>result = list(filter(lambda x: x % 2 == 0, [1, 2, 3, 4, 5, 6]))print(result)# [2, 4, 6]</code></pre><p>50.解包</p><pre><code>a, *b, c = [1, 2, 3, 4, 5]print(a)  # 1print(b)  # [2, 3, 4]print(c)  # 5</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;50条有趣的python一行代码！&quot;&gt;&lt;a href=&quot;#50条有趣的python一行代码！&quot; class=&quot;headerlink&quot; title=&quot;50条有趣的python一行代码！&quot;&gt;&lt;/a&gt;50条有趣的python一行代码！&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/LVEPw7QAPqfLvi151aproQ&quot;&gt;50条有趣的python一行代码！&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="基础" scheme="http://example.com/categories/python/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>OS | 什么是操作系统</title>
    <link href="http://example.com/2021/10/14/%E4%BB%80%E4%B9%88%E6%98%AF%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2021/10/14/%E4%BB%80%E4%B9%88%E6%98%AF%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-10-15T03:10:43.000Z</published>
    <updated>2021-10-15T03:15:21.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是操作系统"><a href="#什么是操作系统" class="headerlink" title="什么是操作系统?"></a>什么是操作系统?</h1><p>“操作系统（operating system，简称OS）是管理计算机硬件与软件资源的计算机程序,是硬件软件之间的一座桥梁。</p><p><img src="/2021/10/14/%E4%BB%80%E4%B9%88%E6%98%AF%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.JPG"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是操作系统&quot;&gt;&lt;a href=&quot;#什么是操作系统&quot; class=&quot;headerlink&quot; title=&quot;什么是操作系统?&quot;&gt;&lt;/a&gt;什么是操作系统?&lt;/h1&gt;&lt;p&gt;“操作系统（operating system，简称OS）是管理计算机硬件与软件资源的计算机程序,</summary>
      
    
    
    
    <category term="OS" scheme="http://example.com/categories/OS/"/>
    
    
    <category term="OS" scheme="http://example.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Chicken Soup for the Soul | 生活没有想象的那么糟</title>
    <link href="http://example.com/2021/10/14/%E7%94%9F%E6%B4%BB%E6%B2%A1%E6%9C%89%E6%83%B3%E8%B1%A1%E7%9A%84%E9%82%A3%E4%B9%88%E7%B3%9F/"/>
    <id>http://example.com/2021/10/14/%E7%94%9F%E6%B4%BB%E6%B2%A1%E6%9C%89%E6%83%B3%E8%B1%A1%E7%9A%84%E9%82%A3%E4%B9%88%E7%B3%9F/</id>
    <published>2021-10-14T12:42:51.000Z</published>
    <updated>2021-10-14T12:46:03.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生活没有想象的那么糟"><a href="#生活没有想象的那么糟" class="headerlink" title="生活没有想象的那么糟"></a>生活没有想象的那么糟</h1><p>生活可能不像你想象的那么好，但是也不会像你想象的那么糟，人的脆弱和坚强，都超乎了自己的想象，有时候，可能脆弱的一句话就泪流满面，有时候你发现你自己咬着牙，已经走过很长的路。</p><p>2021/10/14</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;生活没有想象的那么糟&quot;&gt;&lt;a href=&quot;#生活没有想象的那么糟&quot; class=&quot;headerlink&quot; title=&quot;生活没有想象的那么糟&quot;&gt;&lt;/a&gt;生活没有想象的那么糟&lt;/h1&gt;&lt;p&gt;生活可能不像你想象的那么好，但是也不会像你想象的那么糟，人的脆弱和坚强，都超</summary>
      
    
    
    
    <category term="Chicken Soup for the Soul" scheme="http://example.com/categories/Chicken-Soup-for-the-Soul/"/>
    
    
    <category term="Chicken Soup for the Soul" scheme="http://example.com/tags/Chicken-Soup-for-the-Soul/"/>
    
  </entry>
  
  <entry>
    <title>MySQL | MySQL常见的表操作语句</title>
    <link href="http://example.com/2021/10/14/MySQL%E5%B8%B8%E8%A7%81%E7%9A%84%E8%A1%A8%E6%93%8D%E4%BD%9C%E8%AF%AD%E5%8F%A5/"/>
    <id>http://example.com/2021/10/14/MySQL%E5%B8%B8%E8%A7%81%E7%9A%84%E8%A1%A8%E6%93%8D%E4%BD%9C%E8%AF%AD%E5%8F%A5/</id>
    <published>2021-10-14T12:13:09.000Z</published>
    <updated>2021-10-16T12:26:39.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL常见的表操作语句"><a href="#MySQL常见的表操作语句" class="headerlink" title="MySQL常见的表操作语句"></a>MySQL常见的表操作语句</h1><p>1.表的创建</p><pre><code>create table table_name(id int auto_increment primary key not null,name varchar(11) not null);</code></pre><p>2.增加记录</p><pre><code>insert into table_name values()insert into table_name values(),(),()insert into table_name() values()insert into table_name() values(),(),()</code></pre><p>3.修改记录</p><pre><code>update table_name set attr=val where...</code></pre><p>4.删除记录</p><pre><code>delete from table_name where...</code></pre><p>5.表查询</p><pre><code>条件：select * from table_name where...聚合：select count(*)|min()|max()|avg() from table_name分组：select gender,count(*) from table_name group by gender having....排序：select * from table_name order by...分页：select * from table_name limit start,count</code></pre><p>连接查询：<a href="https://blog.csdn.net/zjt980452483/article/details/82945663">点击此处，查看更多关于连接查询！！！</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL常见的表操作语句&quot;&gt;&lt;a href=&quot;#MySQL常见的表操作语句&quot; class=&quot;headerlink&quot; title=&quot;MySQL常见的表操作语句&quot;&gt;&lt;/a&gt;MySQL常见的表操作语句&lt;/h1&gt;&lt;p&gt;1.表的创建&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;crea</summary>
      
    
    
    
    <category term="MySQL" scheme="http://example.com/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Chicken Soup for the Soul | 罗曼罗兰英雄主义</title>
    <link href="http://example.com/2021/10/12/%E7%BD%97%E6%9B%BC%E7%BD%97%E5%85%B0%E8%8B%B1%E9%9B%84%E4%B8%BB%E4%B9%89/"/>
    <id>http://example.com/2021/10/12/%E7%BD%97%E6%9B%BC%E7%BD%97%E5%85%B0%E8%8B%B1%E9%9B%84%E4%B8%BB%E4%B9%89/</id>
    <published>2021-10-13T04:09:41.000Z</published>
    <updated>2021-10-13T04:14:21.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chicken-Soup"><a href="#Chicken-Soup" class="headerlink" title="Chicken Soup"></a>Chicken Soup</h1><p>人生当中成功只是一时的，失败却是主旋律，但是如何面对失败，却把人分成了不同的样子，有的人会被失败击垮，有的人能够不断地爬起来继续向前，我想真正的成熟，并不是追求完美，而是直面自己的缺憾，这才是生活的本质。罗曼罗兰说过：这个世上只有一种真正的英雄注意，那就是认清生活的真相，并且依然热爱它。</p><p>2021/10/13</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Chicken-Soup&quot;&gt;&lt;a href=&quot;#Chicken-Soup&quot; class=&quot;headerlink&quot; title=&quot;Chicken Soup&quot;&gt;&lt;/a&gt;Chicken Soup&lt;/h1&gt;&lt;p&gt;人生当中成功只是一时的，失败却是主旋律，但是如何面对失败，却</summary>
      
    
    
    
    <category term="Chicken Soup for the Soul" scheme="http://example.com/categories/Chicken-Soup-for-the-Soul/"/>
    
    
    <category term="Chicken Soup for the Soul" scheme="http://example.com/tags/Chicken-Soup-for-the-Soul/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib | 绘制几个模型某性能指标在某个范围内的大小比较图</title>
    <link href="http://example.com/2021/10/12/%E7%BB%98%E5%88%B6%E5%87%A0%E4%B8%AA%E6%A8%A1%E5%9E%8B%E6%9F%90%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87%E5%9C%A8%E6%9F%90%E4%B8%AA%E8%8C%83%E5%9B%B4%E5%86%85%E7%9A%84%E5%A4%A7%E5%B0%8F%E6%AF%94%E8%BE%83%E5%9B%BE/"/>
    <id>http://example.com/2021/10/12/%E7%BB%98%E5%88%B6%E5%87%A0%E4%B8%AA%E6%A8%A1%E5%9E%8B%E6%9F%90%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87%E5%9C%A8%E6%9F%90%E4%B8%AA%E8%8C%83%E5%9B%B4%E5%86%85%E7%9A%84%E5%A4%A7%E5%B0%8F%E6%AF%94%E8%BE%83%E5%9B%BE/</id>
    <published>2021-10-12T09:22:18.000Z</published>
    <updated>2021-10-12T09:37:33.057Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绘制几个模型某性能指标在某个范围内的大小比较图"><a href="#绘制几个模型某性能指标在某个范围内的大小比较图" class="headerlink" title="绘制几个模型某性能指标在某个范围内的大小比较图"></a>绘制几个模型某性能指标在某个范围内的大小比较图</h1><p>我们在做深度学习实验时，很多时候会需要对几个模型的性能进行对比并进行可视化，从而清楚地展示模型性能的大小关系。</p><span id="more"></span><p>下面以几个模型的精确度大小比较为例：</p><p><strong>代码：</strong></p><pre><code>import matplotlib.pyplot as pltCNNLSTM_valence_acc = [0.6885742, 0.690625, 0.69453126, 0.69277346, 0.69003904, 0.6965332, 0.6917969, 0.68652344, 0.6916992, 0.69140625, 0.6933594, 0.6972656, 0.69277346, 0.6941406, 0.69501954, 0.69257814, 0.6929687, 0.69208986, 0.6905273, 0.6930664, 0.69384766, 0.6856445, 0.6958984, 0.6929687, 0.693457, 0.69501954, 0.6893555, 0.7, 0.6904297, 0.69628906, 0.6921875, 0.6910156, 0.6988281, 0.69492185, 0.69541013, 0.69443357, 0.69257814, 0.6955078, 0.6942383, 0.69628906, 0.6933594, 0.6976563, 0.69267577, 0.6948242, 0.69277346, 0.6964844, 0.6923828, 0.6959961, 0.6993164, 0.6935547]CNN3Conv_valence_acc = [0.53, 0.57, 0.52, 0.55, 0.57, 0.53, 0.54, 0.55, 0.5, 0.49, 0.53, 0.45, 0.55, 0.56, 0.54, 0.49, 0.54, 0.55, 0.57, 0.52, 0.49, 0.54, 0.5, 0.49, 0.56, 0.52, 0.52, 0.55, 0.55, 0.57, 0.5, 0.5, 0.52, 0.55, 0.54, 0.57, 0.53, 0.55, 0.51, 0.54, 0.54, 0.53, 0.56, 0.52, 0.53, 0.53, 0.54, 0.53, 0.5, 0.54]CNN5Conv_valence_acc = [0.69, 0.6699999999999999, 0.6799999999999999, 0.66, 0.54, 0.57, 0.6699999999999999, 0.6699999999999999, 0.61, 0.61, 0.63, 0.62, 0.63, 0.62, 0.6699999999999999, 0.62, 0.66, 0.6699999999999999, 0.62, 0.58, 0.61, 0.66, 0.61, 0.65, 0.63, 0.62, 0.62, 0.59, 0.62, 0.63, 0.62, 0.63, 0.62, 0.62, 0.63, 0.61, 0.62, 0.62, 0.6699999999999999, 0.63, 0.64, 0.64, 0.65, 0.6699999999999999, 0.62, 0.69, 0.58, 0.59, 0.63, 0.61]print(len(CNNLSTM_valence_acc))print(len(CNN3Conv_valence_acc))print(len(CNN5Conv_valence_acc))x = range(len(CNN5Conv_valence_acc))plt.plot(x, CNNLSTM_valence_acc, label=u&#39;CNN-LSTM&#39;)plt.plot(x, CNN3Conv_valence_acc, label=u&#39;CNN3Conv&#39;)plt.plot(x, CNN5Conv_valence_acc, label=u&#39;CNN5Conv&#39;)plt.legend()plt.xlabel(u&quot;epoch&quot;)plt.ylabel(u&quot;accuracy&quot;)plt.show()</code></pre><p><strong>效果图：</strong><br><img src="/2021/10/12/%E7%BB%98%E5%88%B6%E5%87%A0%E4%B8%AA%E6%A8%A1%E5%9E%8B%E6%9F%90%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87%E5%9C%A8%E6%9F%90%E4%B8%AA%E8%8C%83%E5%9B%B4%E5%86%85%E7%9A%84%E5%A4%A7%E5%B0%8F%E6%AF%94%E8%BE%83%E5%9B%BE/myplot.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;绘制几个模型某性能指标在某个范围内的大小比较图&quot;&gt;&lt;a href=&quot;#绘制几个模型某性能指标在某个范围内的大小比较图&quot; class=&quot;headerlink&quot; title=&quot;绘制几个模型某性能指标在某个范围内的大小比较图&quot;&gt;&lt;/a&gt;绘制几个模型某性能指标在某个范围内的大小比较图&lt;/h1&gt;&lt;p&gt;我们在做深度学习实验时，很多时候会需要对几个模型的性能进行对比并进行可视化，从而清楚地展示模型性能的大小关系。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="第三方库" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="matplotlib" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/matplotlib/"/>
    
    
    <category term="matplotlib" scheme="http://example.com/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib | recorded EEG visualization</title>
    <link href="http://example.com/2021/10/12/recorded-EEG-visualization/"/>
    <id>http://example.com/2021/10/12/recorded-EEG-visualization/</id>
    <published>2021-10-12T09:00:42.000Z</published>
    <updated>2021-10-12T09:13:28.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="recorded-EEG-visualization"><a href="#recorded-EEG-visualization" class="headerlink" title="recorded EEG visualization"></a>recorded EEG visualization</h1><p>在做脑电（EEG）的相关研究时,通常我们需要使用公开的脑电数据集合，公开数据集包含了以及采集好的脑电数据。<br>我们可以使用python的第三方库matplotlib将数据集中的脑电数据进行可视化。</p><span id="more"></span><p>下面以绘制8个通道的脑电数据为例对脑电数据进行可视化：<br>注意：实例中使用公开数据集DEAP,详细信息可参考<a href="http://www.eecs.qmul.ac.uk/mmv/datasets/deap/">DEAP 官网</a></p><p><strong>示例代码：</strong></p><pre><code>import osimport globimport pickleimport matplotlib.pyplot as plt# 参数设置window_size = 1sampling_rate = 500# 获取数据文件列表并划分(训练文件/测试文件)data_dir = &quot;data_preprocessed_python/&quot;file_list = glob.glob(os.path.join(data_dir, &quot;*&quot;))  # 整个数据集包含32个subject的样本数据print(&quot;len(file_list):&quot;, len(file_list))def get_data_and_label(file_list):    &quot;&quot;&quot;    获得固定窗口大小的数据和对应的标签    Arrray name         Array shape         Array contents    ---------------------------------------------------------------------------------------------    data                40 x 40 x 8064      video/trial x channel x data    labels              40 x 4              videl/trial x label(valence,arousal,dominance,liking)    ---------------------------------------------------------------------------------------------    &quot;&quot;&quot;    data = []    valence_labels = []    arousal_labels = []    for file in file_list:        x = pickle.load(open(file, &#39;rb&#39;), encoding=&#39;latin1&#39;)  # type(x):dict &#123;&#39;labels&#39;:array(),&#39;data&#39;:array()&#125;        labels = x[&#39;labels&#39;]        valence_labels.extend(labels[:, 0])        arousal_labels.extend(labels[:, 1])        dat = x[&#39;data&#39;]        data.extend(dat[:, :, :window_size * sampling_rate])    return dataprint(&quot;开始获取脑电波数据...&quot;)data = get_data_and_label(file_list)print(&quot;脑电波数据已获取，开始绘制脑电波...&quot;)x = range(sampling_rate)fig, ax = plt.subplots(3, 3)ax[0][0].plot(x, list(data[0][0]))ax[0][0].set_title(&#39;Fp1&#39;)ax[0][1].plot(x, list(data[0][1]))ax[0][1].set_title(&#39;AF3&#39;)ax[0][2].plot(x, list(data[0][2]))ax[0][2].set_title(&#39;F3&#39;)ax[1][0].plot(x, list(data[0][3]))ax[1][0].set_title(&#39;F7&#39;)ax[1][1].plot(x, list(data[0][4]))ax[1][1].set_title(&#39;FC5&#39;)ax[1][2].plot(x, list(data[0][5]))ax[1][2].set_title(&#39;FC1&#39;)ax[2][0].plot(x, list(data[0][6]))ax[2][0].set_title(&#39;C3&#39;)ax[2][1].plot(x, list(data[0][7]))ax[2][1].set_title(&#39;T7&#39;)ax[2][2].plot(x, list(data[0][8]))ax[2][2].set_title(&#39;CP5&#39;)plt.show()print(&quot;脑电波绘制完成！&quot;)</code></pre><p><strong>绘制的脑电波：</strong></p><p><img src="/2021/10/12/recorded-EEG-visualization/500_brainwave.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;recorded-EEG-visualization&quot;&gt;&lt;a href=&quot;#recorded-EEG-visualization&quot; class=&quot;headerlink&quot; title=&quot;recorded EEG visualization&quot;&gt;&lt;/a&gt;recorded EEG visualization&lt;/h1&gt;&lt;p&gt;在做脑电（EEG）的相关研究时,通常我们需要使用公开的脑电数据集合，公开数据集包含了以及采集好的脑电数据。&lt;br&gt;我们可以使用python的第三方库matplotlib将数据集中的脑电数据进行可视化。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="第三方库" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="matplotlib" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/matplotlib/"/>
    
    
    <category term="matplotlib" scheme="http://example.com/tags/matplotlib/"/>
    
  </entry>
  
</feed>
