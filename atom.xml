<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Victory&#39;s Blog</title>
  
  <subtitle>非淡泊无以明志，非宁静无以致远</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-03-22T07:01:45.986Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>victory-liao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式 | 抽象工厂模式</title>
    <link href="http://example.com/2022/03/21/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/03/21/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-03-22T04:20:47.000Z</published>
    <updated>2022-03-22T07:01:45.986Z</updated>
    
    <content type="html"><![CDATA[<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><p>抽象工厂模式(Abstract Factory),提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p><p><a href="https://blog.csdn.net/qq_33732195/article/details/110101808">抽象工厂模式(通俗易懂)</a></p><span id="more"></span><p><strong>案例</strong><br>类图：<br><img src="/2022/03/21/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/1.jpg"></p><pre><code>class Department&#123;    private int id;    private String deptName;        public int getId() &#123;        return id;    &#125;        public void setId(int id) &#123;        this.id = id;    &#125;        public String getDeptName() &#123;        return deptName;    &#125;        public void setDeptName(String deptName) &#123;        this.deptName = deptName;    &#125;&#125;interface IDepartment&#123;    void insert(Department deparment);    Department getDepartment(int id);&#125;//用于访问SQL Server中的Departmentclass SqlserverDepartment implements IDepartment&#123;    @Override    public void insert(Department department) &#123;        System.out.println(&quot;在SQL Server中给Department表增加一条记录&quot;);    &#125;    @Override    public Department getDepartment(int id) &#123;        System.out.println(&quot;在SQL Server中根据ID得到Department表一条记录&quot;);        return null;    &#125;&#125;//用于访问Access的Departmentclass AccessDepartment implements IDepartment&#123;    @Override    public void insert(Department deparment) &#123;        System.out.println(&quot;在Access中给Department表增加一条记录&quot;);    &#125;    @Override    public Department getDepartment(int id) &#123;        System.out.println(&quot;在Access中根据ID得到Department表一条记录&quot;);        return null;    &#125;&#125;class User&#123;    private int id;    private String name;        public int getId() &#123;        return id;    &#125;        public void setId(int id) &#123;        this.id = id;    &#125;        public String getName() &#123;        return name;    &#125;        public void setName(String name) &#123;        this.name = name;    &#125;&#125;interface IUser&#123;    public void insert(User user);    public User getUser(int id);&#125;//用于访问SQL Server中的Userclass SqlserverUser implements IUser&#123;    @Override    public void insert(User user) &#123;        System.out.println(&quot;在SQL Server中给User表增加一条记录&quot;);    &#125;    @Override    public User getUser(int id) &#123;        System.out.println(&quot;在SQL Server中根据ID得到User表一条记录&quot;);        return null;    &#125;&#125;//用于访问Access的Userclass AccessUser implements IUser&#123;    @Override    public void insert(User user) &#123;        System.out.println(&quot;在Access中给User表增加一条记录&quot;);    &#125;    @Override    public User getUser(int id) &#123;        System.out.println(&quot;在Access中根据ID得到User表一条记录&quot;);        return null;    &#125;&#125;//定义创建访问User、Department表对象的抽象的工厂接口interface IFactory1&#123;    IUser createUser();    IDepartment createDepartment();&#125;//实现IFactory1接口，实例化SqlserverUser和SqlserverDepartmentclass SqlserverFactory implements IFactory1&#123;    @Override    public IUser createUser() &#123;        return new SqlserverUser();    &#125;    @Override    public IDepartment createDepartment() &#123;        return new SqlserverDepartment();    &#125;&#125;//实现IFactory1接口，实例化AccessUser和AccessDepartmentclass AccessFactory implements IFactory1&#123;    @Override    public IUser createUser() &#123;        return new AccessUser();    &#125;    @Override    public IDepartment createDepartment() &#123;        return new AccessDepartment();    &#125;&#125;public class AbstractFactory &#123;    public static void main(String[] args) &#123;        User user = new User();        Department dept = new Department();                //只需确定实例化哪一个数据库访问对象给factory        IFactory1 factory = new SqlserverFactory();        //IFactory1 factory = new AccessFactory();                IUser iu = factory.createUser();                iu.insert(user);        iu.getUser(1);                IDepartment id = factory.createDepartment();        id.insert(dept);        id.getDepartment(1);            &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;抽象工厂模式&quot;&gt;&lt;a href=&quot;#抽象工厂模式&quot; class=&quot;headerlink&quot; title=&quot;抽象工厂模式&quot;&gt;&lt;/a&gt;抽象工厂模式&lt;/h1&gt;&lt;p&gt;抽象工厂模式(Abstract Factory),提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_33732195/article/details/110101808&quot;&gt;抽象工厂模式(通俗易懂)&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="抽象工厂模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="抽象工厂模式" scheme="http://example.com/tags/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 | 单例模式</title>
    <link href="http://example.com/2022/03/21/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/03/21/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-03-22T02:10:43.000Z</published>
    <updated>2022-03-22T02:14:41.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>单例模式(Singleton)，保证一个类有一个实例，并提供一个访问它的全局访问点。</p><p>“通常我们可以让一个全局变量使得一个对象被访问，但它不能防止你实例化多个对象。一个最好的办法就是，让类自身保存<br>它的唯一实例。这个类可以保证没有其他实例可以被创建，并且它可以提供一个访问该实例的方法。</p><span id="more"></span><pre><code>class Singleton&#123;    private static Singleton instance;        //构造方法让其private，这就堵死了外界利用new创建此类实例的可能    private Singleton()&#123;            &#125;        //此方法是获得本类实例实例的唯一全局访问点    public static Singleton getInstance()&#123;        //若实例不存在，则new一个新的实例，否则返回已有的实例        if(instance == null)&#123;            instance = new Singleton();        &#125;        return instance;    &#125;&#125;public class SingletonTest &#123;    public static void main(String[] args) &#123;        Singleton instance = Singleton.getInstance();        Singleton instance2 = Singleton.getInstance();        //比较两侧实例化后对象的结果是实例相同        System.out.println(instance.equals(instance2));//true    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h1&gt;&lt;p&gt;单例模式(Singleton)，保证一个类有一个实例，并提供一个访问它的全局访问点。&lt;/p&gt;
&lt;p&gt;“通常我们可以让一个全局变量使得一个对象被访问，但它不能防止你实例化多个对象。一个最好的办法就是，让类自身保存&lt;br&gt;它的唯一实例。这个类可以保证没有其他实例可以被创建，并且它可以提供一个访问该实例的方法。&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="单例模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="单例模式" scheme="http://example.com/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 | 工厂方法模式</title>
    <link href="http://example.com/2022/03/21/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/03/21/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-03-21T10:11:59.000Z</published>
    <updated>2022-03-22T01:48:06.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><p><strong>why 工厂方法模式？</strong><br>简单工厂模式违背了开放封闭原则（开放了拓展，也开放了修改），如果需要增加功能就需要在工厂类中修改逻辑判断，于是工厂方法模式应运而生。</p><p>工厂方法模式：定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法是一个类的实例化延迟到子类。</p><span id="more"></span><p><strong>案例</strong><br>类图：<br><img src="/2022/03/21/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/2.jpg"></p><pre><code>class Operation&#123;    private double numberA = 0;    private double numberB = 0;    public double getNumberA() &#123;        return numberA;    &#125;    public void setNumberA(double numberA) &#123;        this.numberA = numberA;    &#125;    public double getNumberB() &#123;        return numberB;    &#125;    public void setNumberB(double numberB) &#123;        this.numberB = numberB;    &#125;    public double getResult() throws Exception&#123;        double result = 0;        return result;    &#125;&#125;class Add extends Operation&#123;    public double getResult()    &#123;        double result = 0;        result = getNumberA() + getNumberB();        return result;    &#125;&#125;class Sub extends Operation&#123;    public double getResult()    &#123;        double result = 0;        result = getNumberA() - getNumberB();        return result;    &#125;&#125;class Mul extends Operation&#123;    public double getResult()    &#123;        double result = 0;        result = getNumberA() * getNumberB();        return result;    &#125;&#125;class Div extends Operation&#123;    public double getResult() throws Exception    &#123;        double result = 0;        if (getNumberB() == 0)&#123;            throw new Exception(&quot;除数不能为0&quot;);        &#125;        result = getNumberA() / getNumberB();        return result;    &#125;&#125;//定义一个用于创建对象的接口interface IFactory&#123;    Operation createOperation();&#125;class AddFactory implements IFactory&#123;    @Override    public Operation createOperation() &#123;        return new Add();    &#125;&#125;class SubFactory implements IFactory&#123;    @Override    public Operation createOperation() &#123;        return new Add();    &#125;&#125;class MulFactory implements IFactory&#123;    @Override    public Operation createOperation() &#123;        return new Add();    &#125;&#125;class DivFactory implements IFactory&#123;    @Override    public Operation createOperation() &#123;        return new Add();    &#125;&#125;public class FactoryMethodPatternTest &#123;    public static void main(String[] args) throws Exception &#123;        IFactory operFactory = new AddFactory();        Operation oper = operFactory.createOperation();        oper.setNumberA(1);        oper.setNumberB(2);        double result = oper.getResult();        System.out.println(result);    &#125;&#125;</code></pre><p>在使用工厂方法模式的情况下，如果我们要增加新的功能，比如说现在要增加一个求余操作，我们只需在上面代码的基础上增加两个类，即可实现。</p><pre><code>class Mod extends Operation&#123;    public double getResult()&#123;        double result = 0;        result = getNumberA() % getNumberB();        return result;    &#125;&#125;class ModFactory implements IFactory&#123;    @Override    public Operation createOperation() &#123;        return new Mod();    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;工厂方法模式&quot;&gt;&lt;a href=&quot;#工厂方法模式&quot; class=&quot;headerlink&quot; title=&quot;工厂方法模式&quot;&gt;&lt;/a&gt;工厂方法模式&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;why 工厂方法模式？&lt;/strong&gt;&lt;br&gt;简单工厂模式违背了开放封闭原则（开放了拓展，也开放了修改），如果需要增加功能就需要在工厂类中修改逻辑判断，于是工厂方法模式应运而生。&lt;/p&gt;
&lt;p&gt;工厂方法模式：定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法是一个类的实例化延迟到子类。&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="工厂方法模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="工厂方法模式" scheme="http://example.com/tags/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 | 简单工厂模式</title>
    <link href="http://example.com/2022/03/21/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/03/21/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-03-21T09:57:40.000Z</published>
    <updated>2022-03-22T01:51:35.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><p>工厂：用一个单独的类来完成创造实例的过程。<br><strong>案例</strong><br>类图：<br><img src="/2022/03/21/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/1.jpg"></p><pre><code>class Operation&#123;    private double numberA = 0;    private double numberB = 0;    public double getNumberA() &#123;        return numberA;    &#125;    public void setNumberA(double numberA) &#123;        this.numberA = numberA;    &#125;    public double getNumberB() &#123;        return numberB;    &#125;    public void setNumberB(double numberB) &#123;        this.numberB = numberB;    &#125;    public double getResult() throws Exception&#123;        double result = 0;        return result;    &#125;&#125;class Add extends Operation&#123;    public double getResult()    &#123;        double result = 0;        result = getNumberA() + getNumberB();        return result;    &#125;&#125;class Sub extends Operation&#123;    public double getResult()    &#123;        double result = 0;        result = getNumberA() - getNumberB();        return result;    &#125;&#125;class Mul extends Operation&#123;    public double getResult()    &#123;        double result = 0;        result = getNumberA() * getNumberB();        return result;    &#125;&#125;class Div extends Operation&#123;    public double getResult() throws Exception    &#123;        double result = 0;        if (getNumberB() == 0)&#123;            throw new Exception(&quot;除数不能为0&quot;);        &#125;        result = getNumberA() / getNumberB();        return result;    &#125;&#125;//工厂：用一个单独的类来做这个创造实例的过程class OperationFactory&#123;    public static Operation createOperate(String operate)&#123;        Operation oper = null;                if(operate.equals(&quot;+&quot;))&#123;            oper = new Add();        &#125;else if(operate.equals(&quot;-&quot;))&#123;            oper = new Sub();        &#125;else if(operate.equals(&quot;*&quot;))&#123;            oper = new Mul();        &#125;else if(operate.equals(&quot;/&quot;))&#123;            oper = new Div();        &#125;        return oper;    &#125;&#125;public class SimpleFactoryTest &#123;    public static void main(String[] args) throws Exception &#123;        Operation oper = OperationFactory.createOperate(&quot;+&quot;);        oper.setNumberA(1);        oper.setNumberB(2);        double result = oper.getResult();        System.out.println(result);    &#125;&#125;</code></pre><p>在使用简单工厂模式的情况下，如果我们要增加新的功能，比如说现在要增加一个求余操作，<br>我们需要增加一个用于求余运算的类，然后在OperationFactory中增加对于求余运算的逻辑判断，这样的做法违背了<br>开放封闭原则，即在开放拓展的同时也开放了修改。</p><pre><code>class Mod extends Operation&#123;    public double getResult()&#123;        double result = 0;        result = getNumberA() % getNumberB();        return result;    &#125;&#125;class OperationFactory&#123;    public static Operation createOperate(String operate)&#123;        ......        else if(operate.equals(&quot;%&quot;))&#123;            oper = new Div();        &#125;        ......    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简单工厂模式&quot;&gt;&lt;a href=&quot;#简单工厂模式&quot; class=&quot;headerlink&quot; title=&quot;简单工厂模式&quot;&gt;&lt;/a&gt;简单工厂模式&lt;/h1&gt;&lt;p&gt;工厂：用一个单独的类来完成创造实例的过程。&lt;br&gt;&lt;strong&gt;案例&lt;/strong&gt;&lt;br&gt;类图：&lt;br</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="简单工厂模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="简单工厂模式" scheme="http://example.com/tags/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 | 代理模式</title>
    <link href="http://example.com/2022/03/21/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/03/21/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-03-21T09:55:37.000Z</published>
    <updated>2022-03-21T09:57:24.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p><a href="https://victory-liao.github.io/2022/03/10/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/">动态代理</a><br><a href="https://victory-liao.github.io/2022/03/10/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/">静态代理</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;代理模式&quot;&gt;&lt;a href=&quot;#代理模式&quot; class=&quot;headerlink&quot; title=&quot;代理模式&quot;&gt;&lt;/a&gt;代理模式&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://victory-liao.github.io/2022/03/10/%E5%8A%A8%E</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="代理模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="代理模式" scheme="http://example.com/tags/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="动态代理" scheme="http://example.com/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
    <category term="静态代理" scheme="http://example.com/tags/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | spring和springMVC的整合</title>
    <link href="http://example.com/2022/03/18/spring%E5%92%8CspringMVC%E7%9A%84%E6%95%B4%E5%90%88/"/>
    <id>http://example.com/2022/03/18/spring%E5%92%8CspringMVC%E7%9A%84%E6%95%B4%E5%90%88/</id>
    <published>2022-03-18T12:22:49.000Z</published>
    <updated>2022-03-18T13:22:54.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring和springMVC的整合"><a href="#spring和springMVC的整合" class="headerlink" title="spring和springMVC的整合"></a>spring和springMVC的整合</h1><p>1、不整合：需要将spring所管理的内容都交给springMVC管理，这样会造成业务逻辑混乱<br>2、整合：spring的配置文件什么时候加载？怎么加载？<br>解决办法：监听器，可以在ServletContext加载时，通过监听器加载spring的配置文件，创建spring容器<br>spring提供的监听器：ContextLoaderListener<br>3、bean被创建两次的问题：在springMVC中只扫描控制层，在spring中，通过包含或排除对所扫描的包进行指定<br>4、spring和springMVC的关系<br>spring是父容器<br>springMVC是子容器<br>规定：子容器能够调用父容器的bean，而父容器不能够调用访问子容器中的bean</p><span id="more"></span><p>1.项目目录<br><img src="/2022/03/18/spring%E5%92%8CspringMVC%E7%9A%84%E6%95%B4%E5%90%88/1.PNG"><br>2.web.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&gt;  &lt;display-name&gt;SpringMVC04&lt;/display-name&gt;  &lt;welcome-file-list&gt;    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;  &lt;/welcome-file-list&gt;    &lt;filter&gt;    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;    &lt;init-param&gt;      &lt;param-name&gt;encoding&lt;/param-name&gt;      &lt;param-value&gt;UTF-8&lt;/param-value&gt;    &lt;/init-param&gt;  &lt;/filter&gt;  &lt;filter-mapping&gt;    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  &lt;/filter-mapping&gt;    &lt;servlet&gt;    &lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;    &lt;init-param&gt;      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;      &lt;param-value&gt;classpath:springMVC.xml&lt;/param-value&gt;    &lt;/init-param&gt;    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;  &lt;/servlet&gt;  &lt;servlet-mapping&gt;    &lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;    &lt;url-pattern&gt;/&lt;/url-pattern&gt;  &lt;/servlet-mapping&gt;    &lt;!-- 使用自定义监听器模拟spring、springMVC整合 --&gt;  &lt;!-- &lt;listener&gt;    &lt;listener-class&gt;com.atguigu.listener.SpringListener&lt;/listener-class&gt;  &lt;/listener&gt; --&gt;    &lt;!-- 使用spring提供的监听器模整合spring、springMVC --&gt;  &lt;!-- needed for ContextLoaderListener --&gt;    &lt;context-param&gt;        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;        &lt;param-value&gt;classpath:spring.xml&lt;/param-value&gt;    &lt;/context-param&gt;    &lt;!-- Bootstraps the root web application context before servlet initialization --&gt;    &lt;listener&gt;        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;    &lt;/listener&gt;&lt;/web-app&gt;</code></pre><p>3.spring.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;    &lt;!-- &lt;bean id=&quot;user&quot; class=&quot;com.atguigu.bean.User&quot;&gt;&lt;/bean&gt; --&gt;        &lt;context:component-scan base-package=&quot;com.atguigu&quot;&gt;        &lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;    &lt;/context:component-scan&gt;        &lt;bean id=&quot;teacher&quot; class=&quot;com.atguigu.bean.Teacher&quot;&gt;&lt;/bean&gt;&lt;/beans&gt;</code></pre><p>4.springMVC.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;        &lt;context:component-scan base-package=&quot;com.atguigu.controller&quot;&gt;&lt;/context:component-scan&gt;        &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/view/&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;mvc:default-servlet-handler/&gt;    &lt;mvc:annotation-driven /&gt;        &lt;!--         处理文件，将客户端上传的File文件处理为MultipartFile        注意：文件解析器bean中的id必须设置为multipartResolver     --&gt;    &lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;        &lt;!-- 设置文件解析的编码，注意一定要和页面的pageEncoding保持一致 --&gt;        &lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/property&gt;        &lt;!-- 设置最大上传文件大小 --&gt;        &lt;property name=&quot;maxUploadSize&quot; value=&quot;88888888&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;!-- 异常处理 --&gt;    &lt;bean class=&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;&gt;        &lt;property name=&quot;exceptionMappings&quot;&gt;            &lt;props&gt;                &lt;prop key=&quot;java.lang.NullPointerException&quot;&gt;error&lt;/prop&gt;            &lt;/props&gt;        &lt;/property&gt;    &lt;/bean&gt;        &lt;!-- &lt;mvc:interceptors&gt;        默认拦截所有请求        第一种方式        &lt;bean class=&quot;com.atguigu.interceptor.FirstInterceptor&quot;&gt;&lt;/bean&gt;        &lt;bean class=&quot;com.atguigu.interceptor.SecondInterceptor&quot;&gt;&lt;/bean&gt;                    第二种方式            此方式要求拦截器上必须加注解@Component                &lt;ref bean=&quot;firstInterceptor&quot; /&gt;                设置自定义拦截方式        &lt;mvc:interceptor&gt;            &lt;bean&gt;&lt;/bean&gt;            &lt;mvc:mapping path=&quot;&quot;/&gt;            &lt;mvc:exclude-mapping path=&quot;&quot;/&gt;        &lt;/mvc:interceptor&gt;    &lt;/mvc:interceptors&gt; --&gt;&lt;/beans&gt;</code></pre><p>5.index.jsp</p><pre><code>&lt;a href=&quot;testListener&quot;&gt;测试监听器&lt;/a&gt;</code></pre><p>6.User.java</p><pre><code>package com.atguigu.bean;import org.springframework.stereotype.Component;@Componentpublic class User &#123;    private Integer id;    private String username;    public Integer getId() &#123;        return id;    &#125;    public void setId(Integer id) &#123;        this.id = id;    &#125;    public String getUsername() &#123;        return username;    &#125;    public void setUsername(String username) &#123;        this.username = username;    &#125;    public User() &#123;        System.out.println(&quot;User==&gt;构造方法&quot;);    &#125;&#125;</code></pre><p>7.Teacher.java</p><pre><code>package com.atguigu.bean;public class Teacher &#123;    private Integer id;        private String name;    public Integer getId() &#123;        return id;    &#125;    public void setId(Integer id) &#123;        this.id = id;    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name = name;    &#125;    public Teacher() &#123;        System.out.println(&quot;Teacher==&gt;构造方法&quot;);    &#125;    @Override    public String toString() &#123;        return &quot;Teacher [id=&quot; + id + &quot;, name=&quot; + name + &quot;]&quot;;    &#125;&#125;</code></pre><p>8.SpringListener.java（自定义监听器）</p><pre><code>package com.atguigu.listener;import javax.servlet.ServletContext;import javax.servlet.ServletContextEvent;import javax.servlet.ServletContextListener;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;/** * Application Lifecycle Listener implementation class SpringListener * */public class SpringListener implements ServletContextListener &#123;    /**     * Default constructor.      */    public SpringListener() &#123;        // TODO Auto-generated constructor stub    &#125;    /**     * @see ServletContextListener#contextDestroyed(ServletContextEvent)     */    public void contextDestroyed(ServletContextEvent arg0)  &#123;          // TODO Auto-generated method stub    &#125;    /**     * @see ServletContextListener#contextInitialized(ServletContextEvent)     */    public void contextInitialized(ServletContextEvent sce)  &#123;         ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;spring.xml&quot;);        ServletContext servletContext = sce.getServletContext();        servletContext.setAttribute(&quot;ac&quot;, ac);    &#125;&#125;</code></pre><p>9.TestController.java</p><pre><code>package com.atguigu.controller;import javax.servlet.ServletContext;import javax.servlet.http.HttpSession;import org.springframework.context.ApplicationContext;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import com.atguigu.bean.Teacher;@Controllerpublic class TestController &#123;    @RequestMapping(&quot;/testListener&quot;)    public void testListener(HttpSession session)&#123;        //获取spring所管理的teacher对象        ServletContext servletContext = session.getServletContext();        ApplicationContext ac = (ApplicationContext)servletContext.getAttribute(&quot;ac&quot;);        Teacher teacher = ac.getBean(&quot;teacher&quot;, Teacher.class);        System.out.println(teacher);    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;spring和springMVC的整合&quot;&gt;&lt;a href=&quot;#spring和springMVC的整合&quot; class=&quot;headerlink&quot; title=&quot;spring和springMVC的整合&quot;&gt;&lt;/a&gt;spring和springMVC的整合&lt;/h1&gt;&lt;p&gt;1、不整合：需要将spring所管理的内容都交给springMVC管理，这样会造成业务逻辑混乱&lt;br&gt;2、整合：spring的配置文件什么时候加载？怎么加载？&lt;br&gt;解决办法：监听器，可以在ServletContext加载时，通过监听器加载spring的配置文件，创建spring容器&lt;br&gt;spring提供的监听器：ContextLoaderListener&lt;br&gt;3、bean被创建两次的问题：在springMVC中只扫描控制层，在spring中，通过包含或排除对所扫描的包进行指定&lt;br&gt;4、spring和springMVC的关系&lt;br&gt;spring是父容器&lt;br&gt;springMVC是子容器&lt;br&gt;规定：子容器能够调用父容器的bean，而父容器不能够调用访问子容器中的bean&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="spring和springMVC的整合" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/spring%E5%92%8CspringMVC%E7%9A%84%E6%95%B4%E5%90%88/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | 异常处理</title>
    <link href="http://example.com/2022/03/17/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://example.com/2022/03/17/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2022-03-18T03:48:21.000Z</published>
    <updated>2022-03-18T03:53:34.916Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>1.在SpringMVC配置文件（springMVC.xml）中做以下配置：</p><pre><code>&lt;!-- 异常处理 --&gt;&lt;bean class=&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;&gt;    &lt;property name=&quot;exceptionMappings&quot;&gt;        &lt;props&gt;            &lt;prop key=&quot;java.lang.NullPointerException&quot;&gt;error&lt;/prop&gt;        &lt;/props&gt;    &lt;/property&gt;&lt;/bean&gt;</code></pre><span id="more"></span><p>2.index.jsp</p><pre><code>&lt;a href=&quot;testException&quot;&gt;测试异常&lt;/a&gt;</code></pre><p>3.TestExceptionController.java</p><pre><code>package com.atguigu.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;@Controllerpublic class TestExceptionController &#123;    @RequestMapping(value=&quot;/testException&quot;, method=RequestMethod.GET)    public String testException()&#123;        String s = null;        System.err.println(s.substring(0, 5));        return &quot;success&quot;;    &#125;&#125;</code></pre><p>4.error.jsp</p><pre><code>&lt;a href=&quot;&quot;&gt;操作异常，请稍后重试&lt;/a&gt;$&#123;exception&#125;</code></pre><p>5.运行结果<br><img src="/2022/03/17/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/1.PNG"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;异常处理&quot;&gt;&lt;a href=&quot;#异常处理&quot; class=&quot;headerlink&quot; title=&quot;异常处理&quot;&gt;&lt;/a&gt;异常处理&lt;/h1&gt;&lt;p&gt;1.在SpringMVC配置文件（springMVC.xml）中做以下配置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 异常处理 --&amp;gt;
&amp;lt;bean class=&amp;quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;exceptionMappings&amp;quot;&amp;gt;
        &amp;lt;props&amp;gt;
            &amp;lt;prop key=&amp;quot;java.lang.NullPointerException&amp;quot;&amp;gt;error&amp;lt;/prop&amp;gt;
        &amp;lt;/props&amp;gt;
    &amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="异常处理" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
    <category term="异常处理" scheme="http://example.com/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | 拦截器</title>
    <link href="http://example.com/2022/03/17/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>http://example.com/2022/03/17/%E6%8B%A6%E6%88%AA%E5%99%A8/</id>
    <published>2022-03-18T02:15:04.000Z</published>
    <updated>2022-03-18T02:22:02.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="拦截器-HandlerInterceptor"><a href="#拦截器-HandlerInterceptor" class="headerlink" title="拦截器 HandlerInterceptor"></a>拦截器 HandlerInterceptor</h1><p>1.在SpringMVC配置文件（springMVC.xml）中进行以下配置：</p><pre><code>&lt;mvc:interceptors&gt;    &lt;!-- 默认拦截所有请求 --&gt;    &lt;!-- 第一种方式 --&gt;    &lt;bean class=&quot;com.atguigu.interceptor.FirstInterceptor&quot;&gt;&lt;/bean&gt;    &lt;bean class=&quot;com.atguigu.interceptor.SecondInterceptor&quot;&gt;&lt;/bean&gt;    &lt;!--         第二种方式        此方式要求拦截器上必须加注解@Component     --&gt;    &lt;!-- &lt;ref bean=&quot;firstInterceptor&quot; /&gt; --&gt;        &lt;!-- 设置自定义拦截方式 --&gt;    &lt;!-- &lt;mvc:interceptor&gt;        &lt;bean&gt;&lt;/bean&gt;        &lt;mvc:mapping path=&quot;&quot;/&gt;        &lt;mvc:exclude-mapping path=&quot;&quot;/&gt;    &lt;/mvc:interceptor&gt; --&gt;&lt;/mvc:interceptors&gt;</code></pre><span id="more"></span><p>2.test.jsp</p><pre><code>&lt;a href=&quot;testInterceptor&quot;&gt;测试拦截器&lt;/a&gt;</code></pre><p>3.TestInterceptorController.java(测试类)</p><pre><code>package com.atguigu.test;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;@Controllerpublic class TestInterceptorController &#123;    /**     * 当有多个拦截器时，     * preHandle:按照拦截器数组正向顺序执行     * postHandle:按照拦截器数组反向顺序执行     * afterCompletion:按照拦截器数组反向顺序执行     *      * 当多个拦截器的preHandle有不同的值时     * 第一个返回false，第二个返回false：只有第一个的preHandle会执行     *      * 第一个返回true，第二个返回false：两个（全部）拦截器的preHandle都会执行，     * 但是（全部）postHandle都不会执行，     * 而afterCompletion只有第一个（返回false的拦截器之前的所有afterCompletion）会执行     *      * 第一个返回false，第二个返回true：只有第一个的preHandle会执行     */    @RequestMapping(&quot;/testInterceptor&quot;)    public String testInterceptor()&#123;        //System.out.println(1/0);        return &quot;success&quot;;    &#125;&#125;</code></pre><p>4.FirstInterceptor.java</p><pre><code>package com.atguigu.interceptor;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.springframework.stereotype.Component;import org.springframework.web.servlet.HandlerInterceptor;import org.springframework.web.servlet.ModelAndView;@Componentpublic class FirstInterceptor implements HandlerInterceptor&#123;    @Override    public void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)            throws Exception &#123;        System.out.println(&quot;First:afterCompletion&quot;);    &#125;    @Override    public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)            throws Exception &#123;        System.out.println(&quot;First:posthandle&quot;);    &#125;    @Override    public boolean preHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2) throws Exception &#123;        System.out.println(&quot;First:preHandle&quot;);        return true;//true:放行 false:拦截    &#125;&#125;</code></pre><p>5.SecondInterceptor.java</p><pre><code>package com.atguigu.interceptor;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.springframework.stereotype.Component;import org.springframework.web.servlet.HandlerInterceptor;import org.springframework.web.servlet.ModelAndView;@Componentpublic class SecondInterceptor implements HandlerInterceptor&#123;    @Override    public void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)            throws Exception &#123;        System.out.println(&quot;Second:afterCompletion&quot;);    &#125;    @Override    public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)            throws Exception &#123;        System.out.println(&quot;Second:posthandle&quot;);    &#125;    @Override    public boolean preHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2) throws Exception &#123;        System.out.println(&quot;Second:preHandle&quot;);        return false;//true:放行 false:拦截    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;拦截器-HandlerInterceptor&quot;&gt;&lt;a href=&quot;#拦截器-HandlerInterceptor&quot; class=&quot;headerlink&quot; title=&quot;拦截器 HandlerInterceptor&quot;&gt;&lt;/a&gt;拦截器 HandlerInterceptor&lt;/h1&gt;&lt;p&gt;1.在SpringMVC配置文件（springMVC.xml）中进行以下配置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;mvc:interceptors&amp;gt;
    &amp;lt;!-- 默认拦截所有请求 --&amp;gt;
    &amp;lt;!-- 第一种方式 --&amp;gt;
    &amp;lt;bean class=&amp;quot;com.atguigu.interceptor.FirstInterceptor&amp;quot;&amp;gt;&amp;lt;/bean&amp;gt;
    &amp;lt;bean class=&amp;quot;com.atguigu.interceptor.SecondInterceptor&amp;quot;&amp;gt;&amp;lt;/bean&amp;gt;
    &amp;lt;!-- 
        第二种方式
        此方式要求拦截器上必须加注解@Component
     --&amp;gt;
    &amp;lt;!-- &amp;lt;ref bean=&amp;quot;firstInterceptor&amp;quot; /&amp;gt; --&amp;gt;
    
    &amp;lt;!-- 设置自定义拦截方式 --&amp;gt;
    &amp;lt;!-- &amp;lt;mvc:interceptor&amp;gt;
        &amp;lt;bean&amp;gt;&amp;lt;/bean&amp;gt;
        &amp;lt;mvc:mapping path=&amp;quot;&amp;quot;/&amp;gt;
        &amp;lt;mvc:exclude-mapping path=&amp;quot;&amp;quot;/&amp;gt;
    &amp;lt;/mvc:interceptor&amp;gt; --&amp;gt;
&amp;lt;/mvc:interceptors&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="拦截器 HandlerInterceptor" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/%E6%8B%A6%E6%88%AA%E5%99%A8-HandlerInterceptor/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
    <category term="拦截器" scheme="http://example.com/tags/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    
    <category term="HandlerInterceptor" scheme="http://example.com/tags/HandlerInterceptor/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | 上传和下载文件</title>
    <link href="http://example.com/2022/03/16/%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2022/03/16/%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</id>
    <published>2022-03-16T10:01:39.000Z</published>
    <updated>2022-03-16T10:07:30.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="上传和下载文件"><a href="#上传和下载文件" class="headerlink" title="上传和下载文件"></a>上传和下载文件</h1><p>注意：上传文件需要在springMVC.xml中配置如下所示bean：</p><pre><code>&lt;!--     处理文件，将客户端上传的File文件处理为MultipartFile    注意：文件解析器bean中的id必须设置为multipartResolver --&gt;&lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;    &lt;!-- 设置文件解析的编码，注意一定要和页面的pageEncoding保持一致 --&gt;    &lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/property&gt;    &lt;!-- 设置最大上传文件大小 --&gt;    &lt;property name=&quot;maxUploadSize&quot; value=&quot;88888888&quot;&gt;&lt;/property&gt;&lt;/bean&gt;</code></pre><span id="more"></span><p><strong>file.jsp</strong></p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;a href=&quot;down&quot;&gt;下载图片&lt;/a&gt;        &lt;form action=&quot;up&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;        头像：&lt;input type=&quot;file&quot; name=&quot;uploadFile&quot; /&gt;        描述：&lt;input type=&quot;text&quot; name=&quot;desc&quot; /&gt;        &lt;input type=&quot;submit&quot; value=&quot;上传&quot; /&gt;    &lt;/form&gt;        &lt;form action=&quot;up_old&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;        头像：&lt;input type=&quot;file&quot; name=&quot;uploadFile&quot; /&gt;        描述：&lt;input type=&quot;text&quot; name=&quot;desc&quot; /&gt;        &lt;input type=&quot;submit&quot; value=&quot;上传&quot; /&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><strong>TestUploadAndDownController.java</strong></p><pre><code>package com.atguigu.test;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.UUID;import javax.servlet.http.HttpSession;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.multipart.MultipartFile;import com.sun.org.apache.xalan.internal.xsltc.trax.OutputSettings;@Controllerpublic class TestUploadAndDownController&#123;    @RequestMapping(&quot;/down&quot;)    public ResponseEntity&lt;byte[]&gt; down(HttpSession session) throws IOException&#123;        //获取下载文件的路径        String realPath = session.getServletContext().getRealPath(&quot;img&quot;);        String finalPath = realPath + File.separator + &quot;1.jpg&quot;;        InputStream is = new FileInputStream(finalPath);        //available():获取输入流所读取的文件的最大字节数        byte[] b = new byte[is.available()];        is.read(b);        //设置请求头        HttpHeaders headers = new HttpHeaders();        headers.add(&quot;Content-Disposition&quot;, &quot;attachment;filename=zzz.jpg&quot;);        HttpStatus statusCode = HttpStatus.OK;        ResponseEntity&lt;byte[]&gt; entity = new ResponseEntity&lt;byte[]&gt;(b, headers, statusCode);        return entity;    &#125;        //第一种上传方式    @RequestMapping(value=&quot;/up_old&quot;, method=RequestMethod.POST)    public String up_old(String desc, MultipartFile uploadFile, HttpSession session) throws IOException&#123;        //String name = uploadFile.getName();        //String originalFilename = uploadFile.getOriginalFilename();        //System.out.println(name+&quot;,&quot;+originalFilename);                //获取上传文件的名称        String filename = uploadFile.getOriginalFilename();        String path = session.getServletContext().getRealPath(&quot;photo&quot;) + File.separator + filename;                //获取输入流        InputStream is = uploadFile.getInputStream();                //获取输出流        File file = new File(path);        OutputStream os = new FileOutputStream(file);                //文件上传//        int i = 0;//        while((i = is.read()) != -1)&#123;//            os.write(i);//        &#125;                int i = 0;        byte[] b = new byte[1024];        while((i = is.read(b)) != -1)&#123;            os.write(b, 0, i);        &#125;                //关闭流        os.close();        is.close();        return &quot;success&quot;;    &#125;        //第二种上传方式    @RequestMapping(value=&quot;/up&quot;, method=RequestMethod.POST)    public String up(String desc, MultipartFile uploadFile, HttpSession session) throws IOException&#123;        //获取上传文件的名称        String fileName = uploadFile.getOriginalFilename();        String finalFileName = UUID.randomUUID() + fileName.substring(fileName.lastIndexOf(&quot;.&quot;));        String path = session.getServletContext().getRealPath(&quot;photo&quot;) + File.separator + finalFileName;                File file = new File(path);        uploadFile.transferTo(file);        return &quot;success&quot;;    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;上传和下载文件&quot;&gt;&lt;a href=&quot;#上传和下载文件&quot; class=&quot;headerlink&quot; title=&quot;上传和下载文件&quot;&gt;&lt;/a&gt;上传和下载文件&lt;/h1&gt;&lt;p&gt;注意：上传文件需要在springMVC.xml中配置如下所示bean：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 
    处理文件，将客户端上传的File文件处理为MultipartFile
    注意：文件解析器bean中的id必须设置为multipartResolver 
--&amp;gt;
&amp;lt;bean id=&amp;quot;multipartResolver&amp;quot; class=&amp;quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&amp;quot;&amp;gt;
    &amp;lt;!-- 设置文件解析的编码，注意一定要和页面的pageEncoding保持一致 --&amp;gt;
    &amp;lt;property name=&amp;quot;defaultEncoding&amp;quot; value=&amp;quot;UTF-8&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;!-- 设置最大上传文件大小 --&amp;gt;
    &amp;lt;property name=&amp;quot;maxUploadSize&amp;quot; value=&amp;quot;88888888&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="上传和下载文件" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | 处理json</title>
    <link href="http://example.com/2022/03/15/%E5%A4%84%E7%90%86json/"/>
    <id>http://example.com/2022/03/15/%E5%A4%84%E7%90%86json/</id>
    <published>2022-03-16T07:23:48.000Z</published>
    <updated>2022-03-16T07:36:59.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="处理json"><a href="#处理json" class="headerlink" title="处理json"></a>处理json</h1><p>1.项目目录<br><img src="/2022/03/15/%E5%A4%84%E7%90%86json/1.PNG"><br><strong>注意：</strong><br>1.按照上图创建项目、导入图中所示的jar包并按照<a href="https://victory-liao.github.io/2022/03/13/REST-CRUD/">REST-CRUD</a>中的<br>web.xml、springMVC配置配置文件；<br>2.src下的dao、bean包中的代码参照REST CRUD；</p><span id="more"></span><p>3.index.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;$&#123;pageContext.servletContext.contextPath&#125;/css/index_work.css&quot; /&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;$&#123;pageContext.servletContext.contextPath&#125;/js/jquery-1.8.2.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;    $(function()&#123;        $(&quot;#btn&quot;).click(function()&#123;            $.ajax(&#123;                url:&quot;testJson&quot;,                type:&quot;POST&quot;,                dataType:&quot;json&quot;,//dataType=&quot;text&quot; 原样显示                success:function(msg)&#123;                    //alert(msg);                    /*                    [&#123;&quot;id&quot;:1001,&quot;lastName&quot;:&quot;E-AA&quot;,&quot;email&quot;:&quot;aa@163.com&quot;,&quot;gender&quot;:1,&quot;department&quot;:&#123;&quot;id&quot;:101,&quot;departmentName&quot;:&quot;D-AA&quot;&#125;&#125;,                     &#123;&quot;id&quot;:1002,&quot;lastName&quot;:&quot;E-BB&quot;,&quot;email&quot;:&quot;bb@163.com&quot;,&quot;gender&quot;:1,&quot;department&quot;:&#123;&quot;id&quot;:102,&quot;departmentName&quot;:&quot;D-BB&quot;&#125;&#125;,                     &#123;&quot;id&quot;:1003,&quot;lastName&quot;:&quot;E-CC&quot;,&quot;email&quot;:&quot;cc@163.com&quot;,&quot;gender&quot;:0,&quot;department&quot;:&#123;&quot;id&quot;:103,&quot;departmentName&quot;:&quot;D-CC&quot;&#125;&#125;,                     &#123;&quot;id&quot;:1004,&quot;lastName&quot;:&quot;E-DD&quot;,&quot;email&quot;:&quot;dd@163.com&quot;,&quot;gender&quot;:0,&quot;department&quot;:&#123;&quot;id&quot;:104,&quot;departmentName&quot;:&quot;D-DD&quot;&#125;&#125;,                     &#123;&quot;id&quot;:1005,&quot;lastName&quot;:&quot;E-EE&quot;,&quot;email&quot;:&quot;ee@163.com&quot;,&quot;gender&quot;:1,&quot;department&quot;:&#123;&quot;id&quot;:105,&quot;departmentName&quot;:&quot;D-EE&quot;&#125;&#125;]                    */                    /* for(var i in msg) &#123;                        var emp = msg[i]                        alert(&quot;id=&quot;+emp.id+&quot;,lastName=&quot;+emp.lastName+&quot;,departmentName=&quot;+emp.department.departmentName);                    &#125; */                                        //第一种实现方式                    /* var tb = &quot;&lt;table&gt;&quot;                    tb += &quot;&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;lastName&lt;/th&gt;&lt;th&gt;email&lt;/th&gt;&lt;th&gt;gender&lt;/th&gt;&lt;th&gt;departmentName&lt;/th&gt;&lt;/tr&gt;&quot;                    for(var i in msg) &#123;                        var emp = msg[i]                        tb += &quot;&lt;tr&gt;&lt;td&gt;&quot;+emp.id+&quot;&lt;/td&gt;&lt;td&gt;&quot;+emp.lastName+&quot;&lt;/td&gt;&lt;td&gt;&quot;+emp.email+&quot;&lt;/td&gt;&lt;td&gt;&quot;+emp.gender+&quot;&lt;/td&gt;&lt;td&gt;&quot;+emp.department.departmentName+&quot;&lt;/td&gt;&lt;/tr&gt;&quot;                    &#125;                     tb += &quot;&lt;/table&gt;&quot;                    $(&quot;body&quot;).append(tb); */                                        //第二种实现方式                    $(&quot;body&quot;).append(&quot;&lt;table&gt;&lt;/table&gt;&quot;);                    $(&quot;table&quot;).append(&quot;&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;lastName&lt;/th&gt;&lt;th&gt;email&lt;/th&gt;&lt;th&gt;gender&lt;/th&gt;&lt;th&gt;departmentName&lt;/th&gt;&lt;/tr&gt;&quot;)                    for(var i in msg)&#123;                        var emp = msg[i]                        $(&quot;table&quot;).append(&quot;&lt;tr&gt;&lt;td&gt;&quot;+emp.id+&quot;&lt;/td&gt;&lt;td&gt;&quot;+emp.lastName+&quot;&lt;/td&gt;&lt;td&gt;&quot;+emp.email+&quot;&lt;/td&gt;&lt;td&gt;&quot;+emp.gender+&quot;&lt;/td&gt;&lt;td&gt;&quot;+emp.department.departmentName+&quot;&lt;/td&gt;&lt;/tr&gt;&quot;);                    &#125;                &#125;            &#125;);        &#125;)    &#125;);&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;input id=&quot;btn&quot; type=&quot;button&quot; value=&quot;测试ajax&quot; /&gt;        &lt;a href=&quot;testJson&quot;&gt;测试json&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>2.TestJsonController.java</p><pre><code>package com.atguigu.test;import java.util.Collection;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import com.atguigu.bean.Employee;import com.atguigu.dao.EmployeeDao;@Controllerpublic class TestJsonController &#123;        @Autowired    private EmployeeDao dao;        /**     * springMVC处理json的四个条件     * 1、导入jackson的jar包     * 2、在springMVC的配置文件中开启MVC驱动，&lt;mvc:annotation-driven /&gt;     * 3、在处理ajax请求的方法上加上注解@ResponseBody     * 4、将要转为为json且响应到客户端的数据，直接作为该方法的返回值返回     * @ResponseBody     */    @RequestMapping(&quot;testJson&quot;)    @ResponseBody    public Collection&lt;Employee&gt; testJson()&#123;        Collection&lt;Employee&gt; emps = dao.getAll();        return emps;    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;处理json&quot;&gt;&lt;a href=&quot;#处理json&quot; class=&quot;headerlink&quot; title=&quot;处理json&quot;&gt;&lt;/a&gt;处理json&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/03/15/%E5%A4%84%E7%90%86json/1.PNG&quot;&gt;&lt;br&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;br&gt;1.按照上图创建项目、导入图中所示的jar包并按照&lt;a href=&quot;https://victory-liao.github.io/2022/03/13/REST-CRUD/&quot;&gt;REST-CRUD&lt;/a&gt;中的&lt;br&gt;web.xml、springMVC配置配置文件；&lt;br&gt;2.src下的dao、bean包中的代码参照REST CRUD；&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="处理json" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/%E5%A4%84%E7%90%86json/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
    <category term="json" scheme="http://example.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>json</title>
    <link href="http://example.com/2022/03/13/json/"/>
    <id>http://example.com/2022/03/13/json/</id>
    <published>2022-03-14T03:38:12.000Z</published>
    <updated>2022-03-14T03:41:41.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="json"><a href="#json" class="headerlink" title="json"></a>json</h1><p>1.json有两种对象<br>（1）json对象：{key1:value1,key2:value2,…}<br>（2）json数组：[value1,value2,…]<br>2.解析方式<br>（1）Json对象解析方式：对象.key<br>（2）json数组解析方式：for循环遍历<br>3.java对象转换json<br>（1）Bean和map—&gt;json对象<br>（2）List—&gt;json数组</p><p><strong>示例：</strong><br>数据：<br>    user：id=1,username=admin,age=23,sex=男</p><p>Xml方式:</p><pre><code>&lt;userinfo&gt;    &lt;user&gt;        &lt;id&gt;1&lt;/id&gt;        &lt;username&gt;admin&lt;/username&gt;        &lt;age&gt;23&lt;/age&gt;        &lt;sex&gt;男&lt;/sex&gt;    &lt;/user&gt;&lt;/userinfo&gt;</code></pre><p>Json方式:</p><pre><code>&#123;id:1,username:admin,age:23,sex:男&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;json&quot;&gt;&lt;a href=&quot;#json&quot; class=&quot;headerlink&quot; title=&quot;json&quot;&gt;&lt;/a&gt;json&lt;/h1&gt;&lt;p&gt;1.json有两种对象&lt;br&gt;（1）json对象：{key1:value1,key2:value2,…}&lt;br&gt;（2）jso</summary>
      
    
    
    
    <category term="json" scheme="http://example.com/categories/json/"/>
    
    
    <category term="json" scheme="http://example.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | 处理静态资源</title>
    <link href="http://example.com/2022/03/13/%E5%A4%84%E7%90%86%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/"/>
    <id>http://example.com/2022/03/13/%E5%A4%84%E7%90%86%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/</id>
    <published>2022-03-14T03:34:56.000Z</published>
    <updated>2022-03-14T03:37:22.669Z</updated>
    
    <content type="html"><![CDATA[<h1 id="处理静态资源"><a href="#处理静态资源" class="headerlink" title="处理静态资源"></a>处理静态资源</h1><p>在使用了SpringMVC的项目中，在使用css/js等静态资源时，需要在SpringMVC的配置文件中做以下配置：</p><pre><code>&lt;!-- 处理静态资源 --&gt;&lt;!--     配置Tomcat中默认的servlet,DefaultServlet    注意：当DefaultServlet所设置的&lt;url-pattern&gt;的值和开发人员所配置        的servlet的&lt;url-pattern&gt;相同，以开发人员所配置的servlet优先    作用： 当客户端发送请求，由于DefaultServlet所设置的&lt;url-pattern&gt;的        值和开发人员所配置的DispatcherServlet的&lt;url-pattern&gt;都是/，        因此先通过DispatcherServelet处理请求，找该请求是否有相对应的处理器，        有则处理，无则交给DefaultServlet处理--&gt;&lt;mvc:default-servlet-handler/&gt;&lt;!-- mvc驱动 --&gt;&lt;mvc:annotation-driven /&gt;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;处理静态资源&quot;&gt;&lt;a href=&quot;#处理静态资源&quot; class=&quot;headerlink&quot; title=&quot;处理静态资源&quot;&gt;&lt;/a&gt;处理静态资源&lt;/h1&gt;&lt;p&gt;在使用了SpringMVC的项目中，在使用css/js等静态资源时，需要在SpringMVC的配置文件中做以</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="处理静态资源" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/%E5%A4%84%E7%90%86%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | REST CRUD</title>
    <link href="http://example.com/2022/03/13/REST-CRUD/"/>
    <id>http://example.com/2022/03/13/REST-CRUD/</id>
    <published>2022-03-13T14:10:16.000Z</published>
    <updated>2022-03-13T14:26:51.156Z</updated>
    
    <content type="html"><![CDATA[<h1 id="REST-CRUD案例"><a href="#REST-CRUD案例" class="headerlink" title="REST CRUD案例"></a>REST CRUD案例</h1><p>1.项目目录<br><img src="/2022/03/13/REST-CRUD/1.PNG"></p><span id="more"></span><p>2.导入上图中的所有jar包<br>3.配置web.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&gt;  &lt;display-name&gt;RestEmp&lt;/display-name&gt;  &lt;welcome-file-list&gt;    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;  &lt;/welcome-file-list&gt;    &lt;filter&gt;    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;    &lt;init-param&gt;        &lt;param-name&gt;encoding&lt;/param-name&gt;        &lt;param-value&gt;UTF-8&lt;/param-value&gt;    &lt;/init-param&gt;  &lt;/filter&gt;  &lt;filter-mapping&gt;    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  &lt;/filter-mapping&gt;    &lt;filter&gt;    &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;    &lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class&gt;  &lt;/filter&gt;  &lt;filter-mapping&gt;    &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  &lt;/filter-mapping&gt;    &lt;!-- The front controller of this Spring Web application, responsible for handling all application requests --&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;        &lt;init-param&gt;            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;            &lt;param-value&gt;classpath:springMVC.xml&lt;/param-value&gt;        &lt;/init-param&gt;        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;    &lt;/servlet&gt;    &lt;!-- Map all requests to the DispatcherServlet for handling --&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;        &lt;url-pattern&gt;/&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;&lt;/web-app&gt;</code></pre><p>4.配置springMVC.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;        &lt;context:component-scan base-package=&quot;com.atguigu.rest.crud&quot;&gt;&lt;/context:component-scan&gt;        &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/view/&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;        &lt;!-- &lt;property name=&quot;order&quot; value=&quot;1&quot;&gt;&lt;/property&gt; --&gt;    &lt;/bean&gt;        &lt;!-- &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;        &lt;property name=&quot;prefix&quot; value=&quot;/&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;order&quot; value=&quot;2&quot;&gt;&lt;/property&gt;    &lt;/bean&gt; --&gt;        &lt;!-- 处理静态资源 --&gt;    &lt;mvc:default-servlet-handler/&gt;    &lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt;&lt;/beans&gt;</code></pre><p>5.准备项目所需要的bean、dao<br>5.1 Employee.java</p><pre><code>package com.atguigu.rest.crud.bean;public class Employee &#123;    private Integer id;    private String lastName;    private String email;    //1 male, 0 female    private Integer gender;        private Department department;    public Integer getId() &#123;        return id;    &#125;    public void setId(Integer id) &#123;        this.id = id;    &#125;    public String getLastName() &#123;        return lastName;    &#125;    public void setLastName(String lastName) &#123;        this.lastName = lastName;    &#125;    public String getEmail() &#123;        return email;    &#125;    public void setEmail(String email) &#123;        this.email = email;    &#125;    public Integer getGender() &#123;        return gender;    &#125;    public void setGender(Integer gender) &#123;        this.gender = gender;    &#125;    public Department getDepartment() &#123;        return department;    &#125;    public void setDepartment(Department department) &#123;        this.department = department;    &#125;    @Override    public String toString() &#123;        return &quot;Employee [id=&quot; + id + &quot;, lastName=&quot; + lastName + &quot;, email=&quot;                + email + &quot;, gender=&quot; + gender + &quot;, department=&quot; + department                + &quot;]&quot;;    &#125;    public Employee(Integer id, String lastName, String email, Integer gender,            Department department) &#123;        super();        this.id = id;        this.lastName = lastName;        this.email = email;        this.gender = gender;        this.department = department;    &#125;    public Employee() &#123;        // TODO Auto-generated constructor stub    &#125;&#125;</code></pre><p>5.2 Department.java</p><pre><code>package com.atguigu.rest.crud.bean;public class Department &#123;    private Integer id;    private String departmentName;    public Department() &#123;        // TODO Auto-generated constructor stub    &#125;        public Department(int i, String string) &#123;        this.id = i;        this.departmentName = string;    &#125;    public Integer getId() &#123;        return id;    &#125;    public void setId(Integer id) &#123;        this.id = id;    &#125;    public String getDepartmentName() &#123;        return departmentName;    &#125;    public void setDepartmentName(String departmentName) &#123;        this.departmentName = departmentName;    &#125;    @Override    public String toString() &#123;        return &quot;Department [id=&quot; + id + &quot;, departmentName=&quot; + departmentName                + &quot;]&quot;;    &#125;    &#125;</code></pre><p>5.3 EmployeeDao.java</p><pre><code>package com.atguigu.rest.crud.dao;import java.util.Collection;import java.util.HashMap;import java.util.Map;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Repository;import com.atguigu.rest.crud.bean.Department;import com.atguigu.rest.crud.bean.Employee;@Repositorypublic class EmployeeDao &#123;    private static Map&lt;Integer, Employee&gt; employees = null;        @Autowired    private DepartmentDao departmentDao;        static&#123;        employees = new HashMap&lt;Integer, Employee&gt;();        employees.put(1001, new Employee(1001, &quot;E-AA&quot;, &quot;aa@163.com&quot;, 1, new Department(101, &quot;D-AA&quot;)));        employees.put(1002, new Employee(1002, &quot;E-BB&quot;, &quot;bb@163.com&quot;, 1, new Department(102, &quot;D-BB&quot;)));        employees.put(1003, new Employee(1003, &quot;E-CC&quot;, &quot;cc@163.com&quot;, 0, new Department(103, &quot;D-CC&quot;)));        employees.put(1004, new Employee(1004, &quot;E-DD&quot;, &quot;dd@163.com&quot;, 0, new Department(104, &quot;D-DD&quot;)));        employees.put(1005, new Employee(1005, &quot;E-EE&quot;, &quot;ee@163.com&quot;, 1, new Department(105, &quot;D-EE&quot;)));    &#125;        private static Integer initId = 1006;        public void save(Employee employee)&#123;        if(employee.getId() == null)&#123;            employee.setId(initId++);        &#125;                employee.setDepartment(departmentDao.getDepartment(employee.getDepartment().getId()));        employees.put(employee.getId(), employee);    &#125;        public Collection&lt;Employee&gt; getAll()&#123;        return employees.values();    &#125;        public Employee get(Integer id)&#123;        return employees.get(id);    &#125;        public void delete(Integer id)&#123;        employees.remove(id);    &#125;&#125;</code></pre><p>5.4 DepartmentDao.java</p><pre><code>package com.atguigu.rest.crud.dao;import java.util.Collection;import java.util.HashMap;import java.util.Map;import org.springframework.stereotype.Repository;import com.atguigu.rest.crud.bean.Department;@Repositorypublic class DepartmentDao &#123;    private static Map&lt;Integer, Department&gt; departments = null;        static&#123;        departments = new HashMap&lt;Integer, Department&gt;();                departments.put(101, new Department(101, &quot;D-AA&quot;));        departments.put(102, new Department(102, &quot;D-BB&quot;));        departments.put(103, new Department(103, &quot;D-CC&quot;));        departments.put(104, new Department(104, &quot;D-DD&quot;));        departments.put(105, new Department(105, &quot;D-EE&quot;));    &#125;        public Collection&lt;Department&gt; getDepartments()&#123;        return departments.values();    &#125;        public Department getDepartment(Integer id)&#123;        return departments.get(id);    &#125;    &#125;</code></pre><p>6.准备项目需要的所有页面<br>6.1 list.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%@taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;展示员工信息&lt;/title&gt;&lt;%-- &lt;link rel=&quot;stylesheet&quot; href=&quot;$&#123;pageContext.servletContext.contextPath&#125;/css/index_like.css&quot;&gt; --%&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;$&#123;pageContext.servletContext.contextPath&#125;/css/index_work.css&quot;&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;$&#123;pageContext.servletContext.contextPath&#125;/js/jquery-1.8.2.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;    $(function()&#123;        $(&quot;.del&quot;).click(function()&#123;            //submit()将所获得的form元素提交            if(confirm(&quot;确认删除吗？&quot;))&#123;                $(&quot;form&quot;).attr(&quot;action&quot;, this.href).submit();//$(this).attr(&quot;href&quot;)                return false;//将超链接的默认行为取消            &#125;            return false;//将超链接的默认行为取消        &#125;);    &#125;);//预加载函数或文档就绪函数&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;table&gt;        &lt;tr&gt;            &lt;th&gt;ID&lt;/th&gt;            &lt;th&gt;LASTNAME&lt;/th&gt;            &lt;th&gt;EMAIL&lt;/th&gt;            &lt;th&gt;GENDER&lt;/th&gt;            &lt;th&gt;DEPARTMENTNAME&lt;/th&gt;            &lt;th&gt;OPTION(&lt;a href=&quot;emp&quot;&gt;ADD&lt;/a&gt;)&lt;/th&gt;        &lt;/tr&gt;        &lt;c:forEach items=&quot;$&#123;emps&#125;&quot; var=&quot;emp&quot;&gt;            &lt;tr&gt;                &lt;td&gt;$&#123;emp.id&#125;&lt;/td&gt;                &lt;td&gt;$&#123;emp.lastName&#125;&lt;/td&gt;                &lt;td&gt;$&#123;emp.email&#125;&lt;/td&gt;                &lt;td&gt;$&#123;emp.gender==0?&#39;女&#39;:&#39;男&#39;&#125;&lt;/td&gt;                &lt;td&gt;$&#123;emp.department.departmentName&#125;&lt;/td&gt;                &lt;td&gt;                    &lt;a href=&quot;emp/$&#123;emp.id&#125;&quot;&gt;UPDATE&lt;/a&gt;                    &lt;a class=&quot;del&quot; href=&quot;emp/$&#123;emp.id&#125;&quot;&gt;DELETE&lt;/a&gt;                &lt;/td&gt;            &lt;/tr&gt;        &lt;/c:forEach&gt;    &lt;/table&gt;        &lt;form method=&quot;post&quot;&gt;        &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;DELETE&quot;&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>6.2 add.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%@taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;添加员工信息&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;$&#123;pageContext.servletContext.contextPath&#125;/css/index_work.css&quot;&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=&quot;emp&quot; method=&quot;post&quot;&gt;        &lt;table&gt;        &lt;tr&gt;            &lt;th colspan=&quot;2&quot;&gt;添加员工信息&lt;/th&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;LASTNAME&lt;/td&gt;            &lt;td&gt;                &lt;input type=&quot;text&quot; name=&quot;lastName&quot;&gt;            &lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;EMAIL&lt;/td&gt;            &lt;td&gt;                &lt;input type=&quot;text&quot; name=&quot;email&quot;&gt;            &lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;GENDER&lt;/td&gt;            &lt;td&gt;                &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;1&quot;&gt;男                &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;0&quot;&gt;女            &lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;DEPARTMENT&lt;/td&gt;            &lt;td&gt;                &lt;select name=&quot;department.id&quot;&gt;                    &lt;option&gt;-SELECT DEPARTMENT-&lt;/option&gt;                    &lt;c:forEach items=&quot;$&#123;depts&#125;&quot; var=&quot;dept&quot;&gt;                        &lt;option value=&quot;$&#123;dept.id&#125;&quot;&gt;$&#123;dept.departmentName&#125;&lt;/option&gt;                    &lt;/c:forEach&gt;                                    &lt;/select&gt;            &lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td colspan=&quot;2&quot;&gt;                &lt;input type=&quot;submit&quot; name=&quot;ADD&quot;&gt;            &lt;/td&gt;        &lt;/tr&gt;    &lt;/table&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>6.3 update.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%@taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;修改员工信息&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;$&#123;pageContext.servletContext.contextPath&#125;/css/index_work.css&quot;&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=&quot;$&#123;pageContext.servletContext.contextPath&#125;/emp&quot; method=&quot;post&quot;&gt;        &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;PUT&quot;&gt;        &lt;input type=&quot;hidden&quot; name=&quot;id&quot; value=&quot;$&#123;emp.id&#125;&quot;&gt;        &lt;table&gt;        &lt;tr&gt;            &lt;th colspan=&quot;2&quot;&gt;修改员工信息&lt;/th&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;LASTNAME&lt;/td&gt;            &lt;td&gt;                &lt;input type=&quot;text&quot; name=&quot;lastName&quot; value=&quot;$&#123;emp.lastName&#125;&quot;&gt;            &lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;EMAIL&lt;/td&gt;            &lt;td&gt;                &lt;input type=&quot;text&quot; name=&quot;email&quot; value=&quot;$&#123;emp.email&#125;&quot;&gt;            &lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;GENDER&lt;/td&gt;            &lt;td&gt;                &lt;%-- &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;1&quot; &lt;c:if test=&quot;$&#123;emp.gender==1&#125;&quot;&gt; checked=&quot;checked&quot;&lt;/c:if&gt;&gt;男                &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;0&quot; &lt;c:if test=&quot;$&#123;emp.gender==0&#125;&quot;&gt; checked=&quot;checked&quot;&lt;/c:if&gt;&gt;女 --%&gt;                &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;1&quot; $&#123;emp.gender==1?&#39;checked&#39;:&#39;&#39;&#125;&gt;男                &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;0&quot; $&#123;emp.gender==0?&#39;checked&#39;:&#39;&#39;&#125;&gt;女            &lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;DEPARTMENT&lt;/td&gt;            &lt;td&gt;                &lt;select name=&quot;department.id&quot;&gt;                    &lt;option&gt;-SELECT DEPARTMENT-&lt;/option&gt;                    &lt;c:forEach items=&quot;$&#123;depts&#125;&quot; var=&quot;dept&quot;&gt;                        &lt;option value=&quot;$&#123;dept.id&#125;&quot; $&#123;dept.id==emp.department.id?&#39;selected&#39;:&#39;&#39;&#125;&gt;$&#123;dept.departmentName&#125;&lt;/option&gt;                    &lt;/c:forEach&gt;                &lt;/select&gt;            &lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td colspan=&quot;2&quot;&gt;                &lt;input type=&quot;submit&quot; name=&quot;UPDATE&quot;&gt;            &lt;/td&gt;        &lt;/tr&gt;    &lt;/table&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>6.4 edit.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;&lt;%@ taglib uri=&quot;http://www.springframework.org/tags/form&quot; prefix=&quot;form&quot; %&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;编辑员工信息&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;$&#123;pageContext.servletContext.contextPath &#125;/css/index_work.css&quot; /&gt;&lt;/head&gt;&lt;body&gt;    &lt;!-- 使用SpringMVC from标签重构添加/修改页面 --&gt;    &lt;!-- modelAttribute自定义回显对象的属性名 --&gt;    &lt;form:form action=&quot;$&#123;pageContext.servletContext.contextPath &#125;/emp&quot; method=&quot;post&quot; modelAttribute=&quot;emp&quot;&gt;                &lt;c:if test=&quot;$&#123;empty emp.id&#125;&quot; var=&quot;flag&quot;&gt;&lt;/c:if&gt;        &lt;c:if test=&quot;$&#123;!flag&#125;&quot;&gt;            &lt;form:hidden path=&quot;id&quot;/&gt;            &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;PUT&quot; /&gt;        &lt;/c:if&gt;                &lt;table&gt;            &lt;tr&gt;                &lt;th colspan=&quot;2&quot;&gt;                    &lt;c:if test=&quot;$&#123;flag &#125;&quot;&gt;添加员工信息&lt;/c:if&gt;                    &lt;c:if test=&quot;$&#123;!flag &#125;&quot;&gt;修改员工信息&lt;/c:if&gt;                &lt;/th&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;LASTNAME&lt;/td&gt;                &lt;td&gt;                    &lt;form:input path=&quot;lastName&quot;/&gt;                &lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;EMAIL&lt;/td&gt;                &lt;td&gt;                    &lt;form:input path=&quot;email&quot;/&gt;                &lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;GENDER&lt;/td&gt;                &lt;td&gt;                    &lt;form:radiobuttons path=&quot;gender&quot; items=&quot;$&#123;genders&#125;&quot;/&gt;                &lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;DEPARTMENT&lt;/td&gt;                &lt;td&gt;                    &lt;form:select path=&quot;department.id&quot; items=&quot;$&#123;depts&#125;&quot; itemLabel=&quot;departmentName&quot; itemValue=&quot;id&quot;&gt;&lt;/form:select&gt;                &lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td colspan=&quot;2&quot;&gt;                    &lt;c:if test=&quot;$&#123;flag&#125;&quot;&gt;                        &lt;input type=&quot;submit&quot; value=&quot;ADD&quot; /&gt;                    &lt;/c:if&gt;                    &lt;c:if test=&quot;$&#123;!flag&#125;&quot;&gt;                        &lt;input type=&quot;submit&quot; value=&quot;UPDATE&quot; /&gt;                    &lt;/c:if&gt;                &lt;/td&gt;            &lt;/tr&gt;        &lt;/table&gt;    &lt;/form:form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>7.EmpController_Old.java(实现添加修改的第一种方式，选择第二种方式时注释掉EmpController_Old类的@Controller注解)</p><pre><code>package com.atguigu.rest.crud.controller;import java.util.Collection;import java.util.Map;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import com.atguigu.rest.crud.bean.Department;import com.atguigu.rest.crud.bean.Employee;import com.atguigu.rest.crud.dao.DepartmentDao;import com.atguigu.rest.crud.dao.EmployeeDao;//@Controllerpublic class EmpController_Old &#123;    //添加修改的第一种方式    @Autowired    private EmployeeDao employeeDao;        @Autowired    private DepartmentDao departmentDao;        /**     * 获取所有的员工信息     */    @RequestMapping(value=&quot;/emps&quot;)    public String getAll(Map&lt;String, Object&gt; map)&#123;        Collection&lt;Employee&gt; emps = employeeDao.getAll();        map.put(&quot;emps&quot;, emps);        return &quot;list&quot;;    &#125;        /**     * 跳转到添加页面     */    @RequestMapping(value=&quot;/emp&quot;, method=RequestMethod.GET)    public String toAdd(Map&lt;String, Object&gt; map)&#123;        Collection&lt;Department&gt; depts = departmentDao.getDepartments();        map.put(&quot;depts&quot;, depts);        return &quot;add&quot;;    &#125;        /**     * 添加员工信息     */    @RequestMapping(value=&quot;/emp&quot;, method=RequestMethod.POST)    public String addEmp(Employee employee)&#123;        employeeDao.save(employee);        return &quot;redirect:/emps&quot;;    &#125;        /**     * 获取要回显的数据，跳转到修改页面，并回显     */    @RequestMapping(value=&quot;/emp/&#123;id&#125;&quot;, method=RequestMethod.GET)    public String toUpdate(@PathVariable(&quot;id&quot;)Integer id, Map&lt;String, Object&gt; map)&#123;        //获取要修改的员工信息        Employee emp = employeeDao.get(id);        //所有的部门信息，供用户选择        Collection&lt;Department&gt; depts = departmentDao.getDepartments();        map.put(&quot;emp&quot;, emp);        map.put(&quot;depts&quot;, depts);        return &quot;update&quot;;    &#125;        @RequestMapping(value=&quot;/emp&quot;, method=RequestMethod.PUT)    public String updateEmp(Employee employee)&#123;        employeeDao.save(employee);//修改        return &quot;redirect:/emps&quot;;    &#125;&#125;</code></pre><p>8.EmpController.java(实现添加修改的第二种方式，选择第一种方式时注释掉EmpController类的@Controller注解)</p><pre><code>package com.atguigu.rest.crud.controller;import java.util.Collection;import java.util.HashMap;import java.util.Map;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import com.atguigu.rest.crud.bean.Department;import com.atguigu.rest.crud.bean.Employee;import com.atguigu.rest.crud.dao.DepartmentDao;import com.atguigu.rest.crud.dao.EmployeeDao;@Controllerpublic class EmpController &#123;    //添加修改的第二种方式    @Autowired    private EmployeeDao employeeDao;        @Autowired    private DepartmentDao departmentDao;        /**     * 获取所有的员工信息     * @param map     * @return     */    @RequestMapping(value=&quot;/emps&quot;)    public String getAll(Map&lt;String, Object&gt; map) &#123;        Collection&lt;Employee&gt; emps = employeeDao.getAll();        map.put(&quot;emps&quot;, emps);        return &quot;list&quot;;    &#125;        /**     * 跳转到添加页面     * @return     */    @RequestMapping(value=&quot;/emp&quot;, method=RequestMethod.GET)    public String toAdd(Map&lt;String, Object&gt; map) &#123;        //获取所有的部门信息        Collection&lt;Department&gt; depts = departmentDao.getDepartments();        //创建存储性别gender的信息        Map&lt;String, String&gt; genders = new HashMap&lt;&gt;();        genders.put(&quot;0&quot;, &quot;女&quot;);        genders.put(&quot;1&quot;, &quot;男&quot;);        map.put(&quot;depts&quot;, depts);        map.put(&quot;genders&quot;, genders);        //form标签有自动回显的功能，会在页面中能够默认获取request作用于中command属性的值        //map.put(&quot;command&quot;, new Employee());        //若在&lt;form:form&gt;设置了modelAttribute，就可以自定义回显对象的属性名        map.put(&quot;emp&quot;, new Employee());        return &quot;edit&quot;;    &#125;        /**     * 添加员工信息     * @param employee     * @return     */    @RequestMapping(value=&quot;/emp&quot;, method=RequestMethod.POST)    public String addEmp(Employee employee) &#123;        employeeDao.save(employee);        return &quot;redirect:/emps&quot;;    &#125;        /**     * 获取要回显的数据，跳转到修改页面，并回显     * @param id     * @param map     * @return     */    @RequestMapping(value=&quot;/emp/&#123;id&#125;&quot;, method=RequestMethod.GET)    public String toUpdate(@PathVariable(&quot;id&quot;) Integer id, Map&lt;String, Object&gt; map) &#123;        //获取要修改的员工信息        Employee emp = employeeDao.get(id);        //所有的部门信息，供用户选择        Collection&lt;Department&gt; depts = departmentDao.getDepartments();        //设置存储性别的map集合        Map&lt;String, String&gt; genders = new HashMap&lt;&gt;();        genders.put(&quot;0&quot;, &quot;女&quot;);        genders.put(&quot;1&quot;, &quot;男&quot;);        map.put(&quot;emp&quot;, emp);        map.put(&quot;depts&quot;, depts);        map.put(&quot;genders&quot;, genders);        return &quot;edit&quot;;    &#125;        /**     * 修改员工信息     */    @RequestMapping(value=&quot;/emp&quot;, method=RequestMethod.PUT)    public String updateEmp(Employee employee) &#123;        employeeDao.save(employee);//修改        return &quot;redirect:/emps&quot;;    &#125;        @RequestMapping(value=&quot;/emp/&#123;id&#125;&quot;, method=RequestMethod.DELETE)    public String deleteEmp(@PathVariable(&quot;id&quot;)Integer id)&#123;        employeeDao.delete(id);        return &quot;redirect:/emps&quot;;    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;REST-CRUD案例&quot;&gt;&lt;a href=&quot;#REST-CRUD案例&quot; class=&quot;headerlink&quot; title=&quot;REST CRUD案例&quot;&gt;&lt;/a&gt;REST CRUD案例&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/03/13/REST-CRUD/1.PNG&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="REST CRUD" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/REST-CRUD/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
    <category term="REST" scheme="http://example.com/tags/REST/"/>
    
    <category term="CRUD" scheme="http://example.com/tags/CRUD/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | 编码过滤器CharacterEncodingFilter</title>
    <link href="http://example.com/2022/03/12/%E7%BC%96%E7%A0%81%E8%BF%87%E6%BB%A4%E5%99%A8CharacterEncodingFilter/"/>
    <id>http://example.com/2022/03/12/%E7%BC%96%E7%A0%81%E8%BF%87%E6%BB%A4%E5%99%A8CharacterEncodingFilter/</id>
    <published>2022-03-13T07:58:53.000Z</published>
    <updated>2022-03-13T08:01:05.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CharacterEncodingFilter编码过滤器"><a href="#CharacterEncodingFilter编码过滤器" class="headerlink" title="CharacterEncodingFilter编码过滤器"></a>CharacterEncodingFilter编码过滤器</h1><p>SpringMVC通过配置CharacterEncodingFilter编码过滤器来解决项目中的乱码问题，只需要在web.xml中配置CharacterEncodingFilter即可。</p><pre><code>&lt;!-- 配置编码过滤器 --&gt;  &lt;filter&gt;    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;    &lt;init-param&gt;        &lt;param-name&gt;encoding&lt;/param-name&gt;        &lt;param-value&gt;UTF-8&lt;/param-value&gt;    &lt;/init-param&gt;  &lt;/filter&gt;  &lt;filter-mapping&gt;    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  &lt;/filter-mapping&gt;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CharacterEncodingFilter编码过滤器&quot;&gt;&lt;a href=&quot;#CharacterEncodingFilter编码过滤器&quot; class=&quot;headerlink&quot; title=&quot;CharacterEncodingFilter编码过滤器&quot;&gt;&lt;/a&gt;Ch</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="编码过滤器CharacterEncodingFilter" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/%E7%BC%96%E7%A0%81%E8%BF%87%E6%BB%A4%E5%99%A8CharacterEncodingFilter/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | 设置springMVC配置文件的位置以及名称并控制servlet的加载时间</title>
    <link href="http://example.com/2022/03/12/%E8%AE%BE%E7%BD%AEspringMVC%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E5%90%8D%E7%A7%B0%E5%B9%B6%E6%8E%A7%E5%88%B6servlet%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%97%B6%E9%97%B4/"/>
    <id>http://example.com/2022/03/12/%E8%AE%BE%E7%BD%AEspringMVC%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E5%90%8D%E7%A7%B0%E5%B9%B6%E6%8E%A7%E5%88%B6servlet%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%97%B6%E9%97%B4/</id>
    <published>2022-03-13T07:32:40.000Z</published>
    <updated>2022-03-13T07:35:43.150Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设置springMVC配置文件的位置以及名称并控制servlet的加载时间"><a href="#设置springMVC配置文件的位置以及名称并控制servlet的加载时间" class="headerlink" title="设置springMVC配置文件的位置以及名称并控制servlet的加载时间"></a>设置springMVC配置文件的位置以及名称并控制servlet的加载时间</h1><p>设置springMVC配置文件的位置以及名称并控制servlet的加载时间只需要在web.xml文件中做以下配置即可：</p><p>快捷方式：Alt + / dispatcherservlet</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&gt;  &lt;display-name&gt;SpringMVC02&lt;/display-name&gt;  &lt;welcome-file-list&gt;    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;  &lt;/welcome-file-list&gt;    &lt;!-- The front controller of this Spring Web application, responsible for handling all application requests --&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;        &lt;!-- 设置springMVC配置文件的位置以及名称 --&gt;        &lt;init-param&gt;            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;            &lt;param-value&gt;classpath:springMVC.xml&lt;/param-value&gt;        &lt;/init-param&gt;                &lt;!--             设置servlet的加载时间            默认在第一次访问时加载，若设置此标签，会将servlet的加载时间提前到项目启动时            此标签中可以整数，但是写负整数和0和没有设置时一样的效果，只有设置为正整数才会将servlet的加载时间提前到项目启动时            值越小，优先级越高         --&gt;        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;    &lt;/servlet&gt;    &lt;!-- Map all requests to the DispatcherServlet for handling --&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;        &lt;url-pattern&gt;/&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;&lt;/web-app&gt;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设置springMVC配置文件的位置以及名称并控制servlet的加载时间&quot;&gt;&lt;a href=&quot;#设置springMVC配置文件的位置以及名称并控制servlet的加载时间&quot; class=&quot;headerlink&quot; title=&quot;设置springMVC配置文件的位置</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="设置springMVC配置文件的位置以及名称并控制servlet的加载时间" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/%E8%AE%BE%E7%BD%AEspringMVC%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E5%90%8D%E7%A7%B0%E5%B9%B6%E6%8E%A7%E5%88%B6servlet%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%97%B6%E9%97%B4/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>Java | 静态代理</title>
    <link href="http://example.com/2022/03/10/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>http://example.com/2022/03/10/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/</id>
    <published>2022-03-11T02:08:35.000Z</published>
    <updated>2022-03-11T02:14:43.272Z</updated>
    
    <content type="html"><![CDATA[<h1 id="静态代理案例"><a href="#静态代理案例" class="headerlink" title="静态代理案例"></a>静态代理案例</h1><p>通过静态代理来帮助发短信(短信发送类和代理类实现相同的接口)<br><strong>SmsService.java(接口)</strong></p><pre><code>package proxy;public interface SmsService &#123;    String send(String message);&#125;</code></pre><p><strong>SmsServiceImpl.java(实现类)</strong></p><pre><code>package proxy;public class SmsServiceImpl implements SmsService&#123;    @Override    public String send(String message) &#123;        System.out.println(&quot;send message:&quot; + message);        return message;    &#125;&#125;</code></pre><p><strong>SmsProxy.java(代理类)</strong></p><pre><code>package proxy;public class SmsProxy implements SmsService&#123;    private final SmsService smsService;        public SmsProxy(SmsService smsService)&#123;        this.smsService = smsService;    &#125;        @Override    public String send(String message) &#123;        System.out.println(&quot;before method send()&quot;);        smsService.send(message);        System.out.println(&quot;after method send()&quot;);        return null;    &#125;&#125;</code></pre><p><strong>Main.java(测试类)</strong></p><pre><code>package proxy;public class Main &#123;    public static void main(String[] args)&#123;        SmsService smsService = new SmsServiceImpl();        SmsProxy smsProxy = new SmsProxy(smsService);        smsProxy.send(&quot;java&quot;);    &#125;&#125;</code></pre><p><strong>运行结果</strong><br><img src="/2022/03/10/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/1.PNG"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;静态代理案例&quot;&gt;&lt;a href=&quot;#静态代理案例&quot; class=&quot;headerlink&quot; title=&quot;静态代理案例&quot;&gt;&lt;/a&gt;静态代理案例&lt;/h1&gt;&lt;p&gt;通过静态代理来帮助发短信(短信发送类和代理类实现相同的接口)&lt;br&gt;&lt;strong&gt;SmsService.j</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="基础" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="静态代理" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="静态代理" scheme="http://example.com/tags/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Java | 动态代理</title>
    <link href="http://example.com/2022/03/10/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>http://example.com/2022/03/10/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</id>
    <published>2022-03-10T14:20:12.000Z</published>
    <updated>2022-03-11T02:57:15.735Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态代理案例-JDK-动态代理机制"><a href="#动态代理案例-JDK-动态代理机制" class="headerlink" title="动态代理案例(JDK 动态代理机制)"></a>动态代理案例(JDK 动态代理机制)</h1><p>假设我们需要通过中介租房子（告诉中介对房子的要求，由中介代我们租房子）</p><p><strong>JDK动态代理机制和CGLIB动态代理机制的区别</strong><br>1.JDK 动态代理只能代理实现了接口的类或者直接代理接口，而 CGLIB 可以代理未实现任何接口的类。 另外， CGLIB 动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理声明为 final 类型的类和方法。<br>2.就二者的效率来说，大部分情况都是 JDK 动态代理更优秀，随着 JDK 版本的升级，这个优势更加明显。</p><p><a href="https://gitee.com/victory-liao/JavaGuide/blob/main/docs/java/basis/proxy.md">动态代理和静态代理的区别、两种动态代理的区别</a><br><strong>HireRoom.java(接口)</strong></p><pre><code>package hireroom;public interface HireRoom &#123;    void hireRoom(String chaoxiang, String buju, int price);&#125;</code></pre><p><strong>HireRoomImpl.java(实现类)</strong></p><pre><code>package hireroom;public class HireRoomImpl implements HireRoom&#123;    @Override    public void hireRoom(String chaoxiang, String buju, int price) &#123;        System.out.println(&quot;我委托中介租一个朝向：&quot; + chaoxiang + &quot;，布局：&quot; + buju + &quot;，价格：&quot; + price + &quot;的房子&quot;);    &#125;&#125;</code></pre><p><strong>Agency.java(中介/代理类)</strong></p><pre><code>package hireroom;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;public class Agency implements InvocationHandler&#123;    private Object target;        public Agency(Object target)&#123;        this.target = target;    &#125;        @Override    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;        System.out.println(&quot;before&quot;);        Object result = method.invoke(target, args);        System.out.println(&quot;after&quot;);        return result;    &#125;&#125;</code></pre><p><strong>AgencyFactory.java(中介/代理工厂)</strong></p><pre><code>package hireroom;import java.lang.reflect.Proxy;public class AgencyFactory &#123;    public static Object getProxy(Object target)&#123;        return Proxy.newProxyInstance(target.getClass().getClassLoader(),                 target.getClass().getInterfaces(),                 new Agency(target));    &#125;&#125;</code></pre><p><strong>Main.java(测试)</strong></p><pre><code>package hireroom;public class Main &#123;    public static void main(String[] args) &#123;        HireRoom hireRoom = (HireRoom) AgencyFactory.getProxy(new HireRoomImpl());        hireRoom.hireRoom(&quot;坐南朝北&quot;, &quot;两室一厅&quot;, 200000);    &#125;&#125;</code></pre><p><strong>运行结果1</strong><br><img src="/2022/03/10/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/1.PNG"><br>再假设我们现在又有了想通过中介租车的需求，只需要再添加租车接口和实现类，然后通过上面的代理类完成租车。这也是动态代理的优点<br><strong>HireCar.java(接口)</strong></p><pre><code>package hireroom;public interface HireCar &#123;    void hireCar(String brand, int price);&#125;</code></pre><p><strong>HireCarImpl.java(实现类)</strong></p><pre><code>package hireroom;public class HireCarImpl implements HireCar&#123;    @Override    public void hireCar(String brand, int price) &#123;        System.out.println(&quot;租车：&quot;+brand+price);    &#125;&#125;</code></pre><p><strong>Main.java</strong></p><pre><code>package hireroom;public class Main &#123;    public static void main(String[] args) &#123;        HireRoom hireRoom = (HireRoom) AgencyFactory.getProxy(new HireRoomImpl());        hireRoom.hireRoom(&quot;坐南朝北&quot;, &quot;两室一厅&quot;, 200000);                HireCar hireCar = (HireCar) AgencyFactory.getProxy(new HireCarImpl());        hireCar.hireCar(&quot;宝马&quot;, 150000);    &#125;&#125;</code></pre><p><strong>运行结果2</strong><br><img src="/2022/03/10/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/2.PNG"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;动态代理案例-JDK-动态代理机制&quot;&gt;&lt;a href=&quot;#动态代理案例-JDK-动态代理机制&quot; class=&quot;headerlink&quot; title=&quot;动态代理案例(JDK 动态代理机制)&quot;&gt;&lt;/a&gt;动态代理案例(JDK 动态代理机制)&lt;/h1&gt;&lt;p&gt;假设我们需要通过</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="基础" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="动态代理" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="动态代理" scheme="http://example.com/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
    <category term="JDK动态代理机制" scheme="http://example.com/tags/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    
    <category term="CGLIB动态代理机制" scheme="http://example.com/tags/CGLIB%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java | 获取Class对象的四种方式</title>
    <link href="http://example.com/2022/03/10/%E8%8E%B7%E5%8F%96Class%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2022/03/10/%E8%8E%B7%E5%8F%96Class%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2022-03-10T12:33:03.000Z</published>
    <updated>2022-03-10T12:36:49.505Z</updated>
    
    <content type="html"><![CDATA[<h1 id="获取Class对象的四种方式"><a href="#获取Class对象的四种方式" class="headerlink" title="获取Class对象的四种方式"></a>获取Class对象的四种方式</h1><p>反射可以动态获取类的信息，这需要依靠 Class 对象。Class 类对象将一个类的方法、变量等信息告诉运行的程序。Java 提供了四种方式获取 Class 对象:</p><ol><li>知道具体类的情况下可以使用：</li></ol><pre><code>Class alunbarClass = TargetObject.class;</code></pre><p>但是我们一般是不知道具体类的，基本都是通过遍历包下面的类来获取 Class 对象，通过此方式获取 Class 对象不会进行初始化</p><ol start="2"><li>通过 Class.forName()传入类的全路径获取：</li></ol><pre><code>Class alunbarClass1 = Class.forName(&quot;cn.javaguide.TargetObject&quot;);</code></pre><ol start="3"><li>通过对象实例instance.getClass()获取：</li></ol><pre><code>TargetObject o = new TargetObject();Class alunbarClass2 = o.getClass();</code></pre><ol start="4"><li>通过类加载器xxxClassLoader.loadClass()传入类路径获取:</li></ol><pre><code>Class clazz = ClassLoader.loadClass(&quot;cn.javaguide.TargetObject&quot;);</code></pre><p>通过类加载器获取 Class 对象不会进行初始化，意味着不进行包括初始化等一系列步骤，静态代码块和静态对象不会得到执行</p><span id="more"></span><p><strong>示例</strong></p><pre><code>class Student&#123;    private Integer sid;    private String sname;    public Integer getSid() &#123;        return sid;    &#125;    public void setSid(Integer sid) &#123;        this.sid = sid;    &#125;    public String getSname() &#123;        return sname;    &#125;    public void setSname(String sname) &#123;        this.sname = sname;    &#125;    @Override    public String toString() &#123;        return &quot;Student [sid=&quot; + sid + &quot;, sname=&quot; + sname + &quot;]&quot;;    &#125;    &#125;public class Test &#123;    public static void main(String[] args)&#123;                //获取 Class 对象的四种方式        System.out.println(&quot;方式一:&quot; + Student.class);                try &#123;            System.out.println(&quot;方式二:&quot; + Class.forName(&quot;Student&quot;));        &#125; catch (ClassNotFoundException e) &#123;            e.printStackTrace();        &#125;                Student s1 = new Student();        System.out.println(&quot;方式三:&quot; + s1.getClass());                try &#123;            System.out.println(&quot;方式四:&quot;+ClassLoader.getSystemClassLoader().loadClass(&quot;Student&quot;));                    &#125; catch (ClassNotFoundException e) &#123;            e.printStackTrace();        &#125;                try &#123;            //使用反射操作Student类的方法以及参数            Student s2 = s1.getClass().newInstance();            s2.setSname(&quot;zhangsan&quot;);            s2.setSid(1);            System.out.println(s2);        &#125; catch (InstantiationException e) &#123;            // TODO Auto-generated catch block            e.printStackTrace();        &#125; catch (IllegalAccessException e) &#123;            // TODO Auto-generated catch block            e.printStackTrace();        &#125;                    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;获取Class对象的四种方式&quot;&gt;&lt;a href=&quot;#获取Class对象的四种方式&quot; class=&quot;headerlink&quot; title=&quot;获取Class对象的四种方式&quot;&gt;&lt;/a&gt;获取Class对象的四种方式&lt;/h1&gt;&lt;p&gt;反射可以动态获取类的信息，这需要依靠 Class 对象。Class 类对象将一个类的方法、变量等信息告诉运行的程序。Java 提供了四种方式获取 Class 对象:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;知道具体类的情况下可以使用：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;Class alunbarClass = TargetObject.class;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是我们一般是不知道具体类的，基本都是通过遍历包下面的类来获取 Class 对象，通过此方式获取 Class 对象不会进行初始化&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;通过 Class.forName()传入类的全路径获取：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;Class alunbarClass1 = Class.forName(&amp;quot;cn.javaguide.TargetObject&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;通过对象实例instance.getClass()获取：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;TargetObject o = new TargetObject();
Class alunbarClass2 = o.getClass();
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;通过类加载器xxxClassLoader.loadClass()传入类路径获取:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;Class clazz = ClassLoader.loadClass(&amp;quot;cn.javaguide.TargetObject&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过类加载器获取 Class 对象不会进行初始化，意味着不进行包括初始化等一系列步骤，静态代码块和静态对象不会得到执行&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="基础" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="获取Class对象的四种方式" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/%E8%8E%B7%E5%8F%96Class%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Class对象" scheme="http://example.com/tags/Class%E5%AF%B9%E8%B1%A1/"/>
    
    <category term="反射" scheme="http://example.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | 处理请求过程中往作用域中放值的三种方式</title>
    <link href="http://example.com/2022/03/09/SpringMVC%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%BE%80%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%AD%E6%94%BE%E5%80%BC%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2022/03/09/SpringMVC%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%BE%80%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%AD%E6%94%BE%E5%80%BC%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2022-03-10T03:23:17.000Z</published>
    <updated>2022-03-10T08:38:46.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="处理响应数据-ModelAndView"><a href="#处理响应数据-ModelAndView" class="headerlink" title="处理响应数据 ModelAndView"></a>处理响应数据 ModelAndView</h1><p>在<a href="https://victory-liao.github.io/2022/03/09/SpringMVC%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/">处理请求数据</a><br>项目的ParamController.java的类中加入以下代码：</p><pre><code>/** * SpringMVC处理请求过程中，往作用域中放值有以下三种方式 * 总结：根据ModelAndView源码调试，不管使用以下那种方式，最终都会把model数据和view数据封装到一个ModelAndView中 *///往作用域中放值方式1//    @RequestMapping(value=&quot;/param&quot;, method=RequestMethod.POST)//    public ModelAndView param()&#123;//        ModelAndView mav = new ModelAndView();//        //javaWEB： request.setAttribute(xxx) //        mav.addObject(&quot;username&quot;, &quot;root&quot;);//往request作用域中放值//        mav.setViewName(&quot;success&quot;);//设置视图名称，实现页面跳转//        return mav;//    &#125;        //往作用域中放值方式2//    @RequestMapping(value=&quot;/param&quot;, method=RequestMethod.POST)//    public String param(Map&lt;String, Object&gt; map)&#123;//        map.put(&quot;username&quot;, &quot;admin&quot;);//向作用域中放值//        return &quot;success&quot;;//返回视图名称//    &#125;//往作用域中放值方式3@RequestMapping(value=&quot;/param&quot;, method=RequestMethod.POST)public String param(Model model)&#123;    model.addAttribute(&quot;usernaem&quot;, &quot;zhangsan&quot;);//向作用域中放值    return &quot;success&quot;;//返回视图名称&#125;</code></pre><p>并在param.jsp页面获取request作用域中的值</p><pre><code>&lt;!-- $&#123;requestScope.username &#125; --&gt;    $&#123;username&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;处理响应数据-ModelAndView&quot;&gt;&lt;a href=&quot;#处理响应数据-ModelAndView&quot; class=&quot;headerlink&quot; title=&quot;处理响应数据 ModelAndView&quot;&gt;&lt;/a&gt;处理响应数据 ModelAndView&lt;/h1&gt;&lt;p&gt;在&lt;</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="处理请求过程中往作用域中放值的三种方式" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%BE%80%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%AD%E6%94%BE%E5%80%BC%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
    <category term="ModelAndView" scheme="http://example.com/tags/ModelAndView/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | 处理请求数据</title>
    <link href="http://example.com/2022/03/09/SpringMVC%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/"/>
    <id>http://example.com/2022/03/09/SpringMVC%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/</id>
    <published>2022-03-09T14:16:43.000Z</published>
    <updated>2022-03-09T14:24:32.526Z</updated>
    
    <content type="html"><![CDATA[<h1 id="处理请求数据"><a href="#处理请求数据" class="headerlink" title="处理请求数据"></a>处理请求数据</h1><p>1.项目目录<br><img src="/2022/03/09/SpringMVC%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/1.PNG"></p><span id="more"></span><p>2.web.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&gt;  &lt;display-name&gt;SpringMVC02&lt;/display-name&gt;  &lt;welcome-file-list&gt;    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;  &lt;/welcome-file-list&gt;    &lt;!-- The front controller of this Spring Web application, responsible for handling all application requests --&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;    &lt;/servlet&gt;    &lt;!-- Map all requests to the DispatcherServlet for handling --&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;        &lt;url-pattern&gt;/&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;        &lt;filter&gt;        &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;        &lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class&gt;    &lt;/filter&gt;    &lt;filter-mapping&gt;        &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;    &lt;/filter-mapping&gt;    &lt;/web-app&gt;</code></pre><p>3.springMVC-servlet.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;        &lt;!-- 扫描组件 --&gt;    &lt;context:component-scan base-package=&quot;com.atguigu.controller&quot;&gt;&lt;/context:component-scan&gt;        &lt;bean id=&quot;viewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/view/&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><p>4.param.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=&quot;param&quot; method=&quot;post&quot;&gt;        username:&lt;input type=&quot;text&quot; name=&quot;username&quot; /&gt;&lt;br&gt;         password:&lt;input type=&quot;text&quot; name=&quot;password&quot; /&gt;&lt;br&gt;        age:&lt;input type=&quot;text&quot; name=&quot;age&quot;&gt;&lt;br&gt;                &lt;!-- 测试RequestParam取消这段代码的注释 --&gt;        &lt;!-- province:&lt;input type=&quot;text&quot; name=&quot;province&quot; /&gt;&lt;br&gt;        city:&lt;input type=&quot;text&quot; name=&quot;city&quot; /&gt;&lt;br&gt;        country:&lt;input type=&quot;text&quot; name=&quot;country&quot; /&gt; --&gt;                &lt;!-- 使用POJO获取客户端数据 --&gt;        province:&lt;input type=&quot;text&quot; name=&quot;address.province&quot; /&gt;&lt;br&gt;        city:&lt;input type=&quot;text&quot; name=&quot;address.city&quot; /&gt;&lt;br&gt;        country:&lt;input type=&quot;text&quot; name=&quot;address.country&quot; /&gt;        &lt;input type=&quot;submit&quot; value=&quot;添加&quot;/&gt;            &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>5.success.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;成功&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>6.User.java</p><pre><code>package com.atguigu.bean;public class User &#123;    private Integer id;    private String username;    private String password;    private Address address;    public Integer getId() &#123;        return id;    &#125;    public void setId(Integer id) &#123;        this.id = id;    &#125;    public String getUsername() &#123;        return username;    &#125;    public void setUsername(String username) &#123;        this.username = username;    &#125;    public String getPassword() &#123;        return password;    &#125;    public void setPassword(String password) &#123;        this.password = password;    &#125;    public Address getAddress() &#123;        return address;    &#125;    public void setAddress(Address address) &#123;        this.address = address;    &#125;    @Override    public String toString() &#123;        return &quot;User [id=&quot; + id + &quot;, username=&quot; + username + &quot;, password=&quot; + password + &quot;, address=&quot; + address + &quot;]&quot;;    &#125;    &#125;</code></pre><p>7.Address.java</p><pre><code>package com.atguigu.bean;public class Address &#123;    private String province;    private String city;    private String country;    public String getProvince() &#123;        return province;    &#125;    public void setProvince(String province) &#123;        this.province = province;    &#125;    public String getCity() &#123;        return city;    &#125;    public void setCity(String city) &#123;        this.city = city;    &#125;    public String getCountry() &#123;        return country;    &#125;    public void setCountry(String country) &#123;        this.country = country;    &#125;    @Override    public String toString() &#123;        return &quot;Address [province=&quot; + province + &quot;, city=&quot; + city + &quot;, country=&quot; + country + &quot;]&quot;;    &#125;    &#125;</code></pre><p>8.ParamController.java</p><pre><code>package com.atguigu.controller;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.CookieValue;import org.springframework.web.bind.annotation.RequestHeader;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import com.atguigu.bean.User;@Controllerpublic class ParamController &#123;    /**     * 在springMVC获取客户端传递的数据的方式     * 1、在处理请求的方法中，加入相对应的形参，保证形参参数名和传递的数据的参数名保持一致，就可以自动赋值     * @RequestParam：可以把请求参数传递给请求方法     * 当不满足赋值条件时，可以使用value属性，指定映射关系     * required：设置形参是否必须被赋值，默认为ture，必须赋值，若设置为false，则不必须赋值，     * 因此形参的值为null     * defaultValue:若形参所获得的值为null，则设置一个默认值，用在分页和模糊查询中     *///    @RequestMapping(value=&quot;/param&quot;, method=RequestMethod.POST)//    public String testRequestParam(@RequestParam(value=&quot;name&quot;, required=false, defaultValue=&quot;admin&quot;)String username, String password, String age)&#123;//        System.out.println(&quot;username=&quot;+username+&quot;,password=&quot;+password+&quot;,age=&quot;+age);//        return &quot;success&quot;;//    &#125;        /**     * @RequestHeader:在处理请求的方法上，获取请求头信息，用户和@RequestParam一致     *///    @RequestMapping(value=&quot;/testRequestHeader&quot;)//    public String testRequestHeader(@RequestHeader(value=&quot;Accept-Language&quot;)String al)&#123;//        System.out.println(al);//        return &quot;success&quot;;//    &#125;        /**     * @CookieValue:在处理请求的方法上，获取cookie信息，用法和RequestParam一致     *///    @RequestMapping(&quot;/testCookieValue&quot;)//    public String testCookieValue(@CookieValue(&quot;JSESSIONID&quot;)String sessionId)&#123;//        System.out.println(&quot;testCookieValue:sessionId:&quot;+sessionId);//        return &quot;success&quot;;//    &#125;        /**     * 可以使用POJO获取客户端数据，要求实体类对象中的属性名一定要和页面中表单元素的name属性值一致，且支持级联关系     *///    @RequestMapping(value=&quot;/param&quot;, method=RequestMethod.POST)//    public String testPojo(User user)&#123;//        System.out.println(user);//        return &quot;success&quot;;//    &#125;        /**     * 可以通过设置形参的方式，获取servletAPI     */    @RequestMapping(&quot;/param&quot;)    public String testServletAPI(HttpServletRequest request, HttpServletResponse response)&#123;        System.out.println(&quot;testServletAPI,&quot;+request+&quot;,&quot;+response);                String username = request.getParameter(&quot;username&quot;);        System.out.println(username);        return &quot;success&quot;;    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;处理请求数据&quot;&gt;&lt;a href=&quot;#处理请求数据&quot; class=&quot;headerlink&quot; title=&quot;处理请求数据&quot;&gt;&lt;/a&gt;处理请求数据&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/03/09/SpringMVC%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/1.PNG&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="处理请求数据" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
    <category term="RequestParam注解" scheme="http://example.com/tags/RequestParam%E6%B3%A8%E8%A7%A3/"/>
    
    <category term="RequestHeader注解" scheme="http://example.com/tags/RequestHeader%E6%B3%A8%E8%A7%A3/"/>
    
    <category term="CookieValue注解" scheme="http://example.com/tags/CookieValue%E6%B3%A8%E8%A7%A3/"/>
    
    <category term="使用POJO获取客户端数据" scheme="http://example.com/tags/%E4%BD%BF%E7%94%A8POJO%E8%8E%B7%E5%8F%96%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%95%B0%E6%8D%AE/"/>
    
    <category term="获取servletAPI" scheme="http://example.com/tags/%E8%8E%B7%E5%8F%96servletAPI/"/>
    
  </entry>
  
</feed>
