<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Victory&#39;s Blog</title>
  
  <subtitle>非淡泊无以明志，非宁静无以致远</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-11-14T02:27:54.039Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>victory-liao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RNN | LSTM</title>
    <link href="http://example.com/2021/11/13/LSTM/"/>
    <id>http://example.com/2021/11/13/LSTM/</id>
    <published>2021-11-14T02:25:29.000Z</published>
    <updated>2021-11-14T02:27:54.039Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Understanding-LSTM-Networks"><a href="#Understanding-LSTM-Networks" class="headerlink" title="Understanding LSTM Networks"></a>Understanding LSTM Networks</h1><p><a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/">Understanding LSTM Networks</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Understanding-LSTM-Networks&quot;&gt;&lt;a href=&quot;#Understanding-LSTM-Networks&quot; class=&quot;headerlink&quot; title=&quot;Understanding LSTM Networks&quot;&gt;&lt;/a&gt;Under</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习基础" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
    <category term="RNN" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/RNN/"/>
    
    <category term="LSTM" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/RNN/LSTM/"/>
    
    
    <category term="LSTM" scheme="http://example.com/tags/LSTM/"/>
    
    <category term="RNN" scheme="http://example.com/tags/RNN/"/>
    
  </entry>
  
  <entry>
    <title>CNN | 感受野</title>
    <link href="http://example.com/2021/11/11/%E6%84%9F%E5%8F%97%E9%87%8E/"/>
    <id>http://example.com/2021/11/11/%E6%84%9F%E5%8F%97%E9%87%8E/</id>
    <published>2021-11-11T12:54:57.000Z</published>
    <updated>2021-11-13T04:11:57.640Z</updated>
    
    <content type="html"><![CDATA[<h1 id="感受野"><a href="#感受野" class="headerlink" title="感受野"></a>感受野</h1><p><a href="https://www.cnblogs.com/shine-lee/p/12069176.html">Click Here!</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;感受野&quot;&gt;&lt;a href=&quot;#感受野&quot; class=&quot;headerlink&quot; title=&quot;感受野&quot;&gt;&lt;/a&gt;感受野&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/shine-lee/p/12069176.html&quot;&gt;Click </summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习基础" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
    <category term="CNN" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/CNN/"/>
    
    
    <category term="感受野" scheme="http://example.com/tags/%E6%84%9F%E5%8F%97%E9%87%8E/"/>
    
  </entry>
  
  <entry>
    <title>参考文献 | Remaining Useful Life Prediction of Machining Tools by 1D-CNN LSTM Network</title>
    <link href="http://example.com/2021/11/09/CnnLstmForRemainingUsefulLifePrediction/"/>
    <id>http://example.com/2021/11/09/CnnLstmForRemainingUsefulLifePrediction/</id>
    <published>2021-11-09T13:12:30.000Z</published>
    <updated>2021-11-09T13:42:27.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Remaining-Useful-Life-Prediction-of-Machining-Tools-by-1D-CNN-LSTM-Network"><a href="#Remaining-Useful-Life-Prediction-of-Machining-Tools-by-1D-CNN-LSTM-Network" class="headerlink" title="Remaining Useful Life Prediction of Machining Tools by 1D-CNN LSTM Network"></a>Remaining Useful Life Prediction of Machining Tools by 1D-CNN LSTM Network</h1><h2 id="Contributions"><a href="#Contributions" class="headerlink" title="Contributions"></a>Contributions</h2><p>use a 1D-CNN LSTM network architecture for machining tools RUL prediction</p><h2 id="Problem-Addressing"><a href="#Problem-Addressing" class="headerlink" title="Problem Addressing"></a>Problem Addressing</h2><p>Traditional machine learning algorithms are sometimes difficult to extract hidden information that characterizes the degradation process of the tool.<br>deep learning methods tend to have better effects, as it has powerful adaptive learning and anti-noise ability, and it can automatically extract deep<br> features, which is more versatile than traditional machine learning methods.</p><h2 id="Why-CNN-LSTM"><a href="#Why-CNN-LSTM" class="headerlink" title="Why CNN-LSTM?"></a>Why CNN-LSTM?</h2><p>CNN has a its capacity to automatically extract features and LSTM can effectively mine the hidden information in time series.</p><p>In fact, we can combine CNN’s high-dimensional feature extraction capacity and LSTM’s advantage on time series problems. After CNN extracts<br>features, we input them into the LSTM for training, then some improvements in accuracy and speed can be achieved.</p><p>For time-series problems, one dimensional convolutional neural network (1D-CNN) is more suitable than common convolution neural network. One of the<br>characteristics of the 1D-CNN is that for time-series data, the receptive field moves only in the direction of time, so the local inter-variable correlation can be extracted.</p><h2 id="Some-knowledge-points-learned"><a href="#Some-knowledge-points-learned" class="headerlink" title="Some knowledge points learned"></a>Some knowledge points learned</h2><ol><li>Each convolutional layer consists of several convolutional units whose parameters are optimized by backpropagation algorithms.</li><li>Pooling can effectively reduce the amount of data and increse the calculation speed.</li><li>Each unit of RNN is a simple chain structure, it processes the input sequence {x1,x2,…,xT} sequentially to construct a corresponding sequence of hidden states {h1,h2,…,hT}.</li><li>The main purpose of the dropout layer is to reduce over-fitting.<h2 id="Ideas"><a href="#Ideas" class="headerlink" title="Ideas"></a>Ideas</h2></li><li>compare the results of 1D-CNN,LSTM and 1D-CNN LSTM in own work.</li><li>write own paper according to this reference(part of introduction and network description)</li><li>Refer to the chart in the article</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Remaining-Useful-Life-Prediction-of-Machining-Tools-by-1D-CNN-LSTM-Network&quot;&gt;&lt;a href=&quot;#Remaining-Useful-Life-Prediction-of-Machining-</summary>
      
    
    
    
    <category term="Rsearch and Paper" scheme="http://example.com/categories/Rsearch-and-Paper/"/>
    
    <category term="EEG" scheme="http://example.com/categories/Rsearch-and-Paper/EEG/"/>
    
    <category term="脑电分类" scheme="http://example.com/categories/Rsearch-and-Paper/EEG/%E8%84%91%E7%94%B5%E5%88%86%E7%B1%BB/"/>
    
    <category term="参考文献" scheme="http://example.com/categories/Rsearch-and-Paper/EEG/%E8%84%91%E7%94%B5%E5%88%86%E7%B1%BB/%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE/"/>
    
    
    <category term="CNN+LSTM" scheme="http://example.com/tags/CNN-LSTM/"/>
    
    <category term="反向传播算法" scheme="http://example.com/tags/%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>参考文献 | A CNN-LSTM for Motor Imagery EEG Detection</title>
    <link href="http://example.com/2021/11/09/CNNLSTMMotorImageryEEGDetection/"/>
    <id>http://example.com/2021/11/09/CNNLSTMMotorImageryEEGDetection/</id>
    <published>2021-11-09T12:17:17.000Z</published>
    <updated>2021-11-09T12:40:46.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="A-CNN-LSTM-for-Motor-Imagery-EEG-Detection"><a href="#A-CNN-LSTM-for-Motor-Imagery-EEG-Detection" class="headerlink" title="A CNN-LSTM for Motor Imagery EEG Detection"></a>A CNN-LSTM for Motor Imagery EEG Detection</h1><h2 id="Why-CNN-LSTM"><a href="#Why-CNN-LSTM" class="headerlink" title="Why CNN-LSTM?"></a>Why CNN-LSTM?</h2><p>CNN layers detect better the spatial component of the data selecting the best features for us and RNN detect better the temporal component of the data.<br>(CNN layer is used to extract the most relevant features from the brain waves and LSTM is used to classify the time series.)</p><span id="more"></span><h2 id="Contributions"><a href="#Contributions" class="headerlink" title="Contributions"></a>Contributions</h2><p>1.proposed method of CNN-LSTM.<br>2.discussed the influence of using raw data over using the data split in frequency bands in the model proposed.<br>3.discuss the influence of certain frequency bands activity over other frequency bands.</p><h2 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h2><p>the 5 types of waves (alpha, beta, theta, delta and gamma) are needed for an accurate classification and the raw data is not enough to ensure the accuracy of the results. </p><h2 id="Cite-This"><a href="#Cite-This" class="headerlink" title="Cite This"></a>Cite This</h2><p>F. M. Garcia-Moreno, M. Bermudez-Edo, M. J. Rodríguez-Fórtiz and J. L. Garrido, “A CNN-LSTM Deep Learning Classifier for Motor Imagery EEG Detection Using a Low-invasive and Low-Cost BCI Headband,” 2020 16th International Conference on Intelligent Environments (IE), 2020, pp. 84-91, doi: 10.1109/IE49459.2020.9155016.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;A-CNN-LSTM-for-Motor-Imagery-EEG-Detection&quot;&gt;&lt;a href=&quot;#A-CNN-LSTM-for-Motor-Imagery-EEG-Detection&quot; class=&quot;headerlink&quot; title=&quot;A CNN-LSTM for Motor Imagery EEG Detection&quot;&gt;&lt;/a&gt;A CNN-LSTM for Motor Imagery EEG Detection&lt;/h1&gt;&lt;h2 id=&quot;Why-CNN-LSTM&quot;&gt;&lt;a href=&quot;#Why-CNN-LSTM&quot; class=&quot;headerlink&quot; title=&quot;Why CNN-LSTM?&quot;&gt;&lt;/a&gt;Why CNN-LSTM?&lt;/h2&gt;&lt;p&gt;CNN layers detect better the spatial component of the data selecting the best features for us and RNN detect better the temporal component of the data.&lt;br&gt;(CNN layer is used to extract the most relevant features from the brain waves and LSTM is used to classify the time series.)&lt;/p&gt;</summary>
    
    
    
    <category term="Research and Paper" scheme="http://example.com/categories/Research-and-Paper/"/>
    
    <category term="EEG" scheme="http://example.com/categories/Research-and-Paper/EEG/"/>
    
    <category term="脑电分类" scheme="http://example.com/categories/Research-and-Paper/EEG/%E8%84%91%E7%94%B5%E5%88%86%E7%B1%BB/"/>
    
    <category term="参考文献" scheme="http://example.com/categories/Research-and-Paper/EEG/%E8%84%91%E7%94%B5%E5%88%86%E7%B1%BB/%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE/"/>
    
    
    <category term="CNN+LSTM" scheme="http://example.com/tags/CNN-LSTM/"/>
    
    <category term="EEG Classification" scheme="http://example.com/tags/EEG-Classification/"/>
    
    <category term="EEG" scheme="http://example.com/tags/EEG/"/>
    
  </entry>
  
  <entry>
    <title>深度学习 | 网络、模型、算法的区别</title>
    <link href="http://example.com/2021/11/09/%E7%BD%91%E7%BB%9Cand%E6%A8%A1%E5%9E%8Band%E7%AE%97%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2021/11/09/%E7%BD%91%E7%BB%9Cand%E6%A8%A1%E5%9E%8Band%E7%AE%97%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2021-11-09T12:03:08.000Z</published>
    <updated>2021-11-09T12:06:05.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络、模型、算法的区别"><a href="#网络、模型、算法的区别" class="headerlink" title="网络、模型、算法的区别"></a>网络、模型、算法的区别</h1><p>网络: 一种简单的网络结构，不包含任何权重参数。</p><p>模型： 设计一个网络后，在某些数据集上进行训练，得到一个包含权重参数的数据，称为模型。</p><p>算法： 在模型的基础上通过一些代码具体实现某些相关目的，这些代码以及模型文件等等资源被称为某算法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;网络、模型、算法的区别&quot;&gt;&lt;a href=&quot;#网络、模型、算法的区别&quot; class=&quot;headerlink&quot; title=&quot;网络、模型、算法的区别&quot;&gt;&lt;/a&gt;网络、模型、算法的区别&lt;/h1&gt;&lt;p&gt;网络: 一种简单的网络结构，不包含任何权重参数。&lt;/p&gt;
&lt;p&gt;模型</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>python | 对象转json</title>
    <link href="http://example.com/2021/11/08/python%E5%AF%B9%E8%B1%A1%E8%BD%ACjson/"/>
    <id>http://example.com/2021/11/08/python%E5%AF%B9%E8%B1%A1%E8%BD%ACjson/</id>
    <published>2021-11-08T12:22:28.000Z</published>
    <updated>2021-11-09T02:36:55.180Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python对象转json"><a href="#python对象转json" class="headerlink" title="python对象转json"></a>python对象转json</h1><p>程序将python的对象转为json格式。</p><span id="more"></span><p><strong>train_data_cor.txt文件包含以下内容：</strong><br>james.txt 2-34,3:21,2,34,2.45,3.01,2:01,2:01,3:10,2-22<br>sarah.txt 2:58,2.58,2:39,2-25,2:55,2:54,2.18,2:55,2:55<br>julie.txt 2.59,2.11,2:11,2:23,3-10,2-23,3:10,3.21,3-21<br>mikey.txt 2:22,3.01,3:01,3.02,3:02,3.02,3:22,2.49,2:38</p><p><strong>code:</strong></p><pre><code>import jsonclass Athlete(json.JSONEncoder):    def __init__(self,a_name,a_dob=None,a_times=[]):        self.name = a_name        self.dob = a_dob        self.times = a_times    def top3(self):        return sorted(set([self.sanitize(t) for t in self.times]))[0:3]    def sanitize(self,time_string):        if &#39;-&#39; in time_string:            splitter = &#39;-&#39;        elif &#39;:&#39; in time_string:            splitter = &#39;:&#39;        else:            return (time_string)        (mins,secs) = time_string.split(splitter)        return (mins+&#39;.&#39;+secs)with open(&#39;train_data_cor.txt&#39;) as f:    data = f.readline().strip().split(&#39;,&#39;)    ath = Athlete(data.pop(0),data.pop(0),data)    print(ath)ath_json = json.dumps(ath.__dict__)# 将json形式变量保存到文件中with open(&#39;json.txt&#39;,&#39;w&#39;) as f:    json.dump(ath_json,f)    # 读取json文件内容    with open(&#39;json.txt&#39;) as f:    ath = json.load(f)    print(ath)</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;python对象转json&quot;&gt;&lt;a href=&quot;#python对象转json&quot; class=&quot;headerlink&quot; title=&quot;python对象转json&quot;&gt;&lt;/a&gt;python对象转json&lt;/h1&gt;&lt;p&gt;程序将python的对象转为json格式。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="基础" scheme="http://example.com/categories/python/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python | 命名空间查找顺序</title>
    <link href="http://example.com/2021/11/07/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E6%9F%A5%E6%89%BE%E9%A1%BA%E5%BA%8F/"/>
    <id>http://example.com/2021/11/07/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E6%9F%A5%E6%89%BE%E9%A1%BA%E5%BA%8F/</id>
    <published>2021-11-08T03:03:45.000Z</published>
    <updated>2021-11-09T02:44:44.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命名空间查找顺序"><a href="#命名空间查找顺序" class="headerlink" title="命名空间查找顺序"></a>命名空间查找顺序</h1><h2 id="命名空间的三种形式"><a href="#命名空间的三种形式" class="headerlink" title="命名空间的三种形式"></a>命名空间的三种形式</h2><p>1.内置命名空间（Built-in names）： 用于存放Python 的内置函数的空间，比如，print，input等不需要定义即可使用的函数就处在内置命名空间。<br>2.全局命名空间（Global names）：模块中定义的名称，记录了模块的变量，包括函数、类、其它导入的模块、模块级的变量和常量。<br>3.局部命名空间（Local names）：函数中定义的名称，记录了函数的变量，包括函数的参数和局部定义的变量。在函数内定义的局部变量，在函数执行结束后就会失效，即无法在函数外直接调用函数内定义的变量。<br><img src="/2021/11/07/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E6%9F%A5%E6%89%BE%E9%A1%BA%E5%BA%8F/namespace.png"></p><span id="more"></span><p>##命名空间查找顺序<br>局部命名空间→全局命名空间→内置命名空间。</p><h2 id="命名空间的生命周期"><a href="#命名空间的生命周期" class="headerlink" title="命名空间的生命周期"></a>命名空间的生命周期</h2><p>命名空间的生命周期取决于对象的作用域，如果对象执行完成，则该命名空间的生命周期就结束。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><pre><code># 在全局命名空间中给变量a赋值，令a=1。a = 1# 在定义函数“function1”的同时就为其创建了一个独立的局部命名空间。def function1():    # 变量b在局部命名空间中被赋值“a+1”。    b = a + 1    # 此处所使用的print函数就是源自Python的内置命名空间。    print(b)    # 执行function1时，计算机会优先找到function1局部命名空间中的“b=a+1”，然后再找到全局命名空间中的“a=1”，最后找到内置命名空间中的print将b的值打印出来。function1()   </code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;命名空间查找顺序&quot;&gt;&lt;a href=&quot;#命名空间查找顺序&quot; class=&quot;headerlink&quot; title=&quot;命名空间查找顺序&quot;&gt;&lt;/a&gt;命名空间查找顺序&lt;/h1&gt;&lt;h2 id=&quot;命名空间的三种形式&quot;&gt;&lt;a href=&quot;#命名空间的三种形式&quot; class=&quot;headerlink&quot; title=&quot;命名空间的三种形式&quot;&gt;&lt;/a&gt;命名空间的三种形式&lt;/h2&gt;&lt;p&gt;1.内置命名空间（Built-in names）： 用于存放Python 的内置函数的空间，比如，print，input等不需要定义即可使用的函数就处在内置命名空间。&lt;br&gt;2.全局命名空间（Global names）：模块中定义的名称，记录了模块的变量，包括函数、类、其它导入的模块、模块级的变量和常量。&lt;br&gt;3.局部命名空间（Local names）：函数中定义的名称，记录了函数的变量，包括函数的参数和局部定义的变量。在函数内定义的局部变量，在函数执行结束后就会失效，即无法在函数外直接调用函数内定义的变量。&lt;br&gt;&lt;img src=&quot;/2021/11/07/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E6%9F%A5%E6%89%BE%E9%A1%BA%E5%BA%8F/namespace.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="基础" scheme="http://example.com/categories/python/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="命名空间" scheme="http://example.com/categories/python/%E5%9F%BA%E7%A1%80/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="命名空间" scheme="http://example.com/tags/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>python | 偏函数</title>
    <link href="http://example.com/2021/11/07/%E5%81%8F%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2021/11/07/%E5%81%8F%E5%87%BD%E6%95%B0/</id>
    <published>2021-11-08T02:58:37.000Z</published>
    <updated>2021-11-09T02:25:34.092Z</updated>
    
    <content type="html"><![CDATA[<h1 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h1><p><strong>作用：</strong> 通过设定参数的默认值，降低函数调用的难度<br>函数在执行时，要带上所有必要的参数进行调用。但是，有时参数可以在函数被调用之前提前获知。这种情况下，一个函数有一个或多个参数预先就能用上，以便函数能用更少的参数进行调用。<br>偏函数是将所要承载的函数作为partial()函数的第一个参数，原函数的各个参数依次作为partial()函数后续的参数，除非使用关键字参数。</p><span id="more"></span><p><strong>示例1：</strong></p><h2 id="一般函数调用"><a href="#一般函数调用" class="headerlink" title="一般函数调用"></a>一般函数调用</h2><pre><code>def student_info(name, age, city):    print(f&#39;我的名字叫&#123;name&#125;, 今年&#123;age&#125;岁，来自&#123;city&#125;&#39;)student_info(&#39;Molly&#39;,18,&#39;北京&#39;)</code></pre><h2 id="带关键字参数函数的调用"><a href="#带关键字参数函数的调用" class="headerlink" title="带关键字参数函数的调用"></a>带关键字参数函数的调用</h2><pre><code>def student_info(name, age, city=&#39;北京&#39;):    print(f&#39;我的名字叫&#123;name&#125;, 今年&#123;age&#125;岁，来自&#123;city&#125;&#39;)student_info(&#39;Molly&#39;,18)</code></pre><h2 id="使用偏函数"><a href="#使用偏函数" class="headerlink" title="使用偏函数"></a>使用偏函数</h2><pre><code>from functools import partialdef student_info(name, age, city):    print(f&#39;我的名字叫&#123;name&#125;, 今年&#123;age&#125;岁，来自&#123;city&#125;&#39;)student_info_beijing = partial(student_info, city=&#39;北京&#39;)student_info_beijing(&#39;Molly&#39;,18)student_info_beijing(&#39;Molly&#39;,18, city=&#39;上海&#39;)</code></pre><p><strong>示例2：</strong></p><pre><code>def add_xy(x,y):    return x+yadd_100 = partial(add_xy, y=100)add_100(10)</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;偏函数&quot;&gt;&lt;a href=&quot;#偏函数&quot; class=&quot;headerlink&quot; title=&quot;偏函数&quot;&gt;&lt;/a&gt;偏函数&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;作用：&lt;/strong&gt; 通过设定参数的默认值，降低函数调用的难度&lt;br&gt;函数在执行时，要带上所有必要的参数进行调用。但是，有时参数可以在函数被调用之前提前获知。这种情况下，一个函数有一个或多个参数预先就能用上，以便函数能用更少的参数进行调用。&lt;br&gt;偏函数是将所要承载的函数作为partial()函数的第一个参数，原函数的各个参数依次作为partial()函数后续的参数，除非使用关键字参数。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="基础" scheme="http://example.com/categories/python/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="偏函数" scheme="http://example.com/categories/python/%E5%9F%BA%E7%A1%80/%E5%81%8F%E5%87%BD%E6%95%B0/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="偏函数" scheme="http://example.com/tags/%E5%81%8F%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>python | 闭包</title>
    <link href="http://example.com/2021/11/07/%E9%97%AD%E5%8C%85/"/>
    <id>http://example.com/2021/11/07/%E9%97%AD%E5%8C%85/</id>
    <published>2021-11-08T02:49:47.000Z</published>
    <updated>2021-11-09T02:16:52.616Z</updated>
    
    <content type="html"><![CDATA[<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>python中的闭包从表现形式上定义（解释）为：如果在一个内部函数里，对在外部作用域（但不是在全局作用域）的变量进行引用，那么内部函数就被认为是闭包(closure).<br><strong>返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。</strong></p><span id="more"></span><p><strong>闭包示例：</strong></p><pre><code># 示例1def create_pointer(my_string):    def pointer(n):        return my_string[n]    return pointerpointer = create_pointer(&#39;my name is Molly&#39;)pointer(5)# 示例2def count():fs = []for i in range(1, 4):    def f():        # print(id(i))        return i*i    fs.append(f)return fsf1, f2, f3 = count()print(f1())print(f2())print(f3())# 返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。def count():def f(j):    def g():        # print(id(j))        return j*j    return gfs = []for i in range(1, 4):    fs.append(f(i)) # f(i)立刻被执行，因此i的当前值被传入f()return fsf1, f2, f3 = count()print(f1())print(f2())print(f3())</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h1&gt;&lt;p&gt;python中的闭包从表现形式上定义（解释）为：如果在一个内部函数里，对在外部作用域（但不是在全局作用域）的变量进行引用，那么内部函数就被认为是闭包(closure).&lt;br&gt;&lt;strong&gt;返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="基础" scheme="http://example.com/categories/python/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="闭包" scheme="http://example.com/categories/python/%E5%9F%BA%E7%A1%80/%E9%97%AD%E5%8C%85/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="闭包" scheme="http://example.com/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>python | 装饰器</title>
    <link href="http://example.com/2021/11/07/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>http://example.com/2021/11/07/%E8%A3%85%E9%A5%B0%E5%99%A8/</id>
    <published>2021-11-08T02:48:41.000Z</published>
    <updated>2021-11-08T13:02:07.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><p>顾名思义，从字面意思就可以理解，它是用来”装饰”Python的工具，使得代码更具有Python简洁的风格。换句话说，它是一种函数的函数，因为装饰器传入的参数就是一个函数，然后通过实现各种功能来对这个函数的功能进行增强。<br><strong>注：装饰器输入一个函数，输出一个函数</strong><br><strong>装饰器最大的优势</strong>是用于<strong>解决重复性</strong>的操作，其主要使用的场景有如下几个：<br>1.计算函数运行时间<br>2.给函数打日志<br>3.类型检查<br>当然，如果遇到其他重复操作的场景也可以类比使用装饰器。</p><span id="more"></span><pre><code># 1.原始需求def worker1():    print(&#39;我是一个勤劳的工作者！&#39;)def worker2():    print(&#39;我是一个勤劳的工作者！&#39;)def worker3():    print(&#39;我是一个勤劳的工作者！&#39;)# 2.我现在想要打印一些日志信息def worker1():    print(&#39;worker1 is working...&#39;)    print(&#39;我是一个勤劳的工作者！&#39;)worker1()# 3.装饰器输入一个函数，输出一个函数def print_working(func):    def wrapper():        print(f&#39;&#123;func.__name__&#125; is working...&#39;)        func()    return wrapperdef worker1():    print(&#39;我是一个勤劳的工作者！&#39;)def worker2():    print(&#39;我是一个勤劳的工作者！&#39;)def worker3():    print(&#39;我是一个勤劳的工作者！&#39;)worker1 = print_working(worker1)worker1()worker2= print_working(worker2)worker2()# 4.装饰器@print_workingdef worker1():    print(&#39;我是一个勤劳的工作者！&#39;)@print_workingdef worker2():    print(&#39;我是一个勤劳的工作者！&#39;)@print_workingdef worker3():    print(&#39;我是一个勤劳的工作者！&#39;)worker1()worker2()worker3()# 5.装饰器示例def arg_decorator(func):def wrapper(*args, **kw):    print(f&#39;&#123;func.__name__&#125; is working...&#39;)    func(*args, **kw)return wrapper# 带参数的装饰器@arg_decoratordef student_info(name, age=18, *books, **kw):    print(f&#39;我的名字叫&#123;name&#125;, 今年&#123;age&#125;岁，我有很多本书：&#39;)    for book in books:        print(book)    print(kw)student_info(&#39;Molly&#39;,18, &#39;语文书&#39;,&#39;数学书&#39;,height=170)    </code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;装饰器&quot;&gt;&lt;a href=&quot;#装饰器&quot; class=&quot;headerlink&quot; title=&quot;装饰器&quot;&gt;&lt;/a&gt;装饰器&lt;/h1&gt;&lt;p&gt;顾名思义，从字面意思就可以理解，它是用来”装饰”Python的工具，使得代码更具有Python简洁的风格。换句话说，它是一种函数的函数，因为装饰器传入的参数就是一个函数，然后通过实现各种功能来对这个函数的功能进行增强。&lt;br&gt;&lt;strong&gt;注：装饰器输入一个函数，输出一个函数&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;装饰器最大的优势&lt;/strong&gt;是用于&lt;strong&gt;解决重复性&lt;/strong&gt;的操作，其主要使用的场景有如下几个：&lt;br&gt;1.计算函数运行时间&lt;br&gt;2.给函数打日志&lt;br&gt;3.类型检查&lt;br&gt;当然，如果遇到其他重复操作的场景也可以类比使用装饰器。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="基础" scheme="http://example.com/categories/python/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="装饰器" scheme="http://example.com/categories/python/%E5%9F%BA%E7%A1%80/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="装饰器" scheme="http://example.com/tags/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>python | sorted</title>
    <link href="http://example.com/2021/11/07/sorted/"/>
    <id>http://example.com/2021/11/07/sorted/</id>
    <published>2021-11-08T02:46:29.000Z</published>
    <updated>2021-11-08T12:51:21.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h1><p>sorted() 函数对所有可迭代的对象进行排序操作。<br><strong>sort 与 sorted 区别：</strong><br>sort 是应用在 list 上的方法，sorted 可以对所有可迭代的对象进行排序操作。<br>list 的 sort 方法返回的是对已经存在的列表进行操作，而内建函数 sorted 方法返回的是一个新的 list，而不是在原来的基础上进行的操作。</p><span id="more"></span><p><strong>sorted 语法：</strong><br>sorted(iterable, key=None, reverse=False)<br>参数说明：<br>    iterable – 可迭代对象。<br>    key – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。<br>    reverse – 排序规则，reverse = True 降序 ， reverse = False 升序（默认）。<br>返回值:返回重新排序的列表。<br><strong>示例：</strong><br>sorted([36, 5, -12, 9, -21])</p><p>sorted([36, 5, -12, 9, -21], reverse=True)</p><p>sorted([36, 5, -12, 9, -21], key=abs)   # 按绝对值排序key指定的函数将作用于list的每一个元素上，并根据key函数返回的结果进行排序</p><p>list(map(abs, [36, 5, -12, 9, -21]))</p><p>points = [(5,2), (7,3), (3,4),(1,1),(2,6)]  # 按x坐标排序 y坐标排序 和0点距离排序</p><p>f_x = lambda x:x[0]<br>sorted(points, key=f_x)</p><p>f_y = lambda x:x[1]<br>sorted(points, key=f_y)</p><p>f_r = lambda x:x[0]**2+x[1]**2<br>sorted(points, key=f_r)</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;sorted&quot;&gt;&lt;a href=&quot;#sorted&quot; class=&quot;headerlink&quot; title=&quot;sorted&quot;&gt;&lt;/a&gt;sorted&lt;/h1&gt;&lt;p&gt;sorted() 函数对所有可迭代的对象进行排序操作。&lt;br&gt;&lt;strong&gt;sort 与 sorted 区别：&lt;/strong&gt;&lt;br&gt;sort 是应用在 list 上的方法，sorted 可以对所有可迭代的对象进行排序操作。&lt;br&gt;list 的 sort 方法返回的是对已经存在的列表进行操作，而内建函数 sorted 方法返回的是一个新的 list，而不是在原来的基础上进行的操作。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="基础" scheme="http://example.com/categories/python/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="sorted" scheme="http://example.com/categories/python/%E5%9F%BA%E7%A1%80/sorted/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="sorted" scheme="http://example.com/tags/sorted/"/>
    
  </entry>
  
  <entry>
    <title>python | MapReduce</title>
    <link href="http://example.com/2021/11/07/MapReduce/"/>
    <id>http://example.com/2021/11/07/MapReduce/</id>
    <published>2021-11-08T02:44:47.000Z</published>
    <updated>2021-11-08T12:47:47.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="map-and-reduce"><a href="#map-and-reduce" class="headerlink" title="map and reduce"></a>map and reduce</h1><p>1.map()<br>map()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。</p><span id="more"></span><p><strong>例1：</strong></p><pre><code>ls = [1,2,3,4,5,6,7,8,9]fx = lambda x:x**2rst = map(fx, ls)print(list(rst))</code></pre><p><strong>例2：</strong>   </p><pre><code>int2str = lambda x : str(x)rst = map(int2str, ls)list(rst)</code></pre><p>2.reduce()<br>reduce: 用传给 reduce 中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作，得到的结果再与第三个数据用 function 函数运算，依此类推，最后得到一个结果。<br><strong>例1：</strong></p><pre><code>from functools import reduce# 从python3开始，reduce函数移动到了functools这个包，每次使用前要先importmul_xy = lambda x, y: x*yreduce(mul_xy, [1, 3, 5, 7, 9])</code></pre><p><strong>例2：</strong>  </p><pre><code># 求n的阶乘from functools import reducen = int(input(&quot;请输入一个数：&quot;))jiecheng = lambda x, y: x * yreduce(jiecheng, [i for i in range(1, n+1)])</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;map-and-reduce&quot;&gt;&lt;a href=&quot;#map-and-reduce&quot; class=&quot;headerlink&quot; title=&quot;map and reduce&quot;&gt;&lt;/a&gt;map and reduce&lt;/h1&gt;&lt;p&gt;1.map()&lt;br&gt;map()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="基础" scheme="http://example.com/categories/python/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="map reduce" scheme="http://example.com/categories/python/%E5%9F%BA%E7%A1%80/map-reduce/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="map" scheme="http://example.com/tags/map/"/>
    
    <category term="reduce" scheme="http://example.com/tags/reduce/"/>
    
  </entry>
  
  <entry>
    <title>python | 高阶函数</title>
    <link href="http://example.com/2021/11/07/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2021/11/07/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</id>
    <published>2021-11-08T02:41:28.000Z</published>
    <updated>2021-11-08T12:42:14.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><p>高阶函数：一个函数可以接收另一个函数作为参数，这种函数就称为高阶函数</p><span id="more"></span><h1 id="print本身是一个内建函数"><a href="#print本身是一个内建函数" class="headerlink" title="print本身是一个内建函数"></a>print本身是一个内建函数</h1><pre><code>print(&#39;hello!&#39;)</code></pre><h1 id="函数名其实就是指向函数的变量！"><a href="#函数名其实就是指向函数的变量！" class="headerlink" title="函数名其实就是指向函数的变量！"></a>函数名其实就是指向函数的变量！</h1><pre><code>my_print = print my_print(&#39;a&#39;)</code></pre><h1 id="那么，函数的名字也可以作为一个变量，传入其它函数"><a href="#那么，函数的名字也可以作为一个变量，传入其它函数" class="headerlink" title="那么，函数的名字也可以作为一个变量，传入其它函数"></a>那么，函数的名字也可以作为一个变量，传入其它函数</h1><pre><code>def func_x(x, f):    return f(x)func_x(-1, abs)</code></pre><h1 id="一个函数可以接收另一个函数作为参数，这种函数就称之为高阶函数。"><a href="#一个函数可以接收另一个函数作为参数，这种函数就称之为高阶函数。" class="headerlink" title="一个函数可以接收另一个函数作为参数，这种函数就称之为高阶函数。"></a>一个函数可以接收另一个函数作为参数，这种函数就称之为高阶函数。</h1><pre><code>int2str = lambda x : str(x)func_x(-112, int2str)</code></pre><h1 id="一个更复杂的例子"><a href="#一个更复杂的例子" class="headerlink" title="一个更复杂的例子"></a>一个更复杂的例子</h1><pre><code>def func_xy(x, y, f):    return f(x,y)add = lambda x,y : x+y mul = lambda x,y : x*y SS = lambda x,y : x**2 + y**2print(func_xy(1,2,add))print(func_xy(1,2,mul))print(func_xy(1,2,SS))</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;高阶函数&quot;&gt;&lt;a href=&quot;#高阶函数&quot; class=&quot;headerlink&quot; title=&quot;高阶函数&quot;&gt;&lt;/a&gt;高阶函数&lt;/h1&gt;&lt;p&gt;高阶函数：一个函数可以接收另一个函数作为参数，这种函数就称为高阶函数&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="基础" scheme="http://example.com/categories/python/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="高阶函数" scheme="http://example.com/categories/python/%E5%9F%BA%E7%A1%80/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="高阶函数" scheme="http://example.com/tags/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>pandas | 文本数据处理</title>
    <link href="http://example.com/2021/11/06/pandas%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    <id>http://example.com/2021/11/06/pandas%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</id>
    <published>2021-11-07T03:39:54.000Z</published>
    <updated>2021-11-07T03:41:46.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pandas文本数据处理"><a href="#pandas文本数据处理" class="headerlink" title="pandas文本数据处理"></a>pandas文本数据处理</h1><p><a href="https://mp.weixin.qq.com/s/xmG8QizkbXJIBcqdT3nN-g">参考资料</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pandas文本数据处理&quot;&gt;&lt;a href=&quot;#pandas文本数据处理&quot; class=&quot;headerlink&quot; title=&quot;pandas文本数据处理&quot;&gt;&lt;/a&gt;pandas文本数据处理&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="第三方库" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="pandas" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/pandas/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="pandas" scheme="http://example.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>装系统 | 微软官网工具安装纯净win10</title>
    <link href="http://example.com/2021/11/06/%E5%BE%AE%E8%BD%AF%E5%AE%98%E7%BD%91%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85%E7%BA%AF%E5%87%80win10/"/>
    <id>http://example.com/2021/11/06/%E5%BE%AE%E8%BD%AF%E5%AE%98%E7%BD%91%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85%E7%BA%AF%E5%87%80win10/</id>
    <published>2021-11-07T03:14:06.000Z</published>
    <updated>2021-11-07T03:16:19.725Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微软官网工具安装纯净win10"><a href="#微软官网工具安装纯净win10" class="headerlink" title="微软官网工具安装纯净win10"></a>微软官网工具安装纯净win10</h1><p><a href="https://zhuanlan.zhihu.com/p/92129617">参考资料</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;微软官网工具安装纯净win10&quot;&gt;&lt;a href=&quot;#微软官网工具安装纯净win10&quot; class=&quot;headerlink&quot; title=&quot;微软官网工具安装纯净win10&quot;&gt;&lt;/a&gt;微软官网工具安装纯净win10&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://z</summary>
      
    
    
    
    <category term="电脑使用小技巧" scheme="http://example.com/categories/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    <category term="装系统" scheme="http://example.com/categories/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/%E8%A3%85%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="装系统" scheme="http://example.com/tags/%E8%A3%85%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>多进程 | python实现多任务进程</title>
    <link href="http://example.com/2021/11/06/python%E5%AE%9E%E7%8E%B0%E5%A4%9A%E4%BB%BB%E5%8A%A1%E8%BF%9B%E7%A8%8B/"/>
    <id>http://example.com/2021/11/06/python%E5%AE%9E%E7%8E%B0%E5%A4%9A%E4%BB%BB%E5%8A%A1%E8%BF%9B%E7%A8%8B/</id>
    <published>2021-11-06T12:15:07.000Z</published>
    <updated>2021-11-06T12:19:54.407Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python实现多任务进程"><a href="#python实现多任务进程" class="headerlink" title="python实现多任务进程"></a>python实现多任务进程</h1><p>以下内容主要阐述了python实现多进程的两种方式、进程间如何通信、进程池以及一个多进程案例：批量复制文件。</p><span id="more"></span><p><strong>Show You the Code:</strong></p><pre><code># 实现多进程# 1.使用process类import multiprocessingdef process(index):    print(f&#39;Process:&#123;index&#125;&#39;)if __name__ == &quot;__main__&quot;:    for i in range(5):        p = multiprocessing.Process(target=process, args=(i,))        p.start()# 2.继承process类import timefrom multiprocessing import Processclass MyProcess(Process):    def __init__(self, loop):        Process.__init__()        self.loop = loop    def run(self):        for count in range(self.loop):            time.sleep(1)            print(f&#39;Pid:&#123;self.pid&#125; LoopCount:&#123;count&#125;&#39;)if __name__ == &#39;__main__&#39;:    for i in range(2, 5):        p = MyProcess(i)        p.start()# 进程间的通信# 1、Queue-队列 先进先出from multiprocessing import Queueimport multiprocessingdef download(p):  # download the data    lst = [11, 22, 33, 44]    for item in lst:        p.put(item)    print(&quot;successfully downloaded data!&quot;)def save_data(p):    lst = []    while True:        data = p.get()        lst.append(data)        if p.empty():            break    print(lst)    print(&quot;successfully saved data!&quot;)def main():    p1 = Queue()    t1 = multiprocessing.Process(target=download, args=(p1,))    t2 = multiprocessing.Process(target=save_data, args=(p1,))    t1.start()    t2.start()if __name__ == &quot;__main__&quot;:    main()# 2、共享全局变量不适用于多进程编程import multiprocessinga = 1  # 全局变量def demo1():    global a    a += 1def demo2():    print(a)def main():    t1 = multiprocessing.Process(target=demo1)    t2 = multiprocessing.Process(target=demo2)    t1.start()    t2.start()if __name__ == &quot;__main__&quot;:    main()# 进程池之间的通信from multiprocessing import Poolimport os, time, randomdef worker(a):    t_start = time.time()    print(&#39;%s开始执行，进程号为%d&#39; % (a, os.getpid()))    time.sleep(random.random() * 2)    t_stop = time.time()    print(a, &#39;执行完成，耗时%0.2f&#39; % (t_stop - t_start))if __name__ == &#39;__main__&#39;:    po = Pool(3)  # 定义一个进程池    for i in range(0, 10):        po.apply_async(worker, (i,))  # 向进程池中添加worker任务    print(&quot;--start--&quot;)    po.close()    po.join()    print(&quot;--end--&quot;)# 案例：文件批量复制import osimport timeimport multiprocessingdef copy_file(Q, oldfolderName, newfolderName, file_name):    # 文件复制,不需要返回    time.sleep(0.5)    # print(&#39;\r从%s文件夹复制到%s文件夹的%s文件&#39;%(oldfolderName,newfolderName,file_name),end=&#39;&#39;)    old_file = open(oldfolderName + &#39;/&#39; + file_name, &#39;rb&#39;)  # 待复制文件    content = old_file.read()    old_file.close()    new_file = open(newfolderName + &#39;/&#39; + file_name, &#39;wb&#39;)  # 复制出的新文件    new_file.write(content)    new_file.close()    Q.put(file_name)  # 向Q队列中添加文件def main():    oldfolderName = input(&#39;请输入要复制的文件夹名字:&#39;)  # 步骤1获取要复制文件夹的名字(可以手动创建,也可以通过代码创建,这里我们手动创建)    newfolderName = oldfolderName + &#39;复件&#39;    # 步骤二 创建一个新的文件夹    if not os.path.exists(newfolderName):        os.mkdir(newfolderName)    filenames = os.listdir(oldfolderName)  # 3.获取文件夹里面所有待复制的文件名    # print(filenames)    pool = multiprocessing.Pool(5)  # 4.创建进程池    Q = multiprocessing.Manager().Queue()  # 创建队列,进行通信    for file_name in filenames:        pool.apply_async(copy_file, args=(Q, oldfolderName, newfolderName, file_name))  # 5.向进程池添加任务    pool.close()    copy_file_num = 0    file_count = len(filenames)    # 不知道什么时候完成,所以定义一个死循环    while True:        file_name = Q.get()        print(f&quot;&#123;file_name&#125;已经复制！&quot;)        copy_file_num += 1        time.sleep(0.2)        print(&#39;\r拷贝进度%.2f %%&#39; % (copy_file_num * 100 / file_count), end=&#39;&#39;)  # 做一个拷贝进度条        if copy_file_num &gt;= file_count:            breakif __name__ == &#39;__main__&#39;:    main()</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;python实现多任务进程&quot;&gt;&lt;a href=&quot;#python实现多任务进程&quot; class=&quot;headerlink&quot; title=&quot;python实现多任务进程&quot;&gt;&lt;/a&gt;python实现多任务进程&lt;/h1&gt;&lt;p&gt;以下内容主要阐述了python实现多进程的两种方式、进程间如何通信、进程池以及一个多进程案例：批量复制文件。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="基础" scheme="http://example.com/categories/python/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="多进程" scheme="http://example.com/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
    <category term="multiprocessing" scheme="http://example.com/tags/multiprocessing/"/>
    
  </entry>
  
  <entry>
    <title>requests | 爬取精美壁纸</title>
    <link href="http://example.com/2021/11/06/%E7%88%AC%E5%8F%96%E7%B2%BE%E7%BE%8E%E5%A3%81%E7%BA%B8/"/>
    <id>http://example.com/2021/11/06/%E7%88%AC%E5%8F%96%E7%B2%BE%E7%BE%8E%E5%A3%81%E7%BA%B8/</id>
    <published>2021-11-06T09:29:25.000Z</published>
    <updated>2021-11-06T09:32:06.144Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬取精美壁纸"><a href="#爬取精美壁纸" class="headerlink" title="爬取精美壁纸"></a>爬取精美壁纸</h1><p><strong>爬取目标：</strong> Wallhaven网站中Toplist标签下前50页共1196张精美壁纸。<br><a href="https://mp.weixin.qq.com/s/BiJKm4SnL6qCLEK91xcDIQ">参考资料</a></p><p><strong>代码：</strong></p><pre><code># -*- coding:utf-8 -*-import osimport requestsfrom lxml import etree# 1.获取每页的html信息headers = &#123;    &#39;user-agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#39;                  &#39;Chrome/95.0.4638.54 Safari/537.36 &#39;&#125;# 定义获取每页html信息的函数def get_html_info(page):    url = f&#39;https://wallhaven.cc/toplist?page=&#123;page&#125;&#39;    resp = requests.get(url, headers=headers)    print(resp.text)    resp_html = etree.HTML(resp.text)    return resp_html# 2.解析url信息+下载图片def get_pic(resp_html):    pic_url_list = []    lis = resp_html.xpath(&#39;//*[@id=&quot;thumbs&quot;]/section[1]/ul/li&#39;)  # 获取该页所有缩略图包含的信息    for li in lis:        pic_url = li.xpath(&#39;./figure/a/@href&#39;)[0]  # 获取存放在缩略图信息中的缩略图原图网址        pic_url_list.append(pic_url)    for pic_url in pic_url_list:        resp2 = requests.get(pic_url, headers=headers)        r_html2 = etree.HTML(resp2.text)        pic_size = r_html2.xpath(&#39;//*[@id=&quot;showcase-sidebar&quot;]/div/div[1]/h3/text()&#39;)[0]  # 用照片分辨率作为名称一部分        final_url = r_html2.xpath(&#39;//*[@id=&quot;wallpaper&quot;]/@src&#39;)[0]  # 获取原图下载地址        pic = requests.get(url=final_url, headers=headers).content        if not os.path.exists(&#39;Wallhaven&#39;):            os.mkdir(&#39;Wallhaven&#39;)        with open(&#39;Wallhaven\\&#39; + pic_size + final_url[-10:], mode=&#39;wb&#39;) as f:            f.write(pic)  # 保存图片            print(pic_size + final_url[-10:] + &#39;，下载完毕，已下载&#123;&#125;张壁纸&#39;.format(len(os.listdir(&#39;Wallhaven&#39;))))# 3.构建main()函数运行程序def main():    page_range = range(1,51) # 爬取1-50页的壁纸    for i in page_range:        r = get_html_info(i)        get_pic(r)        print(f&#39;===============第&#123;i&#125;页下载完毕=============&#39;)if __name__ == &#39;__main__&#39;:    main()</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;爬取精美壁纸&quot;&gt;&lt;a href=&quot;#爬取精美壁纸&quot; class=&quot;headerlink&quot; title=&quot;爬取精美壁纸&quot;&gt;&lt;/a&gt;爬取精美壁纸&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;爬取目标：&lt;/strong&gt; Wallhaven网站中Toplist标签下前50页共1196</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="第三方库" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="requests" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/requests/"/>
    
    
    <category term="requests" scheme="http://example.com/tags/requests/"/>
    
    <category term="爬虫" scheme="http://example.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>深度学习 | 大胆新奇的卷积神经网络设计</title>
    <link href="http://example.com/2021/11/05/%E5%A4%A7%E8%83%86%E6%96%B0%E5%A5%87%E7%9A%84%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%BE%E8%AE%A1/"/>
    <id>http://example.com/2021/11/05/%E5%A4%A7%E8%83%86%E6%96%B0%E5%A5%87%E7%9A%84%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%BE%E8%AE%A1/</id>
    <published>2021-11-06T04:15:28.000Z</published>
    <updated>2021-11-06T09:04:25.587Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/6HbPBYQvLMU5okI-tIUBcg">大胆又新奇的卷积网络结构设计</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/6HbPBYQvLMU5okI-tIUBcg&quot;&gt;大胆又新奇的卷积网络结构设计&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>深度学习基础 | 神经网络模型概览</title>
    <link href="http://example.com/2021/11/05/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E6%A6%82%E8%A7%88/"/>
    <id>http://example.com/2021/11/05/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E6%A6%82%E8%A7%88/</id>
    <published>2021-11-06T04:15:08.000Z</published>
    <updated>2021-11-06T07:39:18.687Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/ds5YWmyIZTHW55Tkdf3pww">一文概览神经网络模型</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/ds5YWmyIZTHW55Tkdf3pww&quot;&gt;一文概览神经网络模型&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习基础" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="神经网络模型" scheme="http://example.com/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>深度学习基础 | 一文看懂各种神经网络优化算法</title>
    <link href="http://example.com/2021/11/05/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82%E5%90%84%E7%A7%8D%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2021/11/05/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82%E5%90%84%E7%A7%8D%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/</id>
    <published>2021-11-06T04:14:51.000Z</published>
    <updated>2021-11-06T09:27:38.824Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一文看懂各种神经网络优化算法"><a href="#一文看懂各种神经网络优化算法" class="headerlink" title="一文看懂各种神经网络优化算法"></a>一文看懂各种神经网络优化算法</h1><p><a href="https://mp.weixin.qq.com/s/gRrZImMydyCDBNCTIgVYXw">一文看懂各种神经网络优化算法</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一文看懂各种神经网络优化算法&quot;&gt;&lt;a href=&quot;#一文看懂各种神经网络优化算法&quot; class=&quot;headerlink&quot; title=&quot;一文看懂各种神经网络优化算法&quot;&gt;&lt;/a&gt;一文看懂各种神经网络优化算法&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://mp.we</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习基础" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="优化算法" scheme="http://example.com/tags/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
