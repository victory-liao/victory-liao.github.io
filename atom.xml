<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Victory&#39;s Blog</title>
  
  <subtitle>非淡泊无以明志，非宁静无以致远</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-10-29T12:18:16.466Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>victory-liao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>requests | 获取网站新文章</title>
    <link href="http://example.com/2021/10/29/%E8%8E%B7%E5%8F%96%E7%BD%91%E7%AB%99%E6%96%B0%E6%96%87%E7%AB%A0/"/>
    <id>http://example.com/2021/10/29/%E8%8E%B7%E5%8F%96%E7%BD%91%E7%AB%99%E6%96%B0%E6%96%87%E7%AB%A0/</id>
    <published>2021-10-29T12:15:03.000Z</published>
    <updated>2021-10-29T12:18:16.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python爬虫-已爬取目标网站所有文章，后续如何只获取新文章"><a href="#Python爬虫-已爬取目标网站所有文章，后续如何只获取新文章" class="headerlink" title="Python爬虫~已爬取目标网站所有文章，后续如何只获取新文章?"></a>Python爬虫~已爬取目标网站所有文章，后续如何只获取新文章?</h1><p>代码：</p><pre><code>print(&quot;文章刷新中......&quot;)# 定义函数，获取想要的文章并批量写入word文件import requestsfrom bs4 import BeautifulSoupimport docxfrom docx.shared import Pt  # 用于设定字体大小（磅值）from docx.oxml.ns import qn  # 用于应用中文字体import randomimport timeimport osdef Get_article_to_word(url, date):    user_agent_list = [        &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36&quot;,        &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&quot;,        &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36&quot;,        &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.62 Safari/537.36&quot;,        &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36&quot;,        &quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)&quot;,        &quot;Mozilla/5.0 (Macintosh; U; PPC Mac OS X 10.5; en-US; rv:1.9.2.15) Gecko/20110303 Firefox/3.6.15&quot;        ]    header = &#123;&#39;User-Agent&#39;: random.choice(user_agent_list)&#125;    wb_data = requests.get(url, headers=header)    soup = BeautifulSoup(wb_data.content)    title = soup.select(&#39;.headword&#39;)[0].text.strip()  # 获得标题    content1 = soup.select(&quot;.MsoNormal&quot;)  # 针对正文布局为 class = &quot;MsoNormal&quot;    content2 = soup.select(&quot;#art_content&quot;)  # 针对正文布局为 id = &quot;art_content&quot;    doc = docx.Document()  # 新建空白word文档    # 设定全局字体    doc.styles[&#39;Normal&#39;].font.name = u&#39;宋体&#39;    doc.styles[&#39;Normal&#39;]._element.rPr.rFonts.set(qn(&#39;w:eastAsia&#39;), u&#39;宋体&#39;)    # 写入标题行，并设置字体格式    p = doc.add_paragraph()    r = p.add_run(title)    r.bold = True    r.font.size = Pt(18)    doc.add_paragraph(date)  # 写入日期    doc.add_paragraph(url)  # 写入文章链接    dirs = os.getcwd() + &quot;\\文章&quot;    if not os.path.exists(dirs):        os.makedirs(dirs)    # 写入正文    for i in content2:        doc.add_paragraph(i.text)    for i in content1:        doc.add_paragraph(i.text)    doc.save(f&quot;&#123;dirs&#125;\\&#123;title&#125;.docx&quot;)# 判断网站是否有新文章import requestsimport jsonheader = &#123;    &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.75 &#39;                  &#39;Safari/537.36&#39;&#125;form_data = &#123;&#39;_q&#39;: &#39;Article.list&#39;,             &#39;siteId&#39;: &#39;7e0b3b27-2622-4aa7-b6f8-abfe5c5df922&#39;,             &#39;catalogId&#39;: &#39;34f92da3-d6d0-4e96-899f-d7f581c18162&#39;,             &#39;pub&#39;: &#39;true&#39;,             &#39;limit&#39;: 150,  # 网站更新速度较慢，每次查看是否有更新的时候，只获取前10页共150篇文章的信息             &#39;start&#39;: 1&#125;# 这是异步加载，请求方法是POSTurl = &quot;http://www.bicpa.org.cn/dtzj/zxgg/getArticles.action&quot;res = requests.post(url, data=form_data, headers=header)article_data0 = res.text.split(&quot;&#123;success:true,datas:&quot;)[1]  # 去掉字符串前面的无用信息“&#123;success:true,datas:”article_data = article_data0.split(&quot;,total:&quot;)[0]  # 去掉字符串后面的无用信息“,total:xxxx&#125;”obj = json.loads(article_data)# 载入数据库中的所有链接，作为判断基准f = open(os.getcwd() + &#39;\\links.txt&#39;, &#39;r&#39;)link_database = f.read()  # 读取成一个大字符串# 将所有新文章链接写入文本文件path = r&quot;http://www.bicpa.org.cn&quot;links_file = open(&#39;links.txt&#39;, &#39;a&#39;)  # 避免覆盖已有数据，用添加模式`a`写入counter_link = 0  # 新文章链接计数器counter_download = 0  # 新下载文章计数器for info in obj:    link = path + info[&#39;url&#39;] + info[&#39;primaryKey&#39;] + &quot;.html&quot;  # 拼接链接信息    if link in link_database:  # 判断新提取的链接是否已存在于数据库        pass    else:        links_file.write(link + &quot;\n&quot;)  # 写入链接信息        counter_link += 1        # 下载标题含有&quot;委员会专家提示&quot;的文章        if &quot;委员会专家提示&quot; in info[&#39;title&#39;]:            Get_article_to_word(link, info[&quot;publishDate&quot;])  # 调用写好的函数，下载文章到word文件            counter_download += 1  # 每下载一篇文章，计数器增加1links_file.close()  # 写完后关闭文件# 显示每次的结果if counter_link == 0:    print(&quot;没有文章更新！&quot;)else:    print(f&quot;共获取到 &#123;counter_link&#125; 篇新文章的链接，并加入数据库。&quot;)if counter_download == 0:    print(&quot;没有&#39;委员会专家提示&#39;文章更新！&quot;)else:    print(f&quot;共下载 &#123;counter_download&#125; 篇&#39;委员会专家提示&#39;新文章，请到文件夹查看。&quot;)print(&quot;程序运行完成，关闭窗口退出.&quot;)input()</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python爬虫-已爬取目标网站所有文章，后续如何只获取新文章&quot;&gt;&lt;a href=&quot;#Python爬虫-已爬取目标网站所有文章，后续如何只获取新文章&quot; class=&quot;headerlink&quot; title=&quot;Python爬虫~已爬取目标网站所有文章，后续如何只获取新文</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="第三方库" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="requests" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/requests/"/>
    
    
    <category term="os" scheme="http://example.com/tags/os/"/>
    
    <category term="python-docx" scheme="http://example.com/tags/python-docx/"/>
    
    <category term="random" scheme="http://example.com/tags/random/"/>
    
    <category term="requests" scheme="http://example.com/tags/requests/"/>
    
    <category term="json" scheme="http://example.com/tags/json/"/>
    
    <category term="time" scheme="http://example.com/tags/time/"/>
    
    <category term="BeautifulSoup" scheme="http://example.com/tags/BeautifulSoup/"/>
    
  </entry>
  
  <entry>
    <title>requests | python爬虫爬取会计师网站的指定文章</title>
    <link href="http://example.com/2021/10/29/python%E7%88%AC%E8%99%AB%E7%88%AC%E5%8F%96%E4%BC%9A%E8%AE%A1%E5%B8%88%E7%BD%91%E7%AB%99%E7%9A%84%E6%8C%87%E5%AE%9A%E6%96%87%E7%AB%A0/"/>
    <id>http://example.com/2021/10/29/python%E7%88%AC%E8%99%AB%E7%88%AC%E5%8F%96%E4%BC%9A%E8%AE%A1%E5%B8%88%E7%BD%91%E7%AB%99%E7%9A%84%E6%8C%87%E5%AE%9A%E6%96%87%E7%AB%A0/</id>
    <published>2021-10-29T10:52:51.000Z</published>
    <updated>2021-10-29T12:05:14.698Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python爬虫爬取会计师网站的指定文章"><a href="#python爬虫爬取会计师网站的指定文章" class="headerlink" title="python爬虫爬取会计师网站的指定文章"></a>python爬虫爬取会计师网站的指定文章</h1><p>还没学习爬虫，没看懂！有缘再见！后会有期！</p><p>贴上代码：</p><pre><code>import requestsimport osimport jsonprint(&quot;开始爬取文章......&quot;)header = &#123;    &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.75 &#39;                  &#39;Safari/537.36&#39;&#125;form_data = &#123;&#39;_q&#39;: &#39;Article.list&#39;,             &#39;siteId&#39;: &#39;7e0b3b27-2622-4aa7-b6f8-abfe5c5df922&#39;,             &#39;catalogId&#39;: &#39;34f92da3-d6d0-4e96-899f-d7f581c18162&#39;,             &#39;pub&#39;: &#39;true&#39;,             &#39;limit&#39;: 5000,             &#39;start&#39;: 1&#125;# 这是异步加载，请求方法是POSTurl = &quot;http://www.bicpa.org.cn/dtzj/zxgg/getArticles.action&quot;res = requests.post(url, data=form_data, headers=header)article_data0 = res.text.split(&quot;&#123;success:true,datas:&quot;)[1]  # 去掉字符串前面的无用信息“&#123;success:true,datas:”article_data = article_data0.split(&quot;,total:&quot;)[0]  # 去掉字符串后面的无用信息“,total:4946&#125;”obj = json.loads(article_data)# 获取标题含有“委员会专家提示”的文章的标题，发布时间和链接path = r&quot;http://www.bicpa.org.cn&quot;articles = []for info in obj:    if &quot;委员会专家提示&quot; in info[&#39;title&#39;]:        article = &#123;            &quot;标题&quot;: info[&#39;title&#39;].strip(),  # strip()去除首尾空格            &quot;发布时间&quot;: info[&#39;publishDate&#39;],            &quot;链接&quot;: path + info[&#39;url&#39;] + info[&#39;primaryKey&#39;] + &quot;.html&quot;        &#125;        articles.append(article)import requestsfrom bs4 import BeautifulSoupimport docxfrom docx.shared import Pt  # 用于设定字体大小（磅值）from docx.oxml.ns import qn  # 用于应用中文字体import randomimport time# 获取想要的文章并批量写入word文件def Get_article_to_word(url, date):    user_agent_list = [        &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36&quot;,        &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&quot;,        &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36&quot;,        &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.62 Safari/537.36&quot;,        &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36&quot;,        &quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)&quot;,        &quot;Mozilla/5.0 (Macintosh; U; PPC Mac OS X 10.5; en-US; rv:1.9.2.15) Gecko/20110303 Firefox/3.6.15&quot;    ]    header = &#123;&#39;User-Agent&#39;: random.choice(user_agent_list)&#125;    wb_data = requests.get(url, headers=header)    soup = BeautifulSoup(wb_data.content)    title = soup.select(&#39;.headword&#39;)[0].text.strip()  # 获得标题    content1 = soup.select(&quot;.MsoNormal&quot;)  # 针对正文布局为 class = &quot;MsoNormal&quot;    content2 = soup.select(&quot;#art_content&quot;)  # 针对正文布局为 id = &quot;art_content&quot;    doc = docx.Document()  # 新建空白word文档    # 设定全局字体    doc.styles[&#39;Normal&#39;].font.name = u&#39;宋体&#39;    doc.styles[&#39;Normal&#39;]._element.rPr.rFonts.set(qn(&#39;w:eastAsia&#39;), u&#39;宋体&#39;)    # 写入标题行，并设置字体格式    p = doc.add_paragraph()    r = p.add_run(title)    r.bold = True    r.font.size = Pt(18)    doc.add_paragraph(date)  # 写入日期    doc.add_paragraph(url)  # 写入文章链接    dirs = os.getcwd() + &quot;\\文章&quot;    if not os.path.exists(dirs):        os.makedirs(dirs)    # 写入正文    for i in content2:        doc.add_paragraph(i.text)    for i in content1:        doc.add_paragraph(i.text)    doc.save(f&quot;&#123;dirs&#125;\\&#123;title&#125;.docx&quot;)# 遍历所有文章的链接，调用以上函数执行for art in articles:    Get_article_to_word(art[&quot;链接&quot;], art[&quot;发布时间&quot;])    print(&quot;&#123;&#125; 下载完成。&quot;.format(art[&#39;标题&#39;]))    if articles.index(art) % 30 == 29:  # 每获取30篇文章，暂停5秒，避免频繁请求被服务器切断连接        time.sleep(5)print(f&quot;共下载 &#123;len(articles)&#125; 篇文章。&quot;)print(&quot;程序运行完成，关闭窗口退出.&quot;)input()</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;python爬虫爬取会计师网站的指定文章&quot;&gt;&lt;a href=&quot;#python爬虫爬取会计师网站的指定文章&quot; class=&quot;headerlink&quot; title=&quot;python爬虫爬取会计师网站的指定文章&quot;&gt;&lt;/a&gt;python爬虫爬取会计师网站的指定文章&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="第三方库" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="requests" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/requests/"/>
    
    
    <category term="os" scheme="http://example.com/tags/os/"/>
    
    <category term="python-docx" scheme="http://example.com/tags/python-docx/"/>
    
    <category term="random" scheme="http://example.com/tags/random/"/>
    
    <category term="requests" scheme="http://example.com/tags/requests/"/>
    
    <category term="json" scheme="http://example.com/tags/json/"/>
    
    <category term="BeautifulSoup4" scheme="http://example.com/tags/BeautifulSoup4/"/>
    
    <category term="time" scheme="http://example.com/tags/time/"/>
    
  </entry>
  
  <entry>
    <title>os | os.listdir()和os.walk()</title>
    <link href="http://example.com/2021/10/29/listdir%E5%92%8Cwalk/"/>
    <id>http://example.com/2021/10/29/listdir%E5%92%8Cwalk/</id>
    <published>2021-10-29T10:21:40.000Z</published>
    <updated>2021-10-29T10:27:08.631Z</updated>
    
    <content type="html"><![CDATA[<h1 id="os-listdir-和os-walk"><a href="#os-listdir-和os-walk" class="headerlink" title="os.listdir()和os.walk()"></a>os.listdir()和os.walk()</h1><p><a href="https://www.jianshu.com/p/5c3b45d672d5">os.listdir()和os.walk()</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;os-listdir-和os-walk&quot;&gt;&lt;a href=&quot;#os-listdir-和os-walk&quot; class=&quot;headerlink&quot; title=&quot;os.listdir()和os.walk()&quot;&gt;&lt;/a&gt;os.listdir()和os.walk()&lt;/h1</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="内置模块" scheme="http://example.com/categories/python/%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/"/>
    
    <category term="os" scheme="http://example.com/categories/python/%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/os/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="os" scheme="http://example.com/tags/os/"/>
    
  </entry>
  
  <entry>
    <title>openpyxl | 从多路径多Excel表中获取数据并存入新表</title>
    <link href="http://example.com/2021/10/29/%E4%BB%8E%E5%A4%9A%E8%B7%AF%E5%BE%84%E5%A4%9AExcel%E8%A1%A8%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%B9%B6%E5%AD%98%E5%85%A5%E6%96%B0%E8%A1%A8/"/>
    <id>http://example.com/2021/10/29/%E4%BB%8E%E5%A4%9A%E8%B7%AF%E5%BE%84%E5%A4%9AExcel%E8%A1%A8%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%B9%B6%E5%AD%98%E5%85%A5%E6%96%B0%E8%A1%A8/</id>
    <published>2021-10-29T10:14:32.000Z</published>
    <updated>2021-10-29T10:16:11.784Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从多路径多Excel表中获取数据并存入新表"><a href="#从多路径多Excel表中获取数据并存入新表" class="headerlink" title="从多路径多Excel表中获取数据并存入新表"></a>从多路径多Excel表中获取数据并存入新表</h1><p>实现代码：</p><pre><code>import oswork_path = os.getcwd() + &quot;\\资料&quot;  # 获取当前工作路径，指定“资料”文件夹# 获取路径下所有.xlsx文件，并存入列表pathss = []  # 存储文件夹内所有文件的路径（包括子目录内的文件）for root, dirs, files in os.walk(work_path):    path = [os.path.join(root, name) for name in files]  # 将目录和文件名连接起来，才是完整文件路径    for i in range(len(path)):  # 遍历所有文件的地址        if path[i].endswith(&quot;.xlsx&quot;):  # 只提取后缀为xlsx的文件            pathss.append(path[i])# 定义函数，获取Excel表格中的ID数据from openpyxl import load_workbook  # 用于读取Excel中的信息def Get_system_ID(file):    wb = load_workbook(file)    ws = wb.active    ID_list = []    for row in range(2, ws.max_row + 1):        ID = ws[&quot;A&quot; + str(row)].value  # ID信息在A列        if ID != None:  # 过滤空值            ID_list.append(ID)    return ID_list# 获取数据，存入总列表total_list = []for file in pathss:    info = Get_system_ID(file)    total_list += info# 写入数据到新的excel表，并设置格式from openpyxl import Workbookfrom openpyxl.styles import Font, colors, Alignment  # 字体，颜色，对齐from openpyxl.styles import PatternFill  # 单元格填充wb = Workbook()  # 新建Excel工作簿ws = wb.active  # 使用活动工作表ws.column_dimensions[&#39;A&#39;].width = 18.5  # 设定A列宽度ws.cell(row=1, column=1, value=&quot;ID&quot;)  # 写入字段名color_fill = PatternFill(fill_type=&#39;solid&#39;, fgColor=&quot;B3CFA1&quot;)  # 设置底色ws.cell(row=1, column=1).fill = color_fill  # 填充底色# 批量从列表中提取数据并写入for row in range(1, len(total_list) + 1):    ws.cell(row=row + 1, column=1, value=total_list[row - 1])# 设置字号及对齐font_set = Font(name=&#39;Arial&#39;, size=9)for i in range(1, ws.max_row + 1):    ws.cell(row=i, column=1).font = font_set    ws.cell(row=i, column=1).alignment = Alignment(horizontal=&#39;left&#39;, vertical=&#39;center&#39;, shrink_to_fit=True)wb.save(os.getcwd() + &quot;\\ID.xlsx&quot;)print(f&quot;\n共获取到 &#123;len(pathss)&#125; 个 Excel表，共 &#123;len(total_list)&#125; 个ID。&quot;)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;从多路径多Excel表中获取数据并存入新表&quot;&gt;&lt;a href=&quot;#从多路径多Excel表中获取数据并存入新表&quot; class=&quot;headerlink&quot; title=&quot;从多路径多Excel表中获取数据并存入新表&quot;&gt;&lt;/a&gt;从多路径多Excel表中获取数据并存入新表&lt;/</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="第三方库" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="openpyxl" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/openpyxl/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="openpyxl" scheme="http://example.com/tags/openpyxl/"/>
    
    <category term="os" scheme="http://example.com/tags/os/"/>
    
  </entry>
  
  <entry>
    <title>random | python为每个学生出不一样的题</title>
    <link href="http://example.com/2021/10/29/python%E4%B8%BA%E6%AF%8F%E4%B8%AA%E5%AD%A6%E7%94%9F%E5%87%BA%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E9%A2%98/"/>
    <id>http://example.com/2021/10/29/python%E4%B8%BA%E6%AF%8F%E4%B8%AA%E5%AD%A6%E7%94%9F%E5%87%BA%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E9%A2%98/</id>
    <published>2021-10-29T10:01:54.000Z</published>
    <updated>2021-10-29T10:05:21.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python为每个学生出不一样的题"><a href="#python为每个学生出不一样的题" class="headerlink" title="python为每个学生出不一样的题"></a>python为每个学生出不一样的题</h1><p>实现代码：</p><pre><code>import random# 不重复随机整数生成函数def Random_num(num_max, num_qty):    &#39;&#39;&#39;    num_max:最大数    num_qty:生成随机数的个数    &#39;&#39;&#39;    num_list = []  # 储存生成的随机数    while len(num_list) &lt; num_qty:  # 控制随机数的个数        num = random.randint(2, num_max)  # 设定在此范围内取数        if num in num_list:  # 判断随机数是否重复            continue  # 若重复，则重新生成        else:            num_list.append(num)  # 将不重复的随机数放入列表    return num_list  # 生成完成后返回随机数列表# 定义函数，按随机数在题库中抽取对应编号的题目from openpyxl import load_workbookdef Question(que_type, numbers):    &#39;&#39;&#39;    que_type:试题类型（&quot;单选题&quot;,&quot;多选题&quot;,&quot;判断题&quot;,&quot;填空题&quot;）    numbers:需要抽取的试题编号    &#39;&#39;&#39;    questions = []  # 储存抽取的题目    wb = load_workbook(&quot;题库.xlsx&quot;)  # 载入题库    if que_type == &quot;单选题&quot;:        ws = wb[que_type]        for i in numbers:  # 按随机生成的编号抽题            question = ws[&quot;B&quot; + str(i)].value  # 问题在B列            answerA = &quot;A：\t&quot; + str(ws[&quot;C&quot; + str(i)].value)  # 选项A在C列，&quot;\t&quot;相当于按一下tab键，在字符间产生间隔            answerB = &quot;B：\t&quot; + str(ws[&quot;D&quot; + str(i)].value)  # 选项B在D列            answerC = &quot;C：\t&quot; + str(ws[&quot;E&quot; + str(i)].value)  # 选项C在E列            answerD = &quot;D：\t&quot; + str(ws[&quot;F&quot; + str(i)].value)  # 选项D在F列            right_answer = ws[&quot;G&quot; + str(i)].value  # 正确答案在G列            single_question = [question, answerA, answerB, answerC, answerD, right_answer]  # 每行的数据存入列表            questions.append(single_question)  # 每个题目的数据存入总列表    elif que_type == &quot;多选题&quot;:        ws = wb[que_type]        for i in numbers:            question = ws[&quot;B&quot; + str(i)].value            answerA = &quot;A：\t&quot; + str(ws[&quot;C&quot; + str(i)].value)            answerB = &quot;B：\t&quot; + str(ws[&quot;D&quot; + str(i)].value)            answerC = &quot;C：\t&quot; + str(ws[&quot;E&quot; + str(i)].value)            answerD = &quot;D：\t&quot; + str(ws[&quot;F&quot; + str(i)].value)            right_answer = ws[&quot;H&quot; + str(i)].value            single_question = [question, answerA, answerB, answerC, answerD, right_answer]            if ws[&quot;G&quot; + str(i)].value:  # 有些题有E选项，有些没有，因此需要判断一下是否有E选项                answerE = &quot;E：\t&quot; + str(ws[&quot;G&quot; + str(i)].value)                single_question.insert(-1, answerE)  # 将E选项插入到答案前面，保持答案是最后一个元素            questions.append(single_question)    else:  # 判断题和填空题，内容只取题干和答案        ws = wb[que_type]        for i in numbers:            question = ws[&quot;B&quot; + str(i)].value            right_answer = ws[&quot;C&quot; + str(i)].value            single_question = [question, right_answer]            questions.append(single_question)    return questions# 写入考试题到word文件from docx import Documentfrom docx.shared import Pt  # 用于设定字体大小（磅值）from docx.oxml.ns import qn  # 用于应用中文字体def To_word(number, questions_data):    doc = Document(&quot;试题-模板.docx&quot;)    # 写入单选题    title1 = &quot;一、单项选择题（共40题，每题1分）&quot;    p = doc.add_paragraph()  # 插入段落    r = p.add_run(title1)  # 插入文字块    r.bold = True  # 字体加粗    r.font.size = Pt(12)  # 字号设为12磅    for index, i in enumerate(questions_data[&quot;单选题&quot;], start=1):  # 给题目从1开始编号        doc.add_paragraph(f&quot;&#123;index&#125;. &#123;i[0]&#125;&quot;)  # 题干部分在单独一段        doc.add_paragraph(f&quot;\t&#123;i[1]&#125;\t\t&#123;i[2]&#125;&quot;)  # 选项A和选项B在同一段落        doc.add_paragraph(f&quot;\t&#123;i[3]&#125;\t\t&#123;i[4]&#125;&quot;)  # 选项C和选项D在同一段落    # 写入多选题    title2 = &quot;二、多项选择题（共20题，每题2分）&quot;    p = doc.add_paragraph()    r = p.add_run(title2)    r.bold = True    r.font.size = Pt(12)    for index, i in enumerate(questions_data[&quot;多选题&quot;], start=1):        doc.add_paragraph(f&quot;&#123;index&#125;. &#123;i[0]&#125;&quot;)        doc.add_paragraph(f&quot;\t&#123;i[1]&#125;\t\t&#123;i[2]&#125;&quot;)        doc.add_paragraph(f&quot;\t&#123;i[3]&#125;\t\t&#123;i[4]&#125;&quot;)        if len(i) == 7:  # 判断是否有E选项，若有，则新建一段落写入            doc.add_paragraph(f&quot;\t&#123;i[5]&#125;&quot;)    # 写入判断题    title3 = &quot;三、判断题（共10题，每题1分）&quot;    p = doc.add_paragraph()    r = p.add_run(title3)    r.bold = True    r.font.size = Pt(12)    for index, i in enumerate(questions_data[&quot;判断题&quot;], start=1):        doc.add_paragraph(f&quot;\t&#123;index&#125;. &#123;i[0]&#125;&quot;)    # 写入填空题    title4 = &quot;四、填空题（共10题，每题1分）&quot;    p = doc.add_paragraph()    r = p.add_run(title4)    r.bold = True    r.font.size = Pt(12)    for index, i in enumerate(questions_data[&quot;填空题&quot;], start=1):        doc.add_paragraph(f&quot;\t&#123;index&#125;. &#123;i[0]&#125;&quot;)    doc.save(f&quot;试卷及答案\\考试题&#123;number&#125;.docx&quot;)# 写入答案from docx import Documentfrom docx.shared import Pt  # 用于设定字体大小（磅值）from docx.oxml.ns import qn  # 用于应用中文字体def Answer(number, questions_data):    doc = Document()    # 全局字体设为“宋体”    doc.styles[&#39;Normal&#39;].font.name = u&#39;宋体&#39;    doc.styles[&#39;Normal&#39;]._element.rPr.rFonts.set(qn(&#39;w:eastAsia&#39;), u&#39;宋体&#39;)    title = &quot;计算机系2020第二学期期末考试题(答案)&quot;    p = doc.add_paragraph()    r = p.add_run(title)    r.bold = True    r.font.size = Pt(20)    # 写入单选题答案    title1 = &quot;一、单项选择题答案（共40题，每题1分）&quot;    p = doc.add_paragraph()    r = p.add_run(title1)    r.bold = True    r.font.size = Pt(12)    p = doc.add_paragraph()    for index, i in enumerate(questions_data[&quot;单选题&quot;], start=1):        p.add_run(f&quot;&#123;index&#125;. &#123;i[-1]&#125;\t&quot;)        if index % 10 == 0:  # 每段只显示10个答案            p = doc.add_paragraph()  # 满10个，则新建段落    # 写入多选题答案    title2 = &quot;二、多项选择题答案（共20题，每题2分）&quot;    p = doc.add_paragraph()    r = p.add_run(title2)    r.bold = True    r.font.size = Pt(12)    p = doc.add_paragraph()    for index, i in enumerate(questions_data[&quot;多选题&quot;], start=1):        p.add_run(f&quot;&#123;index&#125;. &#123;i[-1]&#125;\t&quot;)        if index % 3 == 0:            p = doc.add_paragraph()            # 写入判断题答案    title3 = &quot;三、判断题答案（共10题，每题1分）&quot;    p = doc.add_paragraph()    r = p.add_run(title3)    r.bold = True    r.font.size = Pt(12)    p = doc.add_paragraph()    for index, i in enumerate(questions_data[&quot;判断题&quot;], start=1):        p.add_run(f&quot;&#123;index&#125;. &#123;i[-1]&#125;\t&quot;)        if index % 5 == 0:  # 每段只显示5个答案            p = doc.add_paragraph()  # 满5个，则新建段落    # 写入填空题    title4 = &quot;四、填空题答案（共10题，每题1分）&quot;    p = doc.add_paragraph()    r = p.add_run(title4)    r.bold = True    r.font.size = Pt(12)    p = doc.add_paragraph()    for index, i in enumerate(questions_data[&quot;填空题&quot;], start=1):        p.add_run(f&quot;&#123;index&#125;. &#123;i[-1]&#125;\t\t&quot;)        if index % 2 == 0:  # 每段只显示2个答案            p = doc.add_paragraph()  # 满2个，则新建段落    doc.save(f&quot;试卷及答案\\考试题&#123;number&#125;答案.docx&quot;)# 主函数for number in range(1, 21):  # 不同的试卷数量，此处为20套    # 生成随机题目编号    num_single_choice = Random_num(566, 40)    num_mult_choice = Random_num(196, 20)    num_judgment = Random_num(418, 10)    num_completion = Random_num(190, 10)    # 将生成的编号存入字典`question_num`    question_num = &#123;&quot;单选题号&quot;: num_single_choice,                    &quot;多选题号&quot;: num_mult_choice,                    &quot;判断题号&quot;: num_judgment,                    &quot;填空题号&quot;: num_completion                    &#125;    # 根据随机生成的题目编号去题库选题，并存入`questions_data`    questions_data = &#123;        &quot;单选题&quot;: Question(&quot;单选题&quot;, question_num[&quot;单选题号&quot;]),        &quot;多选题&quot;: Question(&quot;多选题&quot;, question_num[&quot;多选题号&quot;]),        &quot;判断题&quot;: Question(&quot;判断题&quot;, question_num[&quot;判断题号&quot;]),        &quot;填空题&quot;: Question(&quot;填空题&quot;, question_num[&quot;填空题号&quot;])    &#125;    # 将试题写入word文档，并保存    To_word(number, questions_data)    # 将试题答案写入word文档，并保存    Answer(number, questions_data)    print(f&quot;试卷&#123;number&#125;及答案完成！&quot;)</code></pre><p><a href="试题-模板.docx">试题-模板.docx</a><br><a href="题库.xlsx">题库.xlsx</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;python为每个学生出不一样的题&quot;&gt;&lt;a href=&quot;#python为每个学生出不一样的题&quot; class=&quot;headerlink&quot; title=&quot;python为每个学生出不一样的题&quot;&gt;&lt;/a&gt;python为每个学生出不一样的题&lt;/h1&gt;&lt;p&gt;实现代码：&lt;/p&gt;
</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="内置模块" scheme="http://example.com/categories/python/%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/"/>
    
    <category term="random" scheme="http://example.com/categories/python/%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/random/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="openpyxl" scheme="http://example.com/tags/openpyxl/"/>
    
    <category term="python-docx" scheme="http://example.com/tags/python-docx/"/>
    
    <category term="random" scheme="http://example.com/tags/random/"/>
    
  </entry>
  
  <entry>
    <title>win32api | 批量打印文件</title>
    <link href="http://example.com/2021/10/29/%E6%89%B9%E9%87%8F%E6%89%93%E5%8D%B0%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2021/10/29/%E6%89%B9%E9%87%8F%E6%89%93%E5%8D%B0%E6%96%87%E4%BB%B6/</id>
    <published>2021-10-29T09:44:23.000Z</published>
    <updated>2021-10-29T09:45:51.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义打印函数，以便重复调用"><a href="#定义打印函数，以便重复调用" class="headerlink" title="定义打印函数，以便重复调用"></a>定义打印函数，以便重复调用</h1><p>实现代码：</p><pre><code>import win32apidef Print(fileName):    win32api.ShellExecute(        0,  # 指定父窗口句柄，搞不懂        &quot;print&quot;,  # 指定操作，这里的&quot;print&quot;表示启动打印应用程序        fileName,  # 要打印的文件名        None,  # 打印机设置，若是&quot;None&quot;，则使用windows设置的默认打印机        &quot;.&quot;,  # 指定默认目录，照抄的，搞不懂        0  # 若fileName参数是一个可执行程序，则此参数指定程序窗口的初始显示方式，否则此参数应设置为0    )# 获取待打印文件的路径import ospath = &#39;文件&#39;  # 文件所在文件夹files = [path + &quot;\\&quot; + i for i in os.listdir(path)]  # 获取文件夹下的文件名,并拼接完整路径# 批量打印for file in files:    Print(file)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;定义打印函数，以便重复调用&quot;&gt;&lt;a href=&quot;#定义打印函数，以便重复调用&quot; class=&quot;headerlink&quot; title=&quot;定义打印函数，以便重复调用&quot;&gt;&lt;/a&gt;定义打印函数，以便重复调用&lt;/h1&gt;&lt;p&gt;实现代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;impor</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="第三方库" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="win32api" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/win32api/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="os" scheme="http://example.com/tags/os/"/>
    
    <category term="win32api" scheme="http://example.com/tags/win32api/"/>
    
  </entry>
  
  <entry>
    <title>pandas | 从原Excel表中抽出数据存入同一文件的新的Sheet</title>
    <link href="http://example.com/2021/10/29/%E4%BB%8E%E5%8E%9FExcel%E8%A1%A8%E4%B8%AD%E6%8A%BD%E5%87%BA%E6%95%B0%E6%8D%AE%E5%AD%98%E5%85%A5%E5%90%8C%E4%B8%80%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B0%E7%9A%84Sheet/"/>
    <id>http://example.com/2021/10/29/%E4%BB%8E%E5%8E%9FExcel%E8%A1%A8%E4%B8%AD%E6%8A%BD%E5%87%BA%E6%95%B0%E6%8D%AE%E5%AD%98%E5%85%A5%E5%90%8C%E4%B8%80%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B0%E7%9A%84Sheet/</id>
    <published>2021-10-29T09:36:52.000Z</published>
    <updated>2021-10-29T09:38:14.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从原Excel表中抽出数据存入同一文件的新的Sheet"><a href="#从原Excel表中抽出数据存入同一文件的新的Sheet" class="headerlink" title="从原Excel表中抽出数据存入同一文件的新的Sheet"></a>从原Excel表中抽出数据存入同一文件的新的Sheet</h1><p>实现代码：</p><pre><code>import pandas as pddf = pd.read_excel(&quot;物料表.xlsx&quot;, header=2)df.head()#     请求单号     单位     物料编号     架位     批号     数量     日期# 0     A19X9239156     EA     11010XR0073700     LC000001     PC00001     3     2019-01-03# 1     A19X9239156     EA     11020XR0025500     LC000002     PC00002     10     2019-01-03# 2     A19X9239156     EA     11030XR0013200     LC000003     PC00003     3     2019-01-03# 3     A19X9239156     EA     11140XR0000100     LC000004     PC00004     3     2019-01-03# 4     A19X9239156     EA     12121XR0172300     LC000005     PC00005     3     2019-01-03df[&#39;月份&#39;] = df[&#39;日期&#39;].dt.monthdf.head()#     请求单号     单位     物料编号     架位     批号     数量     日期     月份# 0     A19X9239156     EA     11010XR0073700     LC000001     PC00001     3     2019-01-03     1# 1     A19X9239156     EA     11020XR0025500     LC000002     PC00002     10     2019-01-03     1# 2     A19X9239156     EA     11030XR0013200     LC000003     PC00003     3     2019-01-03     1# 3     A19X9239156     EA     11140XR0000100     LC000004     PC00004     3     2019-01-03     1# 4     A19X9239156     EA     12121XR0172300     LC000005     PC00005     3     2019-01-03     1df5 = df[df[&#39;月份&#39;] == 5]df5.head()#     请求单号     单位     物料编号     架位     批号     数量     日期     月份# 9649     A19X9280200     EA     36012XR0413200     LC009650     PC09650     66     2019-05-03     5# 9650     A19X9280200     EA     60022XR2298300     LC009651     PC09651     66     2019-05-03     5# 9651     A19X9280561     EA     72004XR2000001     LC009652     PC09652     604     2019-05-03     5# 9652     A19X9286759     EA     62010XR0161048     LC009653     PC09653     50     2019-05-03     5# 9653     A19X9286759     EA     62010XR0502208     LC009654     PC09654     100     2019-05-03     5df8 = df[df[&#39;月份&#39;] == 8]df8.head()#     请求单号     单位     物料编号     架位     批号     数量     日期     月份# 17213     A19X9317364     EA     62010XR0500126     LC017214     PC17214     230     2019-08-01     8# 17214     A19X9317364     EA     61010XR1120100     LC017215     PC17215     230     2019-08-01     8# 17215     A19X9317364     EA     62012XR0102262     LC017216     PC17216     230     2019-08-01     8# 17216     A19X9317364     EA     62010XR050150A     LC017217     PC17217     950     2019-08-01     8# 17217     A19X9317364     EA     61011XR1150500     LC017218     PC17218     230     2019-08-01     8# 去掉不需要的月份的数据def Remove_data(df, month=[]):    for i in month:        df = df[df[&#39;月份&#39;] != i]    return dfdf_rest = Remove_data(df, [5, 8])df_rest.head()#     请求单号     单位     物料编号     架位     批号     数量     日期     月份# 0     A19X9239156     EA     11010XR0073700     LC000001     PC00001     3     2019-01-03     1# 1     A19X9239156     EA     11020XR0025500     LC000002     PC00002     10     2019-01-03     1# 2     A19X9239156     EA     11030XR0013200     LC000003     PC00003     3     2019-01-03     1# 3     A19X9239156     EA     11140XR0000100     LC000004     PC00004     3     2019-01-03     1# 4     A19X9239156     EA     12121XR0172300     LC000005     PC00005     3     2019-01-03     1with pd.ExcelWriter(&#39;物料表_1.xlsx&#39;, engine=&#39;openpyxl&#39;,                    datetime_format=&#39;YYYY-MM-DD&#39;) as writer:    df5.drop(&#39;月份&#39;, axis=1).to_excel(writer, sheet_name=&#39;5月&#39;, index=False)    df8.drop(&#39;月份&#39;, axis=1).to_excel(writer, sheet_name=&#39;8月&#39;, index=False)    df_rest.drop(&#39;月份&#39;, axis=1).to_excel(writer, sheet_name=&#39;剩余月份&#39;, index=False)from openpyxl import load_workbookfrom openpyxl.styles import Border, Side, PatternFill, Font, GradientFill, Alignmentthin = Side(border_style=&quot;thin&quot;, color=&quot;000000&quot;)  # 定义边框粗细及颜色wb = load_workbook(&quot;物料表_1.xlsx&quot;)for sheetname in wb.sheetnames:    ws = wb[sheetname]    # 调整列宽    ws.column_dimensions[&#39;A&#39;].width = 12    ws.column_dimensions[&#39;C&#39;].width = 15.5    ws.column_dimensions[&#39;G&#39;].width = 10    # 设置字号，对齐，缩小字体填充，加边框    for row_number in range(2, ws.max_row + 1):        for col_number in range(1, ws.max_column + 1):            c = ws.cell(row=row_number, column=col_number)            c.font = Font(size=10)            c.border = Border(top=thin, left=thin, right=thin, bottom=thin)            c.alignment = Alignment(horizontal=&quot;left&quot;, vertical=&quot;center&quot;)wb.save(&quot;物料表_1.xlsx&quot;)</code></pre><p><a href="物料表.xlsx">物料表.xlsx</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;从原Excel表中抽出数据存入同一文件的新的Sheet&quot;&gt;&lt;a href=&quot;#从原Excel表中抽出数据存入同一文件的新的Sheet&quot; class=&quot;headerlink&quot; title=&quot;从原Excel表中抽出数据存入同一文件的新的Sheet&quot;&gt;&lt;/a&gt;从原Exc</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="第三方库" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="pandas" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/pandas/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="pandas" scheme="http://example.com/tags/pandas/"/>
    
    <category term="openpyxl" scheme="http://example.com/tags/openpyxl/"/>
    
  </entry>
  
  <entry>
    <title>pandas | pandas提取指定数据并保存在原Excel工作簿中</title>
    <link href="http://example.com/2021/10/29/pandas%E6%8F%90%E5%8F%96%E6%8C%87%E5%AE%9A%E6%95%B0%E6%8D%AE%E5%B9%B6%E4%BF%9D%E5%AD%98%E5%9C%A8%E5%8E%9FExcel%E5%B7%A5%E4%BD%9C%E7%B0%BF%E4%B8%AD/"/>
    <id>http://example.com/2021/10/29/pandas%E6%8F%90%E5%8F%96%E6%8C%87%E5%AE%9A%E6%95%B0%E6%8D%AE%E5%B9%B6%E4%BF%9D%E5%AD%98%E5%9C%A8%E5%8E%9FExcel%E5%B7%A5%E4%BD%9C%E7%B0%BF%E4%B8%AD/</id>
    <published>2021-10-29T09:25:17.000Z</published>
    <updated>2021-10-29T09:27:34.839Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pandas提取指定数据并保存在原Excel工作簿中"><a href="#pandas提取指定数据并保存在原Excel工作簿中" class="headerlink" title="pandas提取指定数据并保存在原Excel工作簿中"></a>pandas提取指定数据并保存在原Excel工作簿中</h1><p>实现代码：</p><pre><code>import pandas as pddf = pd.read_excel(&quot;物料表.xlsx&quot;, header=2)# print(df)df500 = df[df[&quot;数量&quot;] &gt; 500]# print(df500)with pd.ExcelWriter(&#39;物料表.xlsx&#39;, mode=&#39;a&#39;, engine=&#39;openpyxl&#39;,                    datetime_format=&#39;YYYY-MM-DD&#39;) as writer:    df500.to_excel(writer, sheet_name=&#39;数量大于500&#39;, index=False)from openpyxl import load_workbookfrom openpyxl.styles import Border, Side, PatternFill, Font, GradientFill, Alignmentthin = Side(border_style=&quot;thin&quot;, color=&quot;000000&quot;)  # 定义边框粗细及颜色wb = load_workbook(&quot;物料表.xlsx&quot;)ws = wb[&quot;数量大于500&quot;]# 调整列宽ws.column_dimensions[&#39;A&#39;].width = 12ws.column_dimensions[&#39;C&#39;].width = 15.5ws.column_dimensions[&#39;G&#39;].width = 10# 设置字号，对齐，缩小字体填充，加边框for row_number in range(2, ws.max_row + 1):    for col_number in range(1, ws.max_column + 1):        c = ws.cell(row=row_number, column=col_number)        c.font = Font(size=10)        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)        c.alignment = Alignment(horizontal=&quot;left&quot;, vertical=&quot;center&quot;)wb.save(&quot;物料表.xlsx&quot;)</code></pre><p><a href="物料表.xlsx">物料表.xlsx</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pandas提取指定数据并保存在原Excel工作簿中&quot;&gt;&lt;a href=&quot;#pandas提取指定数据并保存在原Excel工作簿中&quot; class=&quot;headerlink&quot; title=&quot;pandas提取指定数据并保存在原Excel工作簿中&quot;&gt;&lt;/a&gt;pandas提取</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="第三方库" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="pandas" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/pandas/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="pandas" scheme="http://example.com/tags/pandas/"/>
    
    <category term="openpyxl" scheme="http://example.com/tags/openpyxl/"/>
    
  </entry>
  
  <entry>
    <title>random | python出数学练习题</title>
    <link href="http://example.com/2021/10/29/python%E5%87%BA%E6%95%B0%E5%AD%A6%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    <id>http://example.com/2021/10/29/python%E5%87%BA%E6%95%B0%E5%AD%A6%E7%BB%83%E4%B9%A0%E9%A2%98/</id>
    <published>2021-10-29T09:09:35.000Z</published>
    <updated>2021-10-29T09:12:24.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python出数学练习题"><a href="#python出数学练习题" class="headerlink" title="python出数学练习题"></a>python出数学练习题</h1><p>实现代码：</p><pre><code># import random## for i in range(5):#     num1 = random.randint(1, 9)#     num2 = random.randint(1, 9)#     print(f&quot;&#123;num1&#125; + &#123;num2&#125; = &quot;)# 加法、乘法题import randomdata = []  # 储存题目的列表group = []  # 中转列表while len(data) &lt; 20:  # 题目个数，20行x4列共80个题，刚好放入word文档中的1页    num1 = random.randint(0, 9)  # 随机整数1，从0-9中选取    num2 = random.randint(0, 9)  # 随机整数2，从0-9中选取    group.append(f&quot;&#123;num1&#125; + &#123;num2&#125; = &quot;)  # 数据放入中转列表    if len(group) == 4:  # 按四道题分一组        data.append(group)  # 数据放入总列表        group = []  # 清空中转列表print(data)# # 减法题# import random## data = []# group = []# while len(data) &lt; 20:#     num1 = random.randint(1, 9)#     num2 = random.randint(1, 9)#     if num1 &gt; num2:#         group.append(f&quot;&#123;num1&#125; - &#123;num2&#125; = &quot;)#         if len(group) == 4:#             data.append(group)#             group = []## # print(data)# # 除法题# import random## data = []  # 储存题目的列表# group = []  # 中转列表# while len(data) &lt; 20:#     num1 = random.randint(1, 19)#     num2 = random.randint(1, 19)#     if num1 &gt;= num2 and num1 % num2 == 0:#         group.append(f&quot;&#123;num1&#125; ÷ &#123;num2&#125; = &quot;)  # 数据放入中转列表#         if len(group) == 4:  # 按四道题分一组#             data.append(group)  # 数据放入总列表#             group = []  # 清空中转列表## print(data)# 输出到word文件def To_word(data, file_name):    &quot;&quot;&quot;    data:需要传入的列表    file_name:word文件的文件名    &quot;&quot;&quot;    from docx import Document    from docx.shared import Pt  # 用于设定字体大小（磅值）    doc = Document()    for i in data:        # print(i)        row = &quot;\t\t&quot;.join(i)        # print(row)        doc.add_paragraph(row)    # 设置字号    for para in doc.paragraphs:        for run in para.runs:            run.font.size = Pt(16)  # 文字大小磅值    doc.save(f&quot;&#123;file_name&#125;.docx&quot;)To_word(data, &quot;加法题&quot;)# To_word(data, &quot;减法题&quot;)# To_word(data, &quot;乘法题&quot;)# To_word(data, &quot;除法题&quot;)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;python出数学练习题&quot;&gt;&lt;a href=&quot;#python出数学练习题&quot; class=&quot;headerlink&quot; title=&quot;python出数学练习题&quot;&gt;&lt;/a&gt;python出数学练习题&lt;/h1&gt;&lt;p&gt;实现代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# import </summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="内置模块" scheme="http://example.com/categories/python/%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/"/>
    
    <category term="random" scheme="http://example.com/categories/python/%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/random/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="python-docx" scheme="http://example.com/tags/python-docx/"/>
    
    <category term="random" scheme="http://example.com/tags/random/"/>
    
  </entry>
  
  <entry>
    <title>pdfplumber | 一键提取PDF中的表格到Excel</title>
    <link href="http://example.com/2021/10/28/%E4%B8%80%E9%94%AE%E6%8F%90%E5%8F%96PDF%E4%B8%AD%E7%9A%84%E8%A1%A8%E6%A0%BC%E5%88%B0Excel/"/>
    <id>http://example.com/2021/10/28/%E4%B8%80%E9%94%AE%E6%8F%90%E5%8F%96PDF%E4%B8%AD%E7%9A%84%E8%A1%A8%E6%A0%BC%E5%88%B0Excel/</id>
    <published>2021-10-29T02:28:29.000Z</published>
    <updated>2021-10-29T08:32:01.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一键提取PDF中的表格到Excel"><a href="#一键提取PDF中的表格到Excel" class="headerlink" title="一键提取PDF中的表格到Excel"></a>一键提取PDF中的表格到Excel</h1><p>实现代码：</p><pre><code>import osimport pdfplumberfrom openpyxl import Workbookpath = &#39;PDF&#39;  # 文件所在文件夹files = [path + &quot;\\&quot; + i for i in os.listdir(path)]  # 获取文件夹下的文件名,并拼接完整路径key_words = &quot;主要会计数据&quot;for file in files:    with pdfplumber.open(file) as p:        wb = Workbook()  # 新建excel工作簿        wb.remove(wb.worksheets[0])  # 删除工作簿自带的工作表        # 获取关键词所在页及下一页的页码        pages_wanted = []        for index, page in enumerate(p.pages):  # 从0开始给所有页编号            if key_words in page.extract_text():                pages_wanted.append(index)                pages_wanted.append(index + 1)                break        # 提取指定页码里的表格        for i in pages_wanted:            page = p.pages[i]            tables = page.extract_tables()  # 读取表格            if tables:  # 判断是否存在表格，若不存在，则不执行下面的语句                ws = wb.create_sheet(f&quot;Sheet&#123;i + 1&#125;&quot;)  # 新建工作表，表名的编号与表在PDF中的页码一致                for table in tables:  # 遍历所有列表                    for row in table:  # 遍历列表中的所有子列表，里面保存着行数据                        ws.append(row)  # 写入excel表        wb.save(&quot;Excel\\&#123;&#125;.xlsx&quot;.format(file.split(&quot;\\&quot;)[1].split(&quot;.&quot;)[0]))</code></pre><p>PDF:<br><a href="东旭蓝天：2019年年度报告.PDF">东旭蓝天：2019年年度报告.PDF</a><br><a href="华特气体：2019年年度报告（修订版）.PDF">华特气体：2019年年度报告（修订版）.PDF</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一键提取PDF中的表格到Excel&quot;&gt;&lt;a href=&quot;#一键提取PDF中的表格到Excel&quot; class=&quot;headerlink&quot; title=&quot;一键提取PDF中的表格到Excel&quot;&gt;&lt;/a&gt;一键提取PDF中的表格到Excel&lt;/h1&gt;&lt;p&gt;实现代码：&lt;/p&gt;
</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="第三方库" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="pdfplumber" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/pdfplumber/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="openpyxl" scheme="http://example.com/tags/openpyxl/"/>
    
    <category term="pdfplumber" scheme="http://example.com/tags/pdfplumber/"/>
    
  </entry>
  
  <entry>
    <title>python-docx | 批量修改word文件中的段落格式</title>
    <link href="http://example.com/2021/10/28/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9word%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E6%AE%B5%E8%90%BD%E6%A0%BC%E5%BC%8F/"/>
    <id>http://example.com/2021/10/28/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9word%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E6%AE%B5%E8%90%BD%E6%A0%BC%E5%BC%8F/</id>
    <published>2021-10-29T02:09:27.000Z</published>
    <updated>2021-10-29T02:16:04.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="批量修改word文件中的段落格式"><a href="#批量修改word文件中的段落格式" class="headerlink" title="批量修改word文件中的段落格式"></a>批量修改word文件中的段落格式</h1><p>实现代码：</p><pre><code>import osimport docx# 定义字体格式from docx.shared import Pt  # 用于设定字体大小（磅值）from docx.oxml.ns import qn  # 用于应用中文字体def F_title(run):    # 标题文字    run.font.size = Pt(22)  # 文字大小磅值    run.bold = True  # 加粗    run.font.name = &quot;方正小标宋_GBK&quot;  # 字体    r = run._element.rPr.rFonts    r.set(qn(&quot;w:eastAsia&quot;), &quot;方正小标宋_GBK&quot;)  # 字体def F_name_dept(run):    # 姓名，部门，日期    run.font.size = Pt(17)  # 文字大小磅值    run.bold = False  # 加粗    run.font.name = &quot;楷体&quot;  # 字体    r = run._element.rPr.rFonts    r.set(qn(&quot;w:eastAsia&quot;), &quot;楷体&quot;)  # 字体def F_main(run):    # 正文的格式    run.font.size = Pt(17)  # 文字大小磅值    run.bold = False  # 加粗    run.font.name = &quot;仿宋&quot;  # 字体    r = run._element.rPr.rFonts    r.set(qn(&quot;w:eastAsia&quot;), &quot;仿宋&quot;)  # 字体def F_title1(run):    # 标题一的格式    run.font.size = Pt(17)  # 文字大小磅值    run.bold = False  # 加粗    run.font.name = &quot;黑体&quot;  # 字体    r = run._element.rPr.rFonts    r.set(qn(&quot;w:eastAsia&quot;), &quot;黑体&quot;)  # 字体def F_title2(run):    # 标题二的格式    run.font.size = Pt(17)  # 文字大小磅值    run.bold = True  # 加粗    run.font.name = &quot;楷体&quot;  # 字体    r = run._element.rPr.rFonts    r.set(qn(&quot;w:eastAsia&quot;), &quot;楷体&quot;)  # 字体# 获取待处理的文件的路径path = &#39;待处理文件&#39;  # 文件所在文件夹files = [path + &quot;\\&quot; + i for i in os.listdir(path)]  # 获取文件夹下的文件名,并拼接完整路径# print(files)# 逐个提取文件，设置字体格式for file in files:    doc = docx.Document(file)    for run in doc.paragraphs[0].runs:  # 总标题字体格式        F_title(run)    for para in doc.paragraphs[1:3]:  # 部门、姓名及日期字体格式        for run in para.runs:            F_name_dept(run)    title1 = [&quot;一、&quot;, &quot;二、&quot;, &quot;三、&quot;, &quot;四、&quot;]  # 标题一的唯一特征字符串    title2 = [&quot;1、&quot;, &quot;2、&quot;, &quot;3、&quot;, &quot;4、&quot;]  # 标题二的唯一特征字符串    for para in doc.paragraphs[3:]:        if any(i in para.text for i in title1):  # 若该段落是标题一，则应用标题一的字体格式            for run in para.runs:                F_title1(run)        elif any(j in para.text for j in title2):  # 若该段落是标题二，则应用标题二的字体格式            for run in para.runs:                F_title2(run)        else:            for run in para.runs:  # 其余都应用正文的字体格式                F_main(run)    doc.save(&#39;已处理文件\\&#123;&#125;&#39;.format(file.split(&quot;\\&quot;)[1]))    </code></pre><p>已处理文件：<br><a href="报告-何十.docx">报告-何十.docx</a><br><a href="报告-刘七.docx">报告-刘七.docx</a><br><a href="报告-张三.docx">报告-张三.docx</a><br><a href="报告-朱八.docx">报告-朱八</a><br><a href="报告-李四.docx">报告-李四.docx</a><br><a href="报告-猪八戒.docx">报告-猪八戒.docx</a><br><a href="报告-王五.docx">报告-王五.docx</a><br><a href="报告-秦九.docx">报告-秦九.docx</a><br><a href="报告-赵六.docx">报告-赵六.docx</a><br><a href="报告-黄二.docx">报告-黄二.docx</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;批量修改word文件中的段落格式&quot;&gt;&lt;a href=&quot;#批量修改word文件中的段落格式&quot; class=&quot;headerlink&quot; title=&quot;批量修改word文件中的段落格式&quot;&gt;&lt;/a&gt;批量修改word文件中的段落格式&lt;/h1&gt;&lt;p&gt;实现代码：&lt;/p&gt;
&lt;pre</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="第三方库" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="python-docx" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/python-docx/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="python-docx" scheme="http://example.com/tags/python-docx/"/>
    
  </entry>
  
  <entry>
    <title>python-docx | python替换word文档中的文字</title>
    <link href="http://example.com/2021/10/28/python%E6%9B%BF%E6%8D%A2word%E6%96%87%E6%A1%A3%E4%B8%AD%E7%9A%84%E6%96%87%E5%AD%97/"/>
    <id>http://example.com/2021/10/28/python%E6%9B%BF%E6%8D%A2word%E6%96%87%E6%A1%A3%E4%B8%AD%E7%9A%84%E6%96%87%E5%AD%97/</id>
    <published>2021-10-28T13:39:45.000Z</published>
    <updated>2021-10-28T13:42:04.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python替换word文档中的文字"><a href="#python替换word文档中的文字" class="headerlink" title="python替换word文档中的文字"></a>python替换word文档中的文字</h1><p>实现代码：</p><pre><code># -*- coding:utf-8 -*-import docx# # 定义函数替换文字块中的字符# def info_update(doc, old_info, new_info):#     for para in doc.paragraphs:  # 遍历段落#         for run in para.runs:  # 遍历文字块#             # run.text = run.text.replace(old_info, new_info)  # 替换#             print(run.text)### doc = docx.Document(&#39;替换前.docx&#39;)# info_update(doc, &#39;第四次&#39;, &#39;第五次&#39;)# info_update(doc, &#39;2019&#39;, &#39;2020&#39;)# info_update(doc, &#39;18&#39;, &#39;10&#39;)# doc.save(&#39;替换后.docx&#39;)# doc = docx.Document(&#39;替换前.docx&#39;)# for para in doc.paragraphs:  # 遍历段落#     for run in para.runs:  # 遍历文字块#         # run.text = run.text.replace(old_info, new_info)  # 替换#         print(run.text)# # 按段落查看文字# doc = docx.Document(&#39;替换前.docx&#39;)# for para in doc.paragraphs:#     print(para.text)import docxfrom docx.shared import Pt  # 用于设定字体大小(磅值)from docx.oxml.ns import qn  # 用于应用中文字体def info_update(doc, old_info, new_info):    for para in doc.paragraphs:        para.text = para.text.replace(old_info, new_info)    # 设置第一段（标题）的文字格式    for run in doc.paragraphs[0].runs:        run.font.size = Pt(14)  # 文字大小磅值        run.bold = True  # 加粗        run.font.name = &quot;微软雅黑&quot;  # 字体选择        # 中文字体应用，固定写法        r = run._element.rPr.rFonts  # 字体，固定写法        r.set(qn(&quot;w:eastAsia&quot;), &quot;微软雅黑&quot;)  # 字体    # 设置第二及后续段落的文字格式    for para in doc.paragraphs[1:]:        for run in para.runs:            run.font.size = Pt(12)  # 文字大小            run.bold = False  # 不加粗            run.font.name = &quot;微软雅黑&quot;  # 字体选择            # 中文字体应用，固定写法            r = run._element.rPr.rFonts            r.set(qn(&quot;w:eastAsia&quot;), &quot;微软雅黑&quot;)doc = docx.Document(&#39;替换前.docx&#39;)info_update(doc, &quot;第四次&quot;, &quot;第五次&quot;)info_update(doc, &quot;2019&quot;, &quot;2020&quot;)info_update(doc, &quot;18&quot;, &quot;10&quot;)doc.save(&#39;替换后_设置格式.docx&#39;)</code></pre><p><a href="替换前.docx">替换前.docx</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;python替换word文档中的文字&quot;&gt;&lt;a href=&quot;#python替换word文档中的文字&quot; class=&quot;headerlink&quot; title=&quot;python替换word文档中的文字&quot;&gt;&lt;/a&gt;python替换word文档中的文字&lt;/h1&gt;&lt;p&gt;实现代码：&lt;</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="第三方库" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="python-docx" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/python-docx/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="python-docx" scheme="http://example.com/tags/python-docx/"/>
    
  </entry>
  
  <entry>
    <title>wordcloud | 词云</title>
    <link href="http://example.com/2021/10/28/%E8%AF%8D%E4%BA%91/"/>
    <id>http://example.com/2021/10/28/%E8%AF%8D%E4%BA%91/</id>
    <published>2021-10-28T08:45:50.000Z</published>
    <updated>2021-10-28T08:51:27.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="词云"><a href="#词云" class="headerlink" title="词云"></a>词云</h1><p>根据文章中的关键词的词频生成词云图。</p><span id="more"></span><p>实现代码：</p><pre><code>import numpy as np  # numpy数据处理库import wordcloud  # 词云库from PIL import Image  # 图像处理库，用于读取背景图片import matplotlib.pyplot as plt  # 图像展示库，以便在notebook中显示图片from openpyxl import load_workbook  # 读取词频Excel文件import os  # 获取词频Excel文件路径# 将存好的Excel词频表读取成字典path = &#39;词频&#39;  # 文件所在文件夹files = [path + &quot;\\&quot; + i for i in os.listdir(path)]  # 获取文件夹下的文件名,并拼接完整路径maskImage = np.array(Image.open(&#39;background.png&#39;))  # 定义词频背景图for file in files:    # 将词频Excel文件读取为字典    wb = load_workbook(file)    ws = wb.active    wordFreq = &#123;&#125;    for i in range(2, ws.max_row + 1):        word = ws[&quot;A&quot; + str(i)].value        freq = ws[&quot;B&quot; + str(i)].value        wordFreq[word] = freq        # 定义词云样式    wc = wordcloud.WordCloud(        font_path=&#39;C:/Windows/Fonts/simhei.ttf&#39;,  # 设置字体        mask=maskImage,  # 设置背景图        max_words=500,  # 最多显示词数        max_font_size=100)  # 字号最大值    # 生成词云图    wc.generate_from_frequencies(wordFreq)  # 从字典生成词云    # 保存图片到指定文件夹    wc.to_file(&quot;词云图\\&#123;&#125;.png&quot;.format(file.split(&quot;\\&quot;)[1][:4]))    # 在notebook中显示词云图    plt.imshow(wc)  # 显示词云    plt.axis(&#39;off&#39;)  # 关闭坐标轴    plt.show()  # 显示图像</code></pre><p><a href="https://victory-liao.github.io/2021/10/27/python%E8%AF%8D%E9%A2%91%E5%88%86%E6%9E%90/#more">词频文件夹</a><br><a href="background.PNG">background.PNG</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;词云&quot;&gt;&lt;a href=&quot;#词云&quot; class=&quot;headerlink&quot; title=&quot;词云&quot;&gt;&lt;/a&gt;词云&lt;/h1&gt;&lt;p&gt;根据文章中的关键词的词频生成词云图。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="第三方库" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="wordcloud" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/wordcloud/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="wordcloud" scheme="http://example.com/tags/wordcloud/"/>
    
    <category term="词云" scheme="http://example.com/tags/%E8%AF%8D%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>文档 | python文档</title>
    <link href="http://example.com/2021/10/27/python%E6%96%87%E6%A1%A3/"/>
    <id>http://example.com/2021/10/27/python%E6%96%87%E6%A1%A3/</id>
    <published>2021-10-28T03:37:45.000Z</published>
    <updated>2021-10-28T03:53:58.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python文档"><a href="#python文档" class="headerlink" title="python文档"></a>python文档</h1><p><a href="https://www.bookstack.cn/read/explore-python/SUMMARY.md">这是一个不错的python文档！！！</a><br><a href="https://github.com/ethan-funny/explore-python">github地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;python文档&quot;&gt;&lt;a href=&quot;#python文档&quot; class=&quot;headerlink&quot; title=&quot;python文档&quot;&gt;&lt;/a&gt;python文档&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.bookstack.cn/read/explore</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="文档" scheme="http://example.com/categories/python/%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="python文档" scheme="http://example.com/tags/python%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>jieba | python词频分析</title>
    <link href="http://example.com/2021/10/27/python%E8%AF%8D%E9%A2%91%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2021/10/27/python%E8%AF%8D%E9%A2%91%E5%88%86%E6%9E%90/</id>
    <published>2021-10-27T13:58:21.000Z</published>
    <updated>2021-10-27T14:04:43.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python词频分析"><a href="#python词频分析" class="headerlink" title="python词频分析"></a>python词频分析</h1><p>程序分析了”主要业务”文件夹的所有文件中的文本信息的词频(分别存储在”词频”文件夹中)</p><span id="more"></span><p>实现代码：</p><pre><code>import osimport jiebaimport pandas as pdpath = &#39;主要业务&#39;  # 文件所在文件夹files = [path + &quot;\\&quot; + i for i in os.listdir(path)]  # 获取文件夹下的文件名,并拼接完整路径for file in files:    txt = open(file, &quot;r&quot;, encoding=&quot;utf-8&quot;).read()    words = jieba.lcut(txt)    wordsDict = &#123;&#125;  # 新建字典用于储存词及词频    for word in words:        if len(word) == 1:  # 单个的字符不作为词放入字典            continue        else:            wordsDict.setdefault(word, 0)  # 设置词的初始出现次数为0            wordsDict[word] += 1  # 对于重复出现的词，每出现一次，次数增加1    stopWords = [&quot;2019&quot;, &quot;不断&quot;, &quot;持续&quot;, &quot;主要&quot;, &quot;企业&quot;, &quot;产品&quot;, &quot;业务&quot;, &quot;公司&quot;, &quot;行业&quot;, &quot;000&quot;, &quot;用于&quot;, &quot;情况&quot;, &quot;方面&quot;, &quot;一种&quot;, &quot;要求&quot;, &quot;对于&quot;,                 &quot;进行&quot;, &quot;一般&quot;, &quot;212&quot;, &quot;实现&quot;, &quot;处理&quot;, &quot;通过&quot;, &quot;投入&quot;, &quot;随着&quot;]    for word in stopWords:        if word in wordsDict:            del wordsDict[word]    wordsDict_seq = sorted(wordsDict.items(), key=lambda x: x[1], reverse=True)  # 按字典的值降序排序    df = pd.DataFrame(wordsDict_seq, columns=[&#39;词&#39;, &#39;次数&#39;])    df.to_excel(&quot;词频//&#123;&#125;.xlsx&quot;.format(file.split(&quot;\\&quot;)[1][:-4]), index=False)  # 存为Excel时去掉index索引列  </code></pre><p>“主要业务”文件夹的所有文件:<br><a href="东旭蓝天：2019年年度报告.txt">东旭蓝天：2019年年度报告.txt</a><br><a href="保利地产：2018年年度报告.txt">保利地产：2018年年度报告.txt</a><br><a href="共达电声：2019年年度报告（更新后）.txt">共达电声：2019年年度报告（更新后）.txt</a><br><a href="华特气体：2019年年度报告（修订版）.txt">华特气体：2019年年度报告（修订版）.txt</a><br><a href="吉峰科技：2019年年度报告（更新后）.txt">吉峰科技：2019年年度报告（更新后）.txt</a><br><a href="引力传媒：2019年年度报告（修订版）.txt">引力传媒：2019年年度报告（修订版）.txt</a><br><a href="方正科技：2019年年度报告.txt">方正科技：2019年年度报告.txt</a><br><a href="湖北宜化：2019年年度报告（更新后）.txt">湖北宜化：2019年年度报告（更新后）.txt</a><br><a href="联创股份：2019年年度报告（更新后）.txt">联创股份：2019年年度报告（更新后）.txt</a><br><a href="高乐股份：2019年年度报告.txt">高乐股份：2019年年度报告.txt</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;python词频分析&quot;&gt;&lt;a href=&quot;#python词频分析&quot; class=&quot;headerlink&quot; title=&quot;python词频分析&quot;&gt;&lt;/a&gt;python词频分析&lt;/h1&gt;&lt;p&gt;程序分析了”主要业务”文件夹的所有文件中的文本信息的词频(分别存储在”词频”文件夹中)&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="第三方库" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="jieba" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/jieba/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="pandas" scheme="http://example.com/tags/pandas/"/>
    
    <category term="os" scheme="http://example.com/tags/os/"/>
    
    <category term="jieba" scheme="http://example.com/tags/jieba/"/>
    
  </entry>
  
  <entry>
    <title>leetcode | sqrt</title>
    <link href="http://example.com/2021/10/27/sqrt/"/>
    <id>http://example.com/2021/10/27/sqrt/</id>
    <published>2021-10-27T13:25:35.000Z</published>
    <updated>2021-10-27T13:37:33.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="69-sqrt-x"><a href="#69-sqrt-x" class="headerlink" title="69.sqrt(x)"></a>69.sqrt(x)</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个非负整数 x ，计算并返回 x 的 算术平方根 。<br>由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 。<br>注意：不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 。</p><p><a href="https://leetcode-cn.com/problems/sqrtx/">题目链接</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1.二分法</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>class Solution(object):    @staticmethod    def my_sqrt1(a):        &quot;&quot;&quot;二分法开根号&quot;&quot;&quot;        # 初始化左右边界        left, right = 0, a        while left &lt;= right:            mid = (left + right) // 2            if mid ** 2 == a:                return mid            elif mid ** 2 &gt; a:                right = mid - 1            else:                left = mid + 1        return rightif __name__ == &quot;__main__&quot;:    a = 3    s = Solution()    sqrt_a = s.my_sqrt1(a)    print(sqrt_a)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;69-sqrt-x&quot;&gt;&lt;a href=&quot;#69-sqrt-x&quot; class=&quot;headerlink&quot; title=&quot;69.sqrt(x)&quot;&gt;&lt;/a&gt;69.sqrt(x)&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;header</summary>
      
    
    
    
    <category term="算法刷题" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/"/>
    
    <category term="leetcode" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>pypiwin32 | 批量发送不同内容的邮件给不同的收件人</title>
    <link href="http://example.com/2021/10/27/%E6%89%B9%E9%87%8F%E5%8F%91%E9%80%81%E4%B8%8D%E5%90%8C%E5%86%85%E5%AE%B9%E7%9A%84%E9%82%AE%E4%BB%B6%E7%BB%99%E4%B8%8D%E5%90%8C%E7%9A%84%E6%94%B6%E4%BB%B6%E4%BA%BA/"/>
    <id>http://example.com/2021/10/27/%E6%89%B9%E9%87%8F%E5%8F%91%E9%80%81%E4%B8%8D%E5%90%8C%E5%86%85%E5%AE%B9%E7%9A%84%E9%82%AE%E4%BB%B6%E7%BB%99%E4%B8%8D%E5%90%8C%E7%9A%84%E6%94%B6%E4%BB%B6%E4%BA%BA/</id>
    <published>2021-10-27T12:54:32.000Z</published>
    <updated>2021-10-27T13:22:09.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="批量发送不同内容的邮件给不同的收件人"><a href="#批量发送不同内容的邮件给不同的收件人" class="headerlink" title="批量发送不同内容的邮件给不同的收件人"></a>批量发送不同内容的邮件给不同的收件人</h1><p>程序实现自动将’年假_按部门’下各个部门的年假情况Excel表格发送给’邮件地址.xlsx’中各个部门的负责人。</p><span id="more"></span><p>实现代码：</p><pre><code>import osfrom openpyxl import load_workbookwb = load_workbook(&quot;邮件地址.xlsx&quot;)ws = wb.activeaddress = &#123;&#125;for i in range(2, ws.max_row + 1):    dept = ws[&quot;A&quot; + str(i)].value    to_add = ws[&quot;B&quot; + str(i)].value    cc_add = ws[&quot;C&quot; + str(i)].value    address[dept] = [to_add, cc_add]import win32com.client as win32def Send_mail(to_add, cc_add, file_path, dept):    &#39;&#39;&#39;    传入参数说明：    to_add,收件人地址    cc_add,抄送地址    file_path,附件路径    dept,部门名称    &#39;&#39;&#39;    outlook = win32.Dispatch(&#39;Outlook.Application&#39;)  # 调用windows outlook应用    mail = outlook.CreateItem(0)  # 创建邮件    mail.to = to_add  # 收件人    mail.cc = cc_add  # 抄送人    mail.Subject = &quot;&#123;&#125;年假情况&quot;.format(dept)  # 主题    mail.Attachments.Add(file_path)  # 添加附件。若有多个附件，则多调用几次即可    mail.Body = &#39;&#39;&#39;Dear All,\n这是&#123;&#125;的年假情况，请查收！谢谢。\n\nBest regards!\n人事部 小李&#39;&#39;&#39;.format(dept)  # 正文内容    mail.Send()  # 发送邮件# 发送邮件到各部门for dept in address.keys():    to_add = address[dept][0]    cc_add = address[dept][1]    file_path = os.getcwd() + &#39;\\年假_按部门\\年假情况_&#123;&#125;.xlsx&#39;.format(dept)    Send_mail(to_add, cc_add, file_path, dept)print(&quot;邮件发送完成。&quot;)</code></pre><p>‘年假_按部门’文件夹包括以下内容：<br><a href="年假情况_人事部.xlsx">年假情况_人事部.xlsx</a><br><a href="年假情况_关务部.xlsx">年假情况_关务部.xlsx</a><br><a href="年假情况_品质部.xlsx">年假情况_品质部.xlsx</a><br><a href="年假情况_工程部.xlsx">年假情况_工程部.xlsx</a><br><a href="年假情况_总务部.xlsx">年假情况_总务部.xlsx</a><br><a href="年假情况_物料部.xlsx">年假情况_物料部.xlsx</a><br><a href="年假情况_生产部.xlsx">年假情况_生产部.xlsx</a><br><a href="年假情况_研发部.xlsx">年假情况_研发部.xlsx</a><br><a href="年假情况_船务部.xlsx">年假情况_船务部.xlsx</a><br><a href="年假情况_采购部.xlsx">年假情况_采购部.xlsx</a></p><p><a href="邮件地址.xlsx">邮件地址.xlsx</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;批量发送不同内容的邮件给不同的收件人&quot;&gt;&lt;a href=&quot;#批量发送不同内容的邮件给不同的收件人&quot; class=&quot;headerlink&quot; title=&quot;批量发送不同内容的邮件给不同的收件人&quot;&gt;&lt;/a&gt;批量发送不同内容的邮件给不同的收件人&lt;/h1&gt;&lt;p&gt;程序实现自动将’年假_按部门’下各个部门的年假情况Excel表格发送给’邮件地址.xlsx’中各个部门的负责人。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="第三方库" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="pypiwin32" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/pypiwin32/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="openpyxl" scheme="http://example.com/tags/openpyxl/"/>
    
    <category term="pypiwin32" scheme="http://example.com/tags/pypiwin32/"/>
    
  </entry>
  
  <entry>
    <title>os | python批量重命名文件</title>
    <link href="http://example.com/2021/10/27/python%E6%89%B9%E9%87%8F%E9%87%8D%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2021/10/27/python%E6%89%B9%E9%87%8F%E9%87%8D%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6/</id>
    <published>2021-10-27T12:37:41.000Z</published>
    <updated>2021-10-27T13:19:21.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python批量重命名文件"><a href="#python批量重命名文件" class="headerlink" title="python批量重命名文件"></a>python批量重命名文件</h1><p>程序将’文件’文件夹下的所有文件重命名。</p><span id="more"></span><p>实现代码：</p><pre><code>import osdef Get_modify_time(file):    return os.path.getmtime(file)  # 获取文件修改时间path = &#39;文件&#39;  # 文件所在文件夹files = [path + &quot;\\&quot; + i for i in os.listdir(path)]  # 获取文件夹下的文件名,并拼接完整路径files.sort(key=Get_modify_time)  # 以文件修改时间为依据升序排序seq = 1  # 计数器，从1开始for file in files:    os.rename(file, os.path.join(path, str(seq) + &quot;. &quot; + file.split(&quot;\\&quot;)[-1]))  # 重命名文件    seq += 1</code></pre><p>‘文件’文件夹包括以下文件：<br><a href="说明.docx">说明.docx</a><br><a href="文档.txt">文档.txt</a><br><a href="演示文稿 - v1.pptx">演示文稿 - v1.pptx</a><br><a href="演示文稿.pptx">演示文稿.pptx</a><br><a href="资料.xlsx">资料.xlsx</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;python批量重命名文件&quot;&gt;&lt;a href=&quot;#python批量重命名文件&quot; class=&quot;headerlink&quot; title=&quot;python批量重命名文件&quot;&gt;&lt;/a&gt;python批量重命名文件&lt;/h1&gt;&lt;p&gt;程序将’文件’文件夹下的所有文件重命名。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="内置模块" scheme="http://example.com/categories/python/%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/"/>
    
    <category term="os" scheme="http://example.com/categories/python/%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/os/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="os" scheme="http://example.com/tags/os/"/>
    
  </entry>
  
  <entry>
    <title>baidu-aip | python调用人工智能识别表格</title>
    <link href="http://example.com/2021/10/27/python%E8%B0%83%E7%94%A8%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E8%AF%86%E5%88%AB%E8%A1%A8%E6%A0%BC/"/>
    <id>http://example.com/2021/10/27/python%E8%B0%83%E7%94%A8%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E8%AF%86%E5%88%AB%E8%A1%A8%E6%A0%BC/</id>
    <published>2021-10-27T12:19:47.000Z</published>
    <updated>2021-10-27T12:25:43.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python调用人工智能识别表格"><a href="#python调用人工智能识别表格" class="headerlink" title="python调用人工智能识别表格"></a>python调用人工智能识别表格</h1><p>使用百度的OCR API识别表格中的文字。<br><a href="https://blog.csdn.net/weixin_39932611/article/details/112354147">参考资料1</a><br><a href="https://blog.csdn.net/weixin_44298740/article/details/117560495">参考资料2</a></p><span id="more"></span><pre><code># coding:utf-8# 获取路径下所有图片文件，并存入列表import oswork_path = &quot;图片\\&quot;pictures = []  # 存储文件夹内所有文件的路径（包括子目录内的文件）for root, dirs, files in os.walk(work_path):    path = [os.path.join(root, name) for name in files]    pictures.extend(path)from aip import AipOcr  # 导入AipOcr模块，用于做文字识别import time  # 时间模块import requests  # 用于HTTP请求APP_ID = &#39;25067363&#39;API_KEY = &#39;0PRCHim4nzLcDNEYR1hcSGGG&#39;SECRET_KEY = &#39;DFGtcTbhpD829q9GOUbjPYameEty7C6i&#39;client = AipOcr(APP_ID, API_KEY, SECRET_KEY)# 提交识别请求，并储存所有请求IDfor picture in pictures:    pic = open(picture, &#39;rb&#39;)  # 以二进制方式打开图片    img = pic.read()  # 读取    table = client.tableRecognitionAsync(img)  # 调用表格识别模块    print(table)    # request_id = table[&#39;result&#39;][0][&#39;request_id&#39;]    #    # # 判断识别是否完成，直到完成才根据请求ID获取Excel下载路径    # result = client.getTableRecognitionResult(request_id)  # 通过ID获取识别结果    # while result[&#39;result&#39;][&#39;ret_msg&#39;] != &#39;已完成&#39;:  # 如果状态是“已完成”，才能获取下载地址    #     time.sleep(2)  # 暂停2秒再刷新    #     result = client.getTableRecognitionResult(request_id)  # 持续刷新，直到满足条件    #    # download_path = result[&#39;result&#39;][&#39;result_data&#39;]    #    # # 下载并将Excel文件名设为图片名    # excel_name = picture.split(&quot;.&quot;)[0] + &quot;.xls&quot;  # 让excel文件的名字与图片相同    # excel = requests.get(download_path)  # 抓取下载链接    # file = open(excel_name, &#39;wb&#39;)  # 新建excel文件    # file.write(excel.content)  # 写入excel文件并保存    </code></pre><p><a href="论文.jpg">论文.jpg</a><br><a href="收货表.jpg">收货表.jpg</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;python调用人工智能识别表格&quot;&gt;&lt;a href=&quot;#python调用人工智能识别表格&quot; class=&quot;headerlink&quot; title=&quot;python调用人工智能识别表格&quot;&gt;&lt;/a&gt;python调用人工智能识别表格&lt;/h1&gt;&lt;p&gt;使用百度的OCR API识别表格中的文字。&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_39932611/article/details/112354147&quot;&gt;参考资料1&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_44298740/article/details/117560495&quot;&gt;参考资料2&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="第三方库" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="baidu-aip" scheme="http://example.com/categories/python/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/baidu-aip/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="os" scheme="http://example.com/tags/os/"/>
    
    <category term="requests" scheme="http://example.com/tags/requests/"/>
    
    <category term="time" scheme="http://example.com/tags/time/"/>
    
    <category term="baidu-aip" scheme="http://example.com/tags/baidu-aip/"/>
    
  </entry>
  
  <entry>
    <title>CNN | 卷积神经网络如何处理一维时间序列数据</title>
    <link href="http://example.com/2021/10/26/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E4%B8%80%E7%BB%B4%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%95%B0%E6%8D%AE/"/>
    <id>http://example.com/2021/10/26/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E4%B8%80%E7%BB%B4%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%95%B0%E6%8D%AE/</id>
    <published>2021-10-27T03:28:20.000Z</published>
    <updated>2021-10-27T03:31:42.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id="卷积神经网络如何处理一维时间序列数据"><a href="#卷积神经网络如何处理一维时间序列数据" class="headerlink" title="卷积神经网络如何处理一维时间序列数据?"></a>卷积神经网络如何处理一维时间序列数据?</h1><p><a href="https://zhuanlan.zhihu.com/p/67496559">卷积神经网络如何处理一维时间序列数据?</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;卷积神经网络如何处理一维时间序列数据&quot;&gt;&lt;a href=&quot;#卷积神经网络如何处理一维时间序列数据&quot; class=&quot;headerlink&quot; title=&quot;卷积神经网络如何处理一维时间序列数据?&quot;&gt;&lt;/a&gt;卷积神经网络如何处理一维时间序列数据?&lt;/h1&gt;&lt;p&gt;&lt;a h</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习基础" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
    <category term="CNN" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/CNN/"/>
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="CNN" scheme="http://example.com/tags/CNN/"/>
    
  </entry>
  
</feed>
