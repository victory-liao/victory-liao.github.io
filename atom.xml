<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shengli liao</title>
  
  <subtitle>长安一片月，万户捣衣声</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-05-23T13:28:44.904Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>victory-liao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django | django模板中引入JS报错：$ is not defined</title>
    <link href="http://example.com/2024/05/23/JS%E6%8A%A5%E9%94%99/"/>
    <id>http://example.com/2024/05/23/JS%E6%8A%A5%E9%94%99/</id>
    <published>2024-05-23T13:20:49.000Z</published>
    <updated>2024-05-23T13:28:44.904Z</updated>
    
    <content type="html"><![CDATA[<p>在django模板中引入JS时报错“$ is not defined”，原因是因为没有引入JQuery，在模板中引入JQuery即可。</p><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% load static %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;polls/JS/script.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>参考博客：<a href="https://blog.csdn.net/CSDN_fzs/article/details/106543522">【JavaScript】解决$ is not defined问题-CSDN博客</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在django模板中引入JS时报错“$ is not defined”，原因是因为没有引入JQuery，在模板中引入JQuery即可。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="框架" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Django" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/Django/"/>
    
    <category term="django模板中引入JS报错：$ is not defined" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/Django/django%E6%A8%A1%E6%9D%BF%E4%B8%AD%E5%BC%95%E5%85%A5JS%E6%8A%A5%E9%94%99%EF%BC%9A-is-not-defined/"/>
    
    
    <category term="Django" scheme="http://example.com/tags/Django/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Django | django引入静态资源</title>
    <link href="http://example.com/2024/05/23/django%E5%BC%95%E5%85%A5%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/"/>
    <id>http://example.com/2024/05/23/django%E5%BC%95%E5%85%A5%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/</id>
    <published>2024-05-23T13:20:17.000Z</published>
    <updated>2024-05-23T13:42:16.850Z</updated>
    
    <content type="html"><![CDATA[<ul><li>在django项目中引入静态资源（图片、CSS/JS文件）</li></ul><span id="more"></span><p>在使用django进行开发的过程中，要使用除html以外的静态文件（图片、CSS/JS文件），需要在django模板中进行引入，引入方式如下：</p><p>1.在项目中创建静态资源文件夹，结构如下</p><ul><li>[project name]<ul><li>[app_name]<ul><li>static<ul><li>[app_name]<ul><li>images</li><li>CSS</li><li>JS</li></ul></li></ul></li></ul></li></ul></li></ul><p>2.在django模板中引用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% load static %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;polls/CSS/style.css&#x27; %&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;polls/JS/script.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;在django项目中引入静态资源（图片、CSS/JS文件）&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="框架" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Django" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/Django/"/>
    
    <category term="django引入静态资源" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/Django/django%E5%BC%95%E5%85%A5%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="Django" scheme="http://example.com/tags/Django/"/>
    
    <category term="静态资源" scheme="http://example.com/tags/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>Django | django通用视图</title>
    <link href="http://example.com/2024/05/23/django%E9%80%9A%E7%94%A8%E8%A7%86%E5%9B%BE/"/>
    <id>http://example.com/2024/05/23/django%E9%80%9A%E7%94%A8%E8%A7%86%E5%9B%BE/</id>
    <published>2024-05-23T13:19:52.000Z</published>
    <updated>2024-05-23T13:31:03.487Z</updated>
    
    <content type="html"><![CDATA[<ul><li>使用django通用视图简化代码</li></ul><span id="more"></span><p>使用django开发网站的常见情况是根据 URL 中的参数从数据库中获取数据、载入模板文件然后返回渲染后的模板。 由于这种情况特别常见，Django 提供一种快捷方式，叫做 <code>通用视图</code>系统。</p><p>1.<strong>修改[app_name]/urls.py中的URLconf</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">&quot;[app_name]&quot;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;&quot;</span>, views.IndexView.as_view(), name=<span class="string">&quot;index&quot;</span>),</span><br><span class="line">    <span class="comment"># ex: /[app_name]/1/</span></span><br><span class="line">    path(<span class="string">&quot;&lt;int:pk&gt;/&quot;</span>, views.DetailView.as_view(), name=<span class="string">&quot;detail&quot;</span>),</span><br><span class="line">    <span class="comment"># ex: /[app_name]/1/results/</span></span><br><span class="line">    path(<span class="string">&quot;&lt;int:pk&gt;/results/&quot;</span>, views.ResultsView.as_view(), name=<span class="string">&quot;results&quot;</span>),</span><br><span class="line">    <span class="comment"># ex: /[app_name]/1/vote/</span></span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/vote/&quot;</span>, views.vote, name=<span class="string">&quot;vote&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>2.<strong>使用通用视图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> generic</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span>(<span class="params">generic.ListView</span>):</span></span><br><span class="line">    template_name = <span class="string">&quot;[app_name]/index.html&quot;</span></span><br><span class="line">    context_object_name = <span class="string">&quot;latest_question_list&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return the last five published questions.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> Question.objects.order_by(<span class="string">&quot;-pub_date&quot;</span>)[:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailView</span>(<span class="params">generic.DetailView</span>):</span></span><br><span class="line">    model = Question</span><br><span class="line">    template_name = <span class="string">&quot;[app_name]/detail.html&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResultsView</span>(<span class="params">generic.DetailView</span>):</span></span><br><span class="line">    model = Question</span><br><span class="line">    template_name = <span class="string">&quot;[app_name]/results.html&quot;</span></span><br></pre></td></tr></table></figure><p>3.模型类（帮助理解URLconf和view）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">&quot;date published&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.question_text</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">was_published_recently</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.pub_date &gt;= timezone.now() - datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</span><br><span class="line">    choice_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    votes = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.choice_text</span><br></pre></td></tr></table></figure><p>4.模板（帮助理解URLconf和view）</p><p>模板1：index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% if latest_question_list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        &#123;% for question in latest_question_list %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;polls:detail&#x27; question.id %&#125;&quot;</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>No polls are available.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>模板2：detail.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&#123;% url &#x27;polls:vote&#x27; question.id %&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">&#123;% csrf_token %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    &#123;% if error_message %&#125;<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; error_message &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#123;% endif %&#125;</span><br><span class="line">    &#123;% for choice in question.choice_set.all %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;choice&quot;</span> <span class="attr">id</span>=<span class="string">&quot;choice&#123;&#123; forloop.counter &#125;&#125;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; choice.id &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;choice&#123;&#123; forloop.counter &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Vote&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>模板3：results.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        &#123;% for choice in question.choice_set.all %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; choice.choice_test &#125;&#125; -- &#123;&#123;choice.votes&#125;&#125; vote&#123;&#123; choice.votes|pluralize &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;使用django通用视图简化代码&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="框架" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Django" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/Django/"/>
    
    <category term="django通用视图" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/Django/django%E9%80%9A%E7%94%A8%E8%A7%86%E5%9B%BE/"/>
    
    
    <category term="Django" scheme="http://example.com/tags/Django/"/>
    
    <category term="通用视图" scheme="http://example.com/tags/%E9%80%9A%E7%94%A8%E8%A7%86%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Django | django模板</title>
    <link href="http://example.com/2024/05/23/django%E6%A8%A1%E6%9D%BF/"/>
    <id>http://example.com/2024/05/23/django%E6%A8%A1%E6%9D%BF/</id>
    <published>2024-05-23T13:19:41.000Z</published>
    <updated>2024-05-23T13:32:58.474Z</updated>
    
    <content type="html"><![CDATA[<p>使用django模板语言（DTL）动态生成页面内容。</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用django模板语言（DTL）动态生成页面内容。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="框架" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Django" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/Django/"/>
    
    <category term="django模板" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/Django/django%E6%A8%A1%E6%9D%BF/"/>
    
    
    <category term="Django" scheme="http://example.com/tags/Django/"/>
    
    <category term="DTL" scheme="http://example.com/tags/DTL/"/>
    
    <category term="模板" scheme="http://example.com/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>Django | django配置redis缓存</title>
    <link href="http://example.com/2024/05/23/django%E9%85%8D%E7%BD%AEredis%E7%BC%93%E5%AD%98/"/>
    <id>http://example.com/2024/05/23/django%E9%85%8D%E7%BD%AEredis%E7%BC%93%E5%AD%98/</id>
    <published>2024-05-23T13:19:28.000Z</published>
    <updated>2024-05-23T13:34:01.359Z</updated>
    
    <content type="html"><![CDATA[<ul><li>django配置redis作为缓存后端</li></ul><span id="more"></span><p>1.django项目中配置redis缓存后端</p><p>在[project_name]/[project_name]/settings.py中添加以下配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">REDIS_HOST = <span class="string">&#x27;localhost&#x27;</span>  <span class="comment"># 主机ip</span></span><br><span class="line">REDIS_PORT = <span class="number">6379</span>  <span class="comment"># 端口号</span></span><br><span class="line">REDIS_DB = <span class="number">0</span>  <span class="comment"># 选择0号数据库</span></span><br><span class="line"><span class="comment"># 配置Django缓存后端为Redis</span></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django_redis.cache.RedisCache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;LOCATION&#x27;</span>: <span class="string">f&#x27;redis://<span class="subst">&#123;REDIS_HOST&#125;</span>:<span class="subst">&#123;REDIS_PORT&#125;</span>/<span class="subst">&#123;REDIS_DB&#125;</span>&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;CLIENT_CLASS&#x27;</span>: <span class="string">&#x27;django_redis.client.DefaultClient&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;SERIALIZER&#x27;</span>: <span class="string">&#x27;django_redis.serializers.json.JSONSerializer&#x27;</span>,  <span class="comment"># 使用JSON序列化</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 配置Django的会话后端为Redis</span></span><br><span class="line">SESSION_ENGINE = <span class="string">&#x27;django.contrib.sessions.backends.cache&#x27;</span></span><br><span class="line">SESSION_CACHE_ALIAS = <span class="string">&#x27;default&#x27;</span></span><br></pre></td></tr></table></figure><p>2.查询数据库（先查缓存，再查数据库，缓存中不存在时从数据库查并将数据放入缓存）</p><p>在[project_name]/[app_name]/views.py中编写视图使用缓存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redisascache</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 查缓存</span></span><br><span class="line">    data = cache.get(<span class="string">&#x27;my_key&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 缓存中不存在该数据，从数据库中查并将数据加入到缓存中</span></span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        data = <span class="string">&quot;OK&quot;</span></span><br><span class="line"></span><br><span class="line">        cache.<span class="built_in">set</span>(<span class="string">&quot;my_key&quot;</span>, data, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 相应</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(data)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;django配置redis作为缓存后端&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="框架" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Django" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/Django/"/>
    
    <category term="django配置redis缓存" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/Django/django%E9%85%8D%E7%BD%AEredis%E7%BC%93%E5%AD%98/"/>
    
    
    <category term="Django" scheme="http://example.com/tags/Django/"/>
    
    <category term="redis" scheme="http://example.com/tags/redis/"/>
    
    <category term="缓存" scheme="http://example.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Django | django配置mysql数据库</title>
    <link href="http://example.com/2024/05/23/django%E9%85%8D%E7%BD%AEmysql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://example.com/2024/05/23/django%E9%85%8D%E7%BD%AEmysql%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2024-05-23T13:19:16.000Z</published>
    <updated>2024-05-23T13:34:57.680Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>django项目中配置mysql</p></li><li><p>使用django模型管理器查询数据库</p><span id="more"></span></li></ul><p>在django项目中配置mysql数据库：</p><ul><li><p>在django项目配置文件（[django_project_name]/[django_project_name]/setttings.py）中添加mysql的配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&quot;default&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;ENGINE&quot;</span>: <span class="string">&quot;django.db.backends.mysql&quot;</span>,</span><br><span class="line">        <span class="string">&quot;USER&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">        <span class="string">&quot;PASSWORD&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">        <span class="string">&quot;NAME&quot;</span>: <span class="string">&quot;polls&quot;</span>,</span><br><span class="line">        <span class="string">&quot;HOST&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;PORT&quot;</span>: <span class="string">&quot;3306&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ENGINE：数据库引擎</p><p>USER: mysql数据库用户名</p><p>PASSWORD: mysql数据库密码</p><p>NAME: 项目关联的mysql数据库（通过create database database_name charset=utf8创建的数据库）</p><p>HOST: 数据库所在主机的ip</p><p>PORT: 数据库所在主机的端口号</p></li></ul><p>使用django模型管理器查询数据库：</p><p>1.创建模型类（[django_project_name]/[app_name]/models.py）,以创建User类为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    age = models.IntegerField()</span><br></pre></td></tr></table></figure><p>2.使用模型管理器查询数据库（[django_project_name]/[app_name]/views.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">look_up_users</span>(<span class="params">request</span>):</span></span><br><span class="line">    ......</span><br><span class="line">    user_list = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">&quot;user_list&quot;</span>: user_list,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;[app_name]/templates/[app_name]/index.html&quot;</span>, context)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;django项目中配置mysql&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用django模型管理器查询数据库&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="框架" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Django" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/Django/"/>
    
    <category term="django配置mysql数据库" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/Django/django%E9%85%8D%E7%BD%AEmysql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Django" scheme="http://example.com/tags/Django/"/>
    
    <category term="mysql" scheme="http://example.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Redis | windows系统安装redis</title>
    <link href="http://example.com/2024/05/22/windows%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85redis/"/>
    <id>http://example.com/2024/05/22/windows%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85redis/</id>
    <published>2024-05-22T11:52:14.000Z</published>
    <updated>2024-05-22T11:54:56.365Z</updated>
    
    <content type="html"><![CDATA[<p>redis安装教程可参考一下文章：</p><p><a href="https://blog.csdn.net/weixin_44893902/article/details/123087435">Window下Redis的安装和部署详细图文教程（Redis的安装和可视化工具的使用）_redis安装-CSDN博客</a></p><p>可选择文章中的zip压缩包方式下载安装，亲测有效！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;redis安装教程可参考一下文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_44893902/article/details/123087435&quot;&gt;Window下Redis的安装和部署详细图文教程（Redis的安装和可视化工</summary>
      
    
    
    
    <category term="Redis" scheme="http://example.com/categories/Redis/"/>
    
    <category term="windows系统安装redis" scheme="http://example.com/categories/Redis/windows%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85redis/"/>
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>postman | postman接口测试工具安装及使用</title>
    <link href="http://example.com/2024/05/22/postman%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2024/05/22/postman%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</id>
    <published>2024-05-22T11:51:52.000Z</published>
    <updated>2024-05-22T11:57:55.133Z</updated>
    
    <content type="html"><![CDATA[<ul><li>windows安装Postman接口测试工具</li><li>postman测试工具的使用</li></ul><span id="more"></span><p>安装以及使用过程参考：<a href="https://blog.csdn.net/m0_61843874/article/details/123324727">PostMan——安装使用教程（图文详解）_postman安装教程-CSDN博客</a></p><p>postman工具可用于在网站开发过程中做接口测试，例如对GET/POST/DELETE等HTTP请求的测试。</p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;windows安装Postman接口测试工具&lt;/li&gt;
&lt;li&gt;postman测试工具的使用&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="工具" scheme="http://example.com/categories/python/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="postman接口测试工具" scheme="http://example.com/categories/python/%E5%B7%A5%E5%85%B7/postman%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="postman" scheme="http://example.com/tags/postman/"/>
    
    <category term="接口测试" scheme="http://example.com/tags/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Git | git提交报错</title>
    <link href="http://example.com/2024/05/22/git%E6%8F%90%E4%BA%A4%E6%8A%A5%E9%94%99/"/>
    <id>http://example.com/2024/05/22/git%E6%8F%90%E4%BA%A4%E6%8A%A5%E9%94%99/</id>
    <published>2024-05-22T11:51:33.000Z</published>
    <updated>2024-05-22T11:53:32.974Z</updated>
    
    <content type="html"><![CDATA[<p>可通过关闭git HTTP代理，使用本机HTPP代理解决git提交或克隆报错。</p><span id="more"></span><p>报错信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access &#x27;https://github.com/victory-liao/Note-Transfer-Station.git/&#x27;: Failed to connect to github.com port 443 after 21112 ms: Couldn&#x27;t connect to server</span><br></pre></td></tr></table></figure><p>关闭git HTTP代理（使用自己本机的代理，如果本机没有的话还是默认使用git HTTP代理）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//取消http代理</span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line"></span><br><span class="line">//取消https代理 </span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><p>注意：关闭git代理也不一定能解决问题，因为github是外网，提交报错也有可能是网络的问题。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;可通过关闭git HTTP代理，使用本机HTPP代理解决git提交或克隆报错。&lt;/p&gt;</summary>
    
    
    
    <category term="Git" scheme="http://example.com/categories/Git/"/>
    
    <category term="Git 提交或克隆报错" scheme="http://example.com/categories/Git/Git-%E6%8F%90%E4%BA%A4%E6%88%96%E5%85%8B%E9%9A%86%E6%8A%A5%E9%94%99/"/>
    
    
    <category term="Git" scheme="http://example.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>2024年5月坚持清单</title>
    <link href="http://example.com/2024/05/16/2024%E5%B9%B45%E6%9C%88%E5%9D%9A%E6%8C%81%E6%B8%85%E5%8D%95/"/>
    <id>http://example.com/2024/05/16/2024%E5%B9%B45%E6%9C%88%E5%9D%9A%E6%8C%81%E6%B8%85%E5%8D%95/</id>
    <published>2024-05-16T12:46:11.000Z</published>
    <updated>2024-05-16T12:48:14.628Z</updated>
    
    <content type="html"><![CDATA[<p>列下后两年的坚持清单，两年后回来更新，希望在后面的2年时间里能够不负时光。</p><span id="more"></span><ul><li><p>未来坚持清单</p><ul><li>坚持阅读2年，一年5本书</li><li>坚持健身2年，每周锻炼3次</li><li>坚持写笔记，每年发博客笔记&gt;300篇</li><li>以2年为周期，每2年掌握一个核心技能</li></ul></li><li><p>留下激励自己的两句话</p><ul><li>流水不争先，争的是滔滔不绝。人生没有奇迹，只有努力的轨迹。如果要说奇迹。那奇迹一定藏在坚持的背后。</li><li>希望我20几岁做的事情，会让我在30岁时，让我更加自信，更加从容，更加有光芒</li></ul></li><li><p>2026.5.16日回来更新这篇笔记。加油我自己，不负时光。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;列下后两年的坚持清单，两年后回来更新，希望在后面的2年时间里能够不负时光。&lt;/p&gt;</summary>
    
    
    
    <category term="多一点思考" scheme="http://example.com/categories/%E5%A4%9A%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/"/>
    
    <category term="2024年5月坚持清单" scheme="http://example.com/categories/%E5%A4%9A%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/2024%E5%B9%B45%E6%9C%88%E5%9D%9A%E6%8C%81%E6%B8%85%E5%8D%95/"/>
    
    
    <category term="坚持清单" scheme="http://example.com/tags/%E5%9D%9A%E6%8C%81%E6%B8%85%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>Python | generator用于大文件读取</title>
    <link href="http://example.com/2024/05/16/generator%E7%94%A8%E4%BA%8E%E5%A4%A7%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/"/>
    <id>http://example.com/2024/05/16/generator%E7%94%A8%E4%BA%8E%E5%A4%A7%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/</id>
    <published>2024-05-16T12:42:50.000Z</published>
    <updated>2024-05-16T12:45:30.419Z</updated>
    
    <content type="html"><![CDATA[<p>python生成器最常见的应用是大文件的读取，节省内存空间。</p><span id="more"></span><p>以下是使用生成器读取大文件的python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_in_chunks</span>(<span class="params">file_object, chunk_size=<span class="number">1024</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Lazy function (generator) to read a file piece by piece.</span></span><br><span class="line"><span class="string">    Default chunk size: 1k.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = file_object.read(chunk_size)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">yield</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_data</span>(<span class="params">piece</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;piece of data is processing.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;really_big_file.dat&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> piece <span class="keyword">in</span> read_in_chunks(f):</span><br><span class="line">    process_data(piece)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;python生成器最常见的应用是大文件的读取，节省内存空间。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="基础" scheme="http://example.com/categories/python/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="生成器" scheme="http://example.com/categories/python/%E5%9F%BA%E7%A1%80/%E7%94%9F%E6%88%90%E5%99%A8/"/>
    
    
    <category term="生成器" scheme="http://example.com/tags/%E7%94%9F%E6%88%90%E5%99%A8/"/>
    
    <category term="大文件读取" scheme="http://example.com/tags/%E5%A4%A7%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>Python | 协程</title>
    <link href="http://example.com/2024/05/16/%E5%8D%8F%E7%A8%8B/"/>
    <id>http://example.com/2024/05/16/%E5%8D%8F%E7%A8%8B/</id>
    <published>2024-05-16T12:37:42.000Z</published>
    <updated>2024-05-16T12:41:51.132Z</updated>
    
    <content type="html"><![CDATA[<p>Python中的协程基于yield实现。</p><p><a href="https://www.bookstack.cn/read/explore-python/Process-Thread-Coroutine-coroutine.md">进程、线程和协程 - 协程 - 《Python 之旅》 - 书栈网 · BookStack</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Python中的协程基于yield实现。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bookstack.cn/read/explore-python/Process-Thread-Coroutine-coroutine.md&quot;&gt;进程、线程和协程 - 协程 - </summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="基础" scheme="http://example.com/categories/python/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="协程" scheme="http://example.com/categories/python/%E5%9F%BA%E7%A1%80/%E5%8D%8F%E7%A8%8B/"/>
    
    
    <category term="协程" scheme="http://example.com/tags/%E5%8D%8F%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>图编译 | 几种Dialect的区别</title>
    <link href="http://example.com/2024/05/16/%E5%9B%BE%E7%BC%96%E8%AF%91%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8DDialect%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2024/05/16/%E5%9B%BE%E7%BC%96%E8%AF%91%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8DDialect%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2024-05-16T12:35:11.000Z</published>
    <updated>2024-05-16T12:37:17.640Z</updated>
    
    <content type="html"><![CDATA[<p>分析计算图编译中的几种Dialect的区别。</p><span id="more"></span><p>Torch Dialect、Relay Dialect 和 Spirv Dialect 都是编译器领域中的术语，它们代表了不同类型的中间表示（Intermediate Representation, IR）。尽管它们都用于描述程序的某种形式，但它们在设计目标、应用场景和使用的技术细节上存在差异。</p><ol><li><strong>相同点</strong>：</li></ol><ul><li><strong>中间表示</strong>：三者都是某种形式的中间表示，它们将源代码转换为一种更接近硬件的表现形式，以便进行优化和编译。</li><li><strong>编译器组件</strong>：它们都是编译器或运行时系统的一部分，用于处理代码生成、调度同步等任务。</li></ul><ol><li><strong>不同点</strong>：</li></ol><ul><li><strong>设计目标</strong>：Torch Dialect 主要用于支持 PyTorch 相关的操作，它是 MLIR 中的一种方言，用于表示 PyTorch 中的张量操作和计算图。Relay Dialect 是 TVM 项目中的一种方言，它用于表示机器学习模型的计算图，特别是在进行模型优化和部署时使用。Spirv Dialect 则是一种图形和并行计算领域的统一中间表示，主要被用于实现 Shader 和 Kernel 编译器，支持 Vulkan、OpenGL、OpenCL 等标准。</li><li><strong>应用场景</strong>：Torch Dialect 主要应用于 PyTorch 框架中，用于优化和执行 PyTorch 模型。Relay Dialect 主要应用于 TVM 框架中，用于端到端的机器学习模型编译流程。Spirv Dialect 广泛应用于图形渲染和GPU计算领域，它是一种与硬件无关的中间表示，可以在不同的图形和计算API之间进行转换。</li><li><strong>技术细节</strong>：Torch Dialect 和 Relay Dialect 通常包含了对机器学习操作的高度抽象，而 Spirv Dialect 则更侧重于图形和并行计算领域的底层操作。</li></ul><p>总的来说，Torch Dialect、Relay Dialect 和 Spirv Dialect 分别针对不同的应用场景和需求，提供了各自独特的中间表示形式。虽然它们在概念上有共通之处，但在具体实现和用途上各有侧重点，反映了编译器设计和机器学习框架的多样性。 </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;分析计算图编译中的几种Dialect的区别。&lt;/p&gt;</summary>
    
    
    
    <category term="编译器" scheme="http://example.com/categories/%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    
    <category term="计算图编译" scheme="http://example.com/categories/%E7%BC%96%E8%AF%91%E5%99%A8/%E8%AE%A1%E7%AE%97%E5%9B%BE%E7%BC%96%E8%AF%91/"/>
    
    <category term="几种Dialect的区别" scheme="http://example.com/categories/%E7%BC%96%E8%AF%91%E5%99%A8/%E8%AE%A1%E7%AE%97%E5%9B%BE%E7%BC%96%E8%AF%91/%E5%87%A0%E7%A7%8DDialect%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    
    
    <category term="图编译" scheme="http://example.com/tags/%E5%9B%BE%E7%BC%96%E8%AF%91/"/>
    
    <category term="Dialect" scheme="http://example.com/tags/Dialect/"/>
    
    <category term="Torch Dialect" scheme="http://example.com/tags/Torch-Dialect/"/>
    
    <category term="Relay Dialect" scheme="http://example.com/tags/Relay-Dialect/"/>
    
    <category term="Spirv Dialect" scheme="http://example.com/tags/Spirv-Dialect/"/>
    
  </entry>
  
  <entry>
    <title>clang | clang parser和clang sema的作用</title>
    <link href="http://example.com/2024/05/16/Sema%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>http://example.com/2024/05/16/Sema%E7%9A%84%E4%BD%9C%E7%94%A8/</id>
    <published>2024-05-16T12:31:30.000Z</published>
    <updated>2024-05-16T12:34:26.651Z</updated>
    
    <content type="html"><![CDATA[<p>clang前端中的parser和sema的作用。</p><span id="more"></span><ul><li><p>Clang Parser</p><p>clang parser的作用是<strong>解析C、C++等编程语言的源代码，构建出抽象语法树（AST）</strong>。</p><p>具体来说，clang parser的工作包括以下几个方面：</p><ol><li><strong>词法分析</strong>：将源代码分解成一个个的词素（tokens），例如关键字、标识符、常量等。</li><li><strong>语法分析</strong>：根据语言的语法规则，将这些词素组织成语法结构，如表达式、语句和函数定义等。</li><li><strong>构建抽象语法树</strong>：将语法结构转换成抽象语法树的形式，树上的每个节点对应源代码中的一个构造或实体。</li><li><strong>语义分析</strong>：在抽象语法树的基础上进行语义分析，检查代码中的错误，如类型不匹配、未声明的变量等。</li><li><strong>支持条件解析</strong>：例如，对于if语句的条件部分，clang parser会特别处理，确保正确地解析条件表达式。</li><li><strong>遵循语言标准</strong>：clang parser在解析时会参照相应的语言标准，如C99或C89，确保解析的准确性。</li><li><strong>性能优势</strong>：clang parser在速度上相比其他编译器有显著优势，它能快速完成预处理、词法分析、语法分析和语义分析等步骤。</li></ol></li><li><p>Clang Sema</p><p>clang sema是Clang编译器前端的一个重要组件，主要负责语义分析和类型检查，它的主要职责包括：</p></li></ul><ol><li><strong>语义分析</strong>：Sema负责处理抽象语法树（AST）中的语义信息，确保代码在语义上是正确的。这包括检查变量是否已经声明，函数是否正确调用，以及表达式是否符合语言规范等。</li><li><strong>类型检查</strong>：Sema还会进行类型检查，确保表达式和语句中的类型匹配，例如在赋值操作中，右侧的值的类型需要与左侧变量的类型兼容。</li><li><strong>符号解析</strong>：它负责解析符号，比如变量名、函数名等，确保它们在使用前已经被正确声明。</li><li><strong>重载解析</strong>：对于支持函数重载的语言，Sema还要负责选择合适的函数版本来调用。</li><li><strong>模板实例化</strong>：在处理C++等支持模板的语言时，Sema还负责模板的实例化过程。</li><li><strong>诊断报告</strong>：如果在语义分析过程中发现问题，Sema会生成相应的诊断报告，帮助开发者定位和修复问题。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;clang前端中的parser和sema的作用。&lt;/p&gt;</summary>
    
    
    
    <category term="编译器" scheme="http://example.com/categories/%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    
    <category term="clang" scheme="http://example.com/categories/%E7%BC%96%E8%AF%91%E5%99%A8/clang/"/>
    
    <category term="clang parser和clang sema的作用" scheme="http://example.com/categories/%E7%BC%96%E8%AF%91%E5%99%A8/clang/clang-parser%E5%92%8Cclang-sema%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    
    
    <category term="clang" scheme="http://example.com/tags/clang/"/>
    
    <category term="parser" scheme="http://example.com/tags/parser/"/>
    
    <category term="sema" scheme="http://example.com/tags/sema/"/>
    
  </entry>
  
  <entry>
    <title>HTTP | HTTP代理</title>
    <link href="http://example.com/2024/05/16/HTTP%E4%BB%A3%E7%90%86/"/>
    <id>http://example.com/2024/05/16/HTTP%E4%BB%A3%E7%90%86/</id>
    <published>2024-05-16T11:56:52.000Z</published>
    <updated>2024-05-16T12:00:18.263Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>什么是HTTP代理？代理的作用？</p><span id="more"></span><p>HTTP代理是一种充当客户端和服务器之间的<code>中间人</code>的服务器。当客户端发起请求时，HTTP代理会<code>拦截请求</code>并将其<code>转发</code>给目标服务器。一旦目标服务器响应，HTTP代理会<code>拦截响应</code>并将其转发回客户端。HTTP代理可以被用于多种场景，例如<code>加强安全</code>、<code>缓存内容</code>以<code>加速访问</code>、<code>访问受限资源</code>等等。</p><p>以实际生活中找中介租房为例，将租房人看做客户端，将中介看做代理服务器，将房产拥有者看做服务器，</p><p>租房人向中介提出想要租房的意愿（相当于发起一个请求），中介收到租房请求后，根据租房人的需求联系（转发请求）房产拥有者，谈好价钱且确认好租房事项后，中介再将这些信息返回给租房人（响应）。通常情况下，想要租房的人不能直接联系到房产拥有者，但通过中介这个媒介就可以顺利的租到房子。从访问服务器的角度来说，客户端不具备直接访问服务器的权限，通过代理服务器可以突破这种限制，例如访问YouTube等国外网站。</p></li><li><p>代理类型</p><ul><li><code>正向代理（Forward Proxy）</code>：为了从外部网络访问内部网络的资源，客户端将请求发送到代理服务器，然后由代理服务器代为转发到目标服务器。在这个过程中，代理服务器对外隐藏了客户端的真实IP地址，同时可以对流量进行控制和过滤。正向代理主要用于<code>提高访问速度</code>、<code>突破访问限制</code>以及<code>用户隐私保护</code>。正向代理即是客户端代理, 代理客户端, 服务端不知道实际发起请求的客户端.</li><li><code>反向代理（Reverse Proxy）</code>：为服务器接收来自外部网络的连接请求。客户端直接与反向代理服务器建立连接，而反向代理服务器再将请求转发到内部网络的实际服务器上。反向代理常用于<code>负载均衡</code>、<code>提供安全防护</code>等。反向代理即是服务端代理, 代理服务端, 客户端不知道实际提供服务的服务端.</li></ul></li><li><p>linux系统配置代码的方法</p><p>在linux系统中<code>配置HTTP代理</code>，只需在命令行执行以下两天命令，<code>=</code>后的字符串为代理服务器（proxy server）的ip地址。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HTTP_PROXY=&quot;http://10.10.1.10:3128&quot;</span><br><span class="line">export HTTPS_PROXY=&quot;http://10.10.1.10:1080&quot;</span><br></pre></td></tr></table></figure></li><li><p>windows系统配置代理的方法</p><ul><li>打开“设置”应用程序，并点击“网络和Internet”。</li><li>点击“代理”，然后在“手动代理设置”下选择“使用代理服务器”。</li><li>输入代理服务器的IP地址和端口号，然后点击“保存”。</li></ul></li><li><p>git配置HTTP代理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy &#x27;http://192.168.0.1:1080&#x27;  # 使用时需修改代理服务器ip为实际的代理服务器ip</span><br><span class="line">git config --global https.proxy &#x27;http://192.168.0.1:1080&#x27;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;什么是HTTP代理？代理的作用？&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="HTTP" scheme="http://example.com/categories/HTTP/"/>
    
    <category term="HTTP代理" scheme="http://example.com/categories/HTTP/HTTP%E4%BB%A3%E7%90%86/"/>
    
    
    <category term="HTTP" scheme="http://example.com/tags/HTTP/"/>
    
    <category term="代理" scheme="http://example.com/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>如何制定短期、长期目标？</title>
    <link href="http://example.com/2024/03/14/%E5%A6%82%E4%BD%95%E5%88%B6%E5%AE%9A%E7%9F%AD%E6%9C%9F%E3%80%81%E9%95%BF%E6%9C%9F%E7%9B%AE%E6%A0%87%EF%BC%9F/"/>
    <id>http://example.com/2024/03/14/%E5%A6%82%E4%BD%95%E5%88%B6%E5%AE%9A%E7%9F%AD%E6%9C%9F%E3%80%81%E9%95%BF%E6%9C%9F%E7%9B%AE%E6%A0%87%EF%BC%9F/</id>
    <published>2024-03-14T14:07:36.000Z</published>
    <updated>2024-03-14T14:31:26.799Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何制定短、长期目标？"><a href="#如何制定短、长期目标？" class="headerlink" title="如何制定短、长期目标？"></a>如何制定短、长期目标？</h3><p>首先，这是一个问句。其次，问题下面的文字不是答案，是在寻找答案。</p><span id="more"></span><p>先说说不制定短期目标会造成哪些现象吧。就自己来说，如果没有短期目标会直接的造成当下执行力的直线减弱，会陷入“无所事事”的焦虑与内耗之中，会喜欢在“短且快”的事物中结束当下的焦虑，比如:刷抖音，或者说会选择“躺平”，没有心情去干其他的事。</p><p>如果有一个短期目标，那么自己就会有来自完成这个目标的微小的压力，而这微小压力会增强执行力，这是自我分析的结果，希望后面能够验证(结果是对的)或调整(结果错了)这个结果。比如，我计划三天看一本不那么厚的书，那么我的手脚这三天就有地方去了，脚应该放在阅读桌的正下方，手应该放在这本书的右下角去翻页，在这个短的周期里，这本书会对我的行为有指导作用，或许这就是我的结论的含义吧。短期的目标会增加执行力，那么如何正确的制定短期目标是我需要去探索、去实践的。</p><p>进一步分析，不制定或者说没有一个长期目标的话，对我个人而言会在焦虑与内耗下造成迷茫，缺少动力的情况。若说短期目标是当下手和脚应该放在哪里的问题，那么长期目标就是“心所往”，也就是说，你想要去到哪里。一个长的周期内，我们有可能会精力充沛，信心满满的做一些事，也有可能会无所事事，迷茫焦虑，不知道该干什么，不知道我要去哪，不知道人生该如何度过。</p><p>再像上一段那样出个结论的话那就是，长期目标是一块磁铁，会在一个长的周期内在你迷茫的时候，将你的心拉回来，让你幡然醒悟，哦，我是要去到哪里，从里结束迷茫，继续前行。比如，在大三到大四考研的哪一年中，上岸就是一个相对长期的目标，在这主线任务中，当然大部分的时间是复习，但免不了放纵，迷茫的时刻，但是有了上岸的目标，在放纵一日，迷茫一日，焦虑一日之后，这个目标就会把我拉回来，如上所说，那是心去的地方，也许这是我的结论的当前解释吧。这个结论也是自我分析的结果，需要与制定长期目标这个问题一起去探索，去实践。</p><p>2024.3.13<br>victory</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;如何制定短、长期目标？&quot;&gt;&lt;a href=&quot;#如何制定短、长期目标？&quot; class=&quot;headerlink&quot; title=&quot;如何制定短、长期目标？&quot;&gt;&lt;/a&gt;如何制定短、长期目标？&lt;/h3&gt;&lt;p&gt;首先，这是一个问句。其次，问题下面的文字不是答案，是在寻找答案。&lt;/p&gt;</summary>
    
    
    
    <category term="多一点思考" scheme="http://example.com/categories/%E5%A4%9A%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/"/>
    
    <category term="如何制定短、长期目标？" scheme="http://example.com/categories/%E5%A4%9A%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/%E5%A6%82%E4%BD%95%E5%88%B6%E5%AE%9A%E7%9F%AD%E3%80%81%E9%95%BF%E6%9C%9F%E7%9B%AE%E6%A0%87%EF%BC%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>CUDA | CUDA源程序结构</title>
    <link href="http://example.com/2024/03/14/CUDA%E6%BA%90%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2024/03/14/CUDA%E6%BA%90%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/</id>
    <published>2024-03-14T13:55:46.000Z</published>
    <updated>2024-03-14T14:04:58.177Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CUDA源程序的结构"><a href="#CUDA源程序的结构" class="headerlink" title="CUDA源程序的结构"></a>CUDA源程序的结构</h3><p>采用CUDA并行计算编程模型进行编程一般分为以下几个步骤：</p><ol><li><p>分配GPU内存（使用cudaMalloc()函数进行分配）。</p></li><li><p>从CPU内存中拷贝数据到GPU内存（cudaMemcpy()）。</p></li><li><p>调用CUDA内核函数来完成程序指定的运算（xxxKernel&lt;&lt;&lt;block, grid&gt;&gt;&gt;()）。</p><p>在此过程中注意线程的组织方式，通过设置不同block、grid来进行组织。</p></li><li><p>将数据从GPU拷回CPU内存（cudaMemcpy()）。</p></li><li><p>释放GPU内存空间（cudaFree）。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;CUDA源程序的结构&quot;&gt;&lt;a href=&quot;#CUDA源程序的结构&quot; class=&quot;headerlink&quot; title=&quot;CUDA源程序的结构&quot;&gt;&lt;/a&gt;CUDA源程序的结构&lt;/h3&gt;&lt;p&gt;采用CUDA并行计算编程模型进行编程一般分为以下几个步骤：&lt;/p&gt;
&lt;ol&gt;</summary>
      
    
    
    
    <category term="并行计算" scheme="http://example.com/categories/%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/"/>
    
    <category term="CUDA" scheme="http://example.com/categories/%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/CUDA/"/>
    
    <category term="CUDA源程序结构" scheme="http://example.com/categories/%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/CUDA/CUDA%E6%BA%90%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="CUDA" scheme="http://example.com/tags/CUDA/"/>
    
  </entry>
  
  <entry>
    <title>CUDA | 数据划分形式</title>
    <link href="http://example.com/2024/03/14/%E6%95%B0%E6%8D%AE%E5%88%92%E5%88%86%E5%BD%A2%E5%BC%8F/"/>
    <id>http://example.com/2024/03/14/%E6%95%B0%E6%8D%AE%E5%88%92%E5%88%86%E5%BD%A2%E5%BC%8F/</id>
    <published>2024-03-14T13:55:25.000Z</published>
    <updated>2024-03-14T13:57:37.667Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据划分形式"><a href="#数据划分形式" class="headerlink" title="数据划分形式"></a>数据划分形式</h3><p>块划分和周期划分是数据分配给线程的两种不同策略，它们在一些方面存在差异。以下是具体分析：</p><ul><li><strong>块划分</strong>：在块划分中，<strong>一组连续的数据被分到一个块内</strong>。<strong>每个数据块通常具有相同的大小</strong>，并以任意次序被安排给一个线程进行处理。线程在同一时间只处理一个数据块，这种方式简化了同步和调度的问题，因为每个线程独立工作在自己的数据块上。</li><li><strong>周期划分</strong>：周期划分将更少的数据分到一个块内。在这种策略下，每个线程负责处理多个数据块，且这些<strong>数据块之间通常是不连续的</strong>。相邻的线程会处理相邻的数据块，当一个线程需要选择一个新的数据块时，它必须跳过与当前线程数一样多的数据块。这种划分方式可以提高缓存的利用率，并可能减少内存访问延迟。</li></ul><p>总的来说，<strong>块划分适合每个线程处理大块连续数据的任务</strong>，而<strong>周期划分更适合于需要细粒度并行和数据局部性</strong>优化的场景。实际选择哪种划分方式取决于具体的应用场景和目标架构的特点。 </p><p>以下是块划分和周期划分的代码示例：</p><p>块划分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义数据大小和线程数</span></span><br><span class="line">data_size = <span class="number">20</span></span><br><span class="line">num_threads = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算每个线程处理的数据量</span></span><br><span class="line">chunk_size = data_size // num_threads</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据分成块，并分配给线程</span></span><br><span class="line">data = np.random.rand(data_size)</span><br><span class="line">chunks = [data[i*chunk_size:(i+<span class="number">1</span>)*chunk_size] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_threads)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在每个线程中处理数据块</span></span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> chunks:</span><br><span class="line">    <span class="comment"># 在这里进行数据处理</span></span><br><span class="line">    <span class="built_in">print</span>(chunk)</span><br></pre></td></tr></table></figure><p>周期划分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义数据大小和线程数</span></span><br><span class="line">data_size = <span class="number">20</span></span><br><span class="line">num_threads = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算每个线程处理的数据量</span></span><br><span class="line">chunk_size = data_size // num_threads</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据分成块，并分配给线程</span></span><br><span class="line">data = np.random.rand(data_size)</span><br><span class="line">chunks = [data[i::num_threads] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_threads)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在每个线程中处理数据块</span></span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> chunks:</span><br><span class="line">    <span class="comment"># 在这里进行数据处理</span></span><br><span class="line">    <span class="built_in">print</span>(chunk)</span><br></pre></td></tr></table></figure><p>以上代码示例展示了如何将数据划分为块，并将这些块分配给不同的线程进行处理。在块划分中，每个线程处理一个连续的数据块；而在周期划分中，每个线程处理多个不连续的数据块。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;数据划分形式&quot;&gt;&lt;a href=&quot;#数据划分形式&quot; class=&quot;headerlink&quot; title=&quot;数据划分形式&quot;&gt;&lt;/a&gt;数据划分形式&lt;/h3&gt;&lt;p&gt;块划分和周期划分是数据分配给线程的两种不同策略，它们在一些方面存在差异。以下是具体分析：&lt;/p&gt;
&lt;ul&gt;
</summary>
      
    
    
    
    <category term="并行计算" scheme="http://example.com/categories/%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/"/>
    
    <category term="CUDA" scheme="http://example.com/categories/%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/CUDA/"/>
    
    <category term="数据划分形式" scheme="http://example.com/categories/%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/CUDA/%E6%95%B0%E6%8D%AE%E5%88%92%E5%88%86%E5%BD%A2%E5%BC%8F/"/>
    
    
    <category term="CUDA" scheme="http://example.com/tags/CUDA/"/>
    
    <category term="数据划分" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%88%92%E5%88%86/"/>
    
    <category term="块划分" scheme="http://example.com/tags/%E5%9D%97%E5%88%92%E5%88%86/"/>
    
    <category term="周期划分" scheme="http://example.com/tags/%E5%91%A8%E6%9C%9F%E5%88%92%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>pytest | fixtures执行顺序及清理顺序</title>
    <link href="http://example.com/2024/03/07/fixtures%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E5%8F%8A%E6%B8%85%E7%90%86%E9%A1%BA%E5%BA%8F/"/>
    <id>http://example.com/2024/03/07/fixtures%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E5%8F%8A%E6%B8%85%E7%90%86%E9%A1%BA%E5%BA%8F/</id>
    <published>2024-03-07T13:56:45.000Z</published>
    <updated>2024-03-07T13:59:46.185Z</updated>
    
    <content type="html"><![CDATA[<h3 id="pytest-fixtures执行顺序和清理顺序"><a href="#pytest-fixtures执行顺序和清理顺序" class="headerlink" title="pytest fixtures执行顺序和清理顺序"></a>pytest fixtures执行顺序和清理顺序</h3><ol><li>fixtures执行顺序</li></ol><p>pytest一个test请求多个fixture时，fixtures的执行顺序是什么？</p><span id="more"></span><p>以下面的demo为例，在这段代码中test_string_only请求了append_first，order，fisrt_entry三个fixtures，从代码中可以看出append_first fixture依赖于order和first_entry fixtures。</p><p>pytest会对多个fixtures进行<strong>依赖解析</strong>，<strong>如果一个fixture依赖于其他fixture(s)，那么被依赖的fixtures会先于依赖它们的fixture执行</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># contents of test_append.py</span></span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arrange</span></span><br><span class="line"><span class="meta">@pytest.fixture</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first_entry</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;3 - first_entry fixture has been executed.&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;a&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arrange</span></span><br><span class="line"><span class="meta">@pytest.fixture</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2 - order fixture has been executed.&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Act</span></span><br><span class="line"><span class="meta">@pytest.fixture</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">append_first</span>(<span class="params">order, first_entry</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1 - append_first fixture has been executed.&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> order.append(first_entry)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_string_only</span>(<span class="params">append_first, order, first_entry</span>):</span></span><br><span class="line">    <span class="comment"># Assert</span></span><br><span class="line">    <span class="keyword">assert</span> order == [first_entry]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行以上代码的结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">============================= test session starts =============================</span><br><span class="line">collecting ... collected 1 item</span><br><span class="line"></span><br><span class="line">test_append.py::test_string_only </span><br><span class="line">2 - order fixture has been executed.</span><br><span class="line">3 - first_entry fixture has been executed.</span><br><span class="line">1 - append_first fixture has been executed.</span><br><span class="line">PASSED                                  [100%]</span><br><span class="line"></span><br><span class="line">============================== 1 passed in 0.04s ==============================</span><br></pre></td></tr></table></figure><p>从运行结果可以看出，order fixture和first_entry fixture先于append_firt fixture执行。</p><p><strong>fixtures之间不存在依赖关系的，按照它们被声明的顺序执行</strong>，以下面的demo为例，假设有两个 fixtures，fixture A 和 fixture B，其中 fixture A 依赖于 fixture B。下面是一个示例来说明它们按照声明顺序执行的情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fixture_b</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Executing fixture B&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Cleaning up fixture B&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fixture_a</span>(<span class="params">fixture_b</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Executing fixture A&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Cleaning up fixture A&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_example</span>(<span class="params">fixture_a, fixture_b</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Executing test example&quot;</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>fixture_b</code> 和 <code>fixture_a</code> 都使用了 <code>@pytest.fixture</code> 装饰器进行声明。在测试函数 <code>test_example</code> 的参数列表中，<code>fixture_b</code> 在 <code>fixture_a</code> 之前声明。</p><p>当运行这个测试时，pytest 会首先执行 <code>fixture_b</code>，然后执行 <code>fixture_a</code>。这是因为 <code>fixture_a</code> 依赖于 <code>fixture_b</code>，所以需要先执行它。最后，测试函数 <code>test_example</code> 会被执行。</p><p>输出结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Executing fixture B</span><br><span class="line">Executing fixture A</span><br><span class="line">Executing test example</span><br><span class="line">Cleaning up fixture A</span><br><span class="line">Cleaning up fixture B</span><br></pre></td></tr></table></figure><p>可以看到，fixtures 是按照它们被声明的顺序执行的，首先是 <code>fixture_b</code>，然后是 <code>fixture_a</code>。 </p><ol><li>fixtures清理顺序</li></ol><p>每个fixture在它自己的代码块执行完毕后立即进行清理。有依赖关系的fixtures的清理工作先从清理被依赖fixture开始，例如fixture A依赖于fixture B，那么执行顺序将会是：首先执行fixture B，然后执行fixture A，最后清理工作会先从fixture A开始，然后是fixture B。这种设计确保了每个fixture能及时清理自己使用的资源，避免了潜在的资源冲突或泄露问题。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;pytest-fixtures执行顺序和清理顺序&quot;&gt;&lt;a href=&quot;#pytest-fixtures执行顺序和清理顺序&quot; class=&quot;headerlink&quot; title=&quot;pytest fixtures执行顺序和清理顺序&quot;&gt;&lt;/a&gt;pytest fixtures执行顺序和清理顺序&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;fixtures执行顺序&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;pytest一个test请求多个fixture时，fixtures的执行顺序是什么？&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="python测试框架" scheme="http://example.com/categories/python/python%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    
    <category term="pytest" scheme="http://example.com/categories/python/python%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/pytest/"/>
    
    <category term="fixtures执行顺序及清理顺序" scheme="http://example.com/categories/python/python%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/pytest/fixtures%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E5%8F%8A%E6%B8%85%E7%90%86%E9%A1%BA%E5%BA%8F/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="pytest" scheme="http://example.com/tags/pytest/"/>
    
    <category term="fixtures" scheme="http://example.com/tags/fixtures/"/>
    
  </entry>
  
  <entry>
    <title>pytest | 自定义失败断言解释</title>
    <link href="http://example.com/2024/03/07/%E6%96%AD%E8%A8%80%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%E9%87%8D%E5%86%99/"/>
    <id>http://example.com/2024/03/07/%E6%96%AD%E8%A8%80%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%E9%87%8D%E5%86%99/</id>
    <published>2024-03-07T13:52:36.000Z</published>
    <updated>2024-03-07T13:55:32.432Z</updated>
    
    <content type="html"><![CDATA[<h3 id="自定义失败断言解释"><a href="#自定义失败断言解释" class="headerlink" title="自定义失败断言解释"></a>自定义失败断言解释</h3><p>使用pytest测试代码块（Code Block）或函数（Functions）时，通常使用assert语句对代码块或函数的执行结果与预期结果进行比较，从而判断代码块或函数的正确性。如果在测试过程中某测试用例中的断言失败，即代码块或函数的实际执行结果与预期结果不一致，pytest将会报告错误信息。</p><span id="more"></span><p>在pytest中我们可以通过实现pytest_assertrepr_coompare钩子函数（Hook Function）来自定义失败断言的错误信息。</p><p>pytest_assertrepr_coompare钩子函数的语法如下：</p><p><strong>pytest_assertrepr_compare</strong>(<em>config</em>, <em>op</em>, <em>left</em>, <em>right</em>)[<a href="https://docs.pytest.org/en/8.0.x/_modules/_pytest/hookspec.html#pytest_assertrepr_compare">source]</a></p><p>​    Return explanation for comparisons in failing assert expressions.（返回失败断言表达式的解释信息）</p><p>​    Parameters:</p><p>​        <strong>config</strong> (<a href="https://docs.pytest.org/en/8.0.x/reference/reference.html#pytest.Config"><em>Config</em></a>) – The pytest config object.（pytest配置对象）</p><p>​        <strong>op</strong> (<a href="https://docs.python.org/3/library/stdtypes.html#str"><em>str</em></a>) – The operator, e.g. <code>&quot;==&quot;</code>, <code>&quot;!=&quot;</code>, <code>&quot;not in&quot;</code>.（操作符）</p><p>​        <strong>left</strong> (<a href="https://docs.python.org/3/library/functions.html#object"><em>object</em></a>) – The left operand.（操作数1）</p><p>​        <strong>right</strong> (<a href="https://docs.python.org/3/library/functions.html#object"><em>object</em></a>) – The right operand.（操作数2）</p><p>通过钩子函数自定义错误断言信息的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># content of conftest.py</span></span><br><span class="line"><span class="keyword">from</span> test_foocompare <span class="keyword">import</span> Foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 钩子函数，自定义断言信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pytest_assertrepr_compare</span>(<span class="params">op, left, right</span>):</span></span><br><span class="line">    <span class="comment"># 若Foo对象作相等断言（==）时失败，则输入自定义信息</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(left, Foo) <span class="keyword">and</span> <span class="built_in">isinstance</span>(right, Foo) <span class="keyword">and</span> op == <span class="string">&quot;==&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">&quot;Comparing Foo instances:&quot;</span>,</span><br><span class="line">            <span class="string">f&quot;   vals: <span class="subst">&#123;left.val&#125;</span> != <span class="subst">&#123;right.val&#125;</span>&quot;</span>,</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># content of test_foocompare.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        self.val = val</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.val == other.val</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_compare</span>():</span></span><br><span class="line">    f1 = Foo(<span class="number">1</span>)</span><br><span class="line">    f2 = Foo(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">assert</span> f1 == f2</span><br></pre></td></tr></table></figure><p>运行test_foocompare.py模块，控制台会输出一下信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E       assert Comparing Foo instances:</span><br><span class="line">E            vals: 1 != 2</span><br></pre></td></tr></table></figure><p>自定义失败断言信息时通过重写断言表达式实现的，我们可以通过在代码中关闭”断言重写“功能：</p><ul><li><p>关闭特定模块的断言重写：在docstring中增加PYTEST_DONT_REWRITE字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    PYTEST_DONT_REWRITE</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">......</span><br><span class="line">python test code</span><br><span class="line">......</span><br></pre></td></tr></table></figure></li><li><p>关闭所有模块的断言重写：使用–assert=plain</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest --assert=plain</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;自定义失败断言解释&quot;&gt;&lt;a href=&quot;#自定义失败断言解释&quot; class=&quot;headerlink&quot; title=&quot;自定义失败断言解释&quot;&gt;&lt;/a&gt;自定义失败断言解释&lt;/h3&gt;&lt;p&gt;使用pytest测试代码块（Code Block）或函数（Functions）时，通常使用assert语句对代码块或函数的执行结果与预期结果进行比较，从而判断代码块或函数的正确性。如果在测试过程中某测试用例中的断言失败，即代码块或函数的实际执行结果与预期结果不一致，pytest将会报告错误信息。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="python测试框架" scheme="http://example.com/categories/python/python%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    
    <category term="pytest" scheme="http://example.com/categories/python/python%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/pytest/"/>
    
    <category term="自定义失败断言解释" scheme="http://example.com/categories/python/python%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/pytest/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%B1%E8%B4%A5%E6%96%AD%E8%A8%80%E8%A7%A3%E9%87%8A/"/>
    
    
    <category term="pytest" scheme="http://example.com/tags/pytest/"/>
    
    <category term="断言" scheme="http://example.com/tags/%E6%96%AD%E8%A8%80/"/>
    
    <category term="钩子函数" scheme="http://example.com/tags/%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
</feed>
