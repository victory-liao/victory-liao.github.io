<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Victory&#39;s Blog</title>
  
  <subtitle>非淡泊无以明志，非宁静无以致远</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-03-18T12:29:52.497Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>victory-liao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringMVC | spring和springMVC的整合</title>
    <link href="http://example.com/2022/03/18/spring%E5%92%8CspringMVC%E7%9A%84%E6%95%B4%E5%90%88/"/>
    <id>http://example.com/2022/03/18/spring%E5%92%8CspringMVC%E7%9A%84%E6%95%B4%E5%90%88/</id>
    <published>2022-03-18T12:22:49.000Z</published>
    <updated>2022-03-18T12:29:52.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring和springMVC的整合"><a href="#spring和springMVC的整合" class="headerlink" title="spring和springMVC的整合"></a>spring和springMVC的整合</h1><p>1.项目目录<br><img src="/2022/03/18/spring%E5%92%8CspringMVC%E7%9A%84%E6%95%B4%E5%90%88/1.PNG"></p><span id="more"></span><p>2.web.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&gt;  &lt;display-name&gt;SpringMVC04&lt;/display-name&gt;  &lt;welcome-file-list&gt;    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;  &lt;/welcome-file-list&gt;    &lt;filter&gt;    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;    &lt;init-param&gt;      &lt;param-name&gt;encoding&lt;/param-name&gt;      &lt;param-value&gt;UTF-8&lt;/param-value&gt;    &lt;/init-param&gt;  &lt;/filter&gt;  &lt;filter-mapping&gt;    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  &lt;/filter-mapping&gt;    &lt;servlet&gt;    &lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;    &lt;init-param&gt;      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;      &lt;param-value&gt;classpath:springMVC.xml&lt;/param-value&gt;    &lt;/init-param&gt;    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;  &lt;/servlet&gt;  &lt;servlet-mapping&gt;    &lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;    &lt;url-pattern&gt;/&lt;/url-pattern&gt;  &lt;/servlet-mapping&gt;    &lt;!-- 使用自定义监听器模拟spring、springMVC整合 --&gt;  &lt;!-- &lt;listener&gt;    &lt;listener-class&gt;com.atguigu.listener.SpringListener&lt;/listener-class&gt;  &lt;/listener&gt; --&gt;    &lt;!-- 使用spring提供的监听器模整合spring、springMVC --&gt;  &lt;!-- needed for ContextLoaderListener --&gt;    &lt;context-param&gt;        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;        &lt;param-value&gt;classpath:spring.xml&lt;/param-value&gt;    &lt;/context-param&gt;    &lt;!-- Bootstraps the root web application context before servlet initialization --&gt;    &lt;listener&gt;        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;    &lt;/listener&gt;&lt;/web-app&gt;</code></pre><p>3.spring.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;    &lt;!-- &lt;bean id=&quot;user&quot; class=&quot;com.atguigu.bean.User&quot;&gt;&lt;/bean&gt; --&gt;        &lt;context:component-scan base-package=&quot;com.atguigu&quot;&gt;        &lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;    &lt;/context:component-scan&gt;        &lt;bean id=&quot;teacher&quot; class=&quot;com.atguigu.bean.Teacher&quot;&gt;&lt;/bean&gt;&lt;/beans&gt;</code></pre><p>4.springMVC.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;        &lt;context:component-scan base-package=&quot;com.atguigu.controller&quot;&gt;&lt;/context:component-scan&gt;        &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/view/&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;mvc:default-servlet-handler/&gt;    &lt;mvc:annotation-driven /&gt;        &lt;!--         处理文件，将客户端上传的File文件处理为MultipartFile        注意：文件解析器bean中的id必须设置为multipartResolver     --&gt;    &lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;        &lt;!-- 设置文件解析的编码，注意一定要和页面的pageEncoding保持一致 --&gt;        &lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/property&gt;        &lt;!-- 设置最大上传文件大小 --&gt;        &lt;property name=&quot;maxUploadSize&quot; value=&quot;88888888&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;!-- 异常处理 --&gt;    &lt;bean class=&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;&gt;        &lt;property name=&quot;exceptionMappings&quot;&gt;            &lt;props&gt;                &lt;prop key=&quot;java.lang.NullPointerException&quot;&gt;error&lt;/prop&gt;            &lt;/props&gt;        &lt;/property&gt;    &lt;/bean&gt;        &lt;!-- &lt;mvc:interceptors&gt;        默认拦截所有请求        第一种方式        &lt;bean class=&quot;com.atguigu.interceptor.FirstInterceptor&quot;&gt;&lt;/bean&gt;        &lt;bean class=&quot;com.atguigu.interceptor.SecondInterceptor&quot;&gt;&lt;/bean&gt;                    第二种方式            此方式要求拦截器上必须加注解@Component                &lt;ref bean=&quot;firstInterceptor&quot; /&gt;                设置自定义拦截方式        &lt;mvc:interceptor&gt;            &lt;bean&gt;&lt;/bean&gt;            &lt;mvc:mapping path=&quot;&quot;/&gt;            &lt;mvc:exclude-mapping path=&quot;&quot;/&gt;        &lt;/mvc:interceptor&gt;    &lt;/mvc:interceptors&gt; --&gt;&lt;/beans&gt;</code></pre><p>5.index.jsp</p><pre><code>&lt;a href=&quot;testListener&quot;&gt;测试监听器&lt;/a&gt;</code></pre><p>6.User.java</p><pre><code>package com.atguigu.bean;import org.springframework.stereotype.Component;@Componentpublic class User &#123;    private Integer id;    private String username;    public Integer getId() &#123;        return id;    &#125;    public void setId(Integer id) &#123;        this.id = id;    &#125;    public String getUsername() &#123;        return username;    &#125;    public void setUsername(String username) &#123;        this.username = username;    &#125;    public User() &#123;        System.out.println(&quot;User==&gt;构造方法&quot;);    &#125;&#125;</code></pre><p>7.Teacher.java</p><pre><code>package com.atguigu.bean;public class Teacher &#123;    private Integer id;        private String name;    public Integer getId() &#123;        return id;    &#125;    public void setId(Integer id) &#123;        this.id = id;    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name = name;    &#125;    public Teacher() &#123;        System.out.println(&quot;Teacher==&gt;构造方法&quot;);    &#125;    @Override    public String toString() &#123;        return &quot;Teacher [id=&quot; + id + &quot;, name=&quot; + name + &quot;]&quot;;    &#125;&#125;</code></pre><p>8.SpringListener.java（自定义监听器）</p><pre><code>package com.atguigu.listener;import javax.servlet.ServletContext;import javax.servlet.ServletContextEvent;import javax.servlet.ServletContextListener;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;/** * Application Lifecycle Listener implementation class SpringListener * */public class SpringListener implements ServletContextListener &#123;    /**     * Default constructor.      */    public SpringListener() &#123;        // TODO Auto-generated constructor stub    &#125;    /**     * @see ServletContextListener#contextDestroyed(ServletContextEvent)     */    public void contextDestroyed(ServletContextEvent arg0)  &#123;          // TODO Auto-generated method stub    &#125;    /**     * @see ServletContextListener#contextInitialized(ServletContextEvent)     */    public void contextInitialized(ServletContextEvent sce)  &#123;         ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;spring.xml&quot;);        ServletContext servletContext = sce.getServletContext();        servletContext.setAttribute(&quot;ac&quot;, ac);    &#125;&#125;</code></pre><p>9.TestController.java</p><pre><code>package com.atguigu.controller;import javax.servlet.ServletContext;import javax.servlet.http.HttpSession;import org.springframework.context.ApplicationContext;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import com.atguigu.bean.Teacher;@Controllerpublic class TestController &#123;    @RequestMapping(&quot;/testListener&quot;)    public void testListener(HttpSession session)&#123;        //获取spring所管理的teacher对象        ServletContext servletContext = session.getServletContext();        ApplicationContext ac = (ApplicationContext)servletContext.getAttribute(&quot;ac&quot;);        Teacher teacher = ac.getBean(&quot;teacher&quot;, Teacher.class);        System.out.println(teacher);    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;spring和springMVC的整合&quot;&gt;&lt;a href=&quot;#spring和springMVC的整合&quot; class=&quot;headerlink&quot; title=&quot;spring和springMVC的整合&quot;&gt;&lt;/a&gt;spring和springMVC的整合&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/03/18/spring%E5%92%8CspringMVC%E7%9A%84%E6%95%B4%E5%90%88/1.PNG&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="spring和springMVC的整合" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/spring%E5%92%8CspringMVC%E7%9A%84%E6%95%B4%E5%90%88/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | 异常处理</title>
    <link href="http://example.com/2022/03/17/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://example.com/2022/03/17/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2022-03-18T03:48:21.000Z</published>
    <updated>2022-03-18T03:53:34.916Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>1.在SpringMVC配置文件（springMVC.xml）中做以下配置：</p><pre><code>&lt;!-- 异常处理 --&gt;&lt;bean class=&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;&gt;    &lt;property name=&quot;exceptionMappings&quot;&gt;        &lt;props&gt;            &lt;prop key=&quot;java.lang.NullPointerException&quot;&gt;error&lt;/prop&gt;        &lt;/props&gt;    &lt;/property&gt;&lt;/bean&gt;</code></pre><span id="more"></span><p>2.index.jsp</p><pre><code>&lt;a href=&quot;testException&quot;&gt;测试异常&lt;/a&gt;</code></pre><p>3.TestExceptionController.java</p><pre><code>package com.atguigu.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;@Controllerpublic class TestExceptionController &#123;    @RequestMapping(value=&quot;/testException&quot;, method=RequestMethod.GET)    public String testException()&#123;        String s = null;        System.err.println(s.substring(0, 5));        return &quot;success&quot;;    &#125;&#125;</code></pre><p>4.error.jsp</p><pre><code>&lt;a href=&quot;&quot;&gt;操作异常，请稍后重试&lt;/a&gt;$&#123;exception&#125;</code></pre><p>5.运行结果<br><img src="/2022/03/17/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/1.PNG"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;异常处理&quot;&gt;&lt;a href=&quot;#异常处理&quot; class=&quot;headerlink&quot; title=&quot;异常处理&quot;&gt;&lt;/a&gt;异常处理&lt;/h1&gt;&lt;p&gt;1.在SpringMVC配置文件（springMVC.xml）中做以下配置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 异常处理 --&amp;gt;
&amp;lt;bean class=&amp;quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;exceptionMappings&amp;quot;&amp;gt;
        &amp;lt;props&amp;gt;
            &amp;lt;prop key=&amp;quot;java.lang.NullPointerException&amp;quot;&amp;gt;error&amp;lt;/prop&amp;gt;
        &amp;lt;/props&amp;gt;
    &amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="异常处理" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
    <category term="异常处理" scheme="http://example.com/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | 拦截器</title>
    <link href="http://example.com/2022/03/17/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>http://example.com/2022/03/17/%E6%8B%A6%E6%88%AA%E5%99%A8/</id>
    <published>2022-03-18T02:15:04.000Z</published>
    <updated>2022-03-18T02:22:02.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="拦截器-HandlerInterceptor"><a href="#拦截器-HandlerInterceptor" class="headerlink" title="拦截器 HandlerInterceptor"></a>拦截器 HandlerInterceptor</h1><p>1.在SpringMVC配置文件（springMVC.xml）中进行以下配置：</p><pre><code>&lt;mvc:interceptors&gt;    &lt;!-- 默认拦截所有请求 --&gt;    &lt;!-- 第一种方式 --&gt;    &lt;bean class=&quot;com.atguigu.interceptor.FirstInterceptor&quot;&gt;&lt;/bean&gt;    &lt;bean class=&quot;com.atguigu.interceptor.SecondInterceptor&quot;&gt;&lt;/bean&gt;    &lt;!--         第二种方式        此方式要求拦截器上必须加注解@Component     --&gt;    &lt;!-- &lt;ref bean=&quot;firstInterceptor&quot; /&gt; --&gt;        &lt;!-- 设置自定义拦截方式 --&gt;    &lt;!-- &lt;mvc:interceptor&gt;        &lt;bean&gt;&lt;/bean&gt;        &lt;mvc:mapping path=&quot;&quot;/&gt;        &lt;mvc:exclude-mapping path=&quot;&quot;/&gt;    &lt;/mvc:interceptor&gt; --&gt;&lt;/mvc:interceptors&gt;</code></pre><span id="more"></span><p>2.test.jsp</p><pre><code>&lt;a href=&quot;testInterceptor&quot;&gt;测试拦截器&lt;/a&gt;</code></pre><p>3.TestInterceptorController.java(测试类)</p><pre><code>package com.atguigu.test;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;@Controllerpublic class TestInterceptorController &#123;    /**     * 当有多个拦截器时，     * preHandle:按照拦截器数组正向顺序执行     * postHandle:按照拦截器数组反向顺序执行     * afterCompletion:按照拦截器数组反向顺序执行     *      * 当多个拦截器的preHandle有不同的值时     * 第一个返回false，第二个返回false：只有第一个的preHandle会执行     *      * 第一个返回true，第二个返回false：两个（全部）拦截器的preHandle都会执行，     * 但是（全部）postHandle都不会执行，     * 而afterCompletion只有第一个（返回false的拦截器之前的所有afterCompletion）会执行     *      * 第一个返回false，第二个返回true：只有第一个的preHandle会执行     */    @RequestMapping(&quot;/testInterceptor&quot;)    public String testInterceptor()&#123;        //System.out.println(1/0);        return &quot;success&quot;;    &#125;&#125;</code></pre><p>4.FirstInterceptor.java</p><pre><code>package com.atguigu.interceptor;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.springframework.stereotype.Component;import org.springframework.web.servlet.HandlerInterceptor;import org.springframework.web.servlet.ModelAndView;@Componentpublic class FirstInterceptor implements HandlerInterceptor&#123;    @Override    public void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)            throws Exception &#123;        System.out.println(&quot;First:afterCompletion&quot;);    &#125;    @Override    public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)            throws Exception &#123;        System.out.println(&quot;First:posthandle&quot;);    &#125;    @Override    public boolean preHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2) throws Exception &#123;        System.out.println(&quot;First:preHandle&quot;);        return true;//true:放行 false:拦截    &#125;&#125;</code></pre><p>5.SecondInterceptor.java</p><pre><code>package com.atguigu.interceptor;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.springframework.stereotype.Component;import org.springframework.web.servlet.HandlerInterceptor;import org.springframework.web.servlet.ModelAndView;@Componentpublic class SecondInterceptor implements HandlerInterceptor&#123;    @Override    public void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)            throws Exception &#123;        System.out.println(&quot;Second:afterCompletion&quot;);    &#125;    @Override    public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)            throws Exception &#123;        System.out.println(&quot;Second:posthandle&quot;);    &#125;    @Override    public boolean preHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2) throws Exception &#123;        System.out.println(&quot;Second:preHandle&quot;);        return false;//true:放行 false:拦截    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;拦截器-HandlerInterceptor&quot;&gt;&lt;a href=&quot;#拦截器-HandlerInterceptor&quot; class=&quot;headerlink&quot; title=&quot;拦截器 HandlerInterceptor&quot;&gt;&lt;/a&gt;拦截器 HandlerInterceptor&lt;/h1&gt;&lt;p&gt;1.在SpringMVC配置文件（springMVC.xml）中进行以下配置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;mvc:interceptors&amp;gt;
    &amp;lt;!-- 默认拦截所有请求 --&amp;gt;
    &amp;lt;!-- 第一种方式 --&amp;gt;
    &amp;lt;bean class=&amp;quot;com.atguigu.interceptor.FirstInterceptor&amp;quot;&amp;gt;&amp;lt;/bean&amp;gt;
    &amp;lt;bean class=&amp;quot;com.atguigu.interceptor.SecondInterceptor&amp;quot;&amp;gt;&amp;lt;/bean&amp;gt;
    &amp;lt;!-- 
        第二种方式
        此方式要求拦截器上必须加注解@Component
     --&amp;gt;
    &amp;lt;!-- &amp;lt;ref bean=&amp;quot;firstInterceptor&amp;quot; /&amp;gt; --&amp;gt;
    
    &amp;lt;!-- 设置自定义拦截方式 --&amp;gt;
    &amp;lt;!-- &amp;lt;mvc:interceptor&amp;gt;
        &amp;lt;bean&amp;gt;&amp;lt;/bean&amp;gt;
        &amp;lt;mvc:mapping path=&amp;quot;&amp;quot;/&amp;gt;
        &amp;lt;mvc:exclude-mapping path=&amp;quot;&amp;quot;/&amp;gt;
    &amp;lt;/mvc:interceptor&amp;gt; --&amp;gt;
&amp;lt;/mvc:interceptors&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="拦截器 HandlerInterceptor" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/%E6%8B%A6%E6%88%AA%E5%99%A8-HandlerInterceptor/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
    <category term="拦截器" scheme="http://example.com/tags/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    
    <category term="HandlerInterceptor" scheme="http://example.com/tags/HandlerInterceptor/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | 上传和下载文件</title>
    <link href="http://example.com/2022/03/16/%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2022/03/16/%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</id>
    <published>2022-03-16T10:01:39.000Z</published>
    <updated>2022-03-16T10:07:30.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="上传和下载文件"><a href="#上传和下载文件" class="headerlink" title="上传和下载文件"></a>上传和下载文件</h1><p>注意：上传文件需要在springMVC.xml中配置如下所示bean：</p><pre><code>&lt;!--     处理文件，将客户端上传的File文件处理为MultipartFile    注意：文件解析器bean中的id必须设置为multipartResolver --&gt;&lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;    &lt;!-- 设置文件解析的编码，注意一定要和页面的pageEncoding保持一致 --&gt;    &lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/property&gt;    &lt;!-- 设置最大上传文件大小 --&gt;    &lt;property name=&quot;maxUploadSize&quot; value=&quot;88888888&quot;&gt;&lt;/property&gt;&lt;/bean&gt;</code></pre><span id="more"></span><p><strong>file.jsp</strong></p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;a href=&quot;down&quot;&gt;下载图片&lt;/a&gt;        &lt;form action=&quot;up&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;        头像：&lt;input type=&quot;file&quot; name=&quot;uploadFile&quot; /&gt;        描述：&lt;input type=&quot;text&quot; name=&quot;desc&quot; /&gt;        &lt;input type=&quot;submit&quot; value=&quot;上传&quot; /&gt;    &lt;/form&gt;        &lt;form action=&quot;up_old&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;        头像：&lt;input type=&quot;file&quot; name=&quot;uploadFile&quot; /&gt;        描述：&lt;input type=&quot;text&quot; name=&quot;desc&quot; /&gt;        &lt;input type=&quot;submit&quot; value=&quot;上传&quot; /&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><strong>TestUploadAndDownController.java</strong></p><pre><code>package com.atguigu.test;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.UUID;import javax.servlet.http.HttpSession;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.multipart.MultipartFile;import com.sun.org.apache.xalan.internal.xsltc.trax.OutputSettings;@Controllerpublic class TestUploadAndDownController&#123;    @RequestMapping(&quot;/down&quot;)    public ResponseEntity&lt;byte[]&gt; down(HttpSession session) throws IOException&#123;        //获取下载文件的路径        String realPath = session.getServletContext().getRealPath(&quot;img&quot;);        String finalPath = realPath + File.separator + &quot;1.jpg&quot;;        InputStream is = new FileInputStream(finalPath);        //available():获取输入流所读取的文件的最大字节数        byte[] b = new byte[is.available()];        is.read(b);        //设置请求头        HttpHeaders headers = new HttpHeaders();        headers.add(&quot;Content-Disposition&quot;, &quot;attachment;filename=zzz.jpg&quot;);        HttpStatus statusCode = HttpStatus.OK;        ResponseEntity&lt;byte[]&gt; entity = new ResponseEntity&lt;byte[]&gt;(b, headers, statusCode);        return entity;    &#125;        //第一种上传方式    @RequestMapping(value=&quot;/up_old&quot;, method=RequestMethod.POST)    public String up_old(String desc, MultipartFile uploadFile, HttpSession session) throws IOException&#123;        //String name = uploadFile.getName();        //String originalFilename = uploadFile.getOriginalFilename();        //System.out.println(name+&quot;,&quot;+originalFilename);                //获取上传文件的名称        String filename = uploadFile.getOriginalFilename();        String path = session.getServletContext().getRealPath(&quot;photo&quot;) + File.separator + filename;                //获取输入流        InputStream is = uploadFile.getInputStream();                //获取输出流        File file = new File(path);        OutputStream os = new FileOutputStream(file);                //文件上传//        int i = 0;//        while((i = is.read()) != -1)&#123;//            os.write(i);//        &#125;                int i = 0;        byte[] b = new byte[1024];        while((i = is.read(b)) != -1)&#123;            os.write(b, 0, i);        &#125;                //关闭流        os.close();        is.close();        return &quot;success&quot;;    &#125;        //第二种上传方式    @RequestMapping(value=&quot;/up&quot;, method=RequestMethod.POST)    public String up(String desc, MultipartFile uploadFile, HttpSession session) throws IOException&#123;        //获取上传文件的名称        String fileName = uploadFile.getOriginalFilename();        String finalFileName = UUID.randomUUID() + fileName.substring(fileName.lastIndexOf(&quot;.&quot;));        String path = session.getServletContext().getRealPath(&quot;photo&quot;) + File.separator + finalFileName;                File file = new File(path);        uploadFile.transferTo(file);        return &quot;success&quot;;    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;上传和下载文件&quot;&gt;&lt;a href=&quot;#上传和下载文件&quot; class=&quot;headerlink&quot; title=&quot;上传和下载文件&quot;&gt;&lt;/a&gt;上传和下载文件&lt;/h1&gt;&lt;p&gt;注意：上传文件需要在springMVC.xml中配置如下所示bean：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 
    处理文件，将客户端上传的File文件处理为MultipartFile
    注意：文件解析器bean中的id必须设置为multipartResolver 
--&amp;gt;
&amp;lt;bean id=&amp;quot;multipartResolver&amp;quot; class=&amp;quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&amp;quot;&amp;gt;
    &amp;lt;!-- 设置文件解析的编码，注意一定要和页面的pageEncoding保持一致 --&amp;gt;
    &amp;lt;property name=&amp;quot;defaultEncoding&amp;quot; value=&amp;quot;UTF-8&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;!-- 设置最大上传文件大小 --&amp;gt;
    &amp;lt;property name=&amp;quot;maxUploadSize&amp;quot; value=&amp;quot;88888888&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="上传和下载文件" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | 处理json</title>
    <link href="http://example.com/2022/03/15/%E5%A4%84%E7%90%86json/"/>
    <id>http://example.com/2022/03/15/%E5%A4%84%E7%90%86json/</id>
    <published>2022-03-16T07:23:48.000Z</published>
    <updated>2022-03-16T07:36:59.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="处理json"><a href="#处理json" class="headerlink" title="处理json"></a>处理json</h1><p>1.项目目录<br><img src="/2022/03/15/%E5%A4%84%E7%90%86json/1.PNG"><br><strong>注意：</strong><br>1.按照上图创建项目、导入图中所示的jar包并按照<a href="https://victory-liao.github.io/2022/03/13/REST-CRUD/">REST-CRUD</a>中的<br>web.xml、springMVC配置配置文件；<br>2.src下的dao、bean包中的代码参照REST CRUD；</p><span id="more"></span><p>3.index.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;$&#123;pageContext.servletContext.contextPath&#125;/css/index_work.css&quot; /&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;$&#123;pageContext.servletContext.contextPath&#125;/js/jquery-1.8.2.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;    $(function()&#123;        $(&quot;#btn&quot;).click(function()&#123;            $.ajax(&#123;                url:&quot;testJson&quot;,                type:&quot;POST&quot;,                dataType:&quot;json&quot;,//dataType=&quot;text&quot; 原样显示                success:function(msg)&#123;                    //alert(msg);                    /*                    [&#123;&quot;id&quot;:1001,&quot;lastName&quot;:&quot;E-AA&quot;,&quot;email&quot;:&quot;aa@163.com&quot;,&quot;gender&quot;:1,&quot;department&quot;:&#123;&quot;id&quot;:101,&quot;departmentName&quot;:&quot;D-AA&quot;&#125;&#125;,                     &#123;&quot;id&quot;:1002,&quot;lastName&quot;:&quot;E-BB&quot;,&quot;email&quot;:&quot;bb@163.com&quot;,&quot;gender&quot;:1,&quot;department&quot;:&#123;&quot;id&quot;:102,&quot;departmentName&quot;:&quot;D-BB&quot;&#125;&#125;,                     &#123;&quot;id&quot;:1003,&quot;lastName&quot;:&quot;E-CC&quot;,&quot;email&quot;:&quot;cc@163.com&quot;,&quot;gender&quot;:0,&quot;department&quot;:&#123;&quot;id&quot;:103,&quot;departmentName&quot;:&quot;D-CC&quot;&#125;&#125;,                     &#123;&quot;id&quot;:1004,&quot;lastName&quot;:&quot;E-DD&quot;,&quot;email&quot;:&quot;dd@163.com&quot;,&quot;gender&quot;:0,&quot;department&quot;:&#123;&quot;id&quot;:104,&quot;departmentName&quot;:&quot;D-DD&quot;&#125;&#125;,                     &#123;&quot;id&quot;:1005,&quot;lastName&quot;:&quot;E-EE&quot;,&quot;email&quot;:&quot;ee@163.com&quot;,&quot;gender&quot;:1,&quot;department&quot;:&#123;&quot;id&quot;:105,&quot;departmentName&quot;:&quot;D-EE&quot;&#125;&#125;]                    */                    /* for(var i in msg) &#123;                        var emp = msg[i]                        alert(&quot;id=&quot;+emp.id+&quot;,lastName=&quot;+emp.lastName+&quot;,departmentName=&quot;+emp.department.departmentName);                    &#125; */                                        //第一种实现方式                    /* var tb = &quot;&lt;table&gt;&quot;                    tb += &quot;&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;lastName&lt;/th&gt;&lt;th&gt;email&lt;/th&gt;&lt;th&gt;gender&lt;/th&gt;&lt;th&gt;departmentName&lt;/th&gt;&lt;/tr&gt;&quot;                    for(var i in msg) &#123;                        var emp = msg[i]                        tb += &quot;&lt;tr&gt;&lt;td&gt;&quot;+emp.id+&quot;&lt;/td&gt;&lt;td&gt;&quot;+emp.lastName+&quot;&lt;/td&gt;&lt;td&gt;&quot;+emp.email+&quot;&lt;/td&gt;&lt;td&gt;&quot;+emp.gender+&quot;&lt;/td&gt;&lt;td&gt;&quot;+emp.department.departmentName+&quot;&lt;/td&gt;&lt;/tr&gt;&quot;                    &#125;                     tb += &quot;&lt;/table&gt;&quot;                    $(&quot;body&quot;).append(tb); */                                        //第二种实现方式                    $(&quot;body&quot;).append(&quot;&lt;table&gt;&lt;/table&gt;&quot;);                    $(&quot;table&quot;).append(&quot;&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;lastName&lt;/th&gt;&lt;th&gt;email&lt;/th&gt;&lt;th&gt;gender&lt;/th&gt;&lt;th&gt;departmentName&lt;/th&gt;&lt;/tr&gt;&quot;)                    for(var i in msg)&#123;                        var emp = msg[i]                        $(&quot;table&quot;).append(&quot;&lt;tr&gt;&lt;td&gt;&quot;+emp.id+&quot;&lt;/td&gt;&lt;td&gt;&quot;+emp.lastName+&quot;&lt;/td&gt;&lt;td&gt;&quot;+emp.email+&quot;&lt;/td&gt;&lt;td&gt;&quot;+emp.gender+&quot;&lt;/td&gt;&lt;td&gt;&quot;+emp.department.departmentName+&quot;&lt;/td&gt;&lt;/tr&gt;&quot;);                    &#125;                &#125;            &#125;);        &#125;)    &#125;);&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;input id=&quot;btn&quot; type=&quot;button&quot; value=&quot;测试ajax&quot; /&gt;        &lt;a href=&quot;testJson&quot;&gt;测试json&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>2.TestJsonController.java</p><pre><code>package com.atguigu.test;import java.util.Collection;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import com.atguigu.bean.Employee;import com.atguigu.dao.EmployeeDao;@Controllerpublic class TestJsonController &#123;        @Autowired    private EmployeeDao dao;        /**     * springMVC处理json的四个条件     * 1、导入jackson的jar包     * 2、在springMVC的配置文件中开启MVC驱动，&lt;mvc:annotation-driven /&gt;     * 3、在处理ajax请求的方法上加上注解@ResponseBody     * 4、将要转为为json且响应到客户端的数据，直接作为该方法的返回值返回     * @ResponseBody     */    @RequestMapping(&quot;testJson&quot;)    @ResponseBody    public Collection&lt;Employee&gt; testJson()&#123;        Collection&lt;Employee&gt; emps = dao.getAll();        return emps;    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;处理json&quot;&gt;&lt;a href=&quot;#处理json&quot; class=&quot;headerlink&quot; title=&quot;处理json&quot;&gt;&lt;/a&gt;处理json&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/03/15/%E5%A4%84%E7%90%86json/1.PNG&quot;&gt;&lt;br&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;br&gt;1.按照上图创建项目、导入图中所示的jar包并按照&lt;a href=&quot;https://victory-liao.github.io/2022/03/13/REST-CRUD/&quot;&gt;REST-CRUD&lt;/a&gt;中的&lt;br&gt;web.xml、springMVC配置配置文件；&lt;br&gt;2.src下的dao、bean包中的代码参照REST CRUD；&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="处理json" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/%E5%A4%84%E7%90%86json/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
    <category term="json" scheme="http://example.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>json</title>
    <link href="http://example.com/2022/03/13/json/"/>
    <id>http://example.com/2022/03/13/json/</id>
    <published>2022-03-14T03:38:12.000Z</published>
    <updated>2022-03-14T03:41:41.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="json"><a href="#json" class="headerlink" title="json"></a>json</h1><p>1.json有两种对象<br>（1）json对象：{key1:value1,key2:value2,…}<br>（2）json数组：[value1,value2,…]<br>2.解析方式<br>（1）Json对象解析方式：对象.key<br>（2）json数组解析方式：for循环遍历<br>3.java对象转换json<br>（1）Bean和map—&gt;json对象<br>（2）List—&gt;json数组</p><p><strong>示例：</strong><br>数据：<br>    user：id=1,username=admin,age=23,sex=男</p><p>Xml方式:</p><pre><code>&lt;userinfo&gt;    &lt;user&gt;        &lt;id&gt;1&lt;/id&gt;        &lt;username&gt;admin&lt;/username&gt;        &lt;age&gt;23&lt;/age&gt;        &lt;sex&gt;男&lt;/sex&gt;    &lt;/user&gt;&lt;/userinfo&gt;</code></pre><p>Json方式:</p><pre><code>&#123;id:1,username:admin,age:23,sex:男&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;json&quot;&gt;&lt;a href=&quot;#json&quot; class=&quot;headerlink&quot; title=&quot;json&quot;&gt;&lt;/a&gt;json&lt;/h1&gt;&lt;p&gt;1.json有两种对象&lt;br&gt;（1）json对象：{key1:value1,key2:value2,…}&lt;br&gt;（2）jso</summary>
      
    
    
    
    <category term="json" scheme="http://example.com/categories/json/"/>
    
    
    <category term="json" scheme="http://example.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | 处理静态资源</title>
    <link href="http://example.com/2022/03/13/%E5%A4%84%E7%90%86%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/"/>
    <id>http://example.com/2022/03/13/%E5%A4%84%E7%90%86%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/</id>
    <published>2022-03-14T03:34:56.000Z</published>
    <updated>2022-03-14T03:37:22.669Z</updated>
    
    <content type="html"><![CDATA[<h1 id="处理静态资源"><a href="#处理静态资源" class="headerlink" title="处理静态资源"></a>处理静态资源</h1><p>在使用了SpringMVC的项目中，在使用css/js等静态资源时，需要在SpringMVC的配置文件中做以下配置：</p><pre><code>&lt;!-- 处理静态资源 --&gt;&lt;!--     配置Tomcat中默认的servlet,DefaultServlet    注意：当DefaultServlet所设置的&lt;url-pattern&gt;的值和开发人员所配置        的servlet的&lt;url-pattern&gt;相同，以开发人员所配置的servlet优先    作用： 当客户端发送请求，由于DefaultServlet所设置的&lt;url-pattern&gt;的        值和开发人员所配置的DispatcherServlet的&lt;url-pattern&gt;都是/，        因此先通过DispatcherServelet处理请求，找该请求是否有相对应的处理器，        有则处理，无则交给DefaultServlet处理--&gt;&lt;mvc:default-servlet-handler/&gt;&lt;!-- mvc驱动 --&gt;&lt;mvc:annotation-driven /&gt;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;处理静态资源&quot;&gt;&lt;a href=&quot;#处理静态资源&quot; class=&quot;headerlink&quot; title=&quot;处理静态资源&quot;&gt;&lt;/a&gt;处理静态资源&lt;/h1&gt;&lt;p&gt;在使用了SpringMVC的项目中，在使用css/js等静态资源时，需要在SpringMVC的配置文件中做以</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="处理静态资源" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/%E5%A4%84%E7%90%86%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | REST CRUD</title>
    <link href="http://example.com/2022/03/13/REST-CRUD/"/>
    <id>http://example.com/2022/03/13/REST-CRUD/</id>
    <published>2022-03-13T14:10:16.000Z</published>
    <updated>2022-03-13T14:26:51.156Z</updated>
    
    <content type="html"><![CDATA[<h1 id="REST-CRUD案例"><a href="#REST-CRUD案例" class="headerlink" title="REST CRUD案例"></a>REST CRUD案例</h1><p>1.项目目录<br><img src="/2022/03/13/REST-CRUD/1.PNG"></p><span id="more"></span><p>2.导入上图中的所有jar包<br>3.配置web.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&gt;  &lt;display-name&gt;RestEmp&lt;/display-name&gt;  &lt;welcome-file-list&gt;    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;  &lt;/welcome-file-list&gt;    &lt;filter&gt;    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;    &lt;init-param&gt;        &lt;param-name&gt;encoding&lt;/param-name&gt;        &lt;param-value&gt;UTF-8&lt;/param-value&gt;    &lt;/init-param&gt;  &lt;/filter&gt;  &lt;filter-mapping&gt;    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  &lt;/filter-mapping&gt;    &lt;filter&gt;    &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;    &lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class&gt;  &lt;/filter&gt;  &lt;filter-mapping&gt;    &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  &lt;/filter-mapping&gt;    &lt;!-- The front controller of this Spring Web application, responsible for handling all application requests --&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;        &lt;init-param&gt;            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;            &lt;param-value&gt;classpath:springMVC.xml&lt;/param-value&gt;        &lt;/init-param&gt;        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;    &lt;/servlet&gt;    &lt;!-- Map all requests to the DispatcherServlet for handling --&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;        &lt;url-pattern&gt;/&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;&lt;/web-app&gt;</code></pre><p>4.配置springMVC.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;        &lt;context:component-scan base-package=&quot;com.atguigu.rest.crud&quot;&gt;&lt;/context:component-scan&gt;        &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/view/&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;        &lt;!-- &lt;property name=&quot;order&quot; value=&quot;1&quot;&gt;&lt;/property&gt; --&gt;    &lt;/bean&gt;        &lt;!-- &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;        &lt;property name=&quot;prefix&quot; value=&quot;/&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;order&quot; value=&quot;2&quot;&gt;&lt;/property&gt;    &lt;/bean&gt; --&gt;        &lt;!-- 处理静态资源 --&gt;    &lt;mvc:default-servlet-handler/&gt;    &lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt;&lt;/beans&gt;</code></pre><p>5.准备项目所需要的bean、dao<br>5.1 Employee.java</p><pre><code>package com.atguigu.rest.crud.bean;public class Employee &#123;    private Integer id;    private String lastName;    private String email;    //1 male, 0 female    private Integer gender;        private Department department;    public Integer getId() &#123;        return id;    &#125;    public void setId(Integer id) &#123;        this.id = id;    &#125;    public String getLastName() &#123;        return lastName;    &#125;    public void setLastName(String lastName) &#123;        this.lastName = lastName;    &#125;    public String getEmail() &#123;        return email;    &#125;    public void setEmail(String email) &#123;        this.email = email;    &#125;    public Integer getGender() &#123;        return gender;    &#125;    public void setGender(Integer gender) &#123;        this.gender = gender;    &#125;    public Department getDepartment() &#123;        return department;    &#125;    public void setDepartment(Department department) &#123;        this.department = department;    &#125;    @Override    public String toString() &#123;        return &quot;Employee [id=&quot; + id + &quot;, lastName=&quot; + lastName + &quot;, email=&quot;                + email + &quot;, gender=&quot; + gender + &quot;, department=&quot; + department                + &quot;]&quot;;    &#125;    public Employee(Integer id, String lastName, String email, Integer gender,            Department department) &#123;        super();        this.id = id;        this.lastName = lastName;        this.email = email;        this.gender = gender;        this.department = department;    &#125;    public Employee() &#123;        // TODO Auto-generated constructor stub    &#125;&#125;</code></pre><p>5.2 Department.java</p><pre><code>package com.atguigu.rest.crud.bean;public class Department &#123;    private Integer id;    private String departmentName;    public Department() &#123;        // TODO Auto-generated constructor stub    &#125;        public Department(int i, String string) &#123;        this.id = i;        this.departmentName = string;    &#125;    public Integer getId() &#123;        return id;    &#125;    public void setId(Integer id) &#123;        this.id = id;    &#125;    public String getDepartmentName() &#123;        return departmentName;    &#125;    public void setDepartmentName(String departmentName) &#123;        this.departmentName = departmentName;    &#125;    @Override    public String toString() &#123;        return &quot;Department [id=&quot; + id + &quot;, departmentName=&quot; + departmentName                + &quot;]&quot;;    &#125;    &#125;</code></pre><p>5.3 EmployeeDao.java</p><pre><code>package com.atguigu.rest.crud.dao;import java.util.Collection;import java.util.HashMap;import java.util.Map;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Repository;import com.atguigu.rest.crud.bean.Department;import com.atguigu.rest.crud.bean.Employee;@Repositorypublic class EmployeeDao &#123;    private static Map&lt;Integer, Employee&gt; employees = null;        @Autowired    private DepartmentDao departmentDao;        static&#123;        employees = new HashMap&lt;Integer, Employee&gt;();        employees.put(1001, new Employee(1001, &quot;E-AA&quot;, &quot;aa@163.com&quot;, 1, new Department(101, &quot;D-AA&quot;)));        employees.put(1002, new Employee(1002, &quot;E-BB&quot;, &quot;bb@163.com&quot;, 1, new Department(102, &quot;D-BB&quot;)));        employees.put(1003, new Employee(1003, &quot;E-CC&quot;, &quot;cc@163.com&quot;, 0, new Department(103, &quot;D-CC&quot;)));        employees.put(1004, new Employee(1004, &quot;E-DD&quot;, &quot;dd@163.com&quot;, 0, new Department(104, &quot;D-DD&quot;)));        employees.put(1005, new Employee(1005, &quot;E-EE&quot;, &quot;ee@163.com&quot;, 1, new Department(105, &quot;D-EE&quot;)));    &#125;        private static Integer initId = 1006;        public void save(Employee employee)&#123;        if(employee.getId() == null)&#123;            employee.setId(initId++);        &#125;                employee.setDepartment(departmentDao.getDepartment(employee.getDepartment().getId()));        employees.put(employee.getId(), employee);    &#125;        public Collection&lt;Employee&gt; getAll()&#123;        return employees.values();    &#125;        public Employee get(Integer id)&#123;        return employees.get(id);    &#125;        public void delete(Integer id)&#123;        employees.remove(id);    &#125;&#125;</code></pre><p>5.4 DepartmentDao.java</p><pre><code>package com.atguigu.rest.crud.dao;import java.util.Collection;import java.util.HashMap;import java.util.Map;import org.springframework.stereotype.Repository;import com.atguigu.rest.crud.bean.Department;@Repositorypublic class DepartmentDao &#123;    private static Map&lt;Integer, Department&gt; departments = null;        static&#123;        departments = new HashMap&lt;Integer, Department&gt;();                departments.put(101, new Department(101, &quot;D-AA&quot;));        departments.put(102, new Department(102, &quot;D-BB&quot;));        departments.put(103, new Department(103, &quot;D-CC&quot;));        departments.put(104, new Department(104, &quot;D-DD&quot;));        departments.put(105, new Department(105, &quot;D-EE&quot;));    &#125;        public Collection&lt;Department&gt; getDepartments()&#123;        return departments.values();    &#125;        public Department getDepartment(Integer id)&#123;        return departments.get(id);    &#125;    &#125;</code></pre><p>6.准备项目需要的所有页面<br>6.1 list.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%@taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;展示员工信息&lt;/title&gt;&lt;%-- &lt;link rel=&quot;stylesheet&quot; href=&quot;$&#123;pageContext.servletContext.contextPath&#125;/css/index_like.css&quot;&gt; --%&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;$&#123;pageContext.servletContext.contextPath&#125;/css/index_work.css&quot;&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;$&#123;pageContext.servletContext.contextPath&#125;/js/jquery-1.8.2.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;    $(function()&#123;        $(&quot;.del&quot;).click(function()&#123;            //submit()将所获得的form元素提交            if(confirm(&quot;确认删除吗？&quot;))&#123;                $(&quot;form&quot;).attr(&quot;action&quot;, this.href).submit();//$(this).attr(&quot;href&quot;)                return false;//将超链接的默认行为取消            &#125;            return false;//将超链接的默认行为取消        &#125;);    &#125;);//预加载函数或文档就绪函数&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;table&gt;        &lt;tr&gt;            &lt;th&gt;ID&lt;/th&gt;            &lt;th&gt;LASTNAME&lt;/th&gt;            &lt;th&gt;EMAIL&lt;/th&gt;            &lt;th&gt;GENDER&lt;/th&gt;            &lt;th&gt;DEPARTMENTNAME&lt;/th&gt;            &lt;th&gt;OPTION(&lt;a href=&quot;emp&quot;&gt;ADD&lt;/a&gt;)&lt;/th&gt;        &lt;/tr&gt;        &lt;c:forEach items=&quot;$&#123;emps&#125;&quot; var=&quot;emp&quot;&gt;            &lt;tr&gt;                &lt;td&gt;$&#123;emp.id&#125;&lt;/td&gt;                &lt;td&gt;$&#123;emp.lastName&#125;&lt;/td&gt;                &lt;td&gt;$&#123;emp.email&#125;&lt;/td&gt;                &lt;td&gt;$&#123;emp.gender==0?&#39;女&#39;:&#39;男&#39;&#125;&lt;/td&gt;                &lt;td&gt;$&#123;emp.department.departmentName&#125;&lt;/td&gt;                &lt;td&gt;                    &lt;a href=&quot;emp/$&#123;emp.id&#125;&quot;&gt;UPDATE&lt;/a&gt;                    &lt;a class=&quot;del&quot; href=&quot;emp/$&#123;emp.id&#125;&quot;&gt;DELETE&lt;/a&gt;                &lt;/td&gt;            &lt;/tr&gt;        &lt;/c:forEach&gt;    &lt;/table&gt;        &lt;form method=&quot;post&quot;&gt;        &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;DELETE&quot;&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>6.2 add.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%@taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;添加员工信息&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;$&#123;pageContext.servletContext.contextPath&#125;/css/index_work.css&quot;&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=&quot;emp&quot; method=&quot;post&quot;&gt;        &lt;table&gt;        &lt;tr&gt;            &lt;th colspan=&quot;2&quot;&gt;添加员工信息&lt;/th&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;LASTNAME&lt;/td&gt;            &lt;td&gt;                &lt;input type=&quot;text&quot; name=&quot;lastName&quot;&gt;            &lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;EMAIL&lt;/td&gt;            &lt;td&gt;                &lt;input type=&quot;text&quot; name=&quot;email&quot;&gt;            &lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;GENDER&lt;/td&gt;            &lt;td&gt;                &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;1&quot;&gt;男                &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;0&quot;&gt;女            &lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;DEPARTMENT&lt;/td&gt;            &lt;td&gt;                &lt;select name=&quot;department.id&quot;&gt;                    &lt;option&gt;-SELECT DEPARTMENT-&lt;/option&gt;                    &lt;c:forEach items=&quot;$&#123;depts&#125;&quot; var=&quot;dept&quot;&gt;                        &lt;option value=&quot;$&#123;dept.id&#125;&quot;&gt;$&#123;dept.departmentName&#125;&lt;/option&gt;                    &lt;/c:forEach&gt;                                    &lt;/select&gt;            &lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td colspan=&quot;2&quot;&gt;                &lt;input type=&quot;submit&quot; name=&quot;ADD&quot;&gt;            &lt;/td&gt;        &lt;/tr&gt;    &lt;/table&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>6.3 update.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%@taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;修改员工信息&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;$&#123;pageContext.servletContext.contextPath&#125;/css/index_work.css&quot;&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=&quot;$&#123;pageContext.servletContext.contextPath&#125;/emp&quot; method=&quot;post&quot;&gt;        &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;PUT&quot;&gt;        &lt;input type=&quot;hidden&quot; name=&quot;id&quot; value=&quot;$&#123;emp.id&#125;&quot;&gt;        &lt;table&gt;        &lt;tr&gt;            &lt;th colspan=&quot;2&quot;&gt;修改员工信息&lt;/th&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;LASTNAME&lt;/td&gt;            &lt;td&gt;                &lt;input type=&quot;text&quot; name=&quot;lastName&quot; value=&quot;$&#123;emp.lastName&#125;&quot;&gt;            &lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;EMAIL&lt;/td&gt;            &lt;td&gt;                &lt;input type=&quot;text&quot; name=&quot;email&quot; value=&quot;$&#123;emp.email&#125;&quot;&gt;            &lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;GENDER&lt;/td&gt;            &lt;td&gt;                &lt;%-- &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;1&quot; &lt;c:if test=&quot;$&#123;emp.gender==1&#125;&quot;&gt; checked=&quot;checked&quot;&lt;/c:if&gt;&gt;男                &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;0&quot; &lt;c:if test=&quot;$&#123;emp.gender==0&#125;&quot;&gt; checked=&quot;checked&quot;&lt;/c:if&gt;&gt;女 --%&gt;                &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;1&quot; $&#123;emp.gender==1?&#39;checked&#39;:&#39;&#39;&#125;&gt;男                &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;0&quot; $&#123;emp.gender==0?&#39;checked&#39;:&#39;&#39;&#125;&gt;女            &lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;DEPARTMENT&lt;/td&gt;            &lt;td&gt;                &lt;select name=&quot;department.id&quot;&gt;                    &lt;option&gt;-SELECT DEPARTMENT-&lt;/option&gt;                    &lt;c:forEach items=&quot;$&#123;depts&#125;&quot; var=&quot;dept&quot;&gt;                        &lt;option value=&quot;$&#123;dept.id&#125;&quot; $&#123;dept.id==emp.department.id?&#39;selected&#39;:&#39;&#39;&#125;&gt;$&#123;dept.departmentName&#125;&lt;/option&gt;                    &lt;/c:forEach&gt;                &lt;/select&gt;            &lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td colspan=&quot;2&quot;&gt;                &lt;input type=&quot;submit&quot; name=&quot;UPDATE&quot;&gt;            &lt;/td&gt;        &lt;/tr&gt;    &lt;/table&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>6.4 edit.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;&lt;%@ taglib uri=&quot;http://www.springframework.org/tags/form&quot; prefix=&quot;form&quot; %&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;编辑员工信息&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;$&#123;pageContext.servletContext.contextPath &#125;/css/index_work.css&quot; /&gt;&lt;/head&gt;&lt;body&gt;    &lt;!-- 使用SpringMVC from标签重构添加/修改页面 --&gt;    &lt;!-- modelAttribute自定义回显对象的属性名 --&gt;    &lt;form:form action=&quot;$&#123;pageContext.servletContext.contextPath &#125;/emp&quot; method=&quot;post&quot; modelAttribute=&quot;emp&quot;&gt;                &lt;c:if test=&quot;$&#123;empty emp.id&#125;&quot; var=&quot;flag&quot;&gt;&lt;/c:if&gt;        &lt;c:if test=&quot;$&#123;!flag&#125;&quot;&gt;            &lt;form:hidden path=&quot;id&quot;/&gt;            &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;PUT&quot; /&gt;        &lt;/c:if&gt;                &lt;table&gt;            &lt;tr&gt;                &lt;th colspan=&quot;2&quot;&gt;                    &lt;c:if test=&quot;$&#123;flag &#125;&quot;&gt;添加员工信息&lt;/c:if&gt;                    &lt;c:if test=&quot;$&#123;!flag &#125;&quot;&gt;修改员工信息&lt;/c:if&gt;                &lt;/th&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;LASTNAME&lt;/td&gt;                &lt;td&gt;                    &lt;form:input path=&quot;lastName&quot;/&gt;                &lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;EMAIL&lt;/td&gt;                &lt;td&gt;                    &lt;form:input path=&quot;email&quot;/&gt;                &lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;GENDER&lt;/td&gt;                &lt;td&gt;                    &lt;form:radiobuttons path=&quot;gender&quot; items=&quot;$&#123;genders&#125;&quot;/&gt;                &lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;DEPARTMENT&lt;/td&gt;                &lt;td&gt;                    &lt;form:select path=&quot;department.id&quot; items=&quot;$&#123;depts&#125;&quot; itemLabel=&quot;departmentName&quot; itemValue=&quot;id&quot;&gt;&lt;/form:select&gt;                &lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td colspan=&quot;2&quot;&gt;                    &lt;c:if test=&quot;$&#123;flag&#125;&quot;&gt;                        &lt;input type=&quot;submit&quot; value=&quot;ADD&quot; /&gt;                    &lt;/c:if&gt;                    &lt;c:if test=&quot;$&#123;!flag&#125;&quot;&gt;                        &lt;input type=&quot;submit&quot; value=&quot;UPDATE&quot; /&gt;                    &lt;/c:if&gt;                &lt;/td&gt;            &lt;/tr&gt;        &lt;/table&gt;    &lt;/form:form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>7.EmpController_Old.java(实现添加修改的第一种方式，选择第二种方式时注释掉EmpController_Old类的@Controller注解)</p><pre><code>package com.atguigu.rest.crud.controller;import java.util.Collection;import java.util.Map;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import com.atguigu.rest.crud.bean.Department;import com.atguigu.rest.crud.bean.Employee;import com.atguigu.rest.crud.dao.DepartmentDao;import com.atguigu.rest.crud.dao.EmployeeDao;//@Controllerpublic class EmpController_Old &#123;    //添加修改的第一种方式    @Autowired    private EmployeeDao employeeDao;        @Autowired    private DepartmentDao departmentDao;        /**     * 获取所有的员工信息     */    @RequestMapping(value=&quot;/emps&quot;)    public String getAll(Map&lt;String, Object&gt; map)&#123;        Collection&lt;Employee&gt; emps = employeeDao.getAll();        map.put(&quot;emps&quot;, emps);        return &quot;list&quot;;    &#125;        /**     * 跳转到添加页面     */    @RequestMapping(value=&quot;/emp&quot;, method=RequestMethod.GET)    public String toAdd(Map&lt;String, Object&gt; map)&#123;        Collection&lt;Department&gt; depts = departmentDao.getDepartments();        map.put(&quot;depts&quot;, depts);        return &quot;add&quot;;    &#125;        /**     * 添加员工信息     */    @RequestMapping(value=&quot;/emp&quot;, method=RequestMethod.POST)    public String addEmp(Employee employee)&#123;        employeeDao.save(employee);        return &quot;redirect:/emps&quot;;    &#125;        /**     * 获取要回显的数据，跳转到修改页面，并回显     */    @RequestMapping(value=&quot;/emp/&#123;id&#125;&quot;, method=RequestMethod.GET)    public String toUpdate(@PathVariable(&quot;id&quot;)Integer id, Map&lt;String, Object&gt; map)&#123;        //获取要修改的员工信息        Employee emp = employeeDao.get(id);        //所有的部门信息，供用户选择        Collection&lt;Department&gt; depts = departmentDao.getDepartments();        map.put(&quot;emp&quot;, emp);        map.put(&quot;depts&quot;, depts);        return &quot;update&quot;;    &#125;        @RequestMapping(value=&quot;/emp&quot;, method=RequestMethod.PUT)    public String updateEmp(Employee employee)&#123;        employeeDao.save(employee);//修改        return &quot;redirect:/emps&quot;;    &#125;&#125;</code></pre><p>8.EmpController.java(实现添加修改的第二种方式，选择第一种方式时注释掉EmpController类的@Controller注解)</p><pre><code>package com.atguigu.rest.crud.controller;import java.util.Collection;import java.util.HashMap;import java.util.Map;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import com.atguigu.rest.crud.bean.Department;import com.atguigu.rest.crud.bean.Employee;import com.atguigu.rest.crud.dao.DepartmentDao;import com.atguigu.rest.crud.dao.EmployeeDao;@Controllerpublic class EmpController &#123;    //添加修改的第二种方式    @Autowired    private EmployeeDao employeeDao;        @Autowired    private DepartmentDao departmentDao;        /**     * 获取所有的员工信息     * @param map     * @return     */    @RequestMapping(value=&quot;/emps&quot;)    public String getAll(Map&lt;String, Object&gt; map) &#123;        Collection&lt;Employee&gt; emps = employeeDao.getAll();        map.put(&quot;emps&quot;, emps);        return &quot;list&quot;;    &#125;        /**     * 跳转到添加页面     * @return     */    @RequestMapping(value=&quot;/emp&quot;, method=RequestMethod.GET)    public String toAdd(Map&lt;String, Object&gt; map) &#123;        //获取所有的部门信息        Collection&lt;Department&gt; depts = departmentDao.getDepartments();        //创建存储性别gender的信息        Map&lt;String, String&gt; genders = new HashMap&lt;&gt;();        genders.put(&quot;0&quot;, &quot;女&quot;);        genders.put(&quot;1&quot;, &quot;男&quot;);        map.put(&quot;depts&quot;, depts);        map.put(&quot;genders&quot;, genders);        //form标签有自动回显的功能，会在页面中能够默认获取request作用于中command属性的值        //map.put(&quot;command&quot;, new Employee());        //若在&lt;form:form&gt;设置了modelAttribute，就可以自定义回显对象的属性名        map.put(&quot;emp&quot;, new Employee());        return &quot;edit&quot;;    &#125;        /**     * 添加员工信息     * @param employee     * @return     */    @RequestMapping(value=&quot;/emp&quot;, method=RequestMethod.POST)    public String addEmp(Employee employee) &#123;        employeeDao.save(employee);        return &quot;redirect:/emps&quot;;    &#125;        /**     * 获取要回显的数据，跳转到修改页面，并回显     * @param id     * @param map     * @return     */    @RequestMapping(value=&quot;/emp/&#123;id&#125;&quot;, method=RequestMethod.GET)    public String toUpdate(@PathVariable(&quot;id&quot;) Integer id, Map&lt;String, Object&gt; map) &#123;        //获取要修改的员工信息        Employee emp = employeeDao.get(id);        //所有的部门信息，供用户选择        Collection&lt;Department&gt; depts = departmentDao.getDepartments();        //设置存储性别的map集合        Map&lt;String, String&gt; genders = new HashMap&lt;&gt;();        genders.put(&quot;0&quot;, &quot;女&quot;);        genders.put(&quot;1&quot;, &quot;男&quot;);        map.put(&quot;emp&quot;, emp);        map.put(&quot;depts&quot;, depts);        map.put(&quot;genders&quot;, genders);        return &quot;edit&quot;;    &#125;        /**     * 修改员工信息     */    @RequestMapping(value=&quot;/emp&quot;, method=RequestMethod.PUT)    public String updateEmp(Employee employee) &#123;        employeeDao.save(employee);//修改        return &quot;redirect:/emps&quot;;    &#125;        @RequestMapping(value=&quot;/emp/&#123;id&#125;&quot;, method=RequestMethod.DELETE)    public String deleteEmp(@PathVariable(&quot;id&quot;)Integer id)&#123;        employeeDao.delete(id);        return &quot;redirect:/emps&quot;;    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;REST-CRUD案例&quot;&gt;&lt;a href=&quot;#REST-CRUD案例&quot; class=&quot;headerlink&quot; title=&quot;REST CRUD案例&quot;&gt;&lt;/a&gt;REST CRUD案例&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/03/13/REST-CRUD/1.PNG&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="REST CRUD" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/REST-CRUD/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
    <category term="REST" scheme="http://example.com/tags/REST/"/>
    
    <category term="CRUD" scheme="http://example.com/tags/CRUD/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | 编码过滤器CharacterEncodingFilter</title>
    <link href="http://example.com/2022/03/12/%E7%BC%96%E7%A0%81%E8%BF%87%E6%BB%A4%E5%99%A8CharacterEncodingFilter/"/>
    <id>http://example.com/2022/03/12/%E7%BC%96%E7%A0%81%E8%BF%87%E6%BB%A4%E5%99%A8CharacterEncodingFilter/</id>
    <published>2022-03-13T07:58:53.000Z</published>
    <updated>2022-03-13T08:01:05.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CharacterEncodingFilter编码过滤器"><a href="#CharacterEncodingFilter编码过滤器" class="headerlink" title="CharacterEncodingFilter编码过滤器"></a>CharacterEncodingFilter编码过滤器</h1><p>SpringMVC通过配置CharacterEncodingFilter编码过滤器来解决项目中的乱码问题，只需要在web.xml中配置CharacterEncodingFilter即可。</p><pre><code>&lt;!-- 配置编码过滤器 --&gt;  &lt;filter&gt;    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;    &lt;init-param&gt;        &lt;param-name&gt;encoding&lt;/param-name&gt;        &lt;param-value&gt;UTF-8&lt;/param-value&gt;    &lt;/init-param&gt;  &lt;/filter&gt;  &lt;filter-mapping&gt;    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  &lt;/filter-mapping&gt;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CharacterEncodingFilter编码过滤器&quot;&gt;&lt;a href=&quot;#CharacterEncodingFilter编码过滤器&quot; class=&quot;headerlink&quot; title=&quot;CharacterEncodingFilter编码过滤器&quot;&gt;&lt;/a&gt;Ch</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="编码过滤器CharacterEncodingFilter" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/%E7%BC%96%E7%A0%81%E8%BF%87%E6%BB%A4%E5%99%A8CharacterEncodingFilter/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | 设置springMVC配置文件的位置以及名称并控制servlet的加载时间</title>
    <link href="http://example.com/2022/03/12/%E8%AE%BE%E7%BD%AEspringMVC%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E5%90%8D%E7%A7%B0%E5%B9%B6%E6%8E%A7%E5%88%B6servlet%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%97%B6%E9%97%B4/"/>
    <id>http://example.com/2022/03/12/%E8%AE%BE%E7%BD%AEspringMVC%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E5%90%8D%E7%A7%B0%E5%B9%B6%E6%8E%A7%E5%88%B6servlet%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%97%B6%E9%97%B4/</id>
    <published>2022-03-13T07:32:40.000Z</published>
    <updated>2022-03-13T07:35:43.150Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设置springMVC配置文件的位置以及名称并控制servlet的加载时间"><a href="#设置springMVC配置文件的位置以及名称并控制servlet的加载时间" class="headerlink" title="设置springMVC配置文件的位置以及名称并控制servlet的加载时间"></a>设置springMVC配置文件的位置以及名称并控制servlet的加载时间</h1><p>设置springMVC配置文件的位置以及名称并控制servlet的加载时间只需要在web.xml文件中做以下配置即可：</p><p>快捷方式：Alt + / dispatcherservlet</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&gt;  &lt;display-name&gt;SpringMVC02&lt;/display-name&gt;  &lt;welcome-file-list&gt;    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;  &lt;/welcome-file-list&gt;    &lt;!-- The front controller of this Spring Web application, responsible for handling all application requests --&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;        &lt;!-- 设置springMVC配置文件的位置以及名称 --&gt;        &lt;init-param&gt;            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;            &lt;param-value&gt;classpath:springMVC.xml&lt;/param-value&gt;        &lt;/init-param&gt;                &lt;!--             设置servlet的加载时间            默认在第一次访问时加载，若设置此标签，会将servlet的加载时间提前到项目启动时            此标签中可以整数，但是写负整数和0和没有设置时一样的效果，只有设置为正整数才会将servlet的加载时间提前到项目启动时            值越小，优先级越高         --&gt;        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;    &lt;/servlet&gt;    &lt;!-- Map all requests to the DispatcherServlet for handling --&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;        &lt;url-pattern&gt;/&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;&lt;/web-app&gt;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设置springMVC配置文件的位置以及名称并控制servlet的加载时间&quot;&gt;&lt;a href=&quot;#设置springMVC配置文件的位置以及名称并控制servlet的加载时间&quot; class=&quot;headerlink&quot; title=&quot;设置springMVC配置文件的位置</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="设置springMVC配置文件的位置以及名称并控制servlet的加载时间" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/%E8%AE%BE%E7%BD%AEspringMVC%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E5%90%8D%E7%A7%B0%E5%B9%B6%E6%8E%A7%E5%88%B6servlet%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%97%B6%E9%97%B4/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>Java | 静态代理</title>
    <link href="http://example.com/2022/03/10/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>http://example.com/2022/03/10/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/</id>
    <published>2022-03-11T02:08:35.000Z</published>
    <updated>2022-03-11T02:14:43.272Z</updated>
    
    <content type="html"><![CDATA[<h1 id="静态代理案例"><a href="#静态代理案例" class="headerlink" title="静态代理案例"></a>静态代理案例</h1><p>通过静态代理来帮助发短信(短信发送类和代理类实现相同的接口)<br><strong>SmsService.java(接口)</strong></p><pre><code>package proxy;public interface SmsService &#123;    String send(String message);&#125;</code></pre><p><strong>SmsServiceImpl.java(实现类)</strong></p><pre><code>package proxy;public class SmsServiceImpl implements SmsService&#123;    @Override    public String send(String message) &#123;        System.out.println(&quot;send message:&quot; + message);        return message;    &#125;&#125;</code></pre><p><strong>SmsProxy.java(代理类)</strong></p><pre><code>package proxy;public class SmsProxy implements SmsService&#123;    private final SmsService smsService;        public SmsProxy(SmsService smsService)&#123;        this.smsService = smsService;    &#125;        @Override    public String send(String message) &#123;        System.out.println(&quot;before method send()&quot;);        smsService.send(message);        System.out.println(&quot;after method send()&quot;);        return null;    &#125;&#125;</code></pre><p><strong>Main.java(测试类)</strong></p><pre><code>package proxy;public class Main &#123;    public static void main(String[] args)&#123;        SmsService smsService = new SmsServiceImpl();        SmsProxy smsProxy = new SmsProxy(smsService);        smsProxy.send(&quot;java&quot;);    &#125;&#125;</code></pre><p><strong>运行结果</strong><br><img src="/2022/03/10/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/1.PNG"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;静态代理案例&quot;&gt;&lt;a href=&quot;#静态代理案例&quot; class=&quot;headerlink&quot; title=&quot;静态代理案例&quot;&gt;&lt;/a&gt;静态代理案例&lt;/h1&gt;&lt;p&gt;通过静态代理来帮助发短信(短信发送类和代理类实现相同的接口)&lt;br&gt;&lt;strong&gt;SmsService.j</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="基础" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="静态代理" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="静态代理" scheme="http://example.com/tags/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Java | 动态代理</title>
    <link href="http://example.com/2022/03/10/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>http://example.com/2022/03/10/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</id>
    <published>2022-03-10T14:20:12.000Z</published>
    <updated>2022-03-11T02:57:15.735Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态代理案例-JDK-动态代理机制"><a href="#动态代理案例-JDK-动态代理机制" class="headerlink" title="动态代理案例(JDK 动态代理机制)"></a>动态代理案例(JDK 动态代理机制)</h1><p>假设我们需要通过中介租房子（告诉中介对房子的要求，由中介代我们租房子）</p><p><strong>JDK动态代理机制和CGLIB动态代理机制的区别</strong><br>1.JDK 动态代理只能代理实现了接口的类或者直接代理接口，而 CGLIB 可以代理未实现任何接口的类。 另外， CGLIB 动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理声明为 final 类型的类和方法。<br>2.就二者的效率来说，大部分情况都是 JDK 动态代理更优秀，随着 JDK 版本的升级，这个优势更加明显。</p><p><a href="https://gitee.com/victory-liao/JavaGuide/blob/main/docs/java/basis/proxy.md">动态代理和静态代理的区别、两种动态代理的区别</a><br><strong>HireRoom.java(接口)</strong></p><pre><code>package hireroom;public interface HireRoom &#123;    void hireRoom(String chaoxiang, String buju, int price);&#125;</code></pre><p><strong>HireRoomImpl.java(实现类)</strong></p><pre><code>package hireroom;public class HireRoomImpl implements HireRoom&#123;    @Override    public void hireRoom(String chaoxiang, String buju, int price) &#123;        System.out.println(&quot;我委托中介租一个朝向：&quot; + chaoxiang + &quot;，布局：&quot; + buju + &quot;，价格：&quot; + price + &quot;的房子&quot;);    &#125;&#125;</code></pre><p><strong>Agency.java(中介/代理类)</strong></p><pre><code>package hireroom;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;public class Agency implements InvocationHandler&#123;    private Object target;        public Agency(Object target)&#123;        this.target = target;    &#125;        @Override    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;        System.out.println(&quot;before&quot;);        Object result = method.invoke(target, args);        System.out.println(&quot;after&quot;);        return result;    &#125;&#125;</code></pre><p><strong>AgencyFactory.java(中介/代理工厂)</strong></p><pre><code>package hireroom;import java.lang.reflect.Proxy;public class AgencyFactory &#123;    public static Object getProxy(Object target)&#123;        return Proxy.newProxyInstance(target.getClass().getClassLoader(),                 target.getClass().getInterfaces(),                 new Agency(target));    &#125;&#125;</code></pre><p><strong>Main.java(测试)</strong></p><pre><code>package hireroom;public class Main &#123;    public static void main(String[] args) &#123;        HireRoom hireRoom = (HireRoom) AgencyFactory.getProxy(new HireRoomImpl());        hireRoom.hireRoom(&quot;坐南朝北&quot;, &quot;两室一厅&quot;, 200000);    &#125;&#125;</code></pre><p><strong>运行结果1</strong><br><img src="/2022/03/10/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/1.PNG"><br>再假设我们现在又有了想通过中介租车的需求，只需要再添加租车接口和实现类，然后通过上面的代理类完成租车。这也是动态代理的优点<br><strong>HireCar.java(接口)</strong></p><pre><code>package hireroom;public interface HireCar &#123;    void hireCar(String brand, int price);&#125;</code></pre><p><strong>HireCarImpl.java(实现类)</strong></p><pre><code>package hireroom;public class HireCarImpl implements HireCar&#123;    @Override    public void hireCar(String brand, int price) &#123;        System.out.println(&quot;租车：&quot;+brand+price);    &#125;&#125;</code></pre><p><strong>Main.java</strong></p><pre><code>package hireroom;public class Main &#123;    public static void main(String[] args) &#123;        HireRoom hireRoom = (HireRoom) AgencyFactory.getProxy(new HireRoomImpl());        hireRoom.hireRoom(&quot;坐南朝北&quot;, &quot;两室一厅&quot;, 200000);                HireCar hireCar = (HireCar) AgencyFactory.getProxy(new HireCarImpl());        hireCar.hireCar(&quot;宝马&quot;, 150000);    &#125;&#125;</code></pre><p><strong>运行结果2</strong><br><img src="/2022/03/10/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/2.PNG"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;动态代理案例-JDK-动态代理机制&quot;&gt;&lt;a href=&quot;#动态代理案例-JDK-动态代理机制&quot; class=&quot;headerlink&quot; title=&quot;动态代理案例(JDK 动态代理机制)&quot;&gt;&lt;/a&gt;动态代理案例(JDK 动态代理机制)&lt;/h1&gt;&lt;p&gt;假设我们需要通过</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="基础" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="动态代理" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="动态代理" scheme="http://example.com/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
    <category term="JDK动态代理机制" scheme="http://example.com/tags/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    
    <category term="CGLIB动态代理机制" scheme="http://example.com/tags/CGLIB%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java | 获取Class对象的四种方式</title>
    <link href="http://example.com/2022/03/10/%E8%8E%B7%E5%8F%96Class%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2022/03/10/%E8%8E%B7%E5%8F%96Class%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2022-03-10T12:33:03.000Z</published>
    <updated>2022-03-10T12:36:49.505Z</updated>
    
    <content type="html"><![CDATA[<h1 id="获取Class对象的四种方式"><a href="#获取Class对象的四种方式" class="headerlink" title="获取Class对象的四种方式"></a>获取Class对象的四种方式</h1><p>反射可以动态获取类的信息，这需要依靠 Class 对象。Class 类对象将一个类的方法、变量等信息告诉运行的程序。Java 提供了四种方式获取 Class 对象:</p><ol><li>知道具体类的情况下可以使用：</li></ol><pre><code>Class alunbarClass = TargetObject.class;</code></pre><p>但是我们一般是不知道具体类的，基本都是通过遍历包下面的类来获取 Class 对象，通过此方式获取 Class 对象不会进行初始化</p><ol start="2"><li>通过 Class.forName()传入类的全路径获取：</li></ol><pre><code>Class alunbarClass1 = Class.forName(&quot;cn.javaguide.TargetObject&quot;);</code></pre><ol start="3"><li>通过对象实例instance.getClass()获取：</li></ol><pre><code>TargetObject o = new TargetObject();Class alunbarClass2 = o.getClass();</code></pre><ol start="4"><li>通过类加载器xxxClassLoader.loadClass()传入类路径获取:</li></ol><pre><code>Class clazz = ClassLoader.loadClass(&quot;cn.javaguide.TargetObject&quot;);</code></pre><p>通过类加载器获取 Class 对象不会进行初始化，意味着不进行包括初始化等一系列步骤，静态代码块和静态对象不会得到执行</p><span id="more"></span><p><strong>示例</strong></p><pre><code>class Student&#123;    private Integer sid;    private String sname;    public Integer getSid() &#123;        return sid;    &#125;    public void setSid(Integer sid) &#123;        this.sid = sid;    &#125;    public String getSname() &#123;        return sname;    &#125;    public void setSname(String sname) &#123;        this.sname = sname;    &#125;    @Override    public String toString() &#123;        return &quot;Student [sid=&quot; + sid + &quot;, sname=&quot; + sname + &quot;]&quot;;    &#125;    &#125;public class Test &#123;    public static void main(String[] args)&#123;                //获取 Class 对象的四种方式        System.out.println(&quot;方式一:&quot; + Student.class);                try &#123;            System.out.println(&quot;方式二:&quot; + Class.forName(&quot;Student&quot;));        &#125; catch (ClassNotFoundException e) &#123;            e.printStackTrace();        &#125;                Student s1 = new Student();        System.out.println(&quot;方式三:&quot; + s1.getClass());                try &#123;            System.out.println(&quot;方式四:&quot;+ClassLoader.getSystemClassLoader().loadClass(&quot;Student&quot;));                    &#125; catch (ClassNotFoundException e) &#123;            e.printStackTrace();        &#125;                try &#123;            //使用反射操作Student类的方法以及参数            Student s2 = s1.getClass().newInstance();            s2.setSname(&quot;zhangsan&quot;);            s2.setSid(1);            System.out.println(s2);        &#125; catch (InstantiationException e) &#123;            // TODO Auto-generated catch block            e.printStackTrace();        &#125; catch (IllegalAccessException e) &#123;            // TODO Auto-generated catch block            e.printStackTrace();        &#125;                    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;获取Class对象的四种方式&quot;&gt;&lt;a href=&quot;#获取Class对象的四种方式&quot; class=&quot;headerlink&quot; title=&quot;获取Class对象的四种方式&quot;&gt;&lt;/a&gt;获取Class对象的四种方式&lt;/h1&gt;&lt;p&gt;反射可以动态获取类的信息，这需要依靠 Class 对象。Class 类对象将一个类的方法、变量等信息告诉运行的程序。Java 提供了四种方式获取 Class 对象:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;知道具体类的情况下可以使用：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;Class alunbarClass = TargetObject.class;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是我们一般是不知道具体类的，基本都是通过遍历包下面的类来获取 Class 对象，通过此方式获取 Class 对象不会进行初始化&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;通过 Class.forName()传入类的全路径获取：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;Class alunbarClass1 = Class.forName(&amp;quot;cn.javaguide.TargetObject&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;通过对象实例instance.getClass()获取：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;TargetObject o = new TargetObject();
Class alunbarClass2 = o.getClass();
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;通过类加载器xxxClassLoader.loadClass()传入类路径获取:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;Class clazz = ClassLoader.loadClass(&amp;quot;cn.javaguide.TargetObject&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过类加载器获取 Class 对象不会进行初始化，意味着不进行包括初始化等一系列步骤，静态代码块和静态对象不会得到执行&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="基础" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="获取Class对象的四种方式" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/%E8%8E%B7%E5%8F%96Class%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Class对象" scheme="http://example.com/tags/Class%E5%AF%B9%E8%B1%A1/"/>
    
    <category term="反射" scheme="http://example.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | 处理请求过程中往作用域中放值的三种方式</title>
    <link href="http://example.com/2022/03/09/SpringMVC%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%BE%80%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%AD%E6%94%BE%E5%80%BC%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2022/03/09/SpringMVC%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%BE%80%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%AD%E6%94%BE%E5%80%BC%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2022-03-10T03:23:17.000Z</published>
    <updated>2022-03-10T08:38:46.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="处理响应数据-ModelAndView"><a href="#处理响应数据-ModelAndView" class="headerlink" title="处理响应数据 ModelAndView"></a>处理响应数据 ModelAndView</h1><p>在<a href="https://victory-liao.github.io/2022/03/09/SpringMVC%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/">处理请求数据</a><br>项目的ParamController.java的类中加入以下代码：</p><pre><code>/** * SpringMVC处理请求过程中，往作用域中放值有以下三种方式 * 总结：根据ModelAndView源码调试，不管使用以下那种方式，最终都会把model数据和view数据封装到一个ModelAndView中 *///往作用域中放值方式1//    @RequestMapping(value=&quot;/param&quot;, method=RequestMethod.POST)//    public ModelAndView param()&#123;//        ModelAndView mav = new ModelAndView();//        //javaWEB： request.setAttribute(xxx) //        mav.addObject(&quot;username&quot;, &quot;root&quot;);//往request作用域中放值//        mav.setViewName(&quot;success&quot;);//设置视图名称，实现页面跳转//        return mav;//    &#125;        //往作用域中放值方式2//    @RequestMapping(value=&quot;/param&quot;, method=RequestMethod.POST)//    public String param(Map&lt;String, Object&gt; map)&#123;//        map.put(&quot;username&quot;, &quot;admin&quot;);//向作用域中放值//        return &quot;success&quot;;//返回视图名称//    &#125;//往作用域中放值方式3@RequestMapping(value=&quot;/param&quot;, method=RequestMethod.POST)public String param(Model model)&#123;    model.addAttribute(&quot;usernaem&quot;, &quot;zhangsan&quot;);//向作用域中放值    return &quot;success&quot;;//返回视图名称&#125;</code></pre><p>并在param.jsp页面获取request作用域中的值</p><pre><code>&lt;!-- $&#123;requestScope.username &#125; --&gt;    $&#123;username&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;处理响应数据-ModelAndView&quot;&gt;&lt;a href=&quot;#处理响应数据-ModelAndView&quot; class=&quot;headerlink&quot; title=&quot;处理响应数据 ModelAndView&quot;&gt;&lt;/a&gt;处理响应数据 ModelAndView&lt;/h1&gt;&lt;p&gt;在&lt;</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="处理请求过程中往作用域中放值的三种方式" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%BE%80%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%AD%E6%94%BE%E5%80%BC%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
    <category term="ModelAndView" scheme="http://example.com/tags/ModelAndView/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | 处理请求数据</title>
    <link href="http://example.com/2022/03/09/SpringMVC%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/"/>
    <id>http://example.com/2022/03/09/SpringMVC%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/</id>
    <published>2022-03-09T14:16:43.000Z</published>
    <updated>2022-03-09T14:24:32.526Z</updated>
    
    <content type="html"><![CDATA[<h1 id="处理请求数据"><a href="#处理请求数据" class="headerlink" title="处理请求数据"></a>处理请求数据</h1><p>1.项目目录<br><img src="/2022/03/09/SpringMVC%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/1.PNG"></p><span id="more"></span><p>2.web.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&gt;  &lt;display-name&gt;SpringMVC02&lt;/display-name&gt;  &lt;welcome-file-list&gt;    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;  &lt;/welcome-file-list&gt;    &lt;!-- The front controller of this Spring Web application, responsible for handling all application requests --&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;    &lt;/servlet&gt;    &lt;!-- Map all requests to the DispatcherServlet for handling --&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;        &lt;url-pattern&gt;/&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;        &lt;filter&gt;        &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;        &lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class&gt;    &lt;/filter&gt;    &lt;filter-mapping&gt;        &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;    &lt;/filter-mapping&gt;    &lt;/web-app&gt;</code></pre><p>3.springMVC-servlet.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;        &lt;!-- 扫描组件 --&gt;    &lt;context:component-scan base-package=&quot;com.atguigu.controller&quot;&gt;&lt;/context:component-scan&gt;        &lt;bean id=&quot;viewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/view/&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><p>4.param.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=&quot;param&quot; method=&quot;post&quot;&gt;        username:&lt;input type=&quot;text&quot; name=&quot;username&quot; /&gt;&lt;br&gt;         password:&lt;input type=&quot;text&quot; name=&quot;password&quot; /&gt;&lt;br&gt;        age:&lt;input type=&quot;text&quot; name=&quot;age&quot;&gt;&lt;br&gt;                &lt;!-- 测试RequestParam取消这段代码的注释 --&gt;        &lt;!-- province:&lt;input type=&quot;text&quot; name=&quot;province&quot; /&gt;&lt;br&gt;        city:&lt;input type=&quot;text&quot; name=&quot;city&quot; /&gt;&lt;br&gt;        country:&lt;input type=&quot;text&quot; name=&quot;country&quot; /&gt; --&gt;                &lt;!-- 使用POJO获取客户端数据 --&gt;        province:&lt;input type=&quot;text&quot; name=&quot;address.province&quot; /&gt;&lt;br&gt;        city:&lt;input type=&quot;text&quot; name=&quot;address.city&quot; /&gt;&lt;br&gt;        country:&lt;input type=&quot;text&quot; name=&quot;address.country&quot; /&gt;        &lt;input type=&quot;submit&quot; value=&quot;添加&quot;/&gt;            &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>5.success.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;成功&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>6.User.java</p><pre><code>package com.atguigu.bean;public class User &#123;    private Integer id;    private String username;    private String password;    private Address address;    public Integer getId() &#123;        return id;    &#125;    public void setId(Integer id) &#123;        this.id = id;    &#125;    public String getUsername() &#123;        return username;    &#125;    public void setUsername(String username) &#123;        this.username = username;    &#125;    public String getPassword() &#123;        return password;    &#125;    public void setPassword(String password) &#123;        this.password = password;    &#125;    public Address getAddress() &#123;        return address;    &#125;    public void setAddress(Address address) &#123;        this.address = address;    &#125;    @Override    public String toString() &#123;        return &quot;User [id=&quot; + id + &quot;, username=&quot; + username + &quot;, password=&quot; + password + &quot;, address=&quot; + address + &quot;]&quot;;    &#125;    &#125;</code></pre><p>7.Address.java</p><pre><code>package com.atguigu.bean;public class Address &#123;    private String province;    private String city;    private String country;    public String getProvince() &#123;        return province;    &#125;    public void setProvince(String province) &#123;        this.province = province;    &#125;    public String getCity() &#123;        return city;    &#125;    public void setCity(String city) &#123;        this.city = city;    &#125;    public String getCountry() &#123;        return country;    &#125;    public void setCountry(String country) &#123;        this.country = country;    &#125;    @Override    public String toString() &#123;        return &quot;Address [province=&quot; + province + &quot;, city=&quot; + city + &quot;, country=&quot; + country + &quot;]&quot;;    &#125;    &#125;</code></pre><p>8.ParamController.java</p><pre><code>package com.atguigu.controller;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.CookieValue;import org.springframework.web.bind.annotation.RequestHeader;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import com.atguigu.bean.User;@Controllerpublic class ParamController &#123;    /**     * 在springMVC获取客户端传递的数据的方式     * 1、在处理请求的方法中，加入相对应的形参，保证形参参数名和传递的数据的参数名保持一致，就可以自动赋值     * @RequestParam：可以把请求参数传递给请求方法     * 当不满足赋值条件时，可以使用value属性，指定映射关系     * required：设置形参是否必须被赋值，默认为ture，必须赋值，若设置为false，则不必须赋值，     * 因此形参的值为null     * defaultValue:若形参所获得的值为null，则设置一个默认值，用在分页和模糊查询中     *///    @RequestMapping(value=&quot;/param&quot;, method=RequestMethod.POST)//    public String testRequestParam(@RequestParam(value=&quot;name&quot;, required=false, defaultValue=&quot;admin&quot;)String username, String password, String age)&#123;//        System.out.println(&quot;username=&quot;+username+&quot;,password=&quot;+password+&quot;,age=&quot;+age);//        return &quot;success&quot;;//    &#125;        /**     * @RequestHeader:在处理请求的方法上，获取请求头信息，用户和@RequestParam一致     *///    @RequestMapping(value=&quot;/testRequestHeader&quot;)//    public String testRequestHeader(@RequestHeader(value=&quot;Accept-Language&quot;)String al)&#123;//        System.out.println(al);//        return &quot;success&quot;;//    &#125;        /**     * @CookieValue:在处理请求的方法上，获取cookie信息，用法和RequestParam一致     *///    @RequestMapping(&quot;/testCookieValue&quot;)//    public String testCookieValue(@CookieValue(&quot;JSESSIONID&quot;)String sessionId)&#123;//        System.out.println(&quot;testCookieValue:sessionId:&quot;+sessionId);//        return &quot;success&quot;;//    &#125;        /**     * 可以使用POJO获取客户端数据，要求实体类对象中的属性名一定要和页面中表单元素的name属性值一致，且支持级联关系     *///    @RequestMapping(value=&quot;/param&quot;, method=RequestMethod.POST)//    public String testPojo(User user)&#123;//        System.out.println(user);//        return &quot;success&quot;;//    &#125;        /**     * 可以通过设置形参的方式，获取servletAPI     */    @RequestMapping(&quot;/param&quot;)    public String testServletAPI(HttpServletRequest request, HttpServletResponse response)&#123;        System.out.println(&quot;testServletAPI,&quot;+request+&quot;,&quot;+response);                String username = request.getParameter(&quot;username&quot;);        System.out.println(username);        return &quot;success&quot;;    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;处理请求数据&quot;&gt;&lt;a href=&quot;#处理请求数据&quot; class=&quot;headerlink&quot; title=&quot;处理请求数据&quot;&gt;&lt;/a&gt;处理请求数据&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/03/09/SpringMVC%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/1.PNG&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="处理请求数据" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
    <category term="RequestParam注解" scheme="http://example.com/tags/RequestParam%E6%B3%A8%E8%A7%A3/"/>
    
    <category term="RequestHeader注解" scheme="http://example.com/tags/RequestHeader%E6%B3%A8%E8%A7%A3/"/>
    
    <category term="CookieValue注解" scheme="http://example.com/tags/CookieValue%E6%B3%A8%E8%A7%A3/"/>
    
    <category term="使用POJO获取客户端数据" scheme="http://example.com/tags/%E4%BD%BF%E7%94%A8POJO%E8%8E%B7%E5%8F%96%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%95%B0%E6%8D%AE/"/>
    
    <category term="获取servletAPI" scheme="http://example.com/tags/%E8%8E%B7%E5%8F%96servletAPI/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | REST风格GetPostPutDelete请求</title>
    <link href="http://example.com/2022/03/09/REST%E9%A3%8E%E6%A0%BCGetPostPutDelete%E8%AF%B7%E6%B1%82/"/>
    <id>http://example.com/2022/03/09/REST%E9%A3%8E%E6%A0%BCGetPostPutDelete%E8%AF%B7%E6%B1%82/</id>
    <published>2022-03-09T08:43:06.000Z</published>
    <updated>2022-03-09T08:58:40.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="REST风格-GET-POST-PUT-DELETE请求"><a href="#REST风格-GET-POST-PUT-DELETE请求" class="headerlink" title="REST风格 GET/POST/PUT/DELETE请求"></a>REST风格 GET/POST/PUT/DELETE请求</h1><p>*<em>REST</em>：即 Representational State Transfer。（资源）表现层状态转化。是目前最流行的一种互联网软件架构。</p><p>浏览器 form 表单只支持 GET 与 POST 请求，而DELETE、PUT 等 method 并不<br>支持，Spring3.0 添加了一个过滤器(HiddenHttpMethodFilter)，可以<strong>将这些<br>请求转换为标准的 http 方法</strong>，使得支持 GET、POST、PUT 与 DELETE 请求。</p><p>HiddenHttpMethodFilter支持REST风格的过滤器：可以将POST请求转换为PUT或DELETE请求</p><p><img src="/2022/03/09/REST%E9%A3%8E%E6%A0%BCGetPostPutDelete%E8%AF%B7%E6%B1%82/2.PNG"></p><span id="more"></span><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>1.项目目录<br><img src="/2022/03/09/REST%E9%A3%8E%E6%A0%BCGetPostPutDelete%E8%AF%B7%E6%B1%82/1.PNG"><br>2.web.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&gt;  &lt;display-name&gt;SpringMVC02&lt;/display-name&gt;  &lt;welcome-file-list&gt;    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;  &lt;/welcome-file-list&gt;    &lt;!-- The front controller of this Spring Web application, responsible for handling all application requests --&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;    &lt;/servlet&gt;    &lt;!-- Map all requests to the DispatcherServlet for handling --&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;        &lt;url-pattern&gt;/&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;        &lt;!-- 支持REST风格的过滤器：可以将POST请求转换为PUT或DELETE请求 --&gt;    &lt;filter&gt;        &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;        &lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class&gt;    &lt;/filter&gt;    &lt;filter-mapping&gt;        &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;    &lt;/filter-mapping&gt;    &lt;/web-app&gt;</code></pre><p>3.springMVC-servlet.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;        &lt;!-- 扫描组件 --&gt;    &lt;context:component-scan base-package=&quot;com.atguigu.controller&quot;&gt;&lt;/context:component-scan&gt;        &lt;bean id=&quot;viewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/view/&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><p>4.rest.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;a href=&quot;testREST/1001&quot;&gt;测试GET请求&lt;/a&gt;    &lt;br&gt;    &lt;form action=&quot;testREST&quot; method=&quot;POST&quot;&gt;        &lt;input type=&quot;submit&quot; value=&quot;测试POST&quot;/&gt;    &lt;/form&gt;    &lt;br&gt;    &lt;form action=&quot;testREST&quot; method=&quot;POST&quot;&gt;        &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;PUT&quot;/&gt;        &lt;input type=&quot;submit&quot; value=&quot;测试PUT&quot;/&gt;    &lt;/form&gt;    &lt;br&gt;    &lt;form action=&quot;testREST/1001&quot; method=&quot;POST&quot;&gt;        &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;DELETE&quot;/&gt;        &lt;input type=&quot;submit&quot; value=&quot;测试DELETE&quot;/&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>5.success.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;成功&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>6.RESTController.java</p><pre><code>package com.atguigu.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;@Controllerpublic class RESTController &#123;    @RequestMapping(value=&quot;/testREST/&#123;id&#125;&quot;, method=RequestMethod.GET)    public String getUserById(@PathVariable(&quot;id&quot;)Integer id)&#123;        System.out.println(&quot;GET,id=&quot;+id);        return &quot;success&quot;;    &#125;        @RequestMapping(value=&quot;/testREST&quot;,method=RequestMethod.POST)    public String insertUser()&#123;        System.out.println(&quot;POST&quot;);        return &quot;success&quot;;    &#125;        @RequestMapping(value=&quot;/testREST&quot;,method=RequestMethod.PUT)    public String updateUser()&#123;        System.out.println(&quot;PUT&quot;);        return &quot;success&quot;;    &#125;        @RequestMapping(value=&quot;/testREST/&#123;id&#125;&quot;,method=RequestMethod.DELETE)    public String deleteUser(@PathVariable(&quot;id&quot;)Integer id)&#123;        System.out.println(&quot;DELETE,id=&quot;+id);        return &quot;success&quot;;    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;REST风格-GET-POST-PUT-DELETE请求&quot;&gt;&lt;a href=&quot;#REST风格-GET-POST-PUT-DELETE请求&quot; class=&quot;headerlink&quot; title=&quot;REST风格 GET/POST/PUT/DELETE请求&quot;&gt;&lt;/a&gt;REST风格 GET/POST/PUT/DELETE请求&lt;/h1&gt;&lt;p&gt;*&lt;em&gt;REST&lt;/em&gt;：即 Representational State Transfer。（资源）表现层状态转化。是目前最流行的一种互联网软件架构。&lt;/p&gt;
&lt;p&gt;浏览器 form 表单只支持 GET 与 POST 请求，而DELETE、PUT 等 method 并不&lt;br&gt;支持，Spring3.0 添加了一个过滤器(HiddenHttpMethodFilter)，可以&lt;strong&gt;将这些&lt;br&gt;请求转换为标准的 http 方法&lt;/strong&gt;，使得支持 GET、POST、PUT 与 DELETE 请求。&lt;/p&gt;
&lt;p&gt;HiddenHttpMethodFilter支持REST风格的过滤器：可以将POST请求转换为PUT或DELETE请求&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/03/09/REST%E9%A3%8E%E6%A0%BCGetPostPutDelete%E8%AF%B7%E6%B1%82/2.PNG&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="REST风格 GET/POST/PUT/DELETE请求" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/REST%E9%A3%8E%E6%A0%BC-GET-POST-PUT-DELETE%E8%AF%B7%E6%B1%82/"/>
    
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
    <category term="HiddenHttpMethodFilter" scheme="http://example.com/tags/HiddenHttpMethodFilter/"/>
    
    <category term="REST" scheme="http://example.com/tags/REST/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | RequestMapping注解的几个属性和作用位置</title>
    <link href="http://example.com/2022/03/08/RequestMapping%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B1%9E%E6%80%A7%E5%92%8C%E4%BD%9C%E7%94%A8%E4%BD%8D%E7%BD%AE/"/>
    <id>http://example.com/2022/03/08/RequestMapping%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B1%9E%E6%80%A7%E5%92%8C%E4%BD%9C%E7%94%A8%E4%BD%8D%E7%BD%AE/</id>
    <published>2022-03-09T03:55:46.000Z</published>
    <updated>2022-03-09T08:57:13.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RequestMapping注解的几个属性和作用位置"><a href="#RequestMapping注解的几个属性和作用位置" class="headerlink" title="RequestMapping注解的几个属性和作用位置"></a>RequestMapping注解的几个属性和作用位置</h1><p>1.项目目录<br><img src="/2022/03/08/RequestMapping%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B1%9E%E6%80%A7%E5%92%8C%E4%BD%9C%E7%94%A8%E4%BD%8D%E7%BD%AE/1.PNG"></p><span id="more"></span><p>2.web.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&gt;  &lt;display-name&gt;SpringMVC02&lt;/display-name&gt;  &lt;welcome-file-list&gt;    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;  &lt;/welcome-file-list&gt;    &lt;!-- The front controller of this Spring Web application, responsible for handling all application requests --&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;    &lt;/servlet&gt;    &lt;!-- Map all requests to the DispatcherServlet for handling --&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;        &lt;url-pattern&gt;/&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;&lt;/web-app&gt;</code></pre><p>3.springMVC-servlet.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;        &lt;!-- 扫描组件 --&gt;    &lt;context:component-scan base-package=&quot;com.atguigu.controller&quot;&gt;&lt;/context:component-scan&gt;        &lt;bean id=&quot;viewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/view/&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><p>4.index.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;a href=&quot;test&quot;&gt;测试springMVC&lt;/a&gt;        &lt;br&gt;        &lt;form action=&quot;test&quot; method=&quot;post&quot;&gt;        &lt;input type=&quot;submit&quot; value=&quot;测试POST&quot;&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>5.success.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;成功&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>6.TestController.java</p><pre><code>package com.atguigu.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;@Controller//@RequestMapping(&quot;/mvc&quot;)public class TestController &#123;    /**     * @RequestMapping:设置请求映射，把请求和控制层中的方法设置映射关系     * 当请求路径和@RequestMapping的value属性一致时，则该注解所标注的方法即为处理请求的方法     *      * @RequestMapping可以加在类上，也可以加在方法上     * 若类和方法上都加有，应该一层一层的访问，西安访问类，再访问类中的方法     *      * method:用来设置请求方式，只有客户端发送请求的方式和method的值一致，才能处理请求     * 请求方式：GET查询    POST添加    PUT修改    DELETE删除     * params:用来设置客户端传到服务器的数据，支持表达式     * username !username username=admin username!=admin     * headers:用来设置请求头信息，所发送的请求的请求头信息一定要个headers属性中所设置的一致     *///    @RequestMapping(value=&quot;/test&quot;, method=RequestMethod.POST)//    public String testPOST()&#123;//        System.out.println(&quot;SUCCESS:POST&quot;);//        return &quot;success&quot;;//    &#125;    //    @RequestMapping(value=&quot;/test&quot;, method=RequestMethod.GET)//    public String testGET()&#123;//        System.out.println(&quot;SUCCESS:GET&quot;);//        return &quot;success&quot;;//    &#125;    //    @RequestMapping(value=&quot;/test&quot;, params=&#123;&quot;username&quot;, &quot;!age&quot;, &quot;sex!=1&quot;&#125;)//    public String testParams()&#123;//        System.out.println(&quot;SUCCESS&quot;);//        return &quot;success&quot;;//    &#125;        @RequestMapping(value=&quot;/test&quot;,             headers=&#123;&quot;Accept-Encoding=gzip, deflate&quot;&#125;)    public String testHeaders()&#123;        System.out.println(&quot;SUCCESS&quot;);        return &quot;success&quot;;    &#125;        /**    * springMVC支持Ant方式的请求路径    * 在Ant中，有3个匹配符    * *:任意字符    * ?:任意一个字符    * **:任意多层目录    */    //访问路径举例：localhost:8080/SpringMVC02/abc/ant11/a/b/testAnt    @RequestMapping(value=&quot;/*/ant??/**/testAnt&quot;)    public String testAnt()&#123;        System.out.println(&quot;SUCCESS:testAnt&quot;);        return &quot;success&quot;;    &#125;        /**     * 以前：localhost:8080/SpringMVC02/testREST?id=1001&amp;username=admin     * 现在：localhost:8080/SpringMVC02/testREST/1001/admin     */    @RequestMapping(&quot;/testREST/&#123;id&#125;/&#123;username&#125;&quot;)//占位符方式的路径    public String testREST(@PathVariable(&quot;id&quot;)Integer id, @PathVariable(&quot;username&quot;)String username)&#123;        System.out.println(&quot;id:&quot;+id+&quot;,username=&quot;+username);        return &quot;success&quot;;    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;RequestMapping注解的几个属性和作用位置&quot;&gt;&lt;a href=&quot;#RequestMapping注解的几个属性和作用位置&quot; class=&quot;headerlink&quot; title=&quot;RequestMapping注解的几个属性和作用位置&quot;&gt;&lt;/a&gt;RequestMapping注解的几个属性和作用位置&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/03/08/RequestMapping%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B1%9E%E6%80%A7%E5%92%8C%E4%BD%9C%E7%94%A8%E4%BD%8D%E7%BD%AE/1.PNG&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="RequestMapping注解的几个属性和作用位置" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/RequestMapping%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B1%9E%E6%80%A7%E5%92%8C%E4%BD%9C%E7%94%A8%E4%BD%8D%E7%BD%AE/"/>
    
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
    <category term="RequestMapping Ant风格路径" scheme="http://example.com/tags/RequestMapping-Ant%E9%A3%8E%E6%A0%BC%E8%B7%AF%E5%BE%84/"/>
    
    <category term="PathVariable注解" scheme="http://example.com/tags/PathVariable%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | SpringMVC之HelloWorld</title>
    <link href="http://example.com/2022/03/08/SpringMVC%E4%B9%8BHelloWorld/"/>
    <id>http://example.com/2022/03/08/SpringMVC%E4%B9%8BHelloWorld/</id>
    <published>2022-03-08T13:23:50.000Z</published>
    <updated>2022-03-08T13:35:03.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC之HelloWorld"><a href="#SpringMVC之HelloWorld" class="headerlink" title="SpringMVC之HelloWorld"></a>SpringMVC之HelloWorld</h1><h2 id="springMVC的搭建过程："><a href="#springMVC的搭建过程：" class="headerlink" title="springMVC的搭建过程："></a>springMVC的搭建过程：</h2><p>1.导入jar</p><p>2.在web.xml配置springMVC的核心（前端）控制器DispatcherServlet<br>作用：加载springMVC的配置文件，在下方的配置方式下，DispatcherServlet<br>自动加载配置文件，此时的配置文件有默认的位置和名称<br>    默认位置：WEB-INF下，默认名称：<servlet-name>-servlet.xml,<br>    例如以下配置方式的文件名：springMVC-servlet.xml<br>    当加载了配置文件，springMVC就会根据扫描组件找到控制层</servlet-name></p><pre><code>&lt;servlet&gt;&lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt;&lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;&lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;</code></pre><p>3.创建一个POJO,在此类上加上@Controller注解，springMVC就会将此类作为控制层加载，让其处理请求响应<br>4.在控制层中，需要在方法上设置@RequestMapping(value=”hello”),<br>springMVC就是通过此注解将请求路径与控制层中的方法进行匹配，此时请求路径为localhost:8080/projectName/xxx<br>5.处理请求的方法会返回一个字符串，即视图名称，最终会通过配置文件中配置的视图解析器实现页面跳转<br>方式：prefix + 视图名称 + suffix，此为最终跳转的页面路径</p><span id="more"></span><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><p>1.项目目录<br><img src="/2022/03/08/SpringMVC%E4%B9%8BHelloWorld/1.PNG"><br>2.web.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&gt;  &lt;display-name&gt;SpringMVC01&lt;/display-name&gt;  &lt;welcome-file-list&gt;    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;  &lt;/welcome-file-list&gt;    &lt;servlet&gt;    &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;  &lt;/servlet&gt;  &lt;servlet-mapping&gt;    &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;    &lt;url-pattern&gt;/&lt;/url-pattern&gt;  &lt;/servlet-mapping&gt;  &lt;/web-app&gt;</code></pre><p>3.springMVC-servlet.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;        &lt;!-- 扫描组件，将加上@Controller注解的类作为springMVC的控制层 --&gt;    &lt;context:component-scan base-package=&quot;com.atguigu.test&quot;&gt;&lt;/context:component-scan&gt;        &lt;!--         配置视图解析器        作用：将prefix + 视图名称 + suffix 确定最终要跳转的页面        /WEB-INF/view/success.jsp     --&gt;    &lt;bean id=&quot;viewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/view/&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;    &lt;/beans&gt;</code></pre><p>4.index.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;a href=&quot;hello&quot;&gt;测试springMVC&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>5.success.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;success&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>6.TestController.java</p><pre><code>package com.atguigu.test;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;@Controllerpublic class TestController &#123;    /**     * 假设：localhost:8080/SpringMVC01/hello     */        @RequestMapping(&quot;hello&quot;)    public String hello()&#123;        System.out.println(&quot;SUCCESS&quot;);        return &quot;success&quot;;//视图名称    &#125;&#125;</code></pre><p>7.运行结果<br><img src="/2022/03/08/SpringMVC%E4%B9%8BHelloWorld/2.PNG"></p><p><img src="/2022/03/08/SpringMVC%E4%B9%8BHelloWorld/3.PNG"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;SpringMVC之HelloWorld&quot;&gt;&lt;a href=&quot;#SpringMVC之HelloWorld&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC之HelloWorld&quot;&gt;&lt;/a&gt;SpringMVC之HelloWorld&lt;/h1&gt;&lt;h2 id=&quot;springMVC的搭建过程：&quot;&gt;&lt;a href=&quot;#springMVC的搭建过程：&quot; class=&quot;headerlink&quot; title=&quot;springMVC的搭建过程：&quot;&gt;&lt;/a&gt;springMVC的搭建过程：&lt;/h2&gt;&lt;p&gt;1.导入jar&lt;/p&gt;
&lt;p&gt;2.在web.xml配置springMVC的核心（前端）控制器DispatcherServlet&lt;br&gt;作用：加载springMVC的配置文件，在下方的配置方式下，DispatcherServlet&lt;br&gt;自动加载配置文件，此时的配置文件有默认的位置和名称&lt;br&gt;    默认位置：WEB-INF下，默认名称：&lt;servlet-name&gt;-servlet.xml,&lt;br&gt;    例如以下配置方式的文件名：springMVC-servlet.xml&lt;br&gt;    当加载了配置文件，springMVC就会根据扫描组件找到控制层&lt;/servlet-name&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;servlet&amp;gt;
&amp;lt;servlet-name&amp;gt;springMVC&amp;lt;/servlet-name&amp;gt;
&amp;lt;servlet-class&amp;gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-class&amp;gt;
&amp;lt;/servlet&amp;gt;
&amp;lt;servlet-mapping&amp;gt;
&amp;lt;servlet-name&amp;gt;springMVC&amp;lt;/servlet-name&amp;gt;
&amp;lt;url-pattern&amp;gt;/&amp;lt;/url-pattern&amp;gt;
&amp;lt;/servlet-mapping&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.创建一个POJO,在此类上加上@Controller注解，springMVC就会将此类作为控制层加载，让其处理请求响应&lt;br&gt;4.在控制层中，需要在方法上设置@RequestMapping(value=”hello”),&lt;br&gt;springMVC就是通过此注解将请求路径与控制层中的方法进行匹配，此时请求路径为localhost:8080/projectName/xxx&lt;br&gt;5.处理请求的方法会返回一个字符串，即视图名称，最终会通过配置文件中配置的视图解析器实现页面跳转&lt;br&gt;方式：prefix + 视图名称 + suffix，此为最终跳转的页面路径&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="SpringMVC之HelloWorld" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/SpringMVC%E4%B9%8BHelloWorld/"/>
    
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>spring | 事务管理</title>
    <link href="http://example.com/2022/03/07/%E4%BA%8B%E5%8A%A1-1/"/>
    <id>http://example.com/2022/03/07/%E4%BA%8B%E5%8A%A1-1/</id>
    <published>2022-03-07T12:25:30.000Z</published>
    <updated>2022-03-08T09:56:39.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h1><p>1.项目目录<br><img src="/2022/03/07/%E4%BA%8B%E5%8A%A1-1/1.PNG"><br>book包—&gt;使用注解管理事务<br>book_xml—&gt;使用xml方式管理事务</p><span id="more"></span><p>数据库表(book,stock,money)<br><img src="/2022/03/07/%E4%BA%8B%E5%8A%A1-1/2.PNG"><br><img src="/2022/03/07/%E4%BA%8B%E5%8A%A1-1/3.PNG"><br><img src="/2022/03/07/%E4%BA%8B%E5%8A%A1-1/4.PNG"><br>2.使用注解管理事务<br>2.1 BookController.java</p><pre><code>package com.atguigu.book.controller;import java.util.ArrayList;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import com.atguigu.book.service.BookService;import com.atguigu.book.service.Cashier;@Controllerpublic class BookController &#123;    @Autowired    private BookService service;        @Autowired    private Cashier cashier;        public void buyBook()&#123;        service.buyBook(&quot;1&quot;, &quot;1001&quot;);    &#125;        public void checkOut()&#123;        List&lt;String&gt; bids = new ArrayList&lt;&gt;();        bids.add(&quot;1&quot;);        bids.add(&quot;2&quot;);        cashier.checkOut(&quot;1001&quot;, bids);    &#125;&#125;</code></pre><p>2.2 BookDao.java</p><pre><code>package com.atguigu.book.dao;public interface BookDao &#123;    Integer selectPrice(String bid);        void updateSt(String bid);        void updateBalance(String uid, Integer price);&#125;</code></pre><p>2.3 BookDaoImpl.java</p><pre><code>package com.atguigu.book.dao.impl;import javax.management.RuntimeErrorException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.jdbc.core.JdbcTemplate;import org.springframework.stereotype.Repository;import com.atguigu.book.dao.BookDao;import com.atguigu.book.exception.MyException;@Repositorypublic class BookDaoImpl implements BookDao&#123;    @Autowired    private JdbcTemplate jdbcTemplate;    @Override    public Integer selectPrice(String bid) &#123;        String sql = &quot;select price from book where bid = ?&quot;;        Integer price = jdbcTemplate.queryForObject(sql, new Object[]&#123;bid&#125;, Integer.class);        return price;    &#125;    @Override    public void updateSt(String bid) &#123;        //获取该书记的库存        String sql = &quot;select st from stock where sid = ?&quot;;        Integer st = jdbcTemplate.queryForObject(sql, new Object[]&#123;bid&#125;, Integer.class);        if(st &lt;= 0)&#123;            throw new RuntimeException();        &#125;else&#123;            jdbcTemplate.update(&quot;update stock set st = st - 1 where sid = ?&quot;, bid);        &#125;    &#125;    @Override    public void updateBalance(String uid, Integer price) &#123;        Integer balance = jdbcTemplate.queryForObject(&quot;select balance from money where uid = ?&quot;, new Object[]&#123;uid&#125;, Integer.class);        if(balance &lt; price)&#123;            throw new MyException(&quot;余额不足&quot;);        &#125;else&#123;            jdbcTemplate.update(&quot;update money set balance = balance - ? where uid = ?&quot;, price, uid);        &#125;    &#125;&#125;</code></pre><p>2.4 BookService.java</p><pre><code>package com.atguigu.book.service;public interface BookService &#123;    void buyBook(String bid, String uid);&#125;</code></pre><p>2.5 BookServiceImpl.java</p><pre><code>package com.atguigu.book.service.impl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Propagation;import org.springframework.transaction.annotation.Transactional;import com.atguigu.book.dao.BookDao;import com.atguigu.book.exception.MyException;import com.atguigu.book.service.BookService;@Service//@Transactionalpublic class BookServiceImpl implements BookService&#123;    @Autowired    private BookDao dao;        /**     * @Transactional:对方法中所有的操作作为一个事务进行管理     * 在方法上使用，只对方法有效果     * 在类上使用，对类中所有的方法都有效果     * @Transactional中可以设置的属性：     * propagation:A方法和B方法都有事务，当A在调用B时，会将A中的事务传播给B方法，     * B方法对于事务的处理方式就是事务的传播行为     * Propagation.REQUIRED:必须使用调用者的事务（默认值）     * Propagation.REQUIRES_NEW:将调用者的事务挂起，不使用调用者的事务，使用新的事务进行处理     * isolation:事务的隔离级别，在并发的情况下，操作数据的一种规定     *         读未提交(1)：脏读（读到没有意义的数据）---&gt;对于字段来说     *         读已提交(2)：不可重复读（重复读到的数据不一致）---&gt;对于字段来说     *         可重复读(4)：幻读（重复读到整张表的数据不一致，第一次读一部分，第二次读多了一些数据）---&gt;对于记录来说     *         串行化(8)：性能低，消耗大     * timeout:在事务强制回滚前最多可以执行（等待）的时间     *      * readOnly:指定当前事务中的一系列的操作是否为只读     * 若设置为只读，不管事务中有没有写的操作，MySQL都会在请求访问数据的时候，不加锁，提高性能     * 如果有写操作的情况，建议一定不能设置只读     *      * rollbackFor|rollbackForClassName|noRollbackFor|noRollbakForClassName     */    @Transactional(propagation=Propagation.REQUIRES_NEW, timeout=3, noRollbackFor=&#123;NullPointerException.class, MyException.class&#125;)    public void buyBook(String bid, String uid)&#123;//        try &#123;//            Thread.sleep(5000);//        &#125; catch (InterruptedException e) &#123;//            e.printStackTrace();//        &#125;        Integer price = dao.selectPrice(bid);        dao.updateSt(bid);                dao.updateBalance(uid, price);    &#125;    &#125;</code></pre><p>2.6 Cashier.java</p><pre><code>package com.atguigu.book.service;import java.util.List;public interface Cashier &#123;    void checkOut(String uid, List&lt;String&gt; bids);&#125;</code></pre><p>2.7 CashierServiceImpl.java</p><pre><code>package com.atguigu.book.service.impl;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import com.atguigu.book.service.BookService;import com.atguigu.book.service.Cashier;@Service@Transactionalpublic class CashierServiceImpl implements Cashier&#123;    @Autowired    private BookService service;        @Override    public void checkOut(String uid, List&lt;String&gt; bids) &#123;        // TODO Auto-generated method stub        for (String bid : bids) &#123;            service.buyBook(bid, uid);        &#125;    &#125;&#125;</code></pre><p>2.8 MyException.java</p><pre><code>package com.atguigu.book.exception;public class MyException extends RuntimeException&#123;    public MyException() &#123;        super();        // TODO Auto-generated constructor stub    &#125;    public MyException(String arg0, Throwable arg1, boolean arg2, boolean arg3) &#123;        super(arg0, arg1, arg2, arg3);        // TODO Auto-generated constructor stub    &#125;    public MyException(String arg0, Throwable arg1) &#123;        super(arg0, arg1);        // TODO Auto-generated constructor stub    &#125;    public MyException(String arg0) &#123;        super(arg0);        // TODO Auto-generated constructor stub    &#125;    public MyException(Throwable arg0) &#123;        super(arg0);        // TODO Auto-generated constructor stub    &#125;&#125;</code></pre><p>2.9 Test.java</p><pre><code>package com.atguigu.book;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;import com.atguigu.book.controller.BookController;public class Test &#123;    public static void main(String[] args)&#123;        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;book.xml&quot;);                BookController controller = ac.getBean(&quot;bookController&quot;, BookController.class);        controller.buyBook();                //controller.checkOut();    &#125;&#125;</code></pre><p>2.10 db.properties</p><pre><code>jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/ssmjdbc.username=rootjdbc.password=root   </code></pre><p>2.11 book.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd&quot;&gt;    &lt;context:component-scan base-package=&quot;com.atguigu.book&quot;&gt;&lt;/context:component-scan&gt;        &lt;!-- 引入属性文件 --&gt;    &lt;bean class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;        &lt;property name=&quot;location&quot; value=&quot;db.properties&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;!-- 引入属性文件 --&gt;    &lt;context:property-placeholder location=&quot;db.properties&quot;/&gt;        &lt;!-- 创建数据源 --&gt;    &lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;!-- 通过数据源配置JdbcTemplate --&gt;    &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;!-- 配置事务管理器 --&gt;    &lt;bean id=&quot;dataSourceTransactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;!-- 开启注解驱动，即对事务相关的注解进行扫描，解析含义并执行功能 --&gt;    &lt;tx:annotation-driven transaction-manager=&quot;dataSourceTransactionManager&quot;/&gt;&lt;/beans&gt;</code></pre><p>3.使用xml方式管理事务<br>3.1 BookServiceImpl.java</p><pre><code>package com.atguigu.book_xml.service.impl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Propagation;import org.springframework.transaction.annotation.Transactional;import com.atguigu.book_xml.dao.BookDao;import com.atguigu.book_xml.exception.MyException;import com.atguigu.book_xml.service.BookService;@Servicepublic class BookServiceImpl implements BookService&#123;    @Autowired    private BookDao dao;        public void buyBook(String bid, String uid)&#123;//        try &#123;//            Thread.sleep(5000);//        &#125; catch (InterruptedException e) &#123;//            e.printStackTrace();//        &#125;        Integer price = dao.selectPrice(bid);        dao.updateSt(bid);                dao.updateBalance(uid, price);    &#125;    &#125;</code></pre><p>3.2 book_xml.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd&quot;&gt;    &lt;context:component-scan base-package=&quot;com.atguigu.book_xml&quot;&gt;&lt;/context:component-scan&gt;        &lt;!-- 引入属性文件 --&gt;    &lt;bean class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;        &lt;property name=&quot;location&quot; value=&quot;db.properties&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;!-- 引入属性文件 --&gt;    &lt;context:property-placeholder location=&quot;db.properties&quot;/&gt;        &lt;!-- 创建数据源 --&gt;    &lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;!-- 通过数据源配置JdbcTemplate --&gt;    &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;!-- 配置事务管理器(相当于一个切面),不管时用注解方式或xml方式配置事务，一定要有DataSourceTransactionManager事务管理器的支持 --&gt;    &lt;bean id=&quot;dataSourceTransactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;!-- 配置事务通知 --&gt;    &lt;tx:advice id=&quot;tx&quot; transaction-manager=&quot;dataSourceTransactionManager&quot;&gt;        &lt;tx:attributes&gt;            &lt;!-- 在设置好的切入点表达式下再次进行事务设置 --&gt;            &lt;tx:method name=&quot;buyBook&quot;/&gt;            &lt;tx:method name=&quot;checkOut&quot;/&gt;                        &lt;!-- 只有select开头的方法才会被事务处理 --&gt;            &lt;tx:method name=&quot;select*&quot; read-only=&quot;true&quot;/&gt;            &lt;tx:method name=&quot;insert*&quot;/&gt;            &lt;tx:method name=&quot;update*&quot;/&gt;            &lt;tx:method name=&quot;delete*&quot;/&gt;                        &lt;tx:method name=&quot;*&quot;/&gt;        &lt;/tx:attributes&gt;    &lt;/tx:advice&gt;        &lt;!-- 配置切入点表达式 --&gt;    &lt;aop:config&gt;        &lt;aop:pointcut expression=&quot;execution(* com.atguigu.book_xml.service.impl.*.*(..))&quot; id=&quot;pointCut&quot;/&gt;        &lt;aop:advisor advice-ref=&quot;tx&quot; pointcut-ref=&quot;pointCut&quot;/&gt;    &lt;/aop:config&gt;&lt;/beans&gt;</code></pre><p>3.3 Test.java</p><pre><code>package com.atguigu.book_xml;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;import com.atguigu.book_xml.controller.BookController;public class Test &#123;    public static void main(String[] args)&#123;        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;book_xml.xml&quot;);                BookController controller = ac.getBean(&quot;bookController&quot;, BookController.class);        controller.buyBook();                //controller.checkOut();    &#125;&#125;</code></pre><p>3.4 其他代码与注解方式管理事务相同</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;事务管理&quot;&gt;&lt;a href=&quot;#事务管理&quot; class=&quot;headerlink&quot; title=&quot;事务管理&quot;&gt;&lt;/a&gt;事务管理&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/03/07/%E4%BA%8B%E5%8A%A1-1/1.PNG&quot;&gt;&lt;br&gt;book包—&amp;gt;使用注解管理事务&lt;br&gt;book_xml—&amp;gt;使用xml方式管理事务&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="事务管理" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
    <category term="事务管理" scheme="http://example.com/tags/%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>spring | JdbcTemplate增删改查</title>
    <link href="http://example.com/2022/03/07/JdbcTemplate/"/>
    <id>http://example.com/2022/03/07/JdbcTemplate/</id>
    <published>2022-03-07T08:44:52.000Z</published>
    <updated>2022-03-07T08:51:52.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JdbcTemplate增删改查"><a href="#JdbcTemplate增删改查" class="headerlink" title="JdbcTemplate增删改查"></a>JdbcTemplate增删改查</h1><p>1.项目目录<br><img src="/2022/03/07/JdbcTemplate/1.PNG"><br>2.Emp.java</p><pre><code>package com.atguigu.jdbctemplate;public class Emp &#123;    private Integer eid;    private String ename;    private Integer age;    private String sex;    public Integer getEid() &#123;        return eid;    &#125;    public void setEid(Integer eid) &#123;        this.eid = eid;    &#125;    public String getEname() &#123;        return ename;    &#125;    public void setEname(String ename) &#123;        this.ename = ename;    &#125;    public Integer getAge() &#123;        return age;    &#125;    public void setAge(Integer age) &#123;        this.age = age;    &#125;    public String getSex() &#123;        return sex;    &#125;    public void setSex(String sex) &#123;        this.sex = sex;    &#125;    @Override    public String toString() &#123;        return &quot;Emp [eid=&quot; + eid + &quot;, ename=&quot; + ename + &quot;, age=&quot; + age + &quot;, sex=&quot; + sex + &quot;]&quot;;    &#125;    &#125;</code></pre><p>3.ssm表<br><img src="/2022/03/07/JdbcTemplate/2.PNG"><br>4.db.properties</p><pre><code>jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/ssmjdbc.username=rootjdbc.password=root</code></pre><p>5.jdbc.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;        &lt;!-- 引入属性文件 --&gt;    &lt;bean class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;        &lt;property name=&quot;location&quot; value=&quot;db.properties&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;!-- 引入属性文件 --&gt;    &lt;context:property-placeholder location=&quot;db.properties&quot;/&gt;        &lt;!-- 创建数据源 --&gt;    &lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;!-- 通过数据源配置JdbcTemplate --&gt;    &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;    &lt;/beans&gt;</code></pre><p>6.TestJdbcTemplate.java</p><pre><code>package com.atguigu.jdbctemplate;import static org.junit.Assert.*;import java.util.ArrayList;import java.util.List;import org.junit.Test;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;import org.springframework.jdbc.core.BeanPropertyRowMapper;import org.springframework.jdbc.core.JdbcTemplate;import org.springframework.jdbc.core.RowMapper;public class TestJdbcTemplate &#123;    ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;jdbc.xml&quot;);    JdbcTemplate jdbcTemplate = ac.getBean(&quot;jdbcTemplate&quot;, JdbcTemplate.class);        @Test    public void test() &#123;        //单个增删改        //System.out.println(jdbcTemplate);//org.springframework.jdbc.core.JdbcTemplate@6483f5ae        //jdbcTemplate.update(&quot;insert into emp values(1,&#39;zhangsan&#39;,23,&#39;男&#39;)&quot;);                //增加记录        //String sql = &quot;insert into emp values(2, ?, ?, ?)&quot;;        //jdbcTemplate.update(sql, &quot;lisi&quot;, 25, &quot;男&quot;);                //删除记录        //String sql = &quot;delete from emp where eid=?&quot;;        //jdbcTemplate.update(sql,2);                //修改记录        //String sql = &quot;update emp set ename=? where eid=?&quot;;         //jdbcTemplate.update(sql, &quot;lisi&quot;, 1);                //不能使用        //String sql = &quot;delete from emp where eid in (?)&quot;;        //String eids = &quot;3, 4, 5&quot;;        //jdbcTemplate.update(sql,eids);                //可以使用        //String eids = &quot;3,4,5&quot;;        //String sql = &quot;delete from emp where eid in (&quot;+eids+&quot;)&quot;;        //jdbcTemplate.update(sql);                //String sql = &quot;select * from emp where ename like &#39;%?%&#39;&quot;;//不能使用        //String sql = &quot;select * from emp where ename like concat(&#39;%&#39;,?,&#39;%&#39;)&quot;;//可以使用    &#125;        @Test    public void testBatchUpdate()&#123;        //批量增删改//        String sql = &quot;insert into emp values(?,?,?,?)&quot;;//        List&lt;Object[]&gt; list = new ArrayList&lt;&gt;();//        list.add(new Object[]&#123;3,&quot;a1&quot;,1,&quot;男&quot;&#125;);//        list.add(new Object[]&#123;4,&quot;a2&quot;,2,&quot;男&quot;&#125;);//        list.add(new Object[]&#123;5,&quot;a3&quot;,3,&quot;男&quot;&#125;);//        jdbcTemplate.batchUpdate(sql, list);    &#125;        @Test    public void testQueryForObject()&#123;        //jdbcTemplate.queryForObject(sql, requiredType);//用来获取单个的值        //jdbcTemplate.queryForObject(sql, rowMapper);//用来获取单条数据        //        String sql= &quot;select eid,ename,age,sex from emp where eid=?&quot;;//        RowMapper&lt;Emp&gt; rowMapper = new BeanPropertyRowMapper&lt;&gt;(Emp.class);//将列名（字段名或字段名的别名）与属性名进行映射//        Emp emp = jdbcTemplate.queryForObject(sql, new Object[]&#123;3&#125;, rowMapper);//        System.out.println(emp);                String sql = &quot;select count(*) from emp&quot;;        Integer count = jdbcTemplate.queryForObject(sql, Integer.class);        System.out.println(count);    &#125;        @Test    public void testQuery()&#123;        String sql = &quot;select eid,ename,age,sex from emp&quot;;        RowMapper&lt;Emp&gt; rowMapper = new BeanPropertyRowMapper&lt;&gt;(Emp.class);        List&lt;Emp&gt; list = jdbcTemplate.query(sql, rowMapper);        for(Emp emp:list)&#123;            System.out.println(emp);        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JdbcTemplate增删改查&quot;&gt;&lt;a href=&quot;#JdbcTemplate增删改查&quot; class=&quot;headerlink&quot; title=&quot;JdbcTemplate增删改查&quot;&gt;&lt;/a&gt;JdbcTemplate增删改查&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="JdbcTemplate" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/JdbcTemplate/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
    <category term="JdbcTemplate" scheme="http://example.com/tags/JdbcTemplate/"/>
    
  </entry>
  
</feed>
