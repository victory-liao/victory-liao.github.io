<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Victory&#39;s Blog</title>
  
  <subtitle>非淡泊无以明志，非宁静无以致远</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-03-06T08:15:51.711Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>victory-liao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring | 动态代理之数学计算器</title>
    <link href="http://example.com/2022/03/06/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B9%8B%E6%95%B0%E5%AD%A6%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    <id>http://example.com/2022/03/06/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B9%8B%E6%95%B0%E5%AD%A6%E8%AE%A1%E7%AE%97%E5%99%A8/</id>
    <published>2022-03-06T08:08:16.000Z</published>
    <updated>2022-03-06T08:15:51.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态代理-数学计算器"><a href="#动态代理-数学计算器" class="headerlink" title="动态代理-数学计算器"></a>动态代理-数学计算器</h1><p>项目目录<br><img src="/2022/03/06/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B9%8B%E6%95%B0%E5%AD%A6%E8%AE%A1%E7%AE%97%E5%99%A8/1.PNG"></p><p>1.要求<br>1）计算器能够执行加减乘除运算<br>2）日志：在程序执行期间追踪正在发生的活动<br>3）验证：希望计算器只能处理正数的运算</p><p>2.常规实现</p><pre><code>**MathI.java**package com.atguigu.proxy;public interface MathI &#123;    int add(int i, int j);    int sub(int i, int j);    int mul(int i, int j);    int div(int i, int j);&#125;</code></pre><p><strong>MathImpl.java</strong></p><pre><code>package com.atguigu.proxy;public class MathImpl implements MathI&#123;    @Override    public int add(int i, int j) &#123;        System.out.println(&quot;method:add,arguments:&quot; + i + &quot;,&quot; + j);        System.out.println(&quot;method:add,results:&quot; + (i + j));        return i + j;    &#125;        @Override    public int sub(int i, int j) &#123;        System.out.println(&quot;method:sub,arguments:&quot; + i + &quot;,&quot; + j);        System.out.println(&quot;method:sub,results:&quot; + (i - j));        return i - j;    &#125;    @Override    public int mul(int i, int j) &#123;        System.out.println(&quot;method:mul,arguments:&quot; + i + &quot;,&quot; + j);        System.out.println(&quot;method:mul,results:&quot; + (i * j));        return i * j;    &#125;    @Override    public int div(int i, int j) &#123;        System.out.println(&quot;method:div,arguments:&quot; + i + &quot;,&quot; + j);        System.out.println(&quot;method:div,results:&quot; + (i / j));        return i / j;    &#125;&#125;</code></pre><p><strong>常规实现方法存在的问题</strong><br>①代码混乱：越来越多的非业务需求(日志和验证等)加入后，原有的业务方法急剧膨胀。每个方法在处理核心逻辑的同时还必须兼顾其他多个关注点。<br>②代码分散: 以日志需求为例，只是为了满足这个单一需求，就不得不在多个模块（方法）里多次重复相同的日志代码。如果日志需求发生变化，必须修改所有模块。</p><p>3.动态代理<br><strong>MathI.java（与2中的代码相同）</strong></p><p><strong>MathImpl.java(2中的代码中去掉日志信息)</strong></p><p><strong>MyLogger.java(日志类)</strong></p><p><strong>ProxyUtil.java(代理类)</strong></p><pre><code>package com.atguigu.proxy;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;import java.util.Arrays;public class ProxyUtil&#123;    //代理模式：1、静态代理（代理对象真实存在，是自己写好的） 2、动态代理（动态生成代理对象，不需要自己写）    private MathImpl mathImpl;//目标对象 目标对象类必须实现接口        public ProxyUtil(MathImpl mathImpl) &#123;        super();        this.mathImpl = mathImpl;    &#125;    public Object getProxy()&#123;        //获取当前类的类加载器用来加载代理对象所属类        ClassLoader loader = this.getClass().getClassLoader();//动态生成代理对象就需要动态代理类，代理类的执行需要类加载器        //获取目标对象实现的所有接口的Class，代理类会和目标对象实现相同的接口，最终通过代理对象实现功能        Class[] interfaces = mathImpl.getClass().getInterfaces();                return Proxy.newProxyInstance(loader, interfaces, new InvocationHandler()&#123;            @Override            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;                //代理对象实现功能的方式                try&#123;                    MyLogger.before(method.getName(), Arrays.toString(args));                    Object result = method.invoke(mathImpl, args);//动态代理对象实现功能（调用目标对象的方法）                    MyLogger.after(method.getName(), result);                    return result;                &#125;catch (Exception e)&#123;                    MyLogger.throwing();                    e.printStackTrace();                &#125;finally&#123;                    System.out.println(&quot;哪都有我&quot;);                &#125;                return null;                            &#125;        &#125;);    &#125;&#125;</code></pre><p><strong>Test.java(测试类)</strong></p><pre><code>package com.atguigu.proxy;public class Test &#123;    public static void main(String[] args) &#123;//        MathI math = new MathImpl();//        int result = math.add(1, 1);//        System.out.println(result);        ProxyUtil proxy = new ProxyUtil(new MathImpl());                MathI math = (MathI)proxy.getProxy();                int i = math.add(1, 1);        System.out.println(i);                int j = math.div(4, 0);        System.out.println(j);    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;动态代理-数学计算器&quot;&gt;&lt;a href=&quot;#动态代理-数学计算器&quot; class=&quot;headerlink&quot; title=&quot;动态代理-数学计算器&quot;&gt;&lt;/a&gt;动态代理-数学计算器&lt;/h1&gt;&lt;p&gt;项目目录&lt;br&gt;&lt;img src=&quot;/2022/03/06/%E5%8A%A</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="动态代理之数学计算器" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B9%8B%E6%95%B0%E5%AD%A6%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring | 基于注解的自动装配</title>
    <link href="http://example.com/2022/03/06/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    <id>http://example.com/2022/03/06/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/</id>
    <published>2022-03-06T08:05:36.000Z</published>
    <updated>2022-03-06T08:15:56.571Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于注解（-Autowired）的自动装配"><a href="#基于注解（-Autowired）的自动装配" class="headerlink" title="基于注解（@Autowired）的自动装配"></a>基于注解（@Autowired）的自动装配</h1><p>1.项目目录<br><img src="/2022/03/06/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/1.PNG"></p><p>2.UserController.java</p><pre><code>package com.atguigu.ioc.userMod.controller;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import com.atguigu.ioc.userMod.service.UserService;import com.atguigu.ioc.userMod.service.UserServiceImpl;/** * 基于注解的组件化管理： * @Component,@Controller（控制层）,@Service（业务层）,@Repository（持久曾） * 以上四个注解功能完全相同，不过在实际开发中，要在实现不同功能的类上加上相应的注解 * 完成组件化管理的过程： * 1、在需要被spring管理的类上加上相应注解 * 2、在配置文件中通过&lt;context：component-scan&gt;对所设置的包结构进行扫描，就会将加上注解的类作为spring的组件进行加载 * 组件：指spring中管理的bean * 作为spring的组件进行加载：会自动在spring的配置文件中生成相对应的bean，这些bean的id会以类的首字母小写为值； * 也可以通过@Controller(&quot;beanId&quot;)为自动生成的bean指定id *  * 自动装配：在需要赋值的非字面量属性上，加上@Autowired注解，就可以在spring容器中，通过不同的方式匹配到相对应的bean * @Autowired装配时，会默认使用byType的方式，此时要求spring容器中只有一个能够为其赋值 * 当byType实现不了装配时，会自动切换到byName,此时要求spring容器中，有一个bean的id和属性名一致 * 若自动装配时，匹配到多个能够赋值的bean，可使用@Qualifire（value=&quot;beanId&quot;)指定使用的bean * @Autowired和@Qualifire（value=&quot;beanId&quot;)可以一起作用于一个带形参的方法上，此时，@Qualifire（value=&quot;beanId&quot;)所 * 指定的bean作用于形参 *  */@Controller//@Controller(value=&quot;aaa&quot;)//为自动创建的bean设置idpublic class UserController &#123;    //private UserService userService = new UserServiceImpl();    @Autowired//基于注解的自动装配(根据类型进行自动装配 byType)    private UserService userService;        public void addUser()&#123;        userService.addUser();    &#125;        public UserController() &#123;        System.out.println(&quot;UserController&quot;);    &#125;&#125;</code></pre><p>3.UserService.java</p><pre><code>package com.atguigu.ioc.userMod.service;public interface UserService &#123;    void addUser();&#125;</code></pre><p>4.UserServiceImpl.java</p><pre><code>package com.atguigu.ioc.userMod.service;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.stereotype.Service;import com.atguigu.ioc.userMod.dao.UserDao;import com.atguigu.ioc.userMod.dao.UserDaoImpl;@Servicepublic class UserServiceImpl implements UserService&#123;        //private UserDao userDao = new UserDaoImpl();        @Autowired    //@Qualifier(value=&quot;userDaoImpl&quot;)    @Qualifier(value=&quot;userDaoMybatisImpl&quot;)    private UserDao userDao;    //    @Autowired//    @Qualifier(value=&quot;userDaoMybaticImpl&quot;)//    public void setUserDao(UserDao userDao)&#123;//        this.userDao = userDao;//    &#125;        public UserServiceImpl() &#123;        System.out.println(&quot;UserServiceImpl&quot;);    &#125;    @Override    public void addUser() &#123;        // TODO Auto-generated method stub        userDao.addUser();    &#125;&#125;</code></pre><p>5.UserDao.java</p><pre><code>package com.atguigu.ioc.userMod.dao;public interface UserDao &#123;    void addUser();&#125;</code></pre><p>6.UserDaoImpl.java</p><pre><code>package com.atguigu.ioc.userMod.dao;import org.springframework.stereotype.Repository;@Repositorypublic class UserDaoImpl implements UserDao&#123;    public UserDaoImpl()&#123;        System.out.println(&quot;UserDaoImpl&quot;);    &#125;    @Override    public void addUser() &#123;        System.out.println(&quot;添加成功&quot;);    &#125;&#125;</code></pre><p>7.UserDaoMybatisImpl.java</p><pre><code>package com.atguigu.ioc.userMod.dao;import org.springframework.stereotype.Repository;@Repositorypublic class UserDaoMybatisImpl implements UserDao&#123;    @Override    public void addUser() &#123;        // TODO Auto-generated method stub        System.out.println(&quot;UserDaoMybatisImple:添加成功&quot;);    &#125;&#125;</code></pre><p>8.user.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;        &lt;!--         &lt;context:component-scan&gt;:扫描组件，对设置的包下面的类进行扫描，会将加上注解的类作为spring的组件进行加载        组件：指spring中管理的bean        作为spring的组件进行加载：会自动在spring的配置文件中生成相对应的bean，这些bean的id会以类的首字母小写为值                &lt;context:include-filter&gt;:在设定的包结构下再次通过注解或类型具体包含到某个或某几个类        注意：在使用包含时，一定要设置use-default-filters=&quot;false&quot;，将默认（即扫描包下所有的类）的过滤关闭                &lt;context:exclude-filter&gt;:在设定的包结构下，再次通过注解或类型具体排除某个或某几个类        注意：在使用排除时，一定要设置use-default-filters=&quot;true&quot;，将默认（即扫描包下所有的类）的过滤打开                切记：一个&lt;context:component-scan&gt;中可以出现多个include，也可以同时出现多个exclude，但是两个不能同时出现     --&gt;    &lt;context:component-scan base-package=&quot;com.atguigu.ioc.userMod&quot; use-default-filters=&quot;true&quot;&gt;        &lt;!-- &lt;context:include-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt; --&gt;        &lt;!-- &lt;context:include-filter type=&quot;assignable&quot; expression=&quot;com.atguigu.ioc.userMod.service.UserServiceImpl&quot;/&gt; --&gt;        &lt;!-- &lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Repository&quot;/&gt; --&gt;        &lt;!-- &lt;context:exclude-filter type=&quot;assignable&quot; expression=&quot;com.atguigu.ioc.userMod.dao.UserDaoImpl&quot;/&gt; --&gt;    &lt;/context:component-scan&gt;        &lt;!-- &lt;bean id=&quot;userController&quot; class=&quot;com.atguigu.ioc.userMod.controller.UserController&quot;&gt;&lt;/bean&gt;    &lt;bean id=&quot;userServiceImpl&quot; class=&quot;com.atguigu.ioc.userMod.service.UserServiceImpl&quot;&gt;&lt;/bean&gt;    &lt;bean id=&quot;userDaoImpl&quot; class=&quot;com.atguigu.ioc.userMod.dao.UserDaoImpl&quot;&gt;&lt;/bean&gt; --&gt;        &lt;!-- 测试@Autowired是根据类型来进行自动装配的（byType） --&gt;    &lt;!-- &lt;bean id=&quot;user&quot; class=&quot;com.atguigu.ioc.userMod.dao.UserDaoImpl&quot;&gt;&lt;/bean&gt; --&gt;        &lt;!-- 如果根据类型自动装配失败，则byName --&gt;    &lt;!-- &lt;bean id=&quot;userDao&quot; class=&quot;com.atguigu.ioc.userMod.dao.UserDaoImpl&quot;&gt;&lt;/bean&gt; --&gt;&lt;/beans&gt;</code></pre><p>9.Test.java</p><pre><code>package com.atguigu.ioc.userMod;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;import com.atguigu.ioc.userMod.controller.UserController;import com.atguigu.ioc.userMod.dao.UserDao;import com.atguigu.ioc.userMod.dao.UserDaoImpl;import com.atguigu.ioc.userMod.service.UserService;import com.atguigu.ioc.userMod.service.UserServiceImpl;public class Test &#123;    public static void main(String[] args) &#123;        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;user.xml&quot;);                UserController uc = ac.getBean(&quot;userController&quot;, UserController.class);        System.out.println(uc);//com.atguigu.ioc.userMod.controller.UserController@4b553d26                UserService us = ac.getBean(&quot;userServiceImpl&quot;, UserServiceImpl.class);        System.out.println(us);//com.atguigu.ioc.userMod.service.UserServiceImpl@69a3d1d                UserDao ud = ac.getBean(&quot;userDaoImpl&quot;, UserDaoImpl.class);        System.out.println(ud);//com.atguigu.ioc.userMod.dao.UserDaoImpl@86be70a                uc.addUser();    &#125;&#125;</code></pre><p>10.运行结果</p><pre><code>UserControllerUserServiceImplUserDaoImplcom.atguigu.ioc.userMod.controller.UserController@6f195bc3com.atguigu.ioc.userMod.service.UserServiceImpl@51e2adc7com.atguigu.ioc.userMod.dao.UserDaoImpl@1a8a8f7c添加成功</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基于注解（-Autowired）的自动装配&quot;&gt;&lt;a href=&quot;#基于注解（-Autowired）的自动装配&quot; class=&quot;headerlink&quot; title=&quot;基于注解（@Autowired）的自动装配&quot;&gt;&lt;/a&gt;基于注解（@Autowired）的自动装配&lt;/</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="基于注解（@Autowired）的自动装配" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%EF%BC%88-Autowired%EF%BC%89%E7%9A%84%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring | 使用注解配置bean</title>
    <link href="http://example.com/2022/03/06/%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AEbean/"/>
    <id>http://example.com/2022/03/06/%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AEbean/</id>
    <published>2022-03-06T08:03:19.000Z</published>
    <updated>2022-03-06T08:16:03.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用注解配置bean"><a href="#使用注解配置bean" class="headerlink" title="使用注解配置bean"></a>使用注解配置bean</h1><p>1.项目目录<br><img src="/2022/03/06/%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AEbean/1.PNG"></p><p>2.UserController.java</p><pre><code>package com.atguigu.ioc.userMod.controller;import org.springframework.stereotype.Controller;@Controllerpublic class UserController &#123;    public UserController() &#123;        System.out.println(&quot;UserController&quot;);    &#125;    &#125;</code></pre><p>3.UserDao.java</p><pre><code>package com.atguigu.ioc.userMod.dao;public interface UserDao &#123;&#125;</code></pre><p>4.UserDaoImpl.java(UserDao接口的实现类)</p><pre><code>package com.atguigu.ioc.userMod.dao;import org.springframework.stereotype.Repository;@Repositorypublic class UserDaoImpl implements UserDao&#123;    public UserDaoImpl()&#123;        System.out.println(&quot;UserDaoImpl&quot;);    &#125;&#125;</code></pre><p>5.UserService.java</p><pre><code>package com.atguigu.ioc.userMod.service;public interface UserService &#123;&#125;</code></pre><p>6.UserServiceImpl.java(UserService接口的实现类)</p><pre><code>package com.atguigu.ioc.userMod.service;import org.springframework.stereotype.Service;@Servicepublic class UserServiceImpl implements UserService&#123;    public UserServiceImpl() &#123;        System.out.println(&quot;UserServiceImpl&quot;);    &#125;&#125;</code></pre><p>7.user.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;        &lt;!--         &lt;context:component-scan&gt;:扫描组件，对设置的包下面的类进行扫描，会将加上注解的类作为spring的组件进行加载        组件：指spring中管理的bean        作为spring的组件进行加载：会自动在spring的配置文件中生成相对应的bean，这些bean的id会以类的首字母小写为值                &lt;context:include-filter&gt;:在设定的包结构下再次通过注解或类型具体包含到某个或某几个类        注意：在使用包含时，一定要设置use-default-filters=&quot;false&quot;，将默认（即扫描包下所有的类）的过滤关闭                &lt;context:exclude-filter&gt;:在设定的包结构下，再次通过注解或类型具体排除某个或某几个类        注意：在使用排除时，一定要设置use-default-filters=&quot;true&quot;，将默认（即扫描包下所有的类）的过滤打开                切记：一个&lt;context:component-scan&gt;中可以出现多个include，也可以同时出现多个exclude，但是两个不能同时出现     --&gt;    &lt;context:component-scan base-package=&quot;com.atguigu.ioc.userMod&quot; use-default-filters=&quot;true&quot;&gt;        &lt;!-- &lt;context:include-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt; --&gt;        &lt;!-- &lt;context:include-filter type=&quot;assignable&quot; expression=&quot;com.atguigu.ioc.userMod.service.UserServiceImpl&quot;/&gt; --&gt;        &lt;!-- &lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Repository&quot;/&gt; --&gt;        &lt;!-- &lt;context:exclude-filter type=&quot;assignable&quot; expression=&quot;com.atguigu.ioc.userMod.dao.UserDaoImpl&quot;/&gt; --&gt;    &lt;/context:component-scan&gt;        &lt;!-- &lt;bean id=&quot;userController&quot; class=&quot;com.atguigu.ioc.userMod.controller.UserController&quot;&gt;&lt;/bean&gt;    &lt;bean id=&quot;userServiceImpl&quot; class=&quot;com.atguigu.ioc.userMod.service.UserServiceImpl&quot;&gt;&lt;/bean&gt;    &lt;bean id=&quot;userDaoImpl&quot; class=&quot;com.atguigu.ioc.userMod.dao.UserDaoImpl&quot;&gt;&lt;/bean&gt; --&gt;&lt;/beans&gt;</code></pre><p>8.Test.java</p><pre><code>package com.atguigu.ioc.userMod;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;import com.atguigu.ioc.userMod.controller.UserController;import com.atguigu.ioc.userMod.dao.UserDao;import com.atguigu.ioc.userMod.dao.UserDaoImpl;import com.atguigu.ioc.userMod.service.UserService;import com.atguigu.ioc.userMod.service.UserServiceImpl;public class Test &#123;    public static void main(String[] args) &#123;        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;user.xml&quot;);                UserController uc = ac.getBean(&quot;userController&quot;, UserController.class);        System.out.println(uc);//com.atguigu.ioc.userMod.controller.UserController@4b553d26                UserService us = ac.getBean(&quot;userServiceImpl&quot;, UserServiceImpl.class);        System.out.println(us);//com.atguigu.ioc.userMod.service.UserServiceImpl@69a3d1d                UserDao ud = ac.getBean(&quot;userDaoImpl&quot;, UserDaoImpl.class);        System.out.println(ud);//com.atguigu.ioc.userMod.dao.UserDaoImpl@86be70a    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用注解配置bean&quot;&gt;&lt;a href=&quot;#使用注解配置bean&quot; class=&quot;headerlink&quot; title=&quot;使用注解配置bean&quot;&gt;&lt;/a&gt;使用注解配置bean&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/03/06/%E4%BD</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="使用注解配置bean" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AEbean/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring | 自动装配</title>
    <link href="http://example.com/2022/03/06/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    <id>http://example.com/2022/03/06/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/</id>
    <published>2022-03-06T08:00:49.000Z</published>
    <updated>2022-03-06T08:16:07.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自动装配（自动为属性赋值）"><a href="#自动装配（自动为属性赋值）" class="headerlink" title="自动装配（自动为属性赋值）"></a>自动装配（自动为属性赋值）</h1><p>1.项目目录<br><img src="/2022/03/06/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/1.PNG"></p><p>2.Emp.java</p><pre><code>package com.atguigu.ioc.auto;public class Emp &#123;    private Integer eid;    private String ename;    //private Car car;//类型可以写该类以及该类的父类    private CarExtends car;    //private Dept dept;//类型可以写该类以及该类的父类    private DeptI dept;    public Integer getEid() &#123;        return eid;    &#125;    public void setEid(Integer eid) &#123;        this.eid = eid;    &#125;    public String getEname() &#123;        return ename;    &#125;    public void setEname(String ename) &#123;        this.ename = ename;    &#125;    public CarExtends getCar() &#123;        return car;    &#125;    public void setCar(CarExtends car) &#123;        this.car = car;    &#125;    public DeptI getDept() &#123;        return dept;    &#125;    public void setDept(DeptI dept) &#123;        this.dept = dept;    &#125;    @Override    public String toString() &#123;        return &quot;Emp [eid=&quot; + eid + &quot;, ename=&quot; + ename + &quot;, car=&quot; + car + &quot;, dept=&quot; + dept + &quot;]&quot;;    &#125;    &#125;</code></pre><p>3.CarExtends.java(Car的父类)</p><pre><code>package com.atguigu.ioc.auto;public class CarExtends &#123;&#125;</code></pre><p>4.Car.java</p><pre><code>package com.atguigu.ioc.auto;public class Emp &#123;    private Integer eid;    private String ename;    //private Car car;//类型可以写该类以及该类的父类    private CarExtends car;    //private Dept dept;//类型可以写该类以及该类的父类    private DeptI dept;    public Integer getEid() &#123;        return eid;    &#125;    public void setEid(Integer eid) &#123;        this.eid = eid;    &#125;    public String getEname() &#123;        return ename;    &#125;    public void setEname(String ename) &#123;        this.ename = ename;    &#125;    public CarExtends getCar() &#123;        return car;    &#125;    public void setCar(CarExtends car) &#123;        this.car = car;    &#125;    public DeptI getDept() &#123;        return dept;    &#125;    public void setDept(DeptI dept) &#123;        this.dept = dept;    &#125;    @Override    public String toString() &#123;        return &quot;Emp [eid=&quot; + eid + &quot;, ename=&quot; + ename + &quot;, car=&quot; + car + &quot;, dept=&quot; + dept + &quot;]&quot;;    &#125;    &#125;</code></pre><p>5.DeptI.java（接口）</p><pre><code>package com.atguigu.ioc.auto;public interface DeptI &#123;&#125;</code></pre><p>6.Dept.java（DeptI接口的实现类）</p><pre><code>package com.atguigu.ioc.auto;public class Dept implements DeptI&#123;    private Integer did;    private String dname;    public Integer getDid() &#123;        return did;    &#125;    public void setDid(Integer did) &#123;        this.did = did;    &#125;    public String getDname() &#123;        return dname;    &#125;    public void setDname(String dname) &#123;        this.dname = dname;    &#125;&#125;</code></pre><p>7.auto.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;        &lt;!--        autowire:根据某种策略自动未非字面量属性赋值        autowire=&quot;byName|byType&quot;        byName:通过属性名和spring容器中bean的id进行比较，若一致则可直接赋值        byType:通过spring容器中bean的类型，为兼容性（子类对象为父类赋值，实现类为接口赋值）的属性赋值                 在使用byType的过程中，要求spring容器中只能有一个能为属性赋值的bean                选用建议：当设置autowire属性，会最作用于该bean中所有的非字面量属性，因此谁都不用     --&gt;        &lt;bean id=&quot;emp&quot; class=&quot;com.atguigu.ioc.auto.Emp&quot; autowire=&quot;byName&quot;&gt;&lt;!-- byName/byType --&gt;        &lt;property name=&quot;eid&quot; value=&quot;1001&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;ename&quot; value=&quot;张三&quot;&gt;&lt;/property&gt;        &lt;!-- &lt;property name=&quot;car&quot; ref=&quot;car&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt; --&gt;    &lt;/bean&gt;        &lt;bean id=&quot;car&quot; class=&quot;com.atguigu.ioc.auto.Car&quot;&gt;        &lt;property name=&quot;cid&quot; value=&quot;666666&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;cname&quot; value=&quot;霸道&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;bean id=&quot;dept&quot; class=&quot;com.atguigu.ioc.auto.Dept&quot;&gt;        &lt;property name=&quot;did&quot; value=&quot;1111&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;dname&quot; value=&quot;开发部&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><p>8.Test.java</p><pre><code>package com.atguigu.ioc.auto;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class Test &#123;    public static void main(String[] args) &#123;        // TODO Auto-generated method stub        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;auto.xml&quot;);                Emp bean = ac.getBean(&quot;emp&quot;, Emp.class);                System.out.println(bean);    &#125;&#125;</code></pre><p>9.运行结果</p><pre><code>Emp [eid=1001, ename=张三, car=com.atguigu.ioc.auto.Car@31ef45e3, dept=com.atguigu.ioc.auto.Dept@598067a5]</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自动装配（自动为属性赋值）&quot;&gt;&lt;a href=&quot;#自动装配（自动为属性赋值）&quot; class=&quot;headerlink&quot; title=&quot;自动装配（自动为属性赋值）&quot;&gt;&lt;/a&gt;自动装配（自动为属性赋值）&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="自动装配（自动为属性赋值）" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%EF%BC%88%E8%87%AA%E5%8A%A8%E4%B8%BA%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC%EF%BC%89/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring | 引用外部属性文件</title>
    <link href="http://example.com/2022/03/05/%E5%BC%95%E7%94%A8%E5%A4%96%E9%83%A8%E5%B1%9E%E6%80%A7%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2022/03/05/%E5%BC%95%E7%94%A8%E5%A4%96%E9%83%A8%E5%B1%9E%E6%80%A7%E6%96%87%E4%BB%B6/</id>
    <published>2022-03-06T07:58:42.000Z</published>
    <updated>2022-03-06T08:15:14.354Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引用外部属性文件"><a href="#引用外部属性文件" class="headerlink" title="引用外部属性文件"></a>引用外部属性文件</h1><p>1.项目目录<br><img src="/2022/03/05/%E5%BC%95%E7%94%A8%E5%A4%96%E9%83%A8%E5%B1%9E%E6%80%A7%E6%96%87%E4%BB%B6/1.PNG"></p><p>2.导入druid-1.1.9.jar、mysql-connector-java-5.1.7-bin.jar</p><p>3.db.properties</p><pre><code># k = vjdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/testjdbc.username=rootjdbc.password=123456</code></pre><p>4.datasource.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;        &lt;!-- 直接配置 --&gt;    &lt;!-- &lt;bean id=&quot;datasource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;password&quot; value=&quot;123456&quot;&gt;&lt;/property&gt;    &lt;/bean&gt; --&gt;        &lt;!-- 加载资源文件（引用外部资源文件） --&gt;    &lt;!-- &lt;bean class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;        &lt;property name=&quot;location&quot; value=&quot;db.properties&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;    &lt;bean id=&quot;datasource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt;    &lt;/bean&gt; --&gt;        &lt;!-- 使用context标签加载资源文件（引用外部属性文件） --&gt;    &lt;context:property-placeholder location=&quot;db.properties&quot;/&gt;    &lt;bean class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;        &lt;property name=&quot;location&quot; value=&quot;db.properties&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;    &lt;bean id=&quot;datasource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt;    &lt;/bean&gt; &lt;/beans&gt;</code></pre><p>5.Test.java</p><pre><code>package com.atguigu.ioc.datasource;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;import com.alibaba.druid.pool.DruidDataSource;public class Test &#123;    public static void main(String[] args) throws Exception &#123;        // TODO Auto-generated method stub        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;datasource.xml&quot;);                DruidDataSource bean = ac.getBean(&quot;datasource&quot;, DruidDataSource.class);                System.out.println(bean);                //System.out.println(bean.getConnection());    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;引用外部属性文件&quot;&gt;&lt;a href=&quot;#引用外部属性文件&quot; class=&quot;headerlink&quot; title=&quot;引用外部属性文件&quot;&gt;&lt;/a&gt;引用外部属性文件&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/03/05/%E5%BC%95%E7%9</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="引用外部属性文件" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/%E5%BC%95%E7%94%A8%E5%A4%96%E9%83%A8%E5%B1%9E%E6%80%A7%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring | bean的生命周期</title>
    <link href="http://example.com/2022/03/05/bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://example.com/2022/03/05/bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2022-03-06T07:55:51.000Z</published>
    <updated>2022-03-06T08:15:14.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="bean的生命周期、bean的后置处理器"><a href="#bean的生命周期、bean的后置处理器" class="headerlink" title="bean的生命周期、bean的后置处理器"></a>bean的生命周期、bean的后置处理器</h1><p>1.项目目录<br><img src="/2022/03/05/bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/1.PNG"></p><p>2.bean的生命周期（******）<br>① 通过构造器或工厂方法创建bean实例<br>② 为bean的属性设置值和对其他bean的引用<br>③ 调用bean的初始化方法<br>④  bean可以使用了<br>⑤ 当容器关闭时，调用bean的销毁方法</p><p>3.Person.java</p><pre><code>package com.atguigu.ioc.life;public class Person &#123;    private Integer id;    private String sex;    private String name;        public Integer getId() &#123;        return id;    &#125;        public void setId(Integer id) &#123;        System.out.println(&quot;Two:依赖注入&quot;);        this.id = id;    &#125;        public String getSex() &#123;        return sex;    &#125;        public void setSex(String sex) &#123;        this.sex = sex;    &#125;        public String getName() &#123;        return name;    &#125;        public void setName(String name) &#123;        this.name = name;    &#125;        public Person() &#123;        System.out.println(&quot;One:创建对象&quot;);    &#125;        public void init()&#123;        System.out.println(&quot;Three:初始化&quot;);    &#125;            @Override    public String toString() &#123;        return &quot;Four: Person [id=&quot; + id + &quot;, sex=&quot; + sex + &quot;, name=&quot; + name + &quot;]&quot;;    &#125;    public void destroy()&#123;        System.out.println(&quot;Five:销毁&quot;);    &#125;&#125;</code></pre><p>4.AfterHandler.java(后置处理器)</p><pre><code>package com.atguigu.ioc.life;import org.springframework.beans.BeansException;import org.springframework.beans.factory.config.BeanPostProcessor;public class AfterHandler implements BeanPostProcessor&#123;    @Override    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123;        // TODO Auto-generated method stub        return bean;    &#125;    @Override    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123;        Person person = (Person)bean;        if(person.getSex().equals(&quot;男&quot;))&#123;            person.setName(&quot;张无忌&quot;);        &#125;else&#123;            person.setName(&quot;赵敏&quot;);        &#125;        return person;    &#125; &#125;</code></pre><p>5.life.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;        &lt;!-- 测试bean的生命周期 --&gt;    &lt;bean id=&quot;person&quot; class=&quot;com.atguigu.ioc.life.Person&quot; init-method=&quot;init&quot; destroy-method=&quot;destroy&quot;&gt;        &lt;property name=&quot;id&quot; value=&quot;1001&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;sex&quot; value=&quot;男&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;!-- 测试后置处理器 --&gt;    &lt;bean class=&quot;com.atguigu.ioc.life.AfterHandler&quot;&gt;&lt;/bean&gt;&lt;/beans&gt;</code></pre><p>6.Test.java</p><pre><code>package com.atguigu.ioc.life;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class Test &#123;    public static void main(String[] args) &#123;        // TODO Auto-generated method stub        ClassPathXmlApplicationContext ac = new ClassPathXmlApplicationContext(&quot;life.xml&quot;);                Person person = ac.getBean(&quot;person&quot;, Person.class);        System.out.println(person);                ac.close();    &#125;&#125;</code></pre><p>7.运行结果</p><pre><code>One:创建对象Two:依赖注入Three:初始化Four: Person [id=1001, sex=男, name=张无忌]二月 15, 2022 4:34:28 下午 org.springframework.context.support.ClassPathXmlApplicationContext doClose信息: Closing org.springframework.context.support.ClassPathXmlApplicationContext@2dda6444: startup date [Tue Feb 15 16:34:27 CST 2022]; root of context hierarchyFive:销毁</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;bean的生命周期、bean的后置处理器&quot;&gt;&lt;a href=&quot;#bean的生命周期、bean的后置处理器&quot; class=&quot;headerlink&quot; title=&quot;bean的生命周期、bean的后置处理器&quot;&gt;&lt;/a&gt;bean的生命周期、bean的后置处理器&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="bean的生命周期、bean的后置处理器" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E3%80%81bean%E7%9A%84%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring | bean的作用域</title>
    <link href="http://example.com/2022/03/05/bean%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://example.com/2022/03/05/bean%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/</id>
    <published>2022-03-06T07:53:10.000Z</published>
    <updated>2022-03-06T08:15:25.213Z</updated>
    
    <content type="html"><![CDATA[<h1 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h1><p>1.项目目录<br><img src="/2022/03/05/bean%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/1.PNG"></p><p>2.Student.java</p><pre><code>package com.atguigu.ioc.scope;public class Student &#123;    private Integer sid;    private String sname;    public Student() &#123;        System.out.println(&quot;Student 无参构造方法&quot;);    &#125;    public Integer getSid() &#123;        return sid;    &#125;    public void setSid(Integer sid) &#123;        this.sid = sid;    &#125;    public String getSname() &#123;        return sname;    &#125;    public void setSname(String sname) &#123;        this.sname = sname;    &#125;//    @Override//    public String toString() &#123;//        return &quot;Student [sid=&quot; + sid + &quot;, sname=&quot; + sname + &quot;]&quot;;//    &#125;&#125;</code></pre><p>3.scope.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;        &lt;bean id=&quot;student&quot; class=&quot;com.atguigu.ioc.scope.Student&quot; scope=&quot;singleton&quot;&gt;        &lt;property name=&quot;sid&quot; value=&quot;1001&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;sname&quot; value=&quot;张三&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><p>4.Test.java</p><pre><code>package com.atguigu.ioc.scope;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class Test &#123;    public static void main(String[] args)&#123;        /**         * 若spring中有单例模式（singleton）的bean，在初始化容器时就会创建此对象         * 而多例即原型(prototype)的bean，会在使用时创建         */        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;scope.xml&quot;);        //        Student student1 = ac.getBean(&quot;student&quot;,Student.class);//        Student student2 = ac.getBean(&quot;student&quot;,Student.class);//        //        System.out.println(student1);//        System.out.println(student2);    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;bean的作用域&quot;&gt;&lt;a href=&quot;#bean的作用域&quot; class=&quot;headerlink&quot; title=&quot;bean的作用域&quot;&gt;&lt;/a&gt;bean的作用域&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/03/05/bean%E7%9A%84%</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="bean的作用域" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/bean%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring | FactoryBean</title>
    <link href="http://example.com/2022/03/05/FactoryBean/"/>
    <id>http://example.com/2022/03/05/FactoryBean/</id>
    <published>2022-03-06T07:49:32.000Z</published>
    <updated>2022-03-06T08:15:29.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h1><p>Spring中有两种类型的bean，一种是普通bean，另一种是工厂bean，即FactoryBean。工厂bean跟普通bean不同，其返回的对象不是指定类的一个实例，其返回的是该工厂bean的getObject方法所返回的对象。<br><strong>示例：</strong><br>1.项目目录<br><img src="/2022/03/05/FactoryBean/1.PNG"></p><p>2.Car.java</p><pre><code>package com.atguigu.spring.factorybean;public class Car &#123;    private String brand;    private Double price;    public String getBrand() &#123;        return brand;    &#125;    public void setBrand(String brand) &#123;        this.brand = brand;    &#125;    @Override    public String toString() &#123;        return &quot;Car [brand=&quot; + brand + &quot;, price=&quot; + price + &quot;]&quot;;    &#125;    public Double getPrice() &#123;        return price;    &#125;    public void setPrice(Double price) &#123;        this.price = price;    &#125;    &#125;</code></pre><p>3.MyFactory.java</p><pre><code>package com.atguigu.spring.factorybean;import org.springframework.beans.factory.FactoryBean;public class MyFactory implements FactoryBean&lt;Car&gt;&#123;    @Override    public Car getObject() throws Exception &#123;        Car car = new Car();        car.setBrand(&quot;奥迪&quot;);        car.setPrice(200000.0);        return car;    &#125;    @Override    public Class&lt;?&gt; getObjectType() &#123;        return Car.class;    &#125;    @Override    public boolean isSingleton() &#123;        return false;    &#125;&#125;</code></pre><p>4.factory-bean.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;        &lt;!-- 工厂bean --&gt;    &lt;bean id=&quot;factory&quot; class=&quot;com.atguigu.spring.factorybean.MyFactory&quot;&gt;&lt;/bean&gt;&lt;/beans&gt;</code></pre><p>5.Test.java</p><pre><code>package com.atguigu.spring.factorybean;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class Test &#123;    public static void main(String[] args) &#123;        // TODO Auto-generated method stub        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;factory-bean.xml&quot;);        Object bean = ac.getBean(&quot;factory&quot;);        System.out.println(bean);    &#125;&#125;</code></pre><p>6.运行结果<br>Car [brand=奥迪, price=200000.0]</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;FactoryBean&quot;&gt;&lt;a href=&quot;#FactoryBean&quot; class=&quot;headerlink&quot; title=&quot;FactoryBean&quot;&gt;&lt;/a&gt;FactoryBean&lt;/h1&gt;&lt;p&gt;Spring中有两种类型的bean，一种是普通bean，另一种是工厂</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="FactoryBean" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/FactoryBean/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring | 属性赋值</title>
    <link href="http://example.com/2022/03/05/%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC/"/>
    <id>http://example.com/2022/03/05/%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC/</id>
    <published>2022-03-06T07:45:07.000Z</published>
    <updated>2022-03-06T08:15:37.988Z</updated>
    
    <content type="html"><![CDATA[<h1 id="属性赋值-字面量和ref"><a href="#属性赋值-字面量和ref" class="headerlink" title="属性赋值-字面量和ref"></a>属性赋值-字面量和ref</h1><p>spring管理对象时，可以使用<property></property>标签给对象的属性赋值。<br>1.字面量<br><property name="name" vlaue="张三"></property><br><property name="age" vlaue="23"></property><br>…..<br>2.外部已声明的bean引用其他的bean(使用ref属性)<br>3.内部bean<br>4.集合属性赋值（list/array/set）<br>示例：<br>1.项目目录<br><img src="/2022/03/05/%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC/2.PNG"><br>2.Student.java</p><pre><code>package com.atguigu.spring.di;public class Student &#123;    private Integer id;    private String name;    private Integer age;    private String sex;    private Double score;    private Teacher teacher;            public Teacher getTeacher() &#123;        return teacher;    &#125;    public void setTeacher(Teacher teacher) &#123;        this.teacher = teacher;    &#125;    public Double getScore() &#123;        return score;    &#125;        public void setScore(Double score) &#123;        this.score = score;    &#125;        public Integer getId() &#123;        return id;    &#125;        public void setId(Integer id) &#123;        this.id = id;    &#125;        public String getName() &#123;        return name;    &#125;        public void setName(String name) &#123;        this.name = name;    &#125;        public Integer getAge() &#123;        return age;    &#125;        public void setAge(Integer age) &#123;        this.age = age;    &#125;        public String getSex() &#123;        return sex;    &#125;        public void setSex(String sex) &#123;        this.sex = sex;    &#125;        @Override    public String toString() &#123;        return &quot;Student [id=&quot; + id + &quot;, name=&quot; + name + &quot;, age=&quot; + age + &quot;, sex=&quot; + sex + &quot;, score=&quot; + score                + &quot;, teacher=&quot; + teacher + &quot;]&quot;;    &#125;    public Student() &#123;        super();        // TODO Auto-generated constructor stub    &#125;        public Student(Integer id, String name, Integer age, String sex) &#123;        super();        this.id = id;        this.name = name;        this.age = age;        this.sex = sex;    &#125;        public Student(Integer id, String name, Double score, String sex)&#123;        this.id = id;        this.name = name;        this.score = score;        this.sex = sex;    &#125;&#125;</code></pre><p>3.Teacher.java</p><pre><code>package com.atguigu.spring.di;import java.util.List;import java.util.Map;public class Teacher &#123;    private Integer tid;        private String tname;        private List&lt;String&gt; cls;        private List&lt;Student&gt; students;        private Map&lt;String, String&gt; bossMap;        public Map&lt;String, String&gt; getBossMap() &#123;        return bossMap;    &#125;    public void setBossMap(Map&lt;String, String&gt; bossMap) &#123;        this.bossMap = bossMap;    &#125;    public List&lt;Student&gt; getStudents() &#123;        return students;    &#125;    public void setStudents(List&lt;Student&gt; students) &#123;        this.students = students;    &#125;    public List&lt;String&gt; getCls() &#123;        return cls;    &#125;    public void setCls(List&lt;String&gt; cls) &#123;        this.cls = cls;    &#125;    public Integer getTid() &#123;        return tid;    &#125;    public void setTid(Integer tid) &#123;        this.tid = tid;    &#125;    public String getTname() &#123;        return tname;    &#125;    public void setTname(String tname) &#123;        this.tname = tname;    &#125;    @Override    public String toString() &#123;        return &quot;Teacher [tid=&quot; + tid + &quot;, tname=&quot; + tname + &quot;, cls=&quot; + cls + &quot;, students=&quot; + students + &quot;, bossMap=&quot;                + bossMap + &quot;]&quot;;    &#125;        &#125;</code></pre><p>5.beans-di.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:p=&quot;http://www.springframework.org/schema/p&quot;    xmlns:util=&quot;http://www.springframework.org/schema/util&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd&quot;&gt;    &lt;bean id=&quot;s1&quot; class=&quot;com.atguigu.spring.di.Student&quot;&gt;        &lt;!-- 通过set方法注入 --&gt;        &lt;property name=&quot;id&quot; value=&quot;10010&quot;&gt;&lt;/property&gt;        &lt;!--             &lt;property name=&quot;id&quot;&gt;                &lt;value&gt;10010&lt;/value&gt;            &lt;/property&gt;         --&gt;                 &lt;property name=&quot;name&quot; value=&quot;张三&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;age&quot; value=&quot;23&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;sex&quot; value=&quot;男&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;            &lt;bean id=&quot;s2&quot; class=&quot;com.atguigu.spring.di.Student&quot;&gt;        &lt;!-- 通过构造方法注入 --&gt;        &lt;constructor-arg value=&quot;10086&quot;&gt;&lt;/constructor-arg&gt;        &lt;constructor-arg value=&quot;李四&quot;&gt;&lt;/constructor-arg&gt;        &lt;constructor-arg value=&quot;24&quot;&gt;&lt;/constructor-arg&gt;        &lt;constructor-arg value=&quot;女&quot;&gt;&lt;/constructor-arg&gt;    &lt;/bean&gt;        &lt;bean id=&quot;s3&quot; class=&quot;com.atguigu.spring.di.Student&quot;&gt;        &lt;!-- 通过构造方法注入 --&gt;        &lt;constructor-arg value=&quot;10022&quot;&gt;&lt;/constructor-arg&gt;        &lt;constructor-arg value=&quot;王五&quot;&gt;&lt;/constructor-arg&gt;        &lt;constructor-arg value=&quot;90&quot; index=&quot;2&quot; type=&quot;java.lang.Double&quot;&gt;&lt;/constructor-arg&gt;        &lt;constructor-arg value=&quot;女&quot;&gt;&lt;/constructor-arg&gt;    &lt;/bean&gt;        &lt;!-- Namespaces勾选p（beans标签会增加内容xmlns:p=&quot;http://www.springframework.org/schema/p&quot;） --&gt;    &lt;bean id=&quot;s4&quot; class=&quot;com.atguigu.spring.di.Student&quot; p:id=&quot;10033&quot; p:name=&quot;赵六&quot; p:age=&quot;26&quot; p:sex=&quot;男&quot; p:teacher-ref=&quot;teacher&quot;&gt;&lt;/bean&gt;        &lt;!-- 给bean的级联属性赋值 --&gt;    &lt;bean id=&quot;s5&quot; class=&quot;com.atguigu.spring.di.Student&quot;&gt;        &lt;property name=&quot;id&quot; value=&quot;10055&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;name&quot; value=&quot;张三三&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;age&quot; value=&quot;23&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;sex&quot; value=&quot;男&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;teacher&quot; ref=&quot;teacher&quot;&gt;&lt;/property&gt;                &lt;!-- 级联测试 给bean的级联属性赋值--&gt;        &lt;property name=&quot;teacher.tname&quot; value=&quot;小红&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;            &lt;!-- 外部已声明的bean、引用其他的bean --&gt;    &lt;bean id=&quot;teacher&quot; class=&quot;com.atguigu.spring.di.Teacher&quot;&gt;        &lt;property name=&quot;tid&quot; value=&quot;10000&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;tname&quot; value=&quot;小明&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;!-- 内部bean --&gt;    &lt;bean id=&quot;s6&quot; class=&quot;com.atguigu.spring.di.Student&quot;&gt;        &lt;property name=&quot;id&quot; value=&quot;10066&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;name&quot; value=&quot;崔八&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;age&quot; value=&quot;18&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;sex&quot; value=&quot;男&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;teacher&quot;&gt;            &lt;bean id=&quot;tt&quot; class=&quot;com.atguigu.spring.di.Teacher&quot;&gt;                &lt;property name=&quot;tid&quot; value=&quot;2222&quot;&gt;&lt;/property&gt;                &lt;property name=&quot;tname&quot; value=&quot;admin&quot;&gt;&lt;/property&gt;            &lt;/bean&gt;        &lt;/property&gt;    &lt;/bean&gt;    &lt;!-- 定义在某个bean内部的bean，只能在当前bean中使用 --&gt;    &lt;!--         &lt;bean id=&quot;s7&quot; class=&quot;com.atguigu.spring.di.Student&quot;&gt;            &lt;property name=&quot;id&quot; value=&quot;10066&quot;&gt;&lt;/property&gt;            &lt;property name=&quot;name&quot; value=&quot;崔八&quot;&gt;&lt;/property&gt;            &lt;property name=&quot;age&quot; value=&quot;18&quot;&gt;&lt;/property&gt;            &lt;property name=&quot;sex&quot; value=&quot;男&quot;&gt;&lt;/property&gt;            &lt;property name=&quot;teacher&quot; ref=&quot;tt&quot;&gt;            &lt;/property&gt;        &lt;/bean&gt;     --&gt;          &lt;!-- list属性赋值1 --&gt;     &lt;bean id=&quot;t1&quot; class=&quot;com.atguigu.spring.di.Teacher&quot;&gt;        &lt;property name=&quot;tid&quot; value=&quot;0000&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;tname&quot; value=&quot;佟老师&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;cls&quot;&gt;            &lt;list&gt;                &lt;value&gt;A&lt;/value&gt;                &lt;value&gt;B&lt;/value&gt;                &lt;value&gt;C&lt;/value&gt;            &lt;/list&gt;        &lt;/property&gt;     &lt;/bean&gt;          &lt;!-- list属性赋值2 --&gt;     &lt;bean id=&quot;t2&quot; class=&quot;com.atguigu.spring.di.Teacher&quot;&gt;        &lt;property name=&quot;tid&quot; value=&quot;10002&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;tname&quot; value=&quot;婷姐&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;students&quot;&gt;            &lt;list&gt;                &lt;ref bean=&quot;s1&quot;/&gt;                &lt;ref bean=&quot;s2&quot;/&gt;                &lt;ref bean=&quot;s3&quot;/&gt;            &lt;/list&gt;        &lt;/property&gt;     &lt;/bean&gt;          &lt;!-- array属性赋值 --&gt;     &lt;!-- set属性赋值 --&gt;          &lt;!-- map属性赋值 --&gt;     &lt;bean id=&quot;t3&quot; class=&quot;com.atguigu.spring.di.Teacher&quot;&gt;        &lt;property name=&quot;tid&quot; value=&quot;10003&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;tname&quot; value=&quot;admin&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;bossMap&quot;&gt;            &lt;map&gt;                &lt;entry&gt;                    &lt;key&gt;                        &lt;value&gt;10001&lt;/value&gt;                    &lt;/key&gt;                    &lt;value&gt;佟老师&lt;/value&gt;                &lt;/entry&gt;                                &lt;entry&gt;                    &lt;key&gt;                        &lt;value&gt;10002&lt;/value&gt;                    &lt;/key&gt;                    &lt;value&gt;陈老师&lt;/value&gt;                &lt;/entry&gt;            &lt;/map&gt;        &lt;/property&gt;     &lt;/bean&gt;          &lt;bean id=&quot;t4&quot; class=&quot;com.atguigu.spring.di.Teacher&quot;&gt;        &lt;property name=&quot;tid&quot; value=&quot;10004&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;tname&quot; value=&quot;root&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;students&quot; ref=&quot;students&quot;&gt;&lt;/property&gt;     &lt;/bean&gt;        &lt;util:list id=&quot;students&quot;&gt;        &lt;ref bean=&quot;s4&quot;/&gt;        &lt;ref bean=&quot;s5&quot;/&gt;        &lt;ref bean=&quot;s6&quot;/&gt;    &lt;/util:list&gt;        &lt;util:map id=&quot;map&quot;&gt;        &lt;entry&gt;            &lt;key&gt;                &lt;value&gt;1&lt;/value&gt;            &lt;/key&gt;            &lt;value&gt;张三&lt;/value&gt;        &lt;/entry&gt;    &lt;/util:map&gt;&lt;/beans&gt;</code></pre><p>6.Test.java</p><pre><code>package com.atguigu.spring.di;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class Test &#123;    public static void main(String[] args) &#123;        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;beans-di.xml&quot;);                Student s1 = ac.getBean(&quot;s1&quot;, Student.class);        Student s2 = ac.getBean(&quot;s2&quot;, Student.class);        Student s3 = ac.getBean(&quot;s3&quot;, Student.class);        Student s4 = ac.getBean(&quot;s4&quot;, Student.class);        Student s5 = ac.getBean(&quot;s5&quot;, Student.class);        Student s6 = ac.getBean(&quot;s6&quot;, Student.class);        Teacher t1 = ac.getBean(&quot;t1&quot;, Teacher.class);        Teacher t2 = ac.getBean(&quot;t2&quot;, Teacher.class);        Teacher t3 = ac.getBean(&quot;t3&quot;, Teacher.class);        Teacher t4 = ac.getBean(&quot;t4&quot;, Teacher.class);                System.out.println(s1);        System.out.println(s2);        System.out.println(s3);        System.out.println(s4);        System.out.println(s5);        System.out.println(s6);        System.out.println(t1);        System.out.println(t2);        System.out.println(t3);        System.out.println(t4);    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;属性赋值-字面量和ref&quot;&gt;&lt;a href=&quot;#属性赋值-字面量和ref&quot; class=&quot;headerlink&quot; title=&quot;属性赋值-字面量和ref&quot;&gt;&lt;/a&gt;属性赋值-字面量和ref&lt;/h1&gt;&lt;p&gt;spring管理对象时，可以使用&lt;property&gt;&lt;/pr</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="依赖注入" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
    <category term="属性赋值" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring | 注入方式</title>
    <link href="http://example.com/2022/03/05/%E6%B3%A8%E5%85%A5%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2022/03/05/%E6%B3%A8%E5%85%A5%E6%96%B9%E5%BC%8F/</id>
    <published>2022-03-06T07:34:44.000Z</published>
    <updated>2022-03-06T08:15:46.579Z</updated>
    
    <content type="html"><![CDATA[<h1 id="依赖注入的两种方式"><a href="#依赖注入的两种方式" class="headerlink" title="依赖注入的两种方式"></a>依赖注入的两种方式</h1><ol><li>通过bean的setXxx()方法赋值</li><li>通过bean的构造器赋值<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2></li><li>项目目录<br><img src="/2022/03/05/%E6%B3%A8%E5%85%A5%E6%96%B9%E5%BC%8F/1.PNG"></li></ol><p>2.创建Student.java</p><pre><code>package com.atguigu.spring.di;public class Student &#123;    private Integer id;    private String name;    private Integer age;    private String sex;    private Double score;    public Double getScore() &#123;        return score;    &#125;    public void setScore(Double score) &#123;        this.score = score;    &#125;    public Integer getId() &#123;        return id;    &#125;    public void setId(Integer id) &#123;        this.id = id;    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name = name;    &#125;    public Integer getAge() &#123;        return age;    &#125;    public void setAge(Integer age) &#123;        this.age = age;    &#125;    public String getSex() &#123;        return sex;    &#125;    public void setSex(String sex) &#123;        this.sex = sex;    &#125;        @Override    public String toString() &#123;        return &quot;Student [id=&quot; + id + &quot;, name=&quot; + name + &quot;, age=&quot; + age + &quot;, sex=&quot; + sex + &quot;, score=&quot; + score + &quot;]&quot;;    &#125;    public Student() &#123;        super();        // TODO Auto-generated constructor stub    &#125;    public Student(Integer id, String name, Integer age, String sex) &#123;        super();        this.id = id;        this.name = name;        this.age = age;        this.sex = sex;    &#125;        public Student(Integer id, String name, Double score, String sex)&#123;        this.id = id;        this.name = name;        this.score = score;        this.sex = sex;    &#125;&#125;</code></pre><p>3.创建beans-di.xml配置文件</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:p=&quot;http://www.springframework.org/schema/p&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;    &lt;bean id=&quot;s1&quot; class=&quot;com.atguigu.spring.di.Student&quot;&gt;        &lt;!-- 通过set方法注入 --&gt;        &lt;property name=&quot;id&quot; value=&quot;10010&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;name&quot; value=&quot;张三&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;age&quot; value=&quot;23&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;sex&quot; value=&quot;男&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;            &lt;bean id=&quot;s2&quot; class=&quot;com.atguigu.spring.di.Student&quot;&gt;        &lt;!-- 通过构造方法注入 --&gt;        &lt;constructor-arg value=&quot;10086&quot;&gt;&lt;/constructor-arg&gt;        &lt;constructor-arg value=&quot;李四&quot;&gt;&lt;/constructor-arg&gt;        &lt;constructor-arg value=&quot;24&quot;&gt;&lt;/constructor-arg&gt;        &lt;constructor-arg value=&quot;女&quot;&gt;&lt;/constructor-arg&gt;    &lt;/bean&gt;        &lt;bean id=&quot;s3&quot; class=&quot;com.atguigu.spring.di.Student&quot;&gt;        &lt;!-- 通过构造方法注入 --&gt;        &lt;constructor-arg value=&quot;10022&quot;&gt;&lt;/constructor-arg&gt;        &lt;constructor-arg value=&quot;王五&quot;&gt;&lt;/constructor-arg&gt;        &lt;constructor-arg value=&quot;90&quot; index=&quot;2&quot; type=&quot;java.lang.Double&quot;&gt;&lt;/constructor-arg&gt;        &lt;constructor-arg value=&quot;女&quot;&gt;&lt;/constructor-arg&gt;    &lt;/bean&gt;    &lt;!-- Namespaces勾选p（beans标签会增加内容xmlns:p=&quot;http://www.springframework.org/schema/p&quot;） --&gt;    &lt;bean id=&quot;s4&quot; class=&quot;com.atguigu.spring.di.Student&quot; p:id=&quot;10033&quot; p:name=&quot;赵六&quot; p:age=&quot;26&quot; p:sex=&quot;男&quot;&gt;&lt;/bean&gt;&lt;/beans&gt;</code></pre><p>4.编写测试类</p><pre><code>package com.atguigu.spring.di;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class Test &#123;    public static void main(String[] args) &#123;        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;beans-di.xml&quot;);                Student s1 = ac.getBean(&quot;s1&quot;, Student.class);        Student s2 = ac.getBean(&quot;s2&quot;, Student.class);        Student s3 = ac.getBean(&quot;s3&quot;, Student.class);        Student s4 = ac.getBean(&quot;s4&quot;, Student.class);        System.out.println(s1);        System.out.println(s2);        System.out.println(s3);        System.out.println(s4);    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;依赖注入的两种方式&quot;&gt;&lt;a href=&quot;#依赖注入的两种方式&quot; class=&quot;headerlink&quot; title=&quot;依赖注入的两种方式&quot;&gt;&lt;/a&gt;依赖注入的两种方式&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;通过bean的setXxx()方法赋值&lt;/li&gt;
&lt;li&gt;通过bean的</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="依赖注入" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
    <category term="依赖注入的两种方式" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    
    
    <category term="p命名空间" scheme="http://example.com/tags/p%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
    
    <category term="依赖注入的两种方式" scheme="http://example.com/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>spring | spring简单案例</title>
    <link href="http://example.com/2022/01/27/spring%E7%AE%80%E5%8D%95%E6%A1%88%E4%BE%8B/"/>
    <id>http://example.com/2022/01/27/spring%E7%AE%80%E5%8D%95%E6%A1%88%E4%BE%8B/</id>
    <published>2022-01-27T11:24:34.000Z</published>
    <updated>2022-01-27T13:28:14.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring简单案例"><a href="#spring简单案例" class="headerlink" title="spring简单案例"></a>spring简单案例</h1><h2 id="使用软件：STS"><a href="#使用软件：STS" class="headerlink" title="使用软件：STS"></a>使用软件：STS</h2><p><a href="https://www.cnblogs.com/larryzeal/p/5800980.html">下载地址</a></p><h2 id="搭建spring运行时环境"><a href="#搭建spring运行时环境" class="headerlink" title="搭建spring运行时环境"></a>搭建spring运行时环境</h2><p>1.加入JAR包<br>1)Spring自身JAR包：spring-framework-4.0.0.RELEASE\libs目录下<br>spring-beans-4.0.0.RELEASE.jar<br>spring-context-4.0.0.RELE2ASE.jar<br>spring-core-4.0.0.RELEASE.jar<br>spring-expression-4.0.0.RELEASE.jar<br>2)commons-logging-1.1.1.jar<br>注：将以上所有的jar包复制到项目中的lib目录下并全选所有jar包–&gt;右键–&gt;build path–&gt;config bulid path<br>2.在Spring Tool Suite工具中通过如下步骤创建Spring的配置文件<br>1)File-&gt;New-&gt;Spring Bean Configuration File<br>2)为文件取名字 例如：applicationContext.xml<br><img src="/2022/01/27/spring%E7%AE%80%E5%8D%95%E6%A1%88%E4%BE%8B/1.PNG"></p><h2 id="创建一个类：Person-java"><a href="#创建一个类：Person-java" class="headerlink" title="创建一个类：Person.java"></a>创建一个类：Person.java</h2><pre><code>package com.atguigu.spring.mod;public class Person &#123;    private Integer id;    private String name;    public Integer getId() &#123;        return id;    &#125;    public void setId(Integer id) &#123;        this.id = id;    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name = name;    &#125;    @Override    public String toString() &#123;        return &quot;Person [id=&quot; + id + &quot;, name=&quot; + name + &quot;]&quot;;    &#125;    &#125;</code></pre><h2 id="常规方法操作对象"><a href="#常规方法操作对象" class="headerlink" title="常规方法操作对象"></a>常规方法操作对象</h2><p>创建一个测试类Test.java</p><pre><code>package com.atguigu.spring.mod;public class Test &#123;    public static void main(String[] args)&#123;        Person person = new Person();        person.setId(1);        person.setName(&quot;zhangsan&quot;);        System.out.println(person);    &#125;&#125;</code></pre><h2 id="spring管理对象"><a href="#spring管理对象" class="headerlink" title="spring管理对象"></a>spring管理对象</h2><p>1.创建applicationContext.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;    &lt;!-- 命名空间 规定当前的文件里面能写什么--&gt;    &lt;!--        &lt;bean&gt;：定义spring管理的一个对象        id:该对象的唯一标识，注意不能重复,在类型获取bean的过程中可以不设置        class:该对象所属类的全限定名     --&gt;        &lt;!-- 通过反射创建对象 --&gt;    &lt;bean id=&quot;person&quot; class=&quot;com.atguigu.spring.mod.Person&quot;&gt;        &lt;!--            &lt;property&gt;:为对象的某个属性赋值            name:属性名            value:属性值         --&gt;        &lt;property name=&quot;id&quot; value=&quot;1111&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;name&quot; value=&quot;小明&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;    &lt;/beans&gt;</code></pre><p>2.创建一个测试类TestBySpring.java</p><pre><code>package com.atguigu.spring.mod;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class TestBySpring &#123;    public static void main(String[] args) &#123;        //初始化容器        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);                //通过getBean()获取对象        Person person = (Person) ac.getBean(&quot;person&quot;);        System.out.println(person);    &#125;&#125;</code></pre><p><strong>注：IOC和DI</strong><br>反转控制（IOC）：对象的管理权（创建、赋值等）由程序员交给了spring容器<br>依赖注入（DI）:bean对象依赖于属性 向属性注入资源（赋值）<br>总结: IOC 就是一种反转控制的思想， 而DI是对IOC的一种具体实现。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;spring简单案例&quot;&gt;&lt;a href=&quot;#spring简单案例&quot; class=&quot;headerlink&quot; title=&quot;spring简单案例&quot;&gt;&lt;/a&gt;spring简单案例&lt;/h1&gt;&lt;h2 id=&quot;使用软件：STS&quot;&gt;&lt;a href=&quot;#使用软件：STS&quot; cla</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="spring简单案例" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/spring%E7%AE%80%E5%8D%95%E6%A1%88%E4%BE%8B/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="框架" scheme="http://example.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="IOC" scheme="http://example.com/tags/IOC/"/>
    
    <category term="DI" scheme="http://example.com/tags/DI/"/>
    
    <category term="控制反转" scheme="http://example.com/tags/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC/"/>
    
    <category term="依赖注入" scheme="http://example.com/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>框架 | Java中的6大框架</title>
    <link href="http://example.com/2022/01/26/Java%E4%B8%AD%E7%9A%846%E5%A4%A7%E6%A1%86%E6%9E%B6/"/>
    <id>http://example.com/2022/01/26/Java%E4%B8%AD%E7%9A%846%E5%A4%A7%E6%A1%86%E6%9E%B6/</id>
    <published>2022-01-27T04:48:39.000Z</published>
    <updated>2022-01-27T04:52:32.894Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java中的6大框架"><a href="#Java中的6大框架" class="headerlink" title="Java中的6大框架"></a>Java中的6大框架</h1><p><strong>6大框架</strong><br>1)structs1<br>2)structs2<br>3)hibernate<br>4)spring<br>5)springMVC<br>6)mybatis<br><strong>SSM</strong><br><strong>SSM=spring+springMVC+mybatis</strong><br><strong>框架分类</strong><br>MVC框架：struts1(封装了servlet),struts2(封装了filter),springMVC<br>持久层框架：hibernate,mybatis<br>整合型框架，设计型框架：spring</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java中的6大框架&quot;&gt;&lt;a href=&quot;#Java中的6大框架&quot; class=&quot;headerlink&quot; title=&quot;Java中的6大框架&quot;&gt;&lt;/a&gt;Java中的6大框架&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;6大框架&lt;/strong&gt;&lt;br&gt;1)structs1&lt;br</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Java中的6大框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/Java%E4%B8%AD%E7%9A%846%E5%A4%A7%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="框架" scheme="http://example.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb项目开发 | 事务</title>
    <link href="http://example.com/2022/01/26/%E4%BA%8B%E5%8A%A1/"/>
    <id>http://example.com/2022/01/26/%E4%BA%8B%E5%8A%A1/</id>
    <published>2022-01-26T11:46:22.000Z</published>
    <updated>2022-01-26T12:09:44.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>当我们一次需要执行多条sql语句时就要考虑控制事务以避免出现一些错误。<br>例如：当我们从一个账户给另一个账户转账时，假设第一个账户的余额已经扣除，此时电脑断电了，<br>第二个账户的余额也没有增加；为了避免此类事情的发生，我们可以对事物进行控制，要么增扣除和增加都成功，<br>要么扣除、增加都失败。<br><strong>创建表user</strong></p><pre><code>CREATE TABLE user(id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,NAME VARCHAR(20),balance DOUBLE);</code></pre><p><strong>创建测试类Test1.java</strong></p><pre><code>package com.oracle.test;import java.sql.SQLException;import org.apache.commons.dbutils.QueryRunner;import com.oracle.utils.DataSourceUtils;public class Test1 &#123;    public static void main(String[] args)&#123;        try &#123;            //开启事务            DataSourceUtils.startTransaction();            //创建QueryRunner对象            QueryRunner qr = new QueryRunner();            //编写sql语句            String sql1 = &quot;update user set balance=balance-500 where id=1&quot;;            String sql2 = &quot;update user set balance=balance+500 where id=2&quot;;            //执行sql            qr.update(DataSourceUtils.getConnection(), sql1);                        //失败            int c=100/0;                        qr.update(DataSourceUtils.getConnection(), sql2);            //事务提交            DataSourceUtils.commitAndRelease();            //关闭事务            DataSourceUtils.closeConnection();        &#125; catch (Exception e) &#123;            //失败则回滚            try &#123;                DataSourceUtils.rollback();            &#125; catch (Exception e1) &#123;                // TODO Auto-generated catch block                e1.printStackTrace();            &#125;        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h1&gt;&lt;p&gt;当我们一次需要执行多条sql语句时就要考虑控制事务以避免出现一些错误。&lt;br&gt;例如：当我们从一个账户给另一个账户转账时，假设第一个账户的余额</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="JavaWeb项目开发" scheme="http://example.com/categories/Java/JavaWeb%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
    
    <category term="事务" scheme="http://example.com/categories/Java/JavaWeb%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/%E4%BA%8B%E5%8A%A1/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="事务" scheme="http://example.com/tags/%E4%BA%8B%E5%8A%A1/"/>
    
    <category term="数据库" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb项目开发 | QueryRunner和数据库增删改查操作</title>
    <link href="http://example.com/2022/01/26/QueryRunner%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2022/01/26/QueryRunner%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%93%8D%E4%BD%9C/</id>
    <published>2022-01-26T11:10:13.000Z</published>
    <updated>2022-01-26T12:02:34.184Z</updated>
    
    <content type="html"><![CDATA[<h1 id="QueryRunner和数据库增删改查操"><a href="#QueryRunner和数据库增删改查操" class="headerlink" title="QueryRunner和数据库增删改查操"></a>QueryRunner和数据库增删改查操</h1><p>基于<a href="https://victory-liao.github.io/2022/01/25/jdbc/">JavaWeb项目开发 | jdbc</a>中的配置编写以下代码实现数据库的增删改查（CRUD）。<br><strong>在test1数据库中建表dept</strong></p><pre><code>create table dept(int id primary key auto_increment not null,varchar(20) name)</code></pre><p><strong>Dept.java（JavaBean）</strong></p><pre><code>package com.oracle.bean;public class Dept &#123;    private int id;    private String name;    public Dept() &#123;        super();        // TODO Auto-generated constructor stub    &#125;    public Dept(int id, String name) &#123;        super();        this.id = id;        this.name = name;    &#125;    public int getId() &#123;        return id;    &#125;    public void setId(int id) &#123;        this.id = id;    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name = name;    &#125;        &#125;</code></pre><p><strong>新建一个Test类实现数据库增删改查操作</strong></p><pre><code>package com.oracle.test;import java.sql.SQLException;import java.util.List;import org.apache.commons.dbutils.QueryRunner;import org.apache.commons.dbutils.handlers.BeanHandler;import org.apache.commons.dbutils.handlers.BeanListHandler;import org.apache.commons.dbutils.handlers.ScalarHandler;import com.oracle.bean.Dept;import com.oracle.utils.DataSourceUtils;public class Test &#123;        public static void main(String[] args) throws SQLException &#123;        //创建QueryRunner对象        QueryRunner qr = new QueryRunner(DataSourceUtils.getDataSource());                //增加数据        //String sql = &quot;insert into dept(name) values(?)&quot;;        //qr.update(sql, &quot;需求部&quot;);                //修改数据        //String sql = &quot;update dept set name=? where id=?&quot;;        //qr.update(sql, &quot;需求组&quot;, 4);                //删除数据        //String sql = &quot;delete from dept where id=?&quot;;        //qr.update(sql, 4);                //查询数据        //（1）查询结果为一行        //String sql = &quot;select * from dept where id=?&quot;;        //Dept d = qr.query(sql, new BeanHandler&lt;&gt;(Dept.class), 1);        //System.out.println(d.getId());        //System.out.println(d.getName());                //（2）查询结果为多行//        String sql = &quot;select * from dept&quot;;//        List&lt;Dept&gt; list = qr.query(sql, new BeanListHandler&lt;&gt;(Dept.class));//        for(Dept d:list) &#123;//            System.out.println(d.getId());//            System.out.println(d.getName());//        &#125;                //（2）查询结果为聚合函数        String sql = &quot;select count(*) from dept&quot;;                int i = ((Long) qr.query(sql, new ScalarHandler())).intValue();                System.out.println(i);    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;QueryRunner和数据库增删改查操&quot;&gt;&lt;a href=&quot;#QueryRunner和数据库增删改查操&quot; class=&quot;headerlink&quot; title=&quot;QueryRunner和数据库增删改查操&quot;&gt;&lt;/a&gt;QueryRunner和数据库增删改查操&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="JavaWeb项目开发" scheme="http://example.com/categories/Java/JavaWeb%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
    
    <category term="QueryRunner和数据库增删改查操作" scheme="http://example.com/categories/Java/JavaWeb%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/QueryRunner%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%93%8D%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaWeb项目开发 | jdbc</title>
    <link href="http://example.com/2022/01/25/jdbc/"/>
    <id>http://example.com/2022/01/25/jdbc/</id>
    <published>2022-01-26T04:17:47.000Z</published>
    <updated>2022-01-26T12:08:56.140Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jdbc"><a href="#jdbc" class="headerlink" title="jdbc"></a>jdbc</h1><p>在使用Java语言进行开发时，我们可以使用jdbc操作数据库；实际开发中我们通常直接导入数据库连接池（c3p0-0.9.1.2.jar）、<br>数据库驱动（mysql-connector-java-5.0.4-bin.jar）和简化jdbc操作的类库（commons-dbutils-1.4.jar）；并在c3p0-config.xml中配置数据库。<br><img src="/2022/01/25/jdbc/1.PNG"><br><strong>数据库配置（c3p0-config.xml）</strong><br>配置数据库的用户名、密码、驱动以及要连接的数据库<br>（本例连接用户名为root、密码为root、数据库驱动为mysql数据库驱动、连接的数据库为本地的test1数据库）</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;c3p0-config&gt;    &lt;default-config&gt;        &lt;property name=&quot;user&quot;&gt;root&lt;/property&gt;        &lt;property name=&quot;password&quot;&gt;root&lt;/property&gt;        &lt;property name=&quot;driverClass&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;        &lt;property name=&quot;jdbcUrl&quot;&gt;jdbc:mysql://127.0.0.1:3306/test1&lt;/property&gt;    &lt;/default-config&gt; &lt;/c3p0-config&gt; </code></pre><p>注：以上三个jar包可在网上通过名称搜索自行下载。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jdbc&quot;&gt;&lt;a href=&quot;#jdbc&quot; class=&quot;headerlink&quot; title=&quot;jdbc&quot;&gt;&lt;/a&gt;jdbc&lt;/h1&gt;&lt;p&gt;在使用Java语言进行开发时，我们可以使用jdbc操作数据库；实际开发中我们通常直接导入数据库连接池（c3p0-0.9.1.</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="JavaWeb项目开发" scheme="http://example.com/categories/Java/JavaWeb%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
    
    <category term="jdbc封装类和数据库连接池" scheme="http://example.com/categories/Java/JavaWeb%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/jdbc%E5%B0%81%E8%A3%85%E7%B1%BB%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="jdbc" scheme="http://example.com/tags/jdbc/"/>
    
  </entry>
  
  <entry>
    <title>MySQL | SQL语句实例大全</title>
    <link href="http://example.com/2022/01/20/SQL%E8%AF%AD%E5%8F%A5%E5%AE%9E%E4%BE%8B%E5%A4%A7%E5%85%A8/"/>
    <id>http://example.com/2022/01/20/SQL%E8%AF%AD%E5%8F%A5%E5%AE%9E%E4%BE%8B%E5%A4%A7%E5%85%A8/</id>
    <published>2022-01-21T03:39:02.000Z</published>
    <updated>2022-01-26T12:16:50.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL语句实例大全"><a href="#SQL语句实例大全" class="headerlink" title="SQL语句实例大全"></a>SQL语句实例大全</h1><p><strong>SQL语句分类</strong></p><ol><li>DDL(Data Definition Language)数据定义语言<br>用来定义数据库对象：数据库，表，列等。关键字：create, drop,alter等<br><a href="https://cloud.tencent.com/developer/article/1393524">DDL参考</a></li><li><strong>DML</strong>(Data Manipulation Language)数据操作语言<br>用来对数据库中表的数据进行增删改。关键字：insert, delete, update等 </li><li><strong>DQL</strong>(Data Query Language)数据查询语言<br>用来查询数据库中表的记录(数据)。关键字：select, where等 </li><li>DCL(Data Control Language)数据控制语言(了解)<br>用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT， REVOKE等<br>注：重点关注DML、DQL；实际开发中我们可以使用数据库软件来创建数据库、表、列等（DDL了解即可）；DCL为DBA关注的事情。<span id="more"></span></li></ol><p><strong>DML Test</strong></p><pre><code>CREATE TABLE student1(id INT,NAME VARCHAR(20),birthday DATE)INSERT INTO student1 (id,NAME,birthday) VALUES(1,&#39;zhangsan&#39;, &#39;2022-1-20&#39;)INSERT INTO student1 VALUES(2,&#39;lisi&#39;,&#39;2022-1-2&#39;)INSERT INTO student1 VALUES(3,&#39;wangmazi&#39;,&#39;2022-1-3&#39;),(4,&#39;zhaoliu&#39;,&#39;2012-1-2&#39;)INSERT INTO student1 (id,NAME) VALUES(5, &#39;sunqi&#39;)UPDATE student1 SET NAME=&#39;lisi&#39;UPDATE student1 SET birthday=&#39;1998-1-1&#39; WHERE id=5UPDATE student1 SET id=1,NAME=&#39;zhangsan&#39; WHERE id=1DELETE FROM student1DELETE FROM student1 WHERE id=5SELECT * FROM student1SELECT id,NAME,birthday FROM student1SELECT NAME FROM student1</code></pre><p><strong>DQL Test</strong></p><pre><code>CREATE TABLE student3 ( id INT, NAME VARCHAR(20),age INT, sex VARCHAR(5), address VARCHAR(100), math INT, english INT )INSERT INTO student3(id,NAME,age,sex,address,math,english) VALUES (1,&#39;马云&#39;,55,&#39;男&#39;,&#39;杭 州&#39;,66,78),(2,&#39;马化腾&#39;,45,&#39;女&#39;,&#39;深圳&#39;,98,87),(3,&#39;马景涛&#39;,55,&#39;男&#39;,&#39;香港&#39;,56,77),(4,&#39;柳 岩&#39;,20,&#39;女&#39;,&#39;湖南&#39;,76,65),(5,&#39;柳青&#39;,20,&#39;男&#39;,&#39;湖南&#39;,86,NULL),(6,&#39;刘德华&#39;,57,&#39;男&#39;,&#39;香 港&#39;,99,99),(7,&#39;马德&#39;,22,&#39;女&#39;,&#39;香港&#39;,99,99),(8,&#39;德玛西亚&#39;,18,&#39;男&#39;,&#39;南京&#39;,56,65)SELECT * FROM student3 WHERE math&gt;80SELECT * FROM student3 WHERE english&lt;=80SELECT * FROM student3 WHERE age=20SELECT * FROM student3 WHERE age!=20SELECT * FROM student3 WHERE age&lt;&gt;20SELECT * FROM student3 WHERE age&gt;35 AND sex=&#39;男&#39;SELECT * FROM student3 WHERE age&gt;35 &amp;&amp; sex=&#39;男&#39;SELECT * FROM student3 WHERE age&gt;35 OR sex=&#39;男&#39;SELECT * FROM student3 WHERE age&gt;35 || sex=&#39;男&#39;SELECT * FROM student3 WHERE id=1 OR id=3 OR id=5SELECT * FROM student3 WHERE NAME LIKE &#39;马%&#39;SELECT * FROM student3 WHERE NAME LIKE &#39;%德%&#39;SELECT * FROM student3 WHERE NAME LIKE &#39;马__&#39;SELECT COUNT(*) FROM student3SELECT COUNT(*) FROM student3 WHERE age&gt;40SELECT SUM(math) FROM student3 SELECT AVG(math) FROM student3SELECT MAX(math) FROM student3SELECT MIN(math) FROM student3INSERT INTO student3(id,NAME,age,sex,address,math,english) VALUES (9,&#39;唐僧&#39;,25,&#39;男&#39;,&#39;长安&#39;,87,78), (10,&#39;孙悟空&#39;,18,&#39;男&#39;,&#39;花果山&#39;,100,66), (11,&#39;猪八戒&#39;,22,&#39;男&#39;,&#39;高老庄&#39;,58,78), (12,&#39;沙僧&#39;,50,&#39;男&#39;,&#39;流沙河&#39;,77,88), (13,&#39;白骨精&#39;,22,&#39;女&#39;,&#39;白虎岭&#39;,66,66), (14,&#39;蜘蛛精&#39;,23,&#39;女&#39;,&#39;盘丝洞&#39;,88,88)SELECT * FROM student3 LIMIT 2,6SELECT * FROM student3 LIMIT 0,5SELECT * FROM student3 LIMIT 5</code></pre><p><strong>主键</strong></p><pre><code>CREATE TABLE st5(id INT PRIMARY KEY,NAME VARCHAR(20),age INT)INSERT INTO st5 (id, NAME) VALUES (1, &#39;唐伯虎&#39;),(2, &#39;周文宾&#39;),(3, &#39;祝枝山&#39;),(4, &#39;文征明&#39;)INSERT INTO st5 (id, NAME) VALUES (1, &#39;文征明2&#39;)INSERT INTO st5 (id, NAME) VALUES (NULL, &#39;文征明3&#39;)ALTER TABLE st5 DROP PRIMARY KEY</code></pre><p><strong>主键自增</strong></p><pre><code>CREATE TABLE st6(id INT PRIMARY KEY AUTO_INCREMENT,NAME VARCHAR(20),age INT)INSERT INTO st6(NAME,age) VALUES(&#39;唐僧&#39;,22)INSERT INTO st6(NAME,age) VALUES(&#39;孙悟空&#39;,26)INSERT INTO st6 (NAME, age) VALUES (&#39;猪八戒&#39;, 25)INSERT INTO st6 (NAME, age) VALUES (&#39;沙僧&#39;, 20)</code></pre><p><strong>外键和级联</strong></p><pre><code>CREATE TABLE department ( id INT PRIMARY KEY AUTO_INCREMENT, dep_name VARCHAR(20), dep_location VARCHAR(20) )CREATE TABLE employee(id INT PRIMARY KEY AUTO_INCREMENT,NAME VARCHAR(30),age INT,dep_id INT,CONSTRAINT employee_depid_ref_department_id_fk FOREIGN KEY(dep_id) REFERENCES department(id) ON UPDATE CASCADE ON DELETE CASCADE )INSERT INTO department (dep_name, dep_location) VALUES (&#39;研发部&#39;, &#39;广州&#39;), (&#39;销售部&#39;, &#39;深圳&#39;)INSERT INTO employee (NAME, age, dep_id) VALUES (&#39;张三&#39;, 20, 1), (&#39;李四&#39;, 21, 1), (&#39;王五&#39;, 20, 1), (&#39;老王&#39;, 20, 2), (&#39;大王&#39;, 22, 2), (&#39;小王&#39;, 18, 2)INSERT INTO employee (NAME, age, dep_id) VALUES (&#39;二王&#39;, 20, 5)INSERT INTO employee (NAME, age, dep_id) VALUES (&#39;二王&#39;, 20, 1)INSERT INTO employee (NAME, age, dep_id) VALUES (&#39;张三&#39;, 20, 1),(&#39;李四&#39;, 21, 1),(&#39;王五&#39;, 20, 1),(&#39;老王&#39;, 20, 2),(&#39;大王&#39;, 22, 2),(&#39;小王&#39;, 18, 2)UPDATE department SET id=10 WHERE id=1DELETE FROM department WHERE id=2</code></pre><p><strong>多表查询：内外连接</strong></p><pre><code>CREATE TABLE dept(id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,NAME VARCHAR(20))CREATE TABLE emp(id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,NAME VARCHAR(20),gender CHAR(1),salary DOUBLE,join_date DATE,dept_id INT,CONSTRAINT emp_deptid_ref_dept_id_fk FOREIGN KEY (dept_id) REFERENCES dept(id) ON DELETE CASCADE ON UPDATE CASCADE)SELECT * FROM emp, dept WHERE emp.`dept_id`=dept.`id`SELECT * FROM emp INNER JOIN dept ON emp.`dept_id`=dept.`id`SELECT * FROM emp LEFT OUTER JOIN dept ON emp.`dept_id`=dept.`id` AND emp.`gender`=&#39;男&#39;SELECT * FROM dept RIGHT OUTER JOIN emp ON emp.`dept_id`=dept.`id` AND emp.`gender`=&#39;男&#39;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;SQL语句实例大全&quot;&gt;&lt;a href=&quot;#SQL语句实例大全&quot; class=&quot;headerlink&quot; title=&quot;SQL语句实例大全&quot;&gt;&lt;/a&gt;SQL语句实例大全&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;SQL语句分类&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;DDL(Data Definition Language)数据定义语言&lt;br&gt;用来定义数据库对象：数据库，表，列等。关键字：create, drop,alter等&lt;br&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1393524&quot;&gt;DDL参考&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DML&lt;/strong&gt;(Data Manipulation Language)数据操作语言&lt;br&gt;用来对数据库中表的数据进行增删改。关键字：insert, delete, update等 &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DQL&lt;/strong&gt;(Data Query Language)数据查询语言&lt;br&gt;用来查询数据库中表的记录(数据)。关键字：select, where等 &lt;/li&gt;
&lt;li&gt;DCL(Data Control Language)数据控制语言(了解)&lt;br&gt;用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT， REVOKE等&lt;br&gt;注：重点关注DML、DQL；实际开发中我们可以使用数据库软件来创建数据库、表、列等（DDL了解即可）；DCL为DBA关注的事情。&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="MySQL" scheme="http://example.com/categories/MySQL/"/>
    
    <category term="SQL语句实例大全" scheme="http://example.com/categories/MySQL/SQL%E8%AF%AD%E5%8F%A5%E5%AE%9E%E4%BE%8B%E5%A4%A7%E5%85%A8/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
    <category term="SQL语句" scheme="http://example.com/tags/SQL%E8%AF%AD%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>MySQL | 内连接和外连接的区别</title>
    <link href="http://example.com/2022/01/19/MySQL%E5%86%85%E8%BF%9E%E6%8E%A5%E5%92%8C%E5%A4%96%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2022/01/19/MySQL%E5%86%85%E8%BF%9E%E6%8E%A5%E5%92%8C%E5%A4%96%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-01-20T06:47:11.000Z</published>
    <updated>2022-01-20T06:51:40.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内连接和外连接的区别"><a href="#内连接和外连接的区别" class="headerlink" title="内连接和外连接的区别"></a>内连接和外连接的区别</h1><p><strong>区别：</strong><br>内连接（inner join）：取出两张表中匹配到的数据，匹配不到的不保留<br>外连接（outer join）：取出连接表中匹配到的数据，匹配不到的也会保留，其值为NULL</p><p><a href="https://blog.csdn.net/johnhan9/article/details/88686288">参考资料</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;内连接和外连接的区别&quot;&gt;&lt;a href=&quot;#内连接和外连接的区别&quot; class=&quot;headerlink&quot; title=&quot;内连接和外连接的区别&quot;&gt;&lt;/a&gt;内连接和外连接的区别&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;区别：&lt;/strong&gt;&lt;br&gt;内连接（inner join</summary>
      
    
    
    
    <category term="MySQL" scheme="http://example.com/categories/MySQL/"/>
    
    <category term="内连接和外连接的区别" scheme="http://example.com/categories/MySQL/%E5%86%85%E8%BF%9E%E6%8E%A5%E5%92%8C%E5%A4%96%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
    <category term="内连接" scheme="http://example.com/tags/%E5%86%85%E8%BF%9E%E6%8E%A5/"/>
    
    <category term="外连接" scheme="http://example.com/tags/%E5%A4%96%E8%BF%9E%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>基于JavaWeb的网上购物商城 | 我的订单</title>
    <link href="http://example.com/2022/01/17/%E6%88%91%E7%9A%84%E8%AE%A2%E5%8D%95/"/>
    <id>http://example.com/2022/01/17/%E6%88%91%E7%9A%84%E8%AE%A2%E5%8D%95/</id>
    <published>2022-01-18T06:52:42.000Z</published>
    <updated>2022-01-18T10:14:10.150Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我的订单"><a href="#我的订单" class="headerlink" title="我的订单"></a>我的订单</h1><p><strong>实现功能：</strong><br>当用户点击”我的订单时“展示用户提交过的所有订单信息、购买商品信息等。<br><img src="/2022/01/17/%E6%88%91%E7%9A%84%E8%AE%A2%E5%8D%95/1.PNG"></p><span id="more"></span><p><strong>header.jsp</strong><br>更改”我的订单”链接的地址。</p><pre><code>&lt;div class=&quot;col-md-3&quot; style=&quot;padding-top:20px&quot;&gt;    &lt;ol class=&quot;list-inline&quot;&gt;        &lt;c:if test=&quot;$&#123;empty user&#125;&quot;&gt;            &lt;li&gt;&lt;a href=&quot;login.jsp&quot;&gt;登录&lt;/a&gt;&lt;/li&gt;            &lt;li&gt;&lt;a href=&quot;register.jsp&quot;&gt;注册&lt;/a&gt;&lt;/li&gt;        &lt;/c:if&gt;        &lt;c:if test=&quot;$&#123;not empty user&#125;&quot;&gt;            &lt;li&gt;$&#123;user.username&#125;&lt;/li&gt;            &lt;li&gt;&lt;a href=&quot;cart.jsp&quot;&gt;购物车&lt;/a&gt;&lt;/li&gt;            &lt;li&gt;&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/product?method=myOrder&quot;&gt;我的订单&lt;/a&gt;&lt;/li&gt;        &lt;/c:if&gt;    &lt;/ol&gt;&lt;/div&gt;</code></pre><p><strong>ProductServlet.java</strong><br>在ProductServlet的doGet方法中添加myOrder的判断并完成myOrder方法。</p><pre><code>public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;    String method = request.getParameter(&quot;method&quot;);    if(&quot;getProById&quot;.equals(method)) &#123;        getProById(request, response);    &#125;else if(&quot;findListByCate&quot;.equals(method)) &#123;        findListByCate(request, response);    &#125;else if(&quot;cart&quot;.equals(method)) &#123;        cart(request, response);    &#125;else if(&quot;delCart&quot;.equals(method)) &#123;        delCart(request, response);    &#125;else if(&quot;clearCart&quot;.equals(method)) &#123;        clearCart(request, response);    &#125;else if(&quot;showOrder&quot;.equals(method)) &#123;        showOrder(request, response);    &#125;else if(&quot;submitOrder&quot;.equals(method)) &#123;        submitOrder(request, response);    &#125;else if(&quot;myOrder&quot;.equals(method)) &#123;        myOrder(request, response);    &#125;&#125;public void myOrder(HttpServletRequest request, HttpServletResponse response) &#123;    // TODO Auto-generated method stub    try &#123;        User user = (User)request.getSession().getAttribute(&quot;user&quot;);        String uid = user.getUid();                ProductService ps = new ProductService();        List&lt;Order&gt; list = ps.findOrderList(uid);                //循环读出item项        for(Order o:list) &#123;            List&lt;OrderItem&gt; arr = ps.findItemList(o.getOid());                        for(OrderItem oo:arr) &#123;                Product pro = ps.getProById(oo.getPid());                oo.setPro(pro);            &#125;            o.setList(arr);        &#125;                //返回到订单列表页面        request.setAttribute(&quot;list&quot;, list);        try &#123;            request.getRequestDispatcher(&quot;/order_list.jsp&quot;).forward(request, response);        &#125; catch (Exception e) &#123;            // TODO Auto-generated catch block            e.printStackTrace();        &#125;     &#125; catch (SQLException e) &#123;        // TODO Auto-generated catch block        e.printStackTrace();    &#125;&#125;</code></pre><p><strong>ProductService.java</strong><br>在ProductService中添加findOrderList、findItemList方法。</p><pre><code>public List&lt;Order&gt; findOrderList(String uid) throws SQLException &#123;    // TODO Auto-generated method stub    ProductDao pd = new ProductDao();    List&lt;Order&gt; list = pd.findOrderList(uid);    return list;&#125;public List&lt;OrderItem&gt; findItemList(String oid) throws SQLException &#123;    // TODO Auto-generated method stub    ProductDao pd = new ProductDao();    List&lt;OrderItem&gt; list = pd.findItemList(oid);    return list;&#125;</code></pre><p><strong>ProductDao.java</strong><br>在ProductDao中添加findOrderList、findItemList方法。</p><pre><code>public List&lt;Order&gt; findOrderList(String uid) throws SQLException &#123;    // TODO Auto-generated method stub    QueryRunner qr = new QueryRunner(DataSourceUtils.getDataSource());        String sql = &quot;select * from orders where uid=? order by ordertime desc&quot;;        List&lt;Order&gt; list = qr.query(sql, new BeanListHandler&lt;&gt;(Order.class), uid);    return list;&#125;public List&lt;OrderItem&gt; findItemList(String oid) throws SQLException &#123;    // TODO Auto-generated method stub    QueryRunner qr = new QueryRunner(DataSourceUtils.getDataSource());        String sql = &quot;select * from orderitem where oid=?&quot;;        List&lt;OrderItem&gt; list = qr.query(sql, new BeanListHandler&lt;&gt;(OrderItem.class), oid);    return list;&#125;</code></pre><p><strong>order_list.jsp</strong><br>在order_list.jsp页面解析所有订单。</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%@taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;&lt;title&gt;会员登录&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap.min.css&quot; type=&quot;text/css&quot; /&gt;&lt;script src=&quot;js/jquery-1.11.3.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;script src=&quot;js/bootstrap.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;!-- 引入自定义css文件 style.css --&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;css/style.css&quot; type=&quot;text/css&quot; /&gt;&lt;style&gt;body &#123;    margin-top: 20px;    margin: 0 auto;&#125;.carousel-inner .item img &#123;    width: 100%;    height: 300px;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;!-- 引入header.jsp --&gt;    &lt;jsp:include page=&quot;/header.jsp&quot;&gt;&lt;/jsp:include&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;row&quot;&gt;            &lt;div style=&quot;margin: 0 auto; margin-top: 10px; width: 950px;&quot;&gt;                &lt;strong&gt;我的订单&lt;/strong&gt;                &lt;table class=&quot;table table-bordered&quot;&gt;                    &lt;tbody&gt;                        &lt;c:forEach items=&quot;$&#123;list&#125;&quot; var=&quot;orders&quot;&gt;                                &lt;tr class=&quot;success&quot;&gt;                                    &lt;th colspan=&quot;2&quot;&gt;订单编号:$&#123;orders.oid&#125;&lt;/th&gt;                                    &lt;th colspan=&quot;2&quot; style=&quot;text-align:center&quot;&gt;订单时间:$&#123;orders.ordertime&#125;&lt;/th&gt;                                    &lt;th colspan=&quot;1&quot; &gt;是否支付:                                        &lt;c:if test=&quot;$&#123;orders.state==1&#125;&quot;&gt;已支付&lt;/c:if&gt;                                        &lt;c:if test=&quot;$&#123;orders.state==0&#125;&quot;&gt;未支付&lt;/c:if&gt;                                    &lt;/th&gt;                                &lt;/tr&gt;                                &lt;tr class=&quot;warning&quot;&gt;                                    &lt;th&gt;图片&lt;/th&gt;                                    &lt;th&gt;商品&lt;/th&gt;                                    &lt;th&gt;价格&lt;/th&gt;                                    &lt;th&gt;数量&lt;/th&gt;                                    &lt;th&gt;小计&lt;/th&gt;                                &lt;/tr&gt;                                &lt;c:forEach items=&quot;$&#123;orders.list&#125;&quot; var=&quot;item&quot;&gt;                                    &lt;tr class=&quot;active&quot;&gt;                                        &lt;td width=&quot;60&quot; width=&quot;40%&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;id&quot;                                            value=&quot;22&quot;&gt; &lt;img src=&quot;$&#123;pageContext.request.contextPath&#125;/$&#123;item.pro.pimage&#125;&quot; width=&quot;70&quot;                                            height=&quot;60&quot;&gt;&lt;/td&gt;                                        &lt;td width=&quot;30%&quot;&gt;&lt;a target=&quot;_blank&quot;&gt;$&#123;item.pro.pname&#125;&lt;/a&gt;&lt;/td&gt;                                        &lt;td width=&quot;20%&quot;&gt;￥$&#123;item.pro.shop_price&#125;&lt;/td&gt;                                        &lt;td width=&quot;10%&quot;&gt;$&#123;item.count&#125;&lt;/td&gt;                                        &lt;td width=&quot;15%&quot;&gt;&lt;span class=&quot;subtotal&quot;&gt;￥$&#123;item.subtotal&#125;&lt;/span&gt;&lt;/td&gt;                                    &lt;/tr&gt;                                &lt;/c:forEach&gt;                                                        &lt;/c:forEach&gt;                                            &lt;/tbody&gt;                &lt;/table&gt;            &lt;/div&gt;        &lt;/div&gt;        &lt;div style=&quot;text-align: center;&quot;&gt;            &lt;ul class=&quot;pagination&quot;&gt;                &lt;li class=&quot;disabled&quot;&gt;&lt;a href=&quot;#&quot; aria-label=&quot;Previous&quot;&gt;&lt;span                        aria-hidden=&quot;true&quot;&gt;&amp;laquo;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;                &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;#&quot;&gt;1&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;2&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;3&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;4&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;5&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;6&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;7&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;8&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;9&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href=&quot;#&quot; aria-label=&quot;Next&quot;&gt; &lt;span aria-hidden=&quot;true&quot;&gt;&amp;raquo;&lt;/span&gt;                &lt;/a&gt;&lt;/li&gt;            &lt;/ul&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;!-- 引入footer.jsp --&gt;    &lt;jsp:include page=&quot;/footer.jsp&quot;&gt;&lt;/jsp:include&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;我的订单&quot;&gt;&lt;a href=&quot;#我的订单&quot; class=&quot;headerlink&quot; title=&quot;我的订单&quot;&gt;&lt;/a&gt;我的订单&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;实现功能：&lt;/strong&gt;&lt;br&gt;当用户点击”我的订单时“展示用户提交过的所有订单信息、购买商品信息等。&lt;br&gt;&lt;img src=&quot;/2022/01/17/%E6%88%91%E7%9A%84%E8%AE%A2%E5%8D%95/1.PNG&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="项目经历" scheme="http://example.com/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/"/>
    
    <category term="JavaWeb" scheme="http://example.com/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/JavaWeb/"/>
    
    <category term="基于JavaWeb的网上购物商城" scheme="http://example.com/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/JavaWeb/%E5%9F%BA%E4%BA%8EJavaWeb%E7%9A%84%E7%BD%91%E4%B8%8A%E8%B4%AD%E7%89%A9%E5%95%86%E5%9F%8E/"/>
    
    <category term="我的订单" scheme="http://example.com/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/JavaWeb/%E5%9F%BA%E4%BA%8EJavaWeb%E7%9A%84%E7%BD%91%E4%B8%8A%E8%B4%AD%E7%89%A9%E5%95%86%E5%9F%8E/%E6%88%91%E7%9A%84%E8%AE%A2%E5%8D%95/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="JavaWeb" scheme="http://example.com/tags/JavaWeb/"/>
    
    <category term="基于JavaWeb的网上购物商城" scheme="http://example.com/tags/%E5%9F%BA%E4%BA%8EJavaWeb%E7%9A%84%E7%BD%91%E4%B8%8A%E8%B4%AD%E7%89%A9%E5%95%86%E5%9F%8E/"/>
    
    <category term="我的订单" scheme="http://example.com/tags/%E6%88%91%E7%9A%84%E8%AE%A2%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>基于JavaWeb的网上购物商城 | 确认订单</title>
    <link href="http://example.com/2022/01/17/%E7%A1%AE%E8%AE%A4%E8%AE%A2%E5%8D%95/"/>
    <id>http://example.com/2022/01/17/%E7%A1%AE%E8%AE%A4%E8%AE%A2%E5%8D%95/</id>
    <published>2022-01-18T06:40:57.000Z</published>
    <updated>2022-01-18T07:26:21.203Z</updated>
    
    <content type="html"><![CDATA[<h1 id="确认订单"><a href="#确认订单" class="headerlink" title="确认订单"></a>确认订单</h1><p><strong>实现功能：</strong><br>用户在购物车页面点击“确认订单”，在数据库将之前提交的订单的状态改为已支付，并向数据库写入收货人、收获地址、电话等信息;<br>确认订单后跳转到我的订单页面。<br><img src="/2022/01/17/%E7%A1%AE%E8%AE%A4%E8%AE%A2%E5%8D%95/1.PNG"></p><span id="more"></span><p><strong>order_info.jsp</strong><br>修改order_info.jsp中的以下代码，当点击”确认订单“时将表单信息提交。</p><pre><code>&lt;form class=&quot;form-horizontal&quot; id=&quot;form&quot; method=&quot;post&quot; action=&quot;$&#123;pageContext.request.contextPath&#125;/product&quot;    style=&quot;margin-top: 5px; margin-left: 150px;&quot;&gt;    &lt;input type=&quot;hidden&quot; name=&quot;method&quot; value=&quot;submitOrder&quot;&gt;    &lt;input type=&quot;hidden&quot; name=&quot;oid&quot; value=&quot;$&#123;order.oid&#125;&quot;&gt;    &lt;div class=&quot;form-group&quot;&gt;        &lt;label for=&quot;username&quot; class=&quot;col-sm-1 control-label&quot;&gt;地址&lt;/label&gt;        &lt;div class=&quot;col-sm-5&quot;&gt;            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;address&quot; id=&quot;username&quot;                placeholder=&quot;请输入收货地址&quot;&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;form-group&quot;&gt;        &lt;label for=&quot;inputPassword3&quot; class=&quot;col-sm-1 control-label&quot;&gt;收货人&lt;/label&gt;        &lt;div class=&quot;col-sm-5&quot;&gt;            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;username&quot; id=&quot;inputPassword3&quot;                placeholder=&quot;请输收货人&quot;&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;form-group&quot;&gt;        &lt;label for=&quot;confirmpwd&quot; class=&quot;col-sm-1 control-label&quot;&gt;电话&lt;/label&gt;        &lt;div class=&quot;col-sm-5&quot;&gt;            &lt;input type=&quot;text&quot; name=&quot;phone&quot; class=&quot;form-control&quot; id=&quot;confirmpwd&quot;                placeholder=&quot;请输入联系方式&quot;&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/form&gt;&lt;hr /&gt;&lt;div style=&quot;margin-top: 5px; margin-left: 150px;&quot;&gt;            &lt;hr /&gt;    &lt;p style=&quot;text-align: right; margin-right: 100px;&quot;&gt;        &lt;a href=&quot;#&quot; onclick=&quot;submitOrder()&quot;&gt;            &lt;img src=&quot;./images/finalbutton.gif&quot; width=&quot;204&quot; height=&quot;51&quot;            border=&quot;0&quot; /&gt;        &lt;/a&gt;    &lt;/p&gt;    &lt;hr /&gt;&lt;/div&gt;</code></pre><p><strong>ProductServlet.java</strong><br>在ProductServlet的doGet方法中添加submitOrder的判断并完成submitOrder方法。</p><pre><code>public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;    String method = request.getParameter(&quot;method&quot;);    if(&quot;getProById&quot;.equals(method)) &#123;        getProById(request, response);    &#125;else if(&quot;findListByCate&quot;.equals(method)) &#123;        findListByCate(request, response);    &#125;else if(&quot;cart&quot;.equals(method)) &#123;        cart(request, response);    &#125;else if(&quot;delCart&quot;.equals(method)) &#123;        delCart(request, response);    &#125;else if(&quot;clearCart&quot;.equals(method)) &#123;        clearCart(request, response);    &#125;else if(&quot;showOrder&quot;.equals(method)) &#123;        showOrder(request, response);    &#125;else if(&quot;submitOrder&quot;.equals(method)) &#123;        submitOrder(request, response);    &#125;&#125;public void submitOrder(HttpServletRequest request, HttpServletResponse response) &#123;    // TODO Auto-generated method stub    try &#123;        String oid = request.getParameter(&quot;oid&quot;);        System.out.println(&quot;oid&quot; + oid);        String username = request.getParameter(&quot;username&quot;);        String address = request.getParameter(&quot;address&quot;);        String phone = request.getParameter(&quot;phone&quot;);                Order order = new Order();                order.setAddress(address);        order.setName(username);        order.setTelephone(phone);        order.setOid(oid);                ProductService ps = new ProductService();        ps.updateOrder(order);                HttpSession session = request.getSession();        session.removeAttribute(&quot;cart&quot;);        session.removeAttribute(&quot;orders&quot;);                response.sendRedirect(request.getContextPath() + &quot;/product?method=myOrder&quot;);    &#125; catch (Exception e) &#123;        // TODO Auto-generated catch block        e.printStackTrace();    &#125;&#125;</code></pre><p><strong>ProductService.java</strong><br>在ProductService中添加updateOrder方法。</p><pre><code>public void updateOrder(Order order) throws SQLException &#123;    // TODO Auto-generated method stub    ProductDao pd = new ProductDao();    pd.updateOrder(order);&#125;</code></pre><p><strong>ProductDao.java</strong><br>在ProductDao中添加updateOrder方法。</p><pre><code>public void updateOrder(Order order) throws SQLException &#123;    // TODO Auto-generated method stub    QueryRunner qr = new QueryRunner(DataSourceUtils.getDataSource());        String sql = &quot;update orders set address=?,name=?,telephone=?,state=1 where oid=?&quot;;        System.out.println(order.getOid());        qr.update(sql, order.getAddress(), order.getName(), order.getTelephone(), order.getOid());&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;确认订单&quot;&gt;&lt;a href=&quot;#确认订单&quot; class=&quot;headerlink&quot; title=&quot;确认订单&quot;&gt;&lt;/a&gt;确认订单&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;实现功能：&lt;/strong&gt;&lt;br&gt;用户在购物车页面点击“确认订单”，在数据库将之前提交的订单的状态改为已支付，并向数据库写入收货人、收获地址、电话等信息;&lt;br&gt;确认订单后跳转到我的订单页面。&lt;br&gt;&lt;img src=&quot;/2022/01/17/%E7%A1%AE%E8%AE%A4%E8%AE%A2%E5%8D%95/1.PNG&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="项目经历" scheme="http://example.com/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/"/>
    
    <category term="JavaWeb" scheme="http://example.com/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/JavaWeb/"/>
    
    <category term="基于JavaWeb的网上购物商城" scheme="http://example.com/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/JavaWeb/%E5%9F%BA%E4%BA%8EJavaWeb%E7%9A%84%E7%BD%91%E4%B8%8A%E8%B4%AD%E7%89%A9%E5%95%86%E5%9F%8E/"/>
    
    <category term="确认订单" scheme="http://example.com/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/JavaWeb/%E5%9F%BA%E4%BA%8EJavaWeb%E7%9A%84%E7%BD%91%E4%B8%8A%E8%B4%AD%E7%89%A9%E5%95%86%E5%9F%8E/%E7%A1%AE%E8%AE%A4%E8%AE%A2%E5%8D%95/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="JavaWeb" scheme="http://example.com/tags/JavaWeb/"/>
    
    <category term="基于JavaWeb的网上购物商城" scheme="http://example.com/tags/%E5%9F%BA%E4%BA%8EJavaWeb%E7%9A%84%E7%BD%91%E4%B8%8A%E8%B4%AD%E7%89%A9%E5%95%86%E5%9F%8E/"/>
    
    <category term="确认订单" scheme="http://example.com/tags/%E7%A1%AE%E8%AE%A4%E8%AE%A2%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode | 二叉树的最小深度</title>
    <link href="http://example.com/2022/01/16/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6/"/>
    <id>http://example.com/2022/01/16/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6/</id>
    <published>2022-01-17T04:40:28.000Z</published>
    <updated>2022-01-17T04:54:12.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉树的最小深度"><a href="#二叉树的最小深度" class="headerlink" title="二叉树的最小深度"></a>二叉树的最小深度</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉树，找出其最小深度。<br>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。<br>说明：叶子节点是指没有子节点的节点。</p><p><a href="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/">题目链接</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>方法一：深度优先搜索<br>首先可以想到使用深度优先搜索的方法，遍历整棵树，记录最小深度。<br>对于每一个非叶子节点，我们只需要分别计算其左右子树的最小叶子节点深度。这样就将一个大问题转化为了小问题，可以递归地解决该问题。<br>方法二：广度优先搜索<br>使用广度优先搜索的方法，遍历整棵树。<br>当我们找到一个叶子节点时，直接返回这个叶子节点的深度。广度优先搜索的性质保证了最先搜索到的叶子节点的深度一定最小。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code># Definition for a binary tree node.import collectionsclass TreeNode(object):    def __init__(self, val=0, left=None, right=None):        self.val = val        self.left = left        self.right = rightclass Solution(object):    def minDepth(self, root):        &quot;&quot;&quot;        深度优先搜索        :type root: TreeNode        :rtype: int        &quot;&quot;&quot;        def get_depth(root):            if root is None:                return 0            left_depth = get_depth(root.right)            right_depth = get_depth(root.left)            return min(right_depth, left_depth) + 1        return get_depth(root)    def minDepth1(self, root):        &quot;&quot;&quot;深度优先搜索&quot;&quot;&quot;        if not root:            return 0        if not root.left and not root.right:            return 1        min_depth = 10 ** 9        if root.left:            min_depth = min(self.minDepth1(root.left), min_depth)        if root.right:            min_depth = min(self.minDepth1(root.right), min_depth)        return min_depth + 1    def minDepth2(self, root):        &quot;&quot;&quot;深度优先搜索&quot;&quot;&quot;        if not root:            return 0        que = collections.deque([(root, 1)])        while que:            node, depth = que.popleft()            if not node.left and not node.right:                return depth            if node.left:                que.append((node.left, depth + 1))            if node.right:                que.append((node.right, depth + 1))        return 0    def create_binary_tree(self, nodes_list):        node1 = TreeNode(nodes_list[1])        node3 = TreeNode(nodes_list[3])        node4 = TreeNode(nodes_list[4])        node2 = TreeNode(nodes_list[2], node3, node4)        root = TreeNode(nodes_list[0], node1, node2)        return rootif __name__ == &quot;__main__&quot;:    slt = Solution()    root = slt.create_binary_tree([3, 9, 20, 15, 7])    print(slt.minDepth(root))</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;二叉树的最小深度&quot;&gt;&lt;a href=&quot;#二叉树的最小深度&quot; class=&quot;headerlink&quot; title=&quot;二叉树的最小深度&quot;&gt;&lt;/a&gt;二叉树的最小深度&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="算法刷题" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/"/>
    
    <category term="leetcode" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/"/>
    
    <category term="树" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/%E6%A0%91/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="二叉树" scheme="http://example.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
</feed>
