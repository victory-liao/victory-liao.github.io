<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Victory&#39;s Blog</title>
  
  <subtitle>非淡泊无以明志，非宁静无以致远</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-03-09T08:58:40.551Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>victory-liao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringMVC | REST风格GetPostPutDelete请求</title>
    <link href="http://example.com/2022/03/09/REST%E9%A3%8E%E6%A0%BCGetPostPutDelete%E8%AF%B7%E6%B1%82/"/>
    <id>http://example.com/2022/03/09/REST%E9%A3%8E%E6%A0%BCGetPostPutDelete%E8%AF%B7%E6%B1%82/</id>
    <published>2022-03-09T08:43:06.000Z</published>
    <updated>2022-03-09T08:58:40.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="REST风格-GET-POST-PUT-DELETE请求"><a href="#REST风格-GET-POST-PUT-DELETE请求" class="headerlink" title="REST风格 GET/POST/PUT/DELETE请求"></a>REST风格 GET/POST/PUT/DELETE请求</h1><p>*<em>REST</em>：即 Representational State Transfer。（资源）表现层状态转化。是目前最流行的一种互联网软件架构。</p><p>浏览器 form 表单只支持 GET 与 POST 请求，而DELETE、PUT 等 method 并不<br>支持，Spring3.0 添加了一个过滤器(HiddenHttpMethodFilter)，可以<strong>将这些<br>请求转换为标准的 http 方法</strong>，使得支持 GET、POST、PUT 与 DELETE 请求。</p><p>HiddenHttpMethodFilter支持REST风格的过滤器：可以将POST请求转换为PUT或DELETE请求</p><p><img src="/2022/03/09/REST%E9%A3%8E%E6%A0%BCGetPostPutDelete%E8%AF%B7%E6%B1%82/2.PNG"></p><span id="more"></span><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>1.项目目录<br><img src="/2022/03/09/REST%E9%A3%8E%E6%A0%BCGetPostPutDelete%E8%AF%B7%E6%B1%82/1.PNG"><br>2.web.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&gt;  &lt;display-name&gt;SpringMVC02&lt;/display-name&gt;  &lt;welcome-file-list&gt;    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;  &lt;/welcome-file-list&gt;    &lt;!-- The front controller of this Spring Web application, responsible for handling all application requests --&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;    &lt;/servlet&gt;    &lt;!-- Map all requests to the DispatcherServlet for handling --&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;        &lt;url-pattern&gt;/&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;        &lt;!-- 支持REST风格的过滤器：可以将POST请求转换为PUT或DELETE请求 --&gt;    &lt;filter&gt;        &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;        &lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class&gt;    &lt;/filter&gt;    &lt;filter-mapping&gt;        &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;    &lt;/filter-mapping&gt;    &lt;/web-app&gt;</code></pre><p>3.springMVC-servlet.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;        &lt;!-- 扫描组件 --&gt;    &lt;context:component-scan base-package=&quot;com.atguigu.controller&quot;&gt;&lt;/context:component-scan&gt;        &lt;bean id=&quot;viewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/view/&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><p>4.rest.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;a href=&quot;testREST/1001&quot;&gt;测试GET请求&lt;/a&gt;    &lt;br&gt;    &lt;form action=&quot;testREST&quot; method=&quot;POST&quot;&gt;        &lt;input type=&quot;submit&quot; value=&quot;测试POST&quot;/&gt;    &lt;/form&gt;    &lt;br&gt;    &lt;form action=&quot;testREST&quot; method=&quot;POST&quot;&gt;        &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;PUT&quot;/&gt;        &lt;input type=&quot;submit&quot; value=&quot;测试PUT&quot;/&gt;    &lt;/form&gt;    &lt;br&gt;    &lt;form action=&quot;testREST/1001&quot; method=&quot;POST&quot;&gt;        &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;DELETE&quot;/&gt;        &lt;input type=&quot;submit&quot; value=&quot;测试DELETE&quot;/&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>5.success.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;成功&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>6.RESTController.java</p><pre><code>package com.atguigu.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;@Controllerpublic class RESTController &#123;    @RequestMapping(value=&quot;/testREST/&#123;id&#125;&quot;, method=RequestMethod.GET)    public String getUserById(@PathVariable(&quot;id&quot;)Integer id)&#123;        System.out.println(&quot;GET,id=&quot;+id);        return &quot;success&quot;;    &#125;        @RequestMapping(value=&quot;/testREST&quot;,method=RequestMethod.POST)    public String insertUser()&#123;        System.out.println(&quot;POST&quot;);        return &quot;success&quot;;    &#125;        @RequestMapping(value=&quot;/testREST&quot;,method=RequestMethod.PUT)    public String updateUser()&#123;        System.out.println(&quot;PUT&quot;);        return &quot;success&quot;;    &#125;        @RequestMapping(value=&quot;/testREST/&#123;id&#125;&quot;,method=RequestMethod.DELETE)    public String deleteUser(@PathVariable(&quot;id&quot;)Integer id)&#123;        System.out.println(&quot;DELETE,id=&quot;+id);        return &quot;success&quot;;    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;REST风格-GET-POST-PUT-DELETE请求&quot;&gt;&lt;a href=&quot;#REST风格-GET-POST-PUT-DELETE请求&quot; class=&quot;headerlink&quot; title=&quot;REST风格 GET/POST/PUT/DELETE请求&quot;&gt;&lt;/a&gt;REST风格 GET/POST/PUT/DELETE请求&lt;/h1&gt;&lt;p&gt;*&lt;em&gt;REST&lt;/em&gt;：即 Representational State Transfer。（资源）表现层状态转化。是目前最流行的一种互联网软件架构。&lt;/p&gt;
&lt;p&gt;浏览器 form 表单只支持 GET 与 POST 请求，而DELETE、PUT 等 method 并不&lt;br&gt;支持，Spring3.0 添加了一个过滤器(HiddenHttpMethodFilter)，可以&lt;strong&gt;将这些&lt;br&gt;请求转换为标准的 http 方法&lt;/strong&gt;，使得支持 GET、POST、PUT 与 DELETE 请求。&lt;/p&gt;
&lt;p&gt;HiddenHttpMethodFilter支持REST风格的过滤器：可以将POST请求转换为PUT或DELETE请求&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/03/09/REST%E9%A3%8E%E6%A0%BCGetPostPutDelete%E8%AF%B7%E6%B1%82/2.PNG&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="REST风格 GET/POST/PUT/DELETE请求" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/REST%E9%A3%8E%E6%A0%BC-GET-POST-PUT-DELETE%E8%AF%B7%E6%B1%82/"/>
    
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
    <category term="HiddenHttpMethodFilter" scheme="http://example.com/tags/HiddenHttpMethodFilter/"/>
    
    <category term="REST" scheme="http://example.com/tags/REST/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | RequestMapping注解的几个属性和作用位置</title>
    <link href="http://example.com/2022/03/08/RequestMapping%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B1%9E%E6%80%A7%E5%92%8C%E4%BD%9C%E7%94%A8%E4%BD%8D%E7%BD%AE/"/>
    <id>http://example.com/2022/03/08/RequestMapping%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B1%9E%E6%80%A7%E5%92%8C%E4%BD%9C%E7%94%A8%E4%BD%8D%E7%BD%AE/</id>
    <published>2022-03-09T03:55:46.000Z</published>
    <updated>2022-03-09T08:57:13.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RequestMapping注解的几个属性和作用位置"><a href="#RequestMapping注解的几个属性和作用位置" class="headerlink" title="RequestMapping注解的几个属性和作用位置"></a>RequestMapping注解的几个属性和作用位置</h1><p>1.项目目录<br><img src="/2022/03/08/RequestMapping%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B1%9E%E6%80%A7%E5%92%8C%E4%BD%9C%E7%94%A8%E4%BD%8D%E7%BD%AE/1.PNG"></p><span id="more"></span><p>2.web.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&gt;  &lt;display-name&gt;SpringMVC02&lt;/display-name&gt;  &lt;welcome-file-list&gt;    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;  &lt;/welcome-file-list&gt;    &lt;!-- The front controller of this Spring Web application, responsible for handling all application requests --&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;    &lt;/servlet&gt;    &lt;!-- Map all requests to the DispatcherServlet for handling --&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;        &lt;url-pattern&gt;/&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;&lt;/web-app&gt;</code></pre><p>3.springMVC-servlet.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;        &lt;!-- 扫描组件 --&gt;    &lt;context:component-scan base-package=&quot;com.atguigu.controller&quot;&gt;&lt;/context:component-scan&gt;        &lt;bean id=&quot;viewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/view/&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><p>4.index.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;a href=&quot;test&quot;&gt;测试springMVC&lt;/a&gt;        &lt;br&gt;        &lt;form action=&quot;test&quot; method=&quot;post&quot;&gt;        &lt;input type=&quot;submit&quot; value=&quot;测试POST&quot;&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>5.success.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;成功&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>6.TestController.java</p><pre><code>package com.atguigu.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;@Controller//@RequestMapping(&quot;/mvc&quot;)public class TestController &#123;    /**     * @RequestMapping:设置请求映射，把请求和控制层中的方法设置映射关系     * 当请求路径和@RequestMapping的value属性一致时，则该注解所标注的方法即为处理请求的方法     *      * @RequestMapping可以加在类上，也可以加在方法上     * 若类和方法上都加有，应该一层一层的访问，西安访问类，再访问类中的方法     *      * method:用来设置请求方式，只有客户端发送请求的方式和method的值一致，才能处理请求     * 请求方式：GET查询    POST添加    PUT修改    DELETE删除     * params:用来设置客户端传到服务器的数据，支持表达式     * username !username username=admin username!=admin     * headers:用来设置请求头信息，所发送的请求的请求头信息一定要个headers属性中所设置的一致     *///    @RequestMapping(value=&quot;/test&quot;, method=RequestMethod.POST)//    public String testPOST()&#123;//        System.out.println(&quot;SUCCESS:POST&quot;);//        return &quot;success&quot;;//    &#125;    //    @RequestMapping(value=&quot;/test&quot;, method=RequestMethod.GET)//    public String testGET()&#123;//        System.out.println(&quot;SUCCESS:GET&quot;);//        return &quot;success&quot;;//    &#125;    //    @RequestMapping(value=&quot;/test&quot;, params=&#123;&quot;username&quot;, &quot;!age&quot;, &quot;sex!=1&quot;&#125;)//    public String testParams()&#123;//        System.out.println(&quot;SUCCESS&quot;);//        return &quot;success&quot;;//    &#125;        @RequestMapping(value=&quot;/test&quot;,             headers=&#123;&quot;Accept-Encoding=gzip, deflate&quot;&#125;)    public String testHeaders()&#123;        System.out.println(&quot;SUCCESS&quot;);        return &quot;success&quot;;    &#125;        /**    * springMVC支持Ant方式的请求路径    * 在Ant中，有3个匹配符    * *:任意字符    * ?:任意一个字符    * **:任意多层目录    */    //访问路径举例：localhost:8080/SpringMVC02/abc/ant11/a/b/testAnt    @RequestMapping(value=&quot;/*/ant??/**/testAnt&quot;)    public String testAnt()&#123;        System.out.println(&quot;SUCCESS:testAnt&quot;);        return &quot;success&quot;;    &#125;        /**     * 以前：localhost:8080/SpringMVC02/testREST?id=1001&amp;username=admin     * 现在：localhost:8080/SpringMVC02/testREST/1001/admin     */    @RequestMapping(&quot;/testREST/&#123;id&#125;/&#123;username&#125;&quot;)//占位符方式的路径    public String testREST(@PathVariable(&quot;id&quot;)Integer id, @PathVariable(&quot;username&quot;)String username)&#123;        System.out.println(&quot;id:&quot;+id+&quot;,username=&quot;+username);        return &quot;success&quot;;    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;RequestMapping注解的几个属性和作用位置&quot;&gt;&lt;a href=&quot;#RequestMapping注解的几个属性和作用位置&quot; class=&quot;headerlink&quot; title=&quot;RequestMapping注解的几个属性和作用位置&quot;&gt;&lt;/a&gt;RequestMapping注解的几个属性和作用位置&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/03/08/RequestMapping%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B1%9E%E6%80%A7%E5%92%8C%E4%BD%9C%E7%94%A8%E4%BD%8D%E7%BD%AE/1.PNG&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="RequestMapping注解的几个属性和作用位置" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/RequestMapping%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B1%9E%E6%80%A7%E5%92%8C%E4%BD%9C%E7%94%A8%E4%BD%8D%E7%BD%AE/"/>
    
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
    <category term="RequestMapping Ant风格路径" scheme="http://example.com/tags/RequestMapping-Ant%E9%A3%8E%E6%A0%BC%E8%B7%AF%E5%BE%84/"/>
    
    <category term="PathVariable注解" scheme="http://example.com/tags/PathVariable%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | SpringMVC之HelloWorld</title>
    <link href="http://example.com/2022/03/08/SpringMVC%E4%B9%8BHelloWorld/"/>
    <id>http://example.com/2022/03/08/SpringMVC%E4%B9%8BHelloWorld/</id>
    <published>2022-03-08T13:23:50.000Z</published>
    <updated>2022-03-08T13:35:03.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC之HelloWorld"><a href="#SpringMVC之HelloWorld" class="headerlink" title="SpringMVC之HelloWorld"></a>SpringMVC之HelloWorld</h1><h2 id="springMVC的搭建过程："><a href="#springMVC的搭建过程：" class="headerlink" title="springMVC的搭建过程："></a>springMVC的搭建过程：</h2><p>1.导入jar</p><p>2.在web.xml配置springMVC的核心（前端）控制器DispatcherServlet<br>作用：加载springMVC的配置文件，在下方的配置方式下，DispatcherServlet<br>自动加载配置文件，此时的配置文件有默认的位置和名称<br>    默认位置：WEB-INF下，默认名称：<servlet-name>-servlet.xml,<br>    例如以下配置方式的文件名：springMVC-servlet.xml<br>    当加载了配置文件，springMVC就会根据扫描组件找到控制层</servlet-name></p><pre><code>&lt;servlet&gt;&lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt;&lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;&lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;</code></pre><p>3.创建一个POJO,在此类上加上@Controller注解，springMVC就会将此类作为控制层加载，让其处理请求响应<br>4.在控制层中，需要在方法上设置@RequestMapping(value=”hello”),<br>springMVC就是通过此注解将请求路径与控制层中的方法进行匹配，此时请求路径为localhost:8080/projectName/xxx<br>5.处理请求的方法会返回一个字符串，即视图名称，最终会通过配置文件中配置的视图解析器实现页面跳转<br>方式：prefix + 视图名称 + suffix，此为最终跳转的页面路径</p><span id="more"></span><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><p>1.项目目录<br><img src="/2022/03/08/SpringMVC%E4%B9%8BHelloWorld/1.PNG"><br>2.web.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&gt;  &lt;display-name&gt;SpringMVC01&lt;/display-name&gt;  &lt;welcome-file-list&gt;    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;  &lt;/welcome-file-list&gt;    &lt;servlet&gt;    &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;  &lt;/servlet&gt;  &lt;servlet-mapping&gt;    &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;    &lt;url-pattern&gt;/&lt;/url-pattern&gt;  &lt;/servlet-mapping&gt;  &lt;/web-app&gt;</code></pre><p>3.springMVC-servlet.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;        &lt;!-- 扫描组件，将加上@Controller注解的类作为springMVC的控制层 --&gt;    &lt;context:component-scan base-package=&quot;com.atguigu.test&quot;&gt;&lt;/context:component-scan&gt;        &lt;!--         配置视图解析器        作用：将prefix + 视图名称 + suffix 确定最终要跳转的页面        /WEB-INF/view/success.jsp     --&gt;    &lt;bean id=&quot;viewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/view/&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;    &lt;/beans&gt;</code></pre><p>4.index.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;a href=&quot;hello&quot;&gt;测试springMVC&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>5.success.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;success&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>6.TestController.java</p><pre><code>package com.atguigu.test;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;@Controllerpublic class TestController &#123;    /**     * 假设：localhost:8080/SpringMVC01/hello     */        @RequestMapping(&quot;hello&quot;)    public String hello()&#123;        System.out.println(&quot;SUCCESS&quot;);        return &quot;success&quot;;//视图名称    &#125;&#125;</code></pre><p>7.运行结果<br><img src="/2022/03/08/SpringMVC%E4%B9%8BHelloWorld/2.PNG"></p><p><img src="/2022/03/08/SpringMVC%E4%B9%8BHelloWorld/3.PNG"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;SpringMVC之HelloWorld&quot;&gt;&lt;a href=&quot;#SpringMVC之HelloWorld&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC之HelloWorld&quot;&gt;&lt;/a&gt;SpringMVC之HelloWorld&lt;/h1&gt;&lt;h2 id=&quot;springMVC的搭建过程：&quot;&gt;&lt;a href=&quot;#springMVC的搭建过程：&quot; class=&quot;headerlink&quot; title=&quot;springMVC的搭建过程：&quot;&gt;&lt;/a&gt;springMVC的搭建过程：&lt;/h2&gt;&lt;p&gt;1.导入jar&lt;/p&gt;
&lt;p&gt;2.在web.xml配置springMVC的核心（前端）控制器DispatcherServlet&lt;br&gt;作用：加载springMVC的配置文件，在下方的配置方式下，DispatcherServlet&lt;br&gt;自动加载配置文件，此时的配置文件有默认的位置和名称&lt;br&gt;    默认位置：WEB-INF下，默认名称：&lt;servlet-name&gt;-servlet.xml,&lt;br&gt;    例如以下配置方式的文件名：springMVC-servlet.xml&lt;br&gt;    当加载了配置文件，springMVC就会根据扫描组件找到控制层&lt;/servlet-name&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;servlet&amp;gt;
&amp;lt;servlet-name&amp;gt;springMVC&amp;lt;/servlet-name&amp;gt;
&amp;lt;servlet-class&amp;gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-class&amp;gt;
&amp;lt;/servlet&amp;gt;
&amp;lt;servlet-mapping&amp;gt;
&amp;lt;servlet-name&amp;gt;springMVC&amp;lt;/servlet-name&amp;gt;
&amp;lt;url-pattern&amp;gt;/&amp;lt;/url-pattern&amp;gt;
&amp;lt;/servlet-mapping&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.创建一个POJO,在此类上加上@Controller注解，springMVC就会将此类作为控制层加载，让其处理请求响应&lt;br&gt;4.在控制层中，需要在方法上设置@RequestMapping(value=”hello”),&lt;br&gt;springMVC就是通过此注解将请求路径与控制层中的方法进行匹配，此时请求路径为localhost:8080/projectName/xxx&lt;br&gt;5.处理请求的方法会返回一个字符串，即视图名称，最终会通过配置文件中配置的视图解析器实现页面跳转&lt;br&gt;方式：prefix + 视图名称 + suffix，此为最终跳转的页面路径&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="SpringMVC之HelloWorld" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/SpringMVC%E4%B9%8BHelloWorld/"/>
    
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>spring | 事务管理</title>
    <link href="http://example.com/2022/03/07/%E4%BA%8B%E5%8A%A1-1/"/>
    <id>http://example.com/2022/03/07/%E4%BA%8B%E5%8A%A1-1/</id>
    <published>2022-03-07T12:25:30.000Z</published>
    <updated>2022-03-08T09:56:39.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h1><p>1.项目目录<br><img src="/2022/03/07/%E4%BA%8B%E5%8A%A1-1/1.PNG"><br>book包—&gt;使用注解管理事务<br>book_xml—&gt;使用xml方式管理事务</p><span id="more"></span><p>数据库表(book,stock,money)<br><img src="/2022/03/07/%E4%BA%8B%E5%8A%A1-1/2.PNG"><br><img src="/2022/03/07/%E4%BA%8B%E5%8A%A1-1/3.PNG"><br><img src="/2022/03/07/%E4%BA%8B%E5%8A%A1-1/4.PNG"><br>2.使用注解管理事务<br>2.1 BookController.java</p><pre><code>package com.atguigu.book.controller;import java.util.ArrayList;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import com.atguigu.book.service.BookService;import com.atguigu.book.service.Cashier;@Controllerpublic class BookController &#123;    @Autowired    private BookService service;        @Autowired    private Cashier cashier;        public void buyBook()&#123;        service.buyBook(&quot;1&quot;, &quot;1001&quot;);    &#125;        public void checkOut()&#123;        List&lt;String&gt; bids = new ArrayList&lt;&gt;();        bids.add(&quot;1&quot;);        bids.add(&quot;2&quot;);        cashier.checkOut(&quot;1001&quot;, bids);    &#125;&#125;</code></pre><p>2.2 BookDao.java</p><pre><code>package com.atguigu.book.dao;public interface BookDao &#123;    Integer selectPrice(String bid);        void updateSt(String bid);        void updateBalance(String uid, Integer price);&#125;</code></pre><p>2.3 BookDaoImpl.java</p><pre><code>package com.atguigu.book.dao.impl;import javax.management.RuntimeErrorException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.jdbc.core.JdbcTemplate;import org.springframework.stereotype.Repository;import com.atguigu.book.dao.BookDao;import com.atguigu.book.exception.MyException;@Repositorypublic class BookDaoImpl implements BookDao&#123;    @Autowired    private JdbcTemplate jdbcTemplate;    @Override    public Integer selectPrice(String bid) &#123;        String sql = &quot;select price from book where bid = ?&quot;;        Integer price = jdbcTemplate.queryForObject(sql, new Object[]&#123;bid&#125;, Integer.class);        return price;    &#125;    @Override    public void updateSt(String bid) &#123;        //获取该书记的库存        String sql = &quot;select st from stock where sid = ?&quot;;        Integer st = jdbcTemplate.queryForObject(sql, new Object[]&#123;bid&#125;, Integer.class);        if(st &lt;= 0)&#123;            throw new RuntimeException();        &#125;else&#123;            jdbcTemplate.update(&quot;update stock set st = st - 1 where sid = ?&quot;, bid);        &#125;    &#125;    @Override    public void updateBalance(String uid, Integer price) &#123;        Integer balance = jdbcTemplate.queryForObject(&quot;select balance from money where uid = ?&quot;, new Object[]&#123;uid&#125;, Integer.class);        if(balance &lt; price)&#123;            throw new MyException(&quot;余额不足&quot;);        &#125;else&#123;            jdbcTemplate.update(&quot;update money set balance = balance - ? where uid = ?&quot;, price, uid);        &#125;    &#125;&#125;</code></pre><p>2.4 BookService.java</p><pre><code>package com.atguigu.book.service;public interface BookService &#123;    void buyBook(String bid, String uid);&#125;</code></pre><p>2.5 BookServiceImpl.java</p><pre><code>package com.atguigu.book.service.impl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Propagation;import org.springframework.transaction.annotation.Transactional;import com.atguigu.book.dao.BookDao;import com.atguigu.book.exception.MyException;import com.atguigu.book.service.BookService;@Service//@Transactionalpublic class BookServiceImpl implements BookService&#123;    @Autowired    private BookDao dao;        /**     * @Transactional:对方法中所有的操作作为一个事务进行管理     * 在方法上使用，只对方法有效果     * 在类上使用，对类中所有的方法都有效果     * @Transactional中可以设置的属性：     * propagation:A方法和B方法都有事务，当A在调用B时，会将A中的事务传播给B方法，     * B方法对于事务的处理方式就是事务的传播行为     * Propagation.REQUIRED:必须使用调用者的事务（默认值）     * Propagation.REQUIRES_NEW:将调用者的事务挂起，不使用调用者的事务，使用新的事务进行处理     * isolation:事务的隔离级别，在并发的情况下，操作数据的一种规定     *         读未提交(1)：脏读（读到没有意义的数据）---&gt;对于字段来说     *         读已提交(2)：不可重复读（重复读到的数据不一致）---&gt;对于字段来说     *         可重复读(4)：幻读（重复读到整张表的数据不一致，第一次读一部分，第二次读多了一些数据）---&gt;对于记录来说     *         串行化(8)：性能低，消耗大     * timeout:在事务强制回滚前最多可以执行（等待）的时间     *      * readOnly:指定当前事务中的一系列的操作是否为只读     * 若设置为只读，不管事务中有没有写的操作，MySQL都会在请求访问数据的时候，不加锁，提高性能     * 如果有写操作的情况，建议一定不能设置只读     *      * rollbackFor|rollbackForClassName|noRollbackFor|noRollbakForClassName     */    @Transactional(propagation=Propagation.REQUIRES_NEW, timeout=3, noRollbackFor=&#123;NullPointerException.class, MyException.class&#125;)    public void buyBook(String bid, String uid)&#123;//        try &#123;//            Thread.sleep(5000);//        &#125; catch (InterruptedException e) &#123;//            e.printStackTrace();//        &#125;        Integer price = dao.selectPrice(bid);        dao.updateSt(bid);                dao.updateBalance(uid, price);    &#125;    &#125;</code></pre><p>2.6 Cashier.java</p><pre><code>package com.atguigu.book.service;import java.util.List;public interface Cashier &#123;    void checkOut(String uid, List&lt;String&gt; bids);&#125;</code></pre><p>2.7 CashierServiceImpl.java</p><pre><code>package com.atguigu.book.service.impl;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import com.atguigu.book.service.BookService;import com.atguigu.book.service.Cashier;@Service@Transactionalpublic class CashierServiceImpl implements Cashier&#123;    @Autowired    private BookService service;        @Override    public void checkOut(String uid, List&lt;String&gt; bids) &#123;        // TODO Auto-generated method stub        for (String bid : bids) &#123;            service.buyBook(bid, uid);        &#125;    &#125;&#125;</code></pre><p>2.8 MyException.java</p><pre><code>package com.atguigu.book.exception;public class MyException extends RuntimeException&#123;    public MyException() &#123;        super();        // TODO Auto-generated constructor stub    &#125;    public MyException(String arg0, Throwable arg1, boolean arg2, boolean arg3) &#123;        super(arg0, arg1, arg2, arg3);        // TODO Auto-generated constructor stub    &#125;    public MyException(String arg0, Throwable arg1) &#123;        super(arg0, arg1);        // TODO Auto-generated constructor stub    &#125;    public MyException(String arg0) &#123;        super(arg0);        // TODO Auto-generated constructor stub    &#125;    public MyException(Throwable arg0) &#123;        super(arg0);        // TODO Auto-generated constructor stub    &#125;&#125;</code></pre><p>2.9 Test.java</p><pre><code>package com.atguigu.book;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;import com.atguigu.book.controller.BookController;public class Test &#123;    public static void main(String[] args)&#123;        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;book.xml&quot;);                BookController controller = ac.getBean(&quot;bookController&quot;, BookController.class);        controller.buyBook();                //controller.checkOut();    &#125;&#125;</code></pre><p>2.10 db.properties</p><pre><code>jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/ssmjdbc.username=rootjdbc.password=root   </code></pre><p>2.11 book.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd&quot;&gt;    &lt;context:component-scan base-package=&quot;com.atguigu.book&quot;&gt;&lt;/context:component-scan&gt;        &lt;!-- 引入属性文件 --&gt;    &lt;bean class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;        &lt;property name=&quot;location&quot; value=&quot;db.properties&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;!-- 引入属性文件 --&gt;    &lt;context:property-placeholder location=&quot;db.properties&quot;/&gt;        &lt;!-- 创建数据源 --&gt;    &lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;!-- 通过数据源配置JdbcTemplate --&gt;    &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;!-- 配置事务管理器 --&gt;    &lt;bean id=&quot;dataSourceTransactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;!-- 开启注解驱动，即对事务相关的注解进行扫描，解析含义并执行功能 --&gt;    &lt;tx:annotation-driven transaction-manager=&quot;dataSourceTransactionManager&quot;/&gt;&lt;/beans&gt;</code></pre><p>3.使用xml方式管理事务<br>3.1 BookServiceImpl.java</p><pre><code>package com.atguigu.book_xml.service.impl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Propagation;import org.springframework.transaction.annotation.Transactional;import com.atguigu.book_xml.dao.BookDao;import com.atguigu.book_xml.exception.MyException;import com.atguigu.book_xml.service.BookService;@Servicepublic class BookServiceImpl implements BookService&#123;    @Autowired    private BookDao dao;        public void buyBook(String bid, String uid)&#123;//        try &#123;//            Thread.sleep(5000);//        &#125; catch (InterruptedException e) &#123;//            e.printStackTrace();//        &#125;        Integer price = dao.selectPrice(bid);        dao.updateSt(bid);                dao.updateBalance(uid, price);    &#125;    &#125;</code></pre><p>3.2 book_xml.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd&quot;&gt;    &lt;context:component-scan base-package=&quot;com.atguigu.book_xml&quot;&gt;&lt;/context:component-scan&gt;        &lt;!-- 引入属性文件 --&gt;    &lt;bean class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;        &lt;property name=&quot;location&quot; value=&quot;db.properties&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;!-- 引入属性文件 --&gt;    &lt;context:property-placeholder location=&quot;db.properties&quot;/&gt;        &lt;!-- 创建数据源 --&gt;    &lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;!-- 通过数据源配置JdbcTemplate --&gt;    &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;!-- 配置事务管理器(相当于一个切面),不管时用注解方式或xml方式配置事务，一定要有DataSourceTransactionManager事务管理器的支持 --&gt;    &lt;bean id=&quot;dataSourceTransactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;!-- 配置事务通知 --&gt;    &lt;tx:advice id=&quot;tx&quot; transaction-manager=&quot;dataSourceTransactionManager&quot;&gt;        &lt;tx:attributes&gt;            &lt;!-- 在设置好的切入点表达式下再次进行事务设置 --&gt;            &lt;tx:method name=&quot;buyBook&quot;/&gt;            &lt;tx:method name=&quot;checkOut&quot;/&gt;                        &lt;!-- 只有select开头的方法才会被事务处理 --&gt;            &lt;tx:method name=&quot;select*&quot; read-only=&quot;true&quot;/&gt;            &lt;tx:method name=&quot;insert*&quot;/&gt;            &lt;tx:method name=&quot;update*&quot;/&gt;            &lt;tx:method name=&quot;delete*&quot;/&gt;                        &lt;tx:method name=&quot;*&quot;/&gt;        &lt;/tx:attributes&gt;    &lt;/tx:advice&gt;        &lt;!-- 配置切入点表达式 --&gt;    &lt;aop:config&gt;        &lt;aop:pointcut expression=&quot;execution(* com.atguigu.book_xml.service.impl.*.*(..))&quot; id=&quot;pointCut&quot;/&gt;        &lt;aop:advisor advice-ref=&quot;tx&quot; pointcut-ref=&quot;pointCut&quot;/&gt;    &lt;/aop:config&gt;&lt;/beans&gt;</code></pre><p>3.3 Test.java</p><pre><code>package com.atguigu.book_xml;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;import com.atguigu.book_xml.controller.BookController;public class Test &#123;    public static void main(String[] args)&#123;        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;book_xml.xml&quot;);                BookController controller = ac.getBean(&quot;bookController&quot;, BookController.class);        controller.buyBook();                //controller.checkOut();    &#125;&#125;</code></pre><p>3.4 其他代码与注解方式管理事务相同</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;事务管理&quot;&gt;&lt;a href=&quot;#事务管理&quot; class=&quot;headerlink&quot; title=&quot;事务管理&quot;&gt;&lt;/a&gt;事务管理&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/03/07/%E4%BA%8B%E5%8A%A1-1/1.PNG&quot;&gt;&lt;br&gt;book包—&amp;gt;使用注解管理事务&lt;br&gt;book_xml—&amp;gt;使用xml方式管理事务&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="事务管理" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
    <category term="事务管理" scheme="http://example.com/tags/%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>spring | JdbcTemplate增删改查</title>
    <link href="http://example.com/2022/03/07/JdbcTemplate/"/>
    <id>http://example.com/2022/03/07/JdbcTemplate/</id>
    <published>2022-03-07T08:44:52.000Z</published>
    <updated>2022-03-07T08:51:52.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JdbcTemplate增删改查"><a href="#JdbcTemplate增删改查" class="headerlink" title="JdbcTemplate增删改查"></a>JdbcTemplate增删改查</h1><p>1.项目目录<br><img src="/2022/03/07/JdbcTemplate/1.PNG"><br>2.Emp.java</p><pre><code>package com.atguigu.jdbctemplate;public class Emp &#123;    private Integer eid;    private String ename;    private Integer age;    private String sex;    public Integer getEid() &#123;        return eid;    &#125;    public void setEid(Integer eid) &#123;        this.eid = eid;    &#125;    public String getEname() &#123;        return ename;    &#125;    public void setEname(String ename) &#123;        this.ename = ename;    &#125;    public Integer getAge() &#123;        return age;    &#125;    public void setAge(Integer age) &#123;        this.age = age;    &#125;    public String getSex() &#123;        return sex;    &#125;    public void setSex(String sex) &#123;        this.sex = sex;    &#125;    @Override    public String toString() &#123;        return &quot;Emp [eid=&quot; + eid + &quot;, ename=&quot; + ename + &quot;, age=&quot; + age + &quot;, sex=&quot; + sex + &quot;]&quot;;    &#125;    &#125;</code></pre><p>3.ssm表<br><img src="/2022/03/07/JdbcTemplate/2.PNG"><br>4.db.properties</p><pre><code>jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/ssmjdbc.username=rootjdbc.password=root</code></pre><p>5.jdbc.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;        &lt;!-- 引入属性文件 --&gt;    &lt;bean class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;        &lt;property name=&quot;location&quot; value=&quot;db.properties&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;!-- 引入属性文件 --&gt;    &lt;context:property-placeholder location=&quot;db.properties&quot;/&gt;        &lt;!-- 创建数据源 --&gt;    &lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;!-- 通过数据源配置JdbcTemplate --&gt;    &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;    &lt;/beans&gt;</code></pre><p>6.TestJdbcTemplate.java</p><pre><code>package com.atguigu.jdbctemplate;import static org.junit.Assert.*;import java.util.ArrayList;import java.util.List;import org.junit.Test;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;import org.springframework.jdbc.core.BeanPropertyRowMapper;import org.springframework.jdbc.core.JdbcTemplate;import org.springframework.jdbc.core.RowMapper;public class TestJdbcTemplate &#123;    ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;jdbc.xml&quot;);    JdbcTemplate jdbcTemplate = ac.getBean(&quot;jdbcTemplate&quot;, JdbcTemplate.class);        @Test    public void test() &#123;        //单个增删改        //System.out.println(jdbcTemplate);//org.springframework.jdbc.core.JdbcTemplate@6483f5ae        //jdbcTemplate.update(&quot;insert into emp values(1,&#39;zhangsan&#39;,23,&#39;男&#39;)&quot;);                //增加记录        //String sql = &quot;insert into emp values(2, ?, ?, ?)&quot;;        //jdbcTemplate.update(sql, &quot;lisi&quot;, 25, &quot;男&quot;);                //删除记录        //String sql = &quot;delete from emp where eid=?&quot;;        //jdbcTemplate.update(sql,2);                //修改记录        //String sql = &quot;update emp set ename=? where eid=?&quot;;         //jdbcTemplate.update(sql, &quot;lisi&quot;, 1);                //不能使用        //String sql = &quot;delete from emp where eid in (?)&quot;;        //String eids = &quot;3, 4, 5&quot;;        //jdbcTemplate.update(sql,eids);                //可以使用        //String eids = &quot;3,4,5&quot;;        //String sql = &quot;delete from emp where eid in (&quot;+eids+&quot;)&quot;;        //jdbcTemplate.update(sql);                //String sql = &quot;select * from emp where ename like &#39;%?%&#39;&quot;;//不能使用        //String sql = &quot;select * from emp where ename like concat(&#39;%&#39;,?,&#39;%&#39;)&quot;;//可以使用    &#125;        @Test    public void testBatchUpdate()&#123;        //批量增删改//        String sql = &quot;insert into emp values(?,?,?,?)&quot;;//        List&lt;Object[]&gt; list = new ArrayList&lt;&gt;();//        list.add(new Object[]&#123;3,&quot;a1&quot;,1,&quot;男&quot;&#125;);//        list.add(new Object[]&#123;4,&quot;a2&quot;,2,&quot;男&quot;&#125;);//        list.add(new Object[]&#123;5,&quot;a3&quot;,3,&quot;男&quot;&#125;);//        jdbcTemplate.batchUpdate(sql, list);    &#125;        @Test    public void testQueryForObject()&#123;        //jdbcTemplate.queryForObject(sql, requiredType);//用来获取单个的值        //jdbcTemplate.queryForObject(sql, rowMapper);//用来获取单条数据        //        String sql= &quot;select eid,ename,age,sex from emp where eid=?&quot;;//        RowMapper&lt;Emp&gt; rowMapper = new BeanPropertyRowMapper&lt;&gt;(Emp.class);//将列名（字段名或字段名的别名）与属性名进行映射//        Emp emp = jdbcTemplate.queryForObject(sql, new Object[]&#123;3&#125;, rowMapper);//        System.out.println(emp);                String sql = &quot;select count(*) from emp&quot;;        Integer count = jdbcTemplate.queryForObject(sql, Integer.class);        System.out.println(count);    &#125;        @Test    public void testQuery()&#123;        String sql = &quot;select eid,ename,age,sex from emp&quot;;        RowMapper&lt;Emp&gt; rowMapper = new BeanPropertyRowMapper&lt;&gt;(Emp.class);        List&lt;Emp&gt; list = jdbcTemplate.query(sql, rowMapper);        for(Emp emp:list)&#123;            System.out.println(emp);        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JdbcTemplate增删改查&quot;&gt;&lt;a href=&quot;#JdbcTemplate增删改查&quot; class=&quot;headerlink&quot; title=&quot;JdbcTemplate增删改查&quot;&gt;&lt;/a&gt;JdbcTemplate增删改查&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="JdbcTemplate" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/JdbcTemplate/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
    <category term="JdbcTemplate" scheme="http://example.com/tags/JdbcTemplate/"/>
    
  </entry>
  
  <entry>
    <title>spring | 以XML方式配置切面</title>
    <link href="http://example.com/2022/03/06/%E4%BB%A5XML%E6%96%B9%E5%BC%8F%E9%85%8D%E7%BD%AE%E5%88%87%E9%9D%A2/"/>
    <id>http://example.com/2022/03/06/%E4%BB%A5XML%E6%96%B9%E5%BC%8F%E9%85%8D%E7%BD%AE%E5%88%87%E9%9D%A2/</id>
    <published>2022-03-06T12:15:43.000Z</published>
    <updated>2022-03-06T12:20:37.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="以XML方式配置切面"><a href="#以XML方式配置切面" class="headerlink" title="以XML方式配置切面"></a>以XML方式配置切面</h1><p>1.项目目录<br><img src="/2022/03/06/%E4%BB%A5XML%E6%96%B9%E5%BC%8F%E9%85%8D%E7%BD%AE%E5%88%87%E9%9D%A2/1.PNG"></p><p>2.MathI.java(接口)</p><pre><code>package com.atguigu.spring.aopxml;public interface MathI &#123;    int add(int i, int j);    int sub(int i, int j);    int mul(int i, int j);    int div(int i, int j);&#125;</code></pre><p>3.MathImpl.java(实现类)</p><pre><code>package com.atguigu.spring.aopxml;import org.springframework.stereotype.Component;@Componentpublic class MathImpl implements MathI&#123;    @Override    public int add(int i, int j) &#123;        int result = i + j;        return result;    &#125;        @Override    public int sub(int i, int j) &#123;        int result = i - j;        return result;    &#125;    @Override    public int mul(int i, int j) &#123;        int result = i * j;        return result;     &#125;    @Override    public int div(int i, int j) &#123;        int result = i / j;        return result;    &#125;&#125;</code></pre><p>4.MyLogger.java(切面)</p><pre><code>package com.atguigu.spring.aopxml;import org.springframework.stereotype.Component;@Componentpublic class MyLogger &#123;    public void before()&#123;        System.out.println(&quot;前置通知&quot;);    &#125;&#125;</code></pre><p>5.aop-xml.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd&quot;&gt;    &lt;context:component-scan base-package=&quot;com.atguigu.spring.aopxml&quot;&gt;&lt;/context:component-scan&gt;        &lt;!-- 以XML方式配置切面  --&gt;    &lt;aop:config&gt;        &lt;!-- 切面 --&gt;        &lt;aop:aspect ref=&quot;myLogger&quot;&gt;            &lt;!-- 前置通知 通知通过切入点表达式作用于连接点--&gt;            &lt;!-- &lt;aop:before method=&quot;before&quot; pointcut=&quot;execution(* com.atguigu.spring.aopxml.*.*(..))&quot;/&gt; --&gt;                        &lt;aop:pointcut expression=&quot;execution(* com.atguigu.spring.aopxml.*.*(..))&quot; id=&quot;cut&quot;/&gt;            &lt;aop:before method=&quot;before&quot; pointcut-ref=&quot;cut&quot;/&gt;        &lt;/aop:aspect&gt;    &lt;/aop:config&gt;&lt;/beans&gt;</code></pre><p>6.Test.java(测试类)</p><pre><code>package com.atguigu.spring.aopxml;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class Test &#123;    public static void main(String[] args) &#123;        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;aop-xml.xml&quot;);        MathI math = ac.getBean(&quot;mathImpl&quot;, MathI.class);        int add = math.add(2, 2);        System.out.println(add);    &#125;&#125;</code></pre><p>7.运行结果</p><pre><code>前置通知4</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;以XML方式配置切面&quot;&gt;&lt;a href=&quot;#以XML方式配置切面&quot; class=&quot;headerlink&quot; title=&quot;以XML方式配置切面&quot;&gt;&lt;/a&gt;以XML方式配置切面&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/03/06/%E4%BB</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="以XML方式配置切面" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/%E4%BB%A5XML%E6%96%B9%E5%BC%8F%E9%85%8D%E7%BD%AE%E5%88%87%E9%9D%A2/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
    <category term="AOP" scheme="http://example.com/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>spring | AOP(切面、通知、切入点、切面优先级)</title>
    <link href="http://example.com/2022/03/06/AOP%E9%80%9A%E7%9F%A5%E5%88%87%E9%9D%A2%E5%88%87%E5%85%A5%E7%82%B9%E5%88%87%E9%9D%A2%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <id>http://example.com/2022/03/06/AOP%E9%80%9A%E7%9F%A5%E5%88%87%E9%9D%A2%E5%88%87%E5%85%A5%E7%82%B9%E5%88%87%E9%9D%A2%E4%BC%98%E5%85%88%E7%BA%A7/</id>
    <published>2022-03-06T11:49:13.000Z</published>
    <updated>2022-03-06T11:58:36.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOP-切面、通知、切入点、切面优先级"><a href="#AOP-切面、通知、切入点、切面优先级" class="headerlink" title="AOP(切面、通知、切入点、切面优先级)"></a>AOP(切面、通知、切入点、切面优先级)</h1><p><strong>示例：</strong><br>1.项目目录<br><img src="/2022/03/06/AOP%E9%80%9A%E7%9F%A5%E5%88%87%E9%9D%A2%E5%88%87%E5%85%A5%E7%82%B9%E5%88%87%E9%9D%A2%E4%BC%98%E5%85%88%E7%BA%A7/1.PNG"></p><span id="more"></span><p>2.MathI.java(接口)</p><pre><code>package com.atguigu.spring.aop;public interface MathI &#123;    int add(int i, int j);    int sub(int i, int j);    int mul(int i, int j);    int div(int i, int j);&#125;</code></pre><p>3.MathImpl.java（实现类）</p><pre><code>package com.atguigu.spring.aop;import org.springframework.stereotype.Component;@Componentpublic class MathImpl implements MathI&#123;    @Override    public int add(int i, int j) &#123;        int result = i + j;        return result;    &#125;        @Override    public int sub(int i, int j) &#123;        int result = i - j;        return result;    &#125;    @Override    public int mul(int i, int j) &#123;        int result = i * j;        return result;     &#125;    @Override    public int div(int i, int j) &#123;        int result = i / j;        return result;    &#125;&#125;</code></pre><p>4.MyLoggerAspect.java（切面–&gt;日志）</p><pre><code>package com.atguigu.spring.aop;import java.util.Arrays;import org.aopalliance.intercept.Joinpoint;import org.aspectj.lang.JoinPoint;import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.After;import org.aspectj.lang.annotation.AfterReturning;import org.aspectj.lang.annotation.AfterThrowing;import org.aspectj.lang.annotation.Around;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Before;import org.aspectj.lang.annotation.Pointcut;import org.springframework.core.annotation.Order;import org.springframework.stereotype.Component;@Component@Aspect//标注当前类为切面@Order(1)public class MyLoggerAspect &#123;    //AspectJ支持的5种类型的通知注解        //重用切入点定义    @Pointcut(value=&quot;execution(* com.atguigu.spring.aop.*.*(..))&quot;)    public void test()&#123;            &#125;    /**     * @Before：将方法指定为前置通知     * 必须设置value,其值为切入点表达式     * 前置通知：作用于方法执行之前     */    //前置通知 //    @Before(value = &quot;execution(public int com.atguigu.spring.aop.MathImpl.add(int, int))&quot;)//    @Before(value = &quot;execution(public int com.atguigu.spring.aop.MathImpl.*(int,int))&quot;)//    @Before(value = &quot;execution(* com.atguigu.spring.aop.MathImpl.*(int,int))&quot;)//    @Before(value = &quot;execution(* com.atguigu.spring.aop.*.*(int,int))&quot;)//    @Before(value = &quot;execution(* com.atguigu.spring.aop.*.*(..))&quot;)    @Before(value = &quot;test()&quot;)    public void beforeMethod(JoinPoint joinPoint)&#123;        Object[] args = joinPoint.getArgs();//获取方法的参数        String methodName = joinPoint.getSignature().getName();//获取方法名                System.out.println(&quot;method:&quot; + methodName + &quot;,arguments:&quot; + Arrays.toString(args));    &#125;        /**     * @After:将方法标注为后置通知     * 后置通知：作用于方法的finally语句块，即不管有没有异常都会执行     */    //后置通知    //@After(value = &quot;execution(* com.atguigu.spring.aop.*.*(..))&quot;)    @After(value = &quot;test()&quot;)    public void afterMethod()&#123;        System.out.println(&quot;后置通知&quot;);    &#125;        /**     * @AfterReturning：将方法标注为返回通知     * 返回通知：作用于方法执行之后     * 要通过returning设置接收方法返回值的变量名     * 要向在方法中使用，必须在方法的形参中设置和变量名相同的参数名的参数     */    @AfterReturning(value = &quot;execution(* com.atguigu.spring.aop.*.*(..))&quot;,returning=&quot;result&quot;)    public void afterReturing(JoinPoint joinPoint, Object result)&#123;        String methodName = joinPoint.getSignature().getName();        System.out.println(&quot;method:&quot; + methodName + &quot;,result:&quot; + result);    &#125;        /**     * @AfterThrowing：将方法标注为异常通知（例外通知）     * 异常通知：作用于方法抛出异常时     * 可通过throwing设置接受方法返回的异常信息     * 在参数列表中可通过具体的异常类型，来对指定的异常信息进行操作     */    @AfterThrowing(value = &quot;execution(* com.atguigu.spring.aop.*.*(..))&quot;, throwing=&quot;ex&quot;)    public void afterThrowing(Exception ex)&#123;        System.out.println(&quot;有异常了,messages&quot;+ex);    &#125;    //处理特定异常//    @AfterThrowing(value = &quot;execution(* com.atguigu.spring.aop.*.*(..))&quot;, throwing=&quot;ex&quot;)//    public void afterThrowing(NullPointerException ex)&#123;//        System.out.println(&quot;有异常了,messages&quot;+ex);//    &#125;        /**     * @Around：     */    @Around(value = &quot;execution(* com.atguigu.spring.aop.*.*(..))&quot;)    public Object aroundMethod(ProceedingJoinPoint joinPoint)&#123;            Object result = null;        try &#123;            //前置通知            System.out.println(&quot;前置通知&quot;);            result = joinPoint.proceed();//执行方法            //返回通知            System.out.println(&quot;返回通知&quot;);            return result;        &#125; catch (Throwable e) &#123;            // TODO Auto-generated catch block            e.printStackTrace();            //异常通知            System.out.println(&quot;异常通知&quot;);        &#125;finally&#123;            //后置通知            System.out.println(&quot;后置通知&quot;);        &#125;        return -1;    &#125;&#125;</code></pre><p>5.TestHandler.java</p><pre><code>package com.atguigu.spring.aop;import org.springframework.stereotype.Component;@Componentpublic class TestHandler &#123;    public void test()&#123;        System.out.println(&quot;测试切入点表达式&quot;);    &#125;&#125;</code></pre><p>6.TestAspect.java（切面–&gt;另一个切面，用来测试切面优先级）</p><pre><code>package com.atguigu.spring.aop;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Before;import org.springframework.core.annotation.Order;import org.springframework.stereotype.Component;@Component@Aspect@Order(0)//定义切面作用的优先级，值越小优先级越高，默认值为int的最大值 public class TestAspect &#123;    @Before(value=&quot;execution(* com.atguigu.spring.aop.*.*(..))&quot;)    public void before()&#123;        System.out.println(&quot;TestAspect====&gt;前置通知&quot;);    &#125;&#125;</code></pre><p>7.Test.java（测试类）</p><pre><code>package com.atguigu.spring.aop;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class Test &#123;    public static void main(String[] args) &#123;        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;aop.xml&quot;);                MathI math = ac.getBean(&quot;mathImpl&quot;, MathI.class);                int i = math.div(1, 1);        System.out.println(i);        //        TestHandler bean = ac.getBean(&quot;testHandler&quot;, TestHandler.class);//        bean.test();    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;AOP-切面、通知、切入点、切面优先级&quot;&gt;&lt;a href=&quot;#AOP-切面、通知、切入点、切面优先级&quot; class=&quot;headerlink&quot; title=&quot;AOP(切面、通知、切入点、切面优先级)&quot;&gt;&lt;/a&gt;AOP(切面、通知、切入点、切面优先级)&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;br&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/03/06/AOP%E9%80%9A%E7%9F%A5%E5%88%87%E9%9D%A2%E5%88%87%E5%85%A5%E7%82%B9%E5%88%87%E9%9D%A2%E4%BC%98%E5%85%88%E7%BA%A7/1.PNG&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="AOP(切面、通知、切入点、切面优先级)" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/AOP-%E5%88%87%E9%9D%A2%E3%80%81%E9%80%9A%E7%9F%A5%E3%80%81%E5%88%87%E5%85%A5%E7%82%B9%E3%80%81%E5%88%87%E9%9D%A2%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
    <category term="AOP" scheme="http://example.com/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>spring | 动态代理之数学计算器</title>
    <link href="http://example.com/2022/03/06/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B9%8B%E6%95%B0%E5%AD%A6%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    <id>http://example.com/2022/03/06/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B9%8B%E6%95%B0%E5%AD%A6%E8%AE%A1%E7%AE%97%E5%99%A8/</id>
    <published>2022-03-06T08:08:16.000Z</published>
    <updated>2022-03-06T08:15:51.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态代理-数学计算器"><a href="#动态代理-数学计算器" class="headerlink" title="动态代理-数学计算器"></a>动态代理-数学计算器</h1><p>项目目录<br><img src="/2022/03/06/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B9%8B%E6%95%B0%E5%AD%A6%E8%AE%A1%E7%AE%97%E5%99%A8/1.PNG"></p><p>1.要求<br>1）计算器能够执行加减乘除运算<br>2）日志：在程序执行期间追踪正在发生的活动<br>3）验证：希望计算器只能处理正数的运算</p><p>2.常规实现</p><pre><code>**MathI.java**package com.atguigu.proxy;public interface MathI &#123;    int add(int i, int j);    int sub(int i, int j);    int mul(int i, int j);    int div(int i, int j);&#125;</code></pre><p><strong>MathImpl.java</strong></p><pre><code>package com.atguigu.proxy;public class MathImpl implements MathI&#123;    @Override    public int add(int i, int j) &#123;        System.out.println(&quot;method:add,arguments:&quot; + i + &quot;,&quot; + j);        System.out.println(&quot;method:add,results:&quot; + (i + j));        return i + j;    &#125;        @Override    public int sub(int i, int j) &#123;        System.out.println(&quot;method:sub,arguments:&quot; + i + &quot;,&quot; + j);        System.out.println(&quot;method:sub,results:&quot; + (i - j));        return i - j;    &#125;    @Override    public int mul(int i, int j) &#123;        System.out.println(&quot;method:mul,arguments:&quot; + i + &quot;,&quot; + j);        System.out.println(&quot;method:mul,results:&quot; + (i * j));        return i * j;    &#125;    @Override    public int div(int i, int j) &#123;        System.out.println(&quot;method:div,arguments:&quot; + i + &quot;,&quot; + j);        System.out.println(&quot;method:div,results:&quot; + (i / j));        return i / j;    &#125;&#125;</code></pre><p><strong>常规实现方法存在的问题</strong><br>①代码混乱：越来越多的非业务需求(日志和验证等)加入后，原有的业务方法急剧膨胀。每个方法在处理核心逻辑的同时还必须兼顾其他多个关注点。<br>②代码分散: 以日志需求为例，只是为了满足这个单一需求，就不得不在多个模块（方法）里多次重复相同的日志代码。如果日志需求发生变化，必须修改所有模块。</p><p>3.动态代理<br><strong>MathI.java（与2中的代码相同）</strong></p><p><strong>MathImpl.java(2中的代码中去掉日志信息)</strong></p><p><strong>MyLogger.java(日志类)</strong></p><p><strong>ProxyUtil.java(代理类)</strong></p><pre><code>package com.atguigu.proxy;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;import java.util.Arrays;public class ProxyUtil&#123;    //代理模式：1、静态代理（代理对象真实存在，是自己写好的） 2、动态代理（动态生成代理对象，不需要自己写）    private MathImpl mathImpl;//目标对象 目标对象类必须实现接口        public ProxyUtil(MathImpl mathImpl) &#123;        super();        this.mathImpl = mathImpl;    &#125;    public Object getProxy()&#123;        //获取当前类的类加载器用来加载代理对象所属类        ClassLoader loader = this.getClass().getClassLoader();//动态生成代理对象就需要动态代理类，代理类的执行需要类加载器        //获取目标对象实现的所有接口的Class，代理类会和目标对象实现相同的接口，最终通过代理对象实现功能        Class[] interfaces = mathImpl.getClass().getInterfaces();                return Proxy.newProxyInstance(loader, interfaces, new InvocationHandler()&#123;            @Override            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;                //代理对象实现功能的方式                try&#123;                    MyLogger.before(method.getName(), Arrays.toString(args));                    Object result = method.invoke(mathImpl, args);//动态代理对象实现功能（调用目标对象的方法）                    MyLogger.after(method.getName(), result);                    return result;                &#125;catch (Exception e)&#123;                    MyLogger.throwing();                    e.printStackTrace();                &#125;finally&#123;                    System.out.println(&quot;哪都有我&quot;);                &#125;                return null;                            &#125;        &#125;);    &#125;&#125;</code></pre><p><strong>Test.java(测试类)</strong></p><pre><code>package com.atguigu.proxy;public class Test &#123;    public static void main(String[] args) &#123;//        MathI math = new MathImpl();//        int result = math.add(1, 1);//        System.out.println(result);        ProxyUtil proxy = new ProxyUtil(new MathImpl());                MathI math = (MathI)proxy.getProxy();                int i = math.add(1, 1);        System.out.println(i);                int j = math.div(4, 0);        System.out.println(j);    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;动态代理-数学计算器&quot;&gt;&lt;a href=&quot;#动态代理-数学计算器&quot; class=&quot;headerlink&quot; title=&quot;动态代理-数学计算器&quot;&gt;&lt;/a&gt;动态代理-数学计算器&lt;/h1&gt;&lt;p&gt;项目目录&lt;br&gt;&lt;img src=&quot;/2022/03/06/%E5%8A%A</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="动态代理之数学计算器" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B9%8B%E6%95%B0%E5%AD%A6%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring | 基于注解的自动装配</title>
    <link href="http://example.com/2022/03/06/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    <id>http://example.com/2022/03/06/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/</id>
    <published>2022-03-06T08:05:36.000Z</published>
    <updated>2022-03-06T08:15:56.571Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于注解（-Autowired）的自动装配"><a href="#基于注解（-Autowired）的自动装配" class="headerlink" title="基于注解（@Autowired）的自动装配"></a>基于注解（@Autowired）的自动装配</h1><p>1.项目目录<br><img src="/2022/03/06/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/1.PNG"></p><p>2.UserController.java</p><pre><code>package com.atguigu.ioc.userMod.controller;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import com.atguigu.ioc.userMod.service.UserService;import com.atguigu.ioc.userMod.service.UserServiceImpl;/** * 基于注解的组件化管理： * @Component,@Controller（控制层）,@Service（业务层）,@Repository（持久曾） * 以上四个注解功能完全相同，不过在实际开发中，要在实现不同功能的类上加上相应的注解 * 完成组件化管理的过程： * 1、在需要被spring管理的类上加上相应注解 * 2、在配置文件中通过&lt;context：component-scan&gt;对所设置的包结构进行扫描，就会将加上注解的类作为spring的组件进行加载 * 组件：指spring中管理的bean * 作为spring的组件进行加载：会自动在spring的配置文件中生成相对应的bean，这些bean的id会以类的首字母小写为值； * 也可以通过@Controller(&quot;beanId&quot;)为自动生成的bean指定id *  * 自动装配：在需要赋值的非字面量属性上，加上@Autowired注解，就可以在spring容器中，通过不同的方式匹配到相对应的bean * @Autowired装配时，会默认使用byType的方式，此时要求spring容器中只有一个能够为其赋值 * 当byType实现不了装配时，会自动切换到byName,此时要求spring容器中，有一个bean的id和属性名一致 * 若自动装配时，匹配到多个能够赋值的bean，可使用@Qualifire（value=&quot;beanId&quot;)指定使用的bean * @Autowired和@Qualifire（value=&quot;beanId&quot;)可以一起作用于一个带形参的方法上，此时，@Qualifire（value=&quot;beanId&quot;)所 * 指定的bean作用于形参 *  */@Controller//@Controller(value=&quot;aaa&quot;)//为自动创建的bean设置idpublic class UserController &#123;    //private UserService userService = new UserServiceImpl();    @Autowired//基于注解的自动装配(根据类型进行自动装配 byType)    private UserService userService;        public void addUser()&#123;        userService.addUser();    &#125;        public UserController() &#123;        System.out.println(&quot;UserController&quot;);    &#125;&#125;</code></pre><p>3.UserService.java</p><pre><code>package com.atguigu.ioc.userMod.service;public interface UserService &#123;    void addUser();&#125;</code></pre><p>4.UserServiceImpl.java</p><pre><code>package com.atguigu.ioc.userMod.service;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.stereotype.Service;import com.atguigu.ioc.userMod.dao.UserDao;import com.atguigu.ioc.userMod.dao.UserDaoImpl;@Servicepublic class UserServiceImpl implements UserService&#123;        //private UserDao userDao = new UserDaoImpl();        @Autowired    //@Qualifier(value=&quot;userDaoImpl&quot;)    @Qualifier(value=&quot;userDaoMybatisImpl&quot;)    private UserDao userDao;    //    @Autowired//    @Qualifier(value=&quot;userDaoMybaticImpl&quot;)//    public void setUserDao(UserDao userDao)&#123;//        this.userDao = userDao;//    &#125;        public UserServiceImpl() &#123;        System.out.println(&quot;UserServiceImpl&quot;);    &#125;    @Override    public void addUser() &#123;        // TODO Auto-generated method stub        userDao.addUser();    &#125;&#125;</code></pre><p>5.UserDao.java</p><pre><code>package com.atguigu.ioc.userMod.dao;public interface UserDao &#123;    void addUser();&#125;</code></pre><p>6.UserDaoImpl.java</p><pre><code>package com.atguigu.ioc.userMod.dao;import org.springframework.stereotype.Repository;@Repositorypublic class UserDaoImpl implements UserDao&#123;    public UserDaoImpl()&#123;        System.out.println(&quot;UserDaoImpl&quot;);    &#125;    @Override    public void addUser() &#123;        System.out.println(&quot;添加成功&quot;);    &#125;&#125;</code></pre><p>7.UserDaoMybatisImpl.java</p><pre><code>package com.atguigu.ioc.userMod.dao;import org.springframework.stereotype.Repository;@Repositorypublic class UserDaoMybatisImpl implements UserDao&#123;    @Override    public void addUser() &#123;        // TODO Auto-generated method stub        System.out.println(&quot;UserDaoMybatisImple:添加成功&quot;);    &#125;&#125;</code></pre><p>8.user.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;        &lt;!--         &lt;context:component-scan&gt;:扫描组件，对设置的包下面的类进行扫描，会将加上注解的类作为spring的组件进行加载        组件：指spring中管理的bean        作为spring的组件进行加载：会自动在spring的配置文件中生成相对应的bean，这些bean的id会以类的首字母小写为值                &lt;context:include-filter&gt;:在设定的包结构下再次通过注解或类型具体包含到某个或某几个类        注意：在使用包含时，一定要设置use-default-filters=&quot;false&quot;，将默认（即扫描包下所有的类）的过滤关闭                &lt;context:exclude-filter&gt;:在设定的包结构下，再次通过注解或类型具体排除某个或某几个类        注意：在使用排除时，一定要设置use-default-filters=&quot;true&quot;，将默认（即扫描包下所有的类）的过滤打开                切记：一个&lt;context:component-scan&gt;中可以出现多个include，也可以同时出现多个exclude，但是两个不能同时出现     --&gt;    &lt;context:component-scan base-package=&quot;com.atguigu.ioc.userMod&quot; use-default-filters=&quot;true&quot;&gt;        &lt;!-- &lt;context:include-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt; --&gt;        &lt;!-- &lt;context:include-filter type=&quot;assignable&quot; expression=&quot;com.atguigu.ioc.userMod.service.UserServiceImpl&quot;/&gt; --&gt;        &lt;!-- &lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Repository&quot;/&gt; --&gt;        &lt;!-- &lt;context:exclude-filter type=&quot;assignable&quot; expression=&quot;com.atguigu.ioc.userMod.dao.UserDaoImpl&quot;/&gt; --&gt;    &lt;/context:component-scan&gt;        &lt;!-- &lt;bean id=&quot;userController&quot; class=&quot;com.atguigu.ioc.userMod.controller.UserController&quot;&gt;&lt;/bean&gt;    &lt;bean id=&quot;userServiceImpl&quot; class=&quot;com.atguigu.ioc.userMod.service.UserServiceImpl&quot;&gt;&lt;/bean&gt;    &lt;bean id=&quot;userDaoImpl&quot; class=&quot;com.atguigu.ioc.userMod.dao.UserDaoImpl&quot;&gt;&lt;/bean&gt; --&gt;        &lt;!-- 测试@Autowired是根据类型来进行自动装配的（byType） --&gt;    &lt;!-- &lt;bean id=&quot;user&quot; class=&quot;com.atguigu.ioc.userMod.dao.UserDaoImpl&quot;&gt;&lt;/bean&gt; --&gt;        &lt;!-- 如果根据类型自动装配失败，则byName --&gt;    &lt;!-- &lt;bean id=&quot;userDao&quot; class=&quot;com.atguigu.ioc.userMod.dao.UserDaoImpl&quot;&gt;&lt;/bean&gt; --&gt;&lt;/beans&gt;</code></pre><p>9.Test.java</p><pre><code>package com.atguigu.ioc.userMod;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;import com.atguigu.ioc.userMod.controller.UserController;import com.atguigu.ioc.userMod.dao.UserDao;import com.atguigu.ioc.userMod.dao.UserDaoImpl;import com.atguigu.ioc.userMod.service.UserService;import com.atguigu.ioc.userMod.service.UserServiceImpl;public class Test &#123;    public static void main(String[] args) &#123;        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;user.xml&quot;);                UserController uc = ac.getBean(&quot;userController&quot;, UserController.class);        System.out.println(uc);//com.atguigu.ioc.userMod.controller.UserController@4b553d26                UserService us = ac.getBean(&quot;userServiceImpl&quot;, UserServiceImpl.class);        System.out.println(us);//com.atguigu.ioc.userMod.service.UserServiceImpl@69a3d1d                UserDao ud = ac.getBean(&quot;userDaoImpl&quot;, UserDaoImpl.class);        System.out.println(ud);//com.atguigu.ioc.userMod.dao.UserDaoImpl@86be70a                uc.addUser();    &#125;&#125;</code></pre><p>10.运行结果</p><pre><code>UserControllerUserServiceImplUserDaoImplcom.atguigu.ioc.userMod.controller.UserController@6f195bc3com.atguigu.ioc.userMod.service.UserServiceImpl@51e2adc7com.atguigu.ioc.userMod.dao.UserDaoImpl@1a8a8f7c添加成功</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基于注解（-Autowired）的自动装配&quot;&gt;&lt;a href=&quot;#基于注解（-Autowired）的自动装配&quot; class=&quot;headerlink&quot; title=&quot;基于注解（@Autowired）的自动装配&quot;&gt;&lt;/a&gt;基于注解（@Autowired）的自动装配&lt;/</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="基于注解（@Autowired）的自动装配" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%EF%BC%88-Autowired%EF%BC%89%E7%9A%84%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring | 使用注解配置bean</title>
    <link href="http://example.com/2022/03/06/%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AEbean/"/>
    <id>http://example.com/2022/03/06/%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AEbean/</id>
    <published>2022-03-06T08:03:19.000Z</published>
    <updated>2022-03-06T08:16:03.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用注解配置bean"><a href="#使用注解配置bean" class="headerlink" title="使用注解配置bean"></a>使用注解配置bean</h1><p>1.项目目录<br><img src="/2022/03/06/%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AEbean/1.PNG"></p><p>2.UserController.java</p><pre><code>package com.atguigu.ioc.userMod.controller;import org.springframework.stereotype.Controller;@Controllerpublic class UserController &#123;    public UserController() &#123;        System.out.println(&quot;UserController&quot;);    &#125;    &#125;</code></pre><p>3.UserDao.java</p><pre><code>package com.atguigu.ioc.userMod.dao;public interface UserDao &#123;&#125;</code></pre><p>4.UserDaoImpl.java(UserDao接口的实现类)</p><pre><code>package com.atguigu.ioc.userMod.dao;import org.springframework.stereotype.Repository;@Repositorypublic class UserDaoImpl implements UserDao&#123;    public UserDaoImpl()&#123;        System.out.println(&quot;UserDaoImpl&quot;);    &#125;&#125;</code></pre><p>5.UserService.java</p><pre><code>package com.atguigu.ioc.userMod.service;public interface UserService &#123;&#125;</code></pre><p>6.UserServiceImpl.java(UserService接口的实现类)</p><pre><code>package com.atguigu.ioc.userMod.service;import org.springframework.stereotype.Service;@Servicepublic class UserServiceImpl implements UserService&#123;    public UserServiceImpl() &#123;        System.out.println(&quot;UserServiceImpl&quot;);    &#125;&#125;</code></pre><p>7.user.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;        &lt;!--         &lt;context:component-scan&gt;:扫描组件，对设置的包下面的类进行扫描，会将加上注解的类作为spring的组件进行加载        组件：指spring中管理的bean        作为spring的组件进行加载：会自动在spring的配置文件中生成相对应的bean，这些bean的id会以类的首字母小写为值                &lt;context:include-filter&gt;:在设定的包结构下再次通过注解或类型具体包含到某个或某几个类        注意：在使用包含时，一定要设置use-default-filters=&quot;false&quot;，将默认（即扫描包下所有的类）的过滤关闭                &lt;context:exclude-filter&gt;:在设定的包结构下，再次通过注解或类型具体排除某个或某几个类        注意：在使用排除时，一定要设置use-default-filters=&quot;true&quot;，将默认（即扫描包下所有的类）的过滤打开                切记：一个&lt;context:component-scan&gt;中可以出现多个include，也可以同时出现多个exclude，但是两个不能同时出现     --&gt;    &lt;context:component-scan base-package=&quot;com.atguigu.ioc.userMod&quot; use-default-filters=&quot;true&quot;&gt;        &lt;!-- &lt;context:include-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt; --&gt;        &lt;!-- &lt;context:include-filter type=&quot;assignable&quot; expression=&quot;com.atguigu.ioc.userMod.service.UserServiceImpl&quot;/&gt; --&gt;        &lt;!-- &lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Repository&quot;/&gt; --&gt;        &lt;!-- &lt;context:exclude-filter type=&quot;assignable&quot; expression=&quot;com.atguigu.ioc.userMod.dao.UserDaoImpl&quot;/&gt; --&gt;    &lt;/context:component-scan&gt;        &lt;!-- &lt;bean id=&quot;userController&quot; class=&quot;com.atguigu.ioc.userMod.controller.UserController&quot;&gt;&lt;/bean&gt;    &lt;bean id=&quot;userServiceImpl&quot; class=&quot;com.atguigu.ioc.userMod.service.UserServiceImpl&quot;&gt;&lt;/bean&gt;    &lt;bean id=&quot;userDaoImpl&quot; class=&quot;com.atguigu.ioc.userMod.dao.UserDaoImpl&quot;&gt;&lt;/bean&gt; --&gt;&lt;/beans&gt;</code></pre><p>8.Test.java</p><pre><code>package com.atguigu.ioc.userMod;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;import com.atguigu.ioc.userMod.controller.UserController;import com.atguigu.ioc.userMod.dao.UserDao;import com.atguigu.ioc.userMod.dao.UserDaoImpl;import com.atguigu.ioc.userMod.service.UserService;import com.atguigu.ioc.userMod.service.UserServiceImpl;public class Test &#123;    public static void main(String[] args) &#123;        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;user.xml&quot;);                UserController uc = ac.getBean(&quot;userController&quot;, UserController.class);        System.out.println(uc);//com.atguigu.ioc.userMod.controller.UserController@4b553d26                UserService us = ac.getBean(&quot;userServiceImpl&quot;, UserServiceImpl.class);        System.out.println(us);//com.atguigu.ioc.userMod.service.UserServiceImpl@69a3d1d                UserDao ud = ac.getBean(&quot;userDaoImpl&quot;, UserDaoImpl.class);        System.out.println(ud);//com.atguigu.ioc.userMod.dao.UserDaoImpl@86be70a    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用注解配置bean&quot;&gt;&lt;a href=&quot;#使用注解配置bean&quot; class=&quot;headerlink&quot; title=&quot;使用注解配置bean&quot;&gt;&lt;/a&gt;使用注解配置bean&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/03/06/%E4%BD</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="使用注解配置bean" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AEbean/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring | 自动装配</title>
    <link href="http://example.com/2022/03/06/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    <id>http://example.com/2022/03/06/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/</id>
    <published>2022-03-06T08:00:49.000Z</published>
    <updated>2022-03-06T08:16:07.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自动装配（自动为属性赋值）"><a href="#自动装配（自动为属性赋值）" class="headerlink" title="自动装配（自动为属性赋值）"></a>自动装配（自动为属性赋值）</h1><p>1.项目目录<br><img src="/2022/03/06/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/1.PNG"></p><p>2.Emp.java</p><pre><code>package com.atguigu.ioc.auto;public class Emp &#123;    private Integer eid;    private String ename;    //private Car car;//类型可以写该类以及该类的父类    private CarExtends car;    //private Dept dept;//类型可以写该类以及该类的父类    private DeptI dept;    public Integer getEid() &#123;        return eid;    &#125;    public void setEid(Integer eid) &#123;        this.eid = eid;    &#125;    public String getEname() &#123;        return ename;    &#125;    public void setEname(String ename) &#123;        this.ename = ename;    &#125;    public CarExtends getCar() &#123;        return car;    &#125;    public void setCar(CarExtends car) &#123;        this.car = car;    &#125;    public DeptI getDept() &#123;        return dept;    &#125;    public void setDept(DeptI dept) &#123;        this.dept = dept;    &#125;    @Override    public String toString() &#123;        return &quot;Emp [eid=&quot; + eid + &quot;, ename=&quot; + ename + &quot;, car=&quot; + car + &quot;, dept=&quot; + dept + &quot;]&quot;;    &#125;    &#125;</code></pre><p>3.CarExtends.java(Car的父类)</p><pre><code>package com.atguigu.ioc.auto;public class CarExtends &#123;&#125;</code></pre><p>4.Car.java</p><pre><code>package com.atguigu.ioc.auto;public class Emp &#123;    private Integer eid;    private String ename;    //private Car car;//类型可以写该类以及该类的父类    private CarExtends car;    //private Dept dept;//类型可以写该类以及该类的父类    private DeptI dept;    public Integer getEid() &#123;        return eid;    &#125;    public void setEid(Integer eid) &#123;        this.eid = eid;    &#125;    public String getEname() &#123;        return ename;    &#125;    public void setEname(String ename) &#123;        this.ename = ename;    &#125;    public CarExtends getCar() &#123;        return car;    &#125;    public void setCar(CarExtends car) &#123;        this.car = car;    &#125;    public DeptI getDept() &#123;        return dept;    &#125;    public void setDept(DeptI dept) &#123;        this.dept = dept;    &#125;    @Override    public String toString() &#123;        return &quot;Emp [eid=&quot; + eid + &quot;, ename=&quot; + ename + &quot;, car=&quot; + car + &quot;, dept=&quot; + dept + &quot;]&quot;;    &#125;    &#125;</code></pre><p>5.DeptI.java（接口）</p><pre><code>package com.atguigu.ioc.auto;public interface DeptI &#123;&#125;</code></pre><p>6.Dept.java（DeptI接口的实现类）</p><pre><code>package com.atguigu.ioc.auto;public class Dept implements DeptI&#123;    private Integer did;    private String dname;    public Integer getDid() &#123;        return did;    &#125;    public void setDid(Integer did) &#123;        this.did = did;    &#125;    public String getDname() &#123;        return dname;    &#125;    public void setDname(String dname) &#123;        this.dname = dname;    &#125;&#125;</code></pre><p>7.auto.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;        &lt;!--        autowire:根据某种策略自动未非字面量属性赋值        autowire=&quot;byName|byType&quot;        byName:通过属性名和spring容器中bean的id进行比较，若一致则可直接赋值        byType:通过spring容器中bean的类型，为兼容性（子类对象为父类赋值，实现类为接口赋值）的属性赋值                 在使用byType的过程中，要求spring容器中只能有一个能为属性赋值的bean                选用建议：当设置autowire属性，会最作用于该bean中所有的非字面量属性，因此谁都不用     --&gt;        &lt;bean id=&quot;emp&quot; class=&quot;com.atguigu.ioc.auto.Emp&quot; autowire=&quot;byName&quot;&gt;&lt;!-- byName/byType --&gt;        &lt;property name=&quot;eid&quot; value=&quot;1001&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;ename&quot; value=&quot;张三&quot;&gt;&lt;/property&gt;        &lt;!-- &lt;property name=&quot;car&quot; ref=&quot;car&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt; --&gt;    &lt;/bean&gt;        &lt;bean id=&quot;car&quot; class=&quot;com.atguigu.ioc.auto.Car&quot;&gt;        &lt;property name=&quot;cid&quot; value=&quot;666666&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;cname&quot; value=&quot;霸道&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;bean id=&quot;dept&quot; class=&quot;com.atguigu.ioc.auto.Dept&quot;&gt;        &lt;property name=&quot;did&quot; value=&quot;1111&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;dname&quot; value=&quot;开发部&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><p>8.Test.java</p><pre><code>package com.atguigu.ioc.auto;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class Test &#123;    public static void main(String[] args) &#123;        // TODO Auto-generated method stub        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;auto.xml&quot;);                Emp bean = ac.getBean(&quot;emp&quot;, Emp.class);                System.out.println(bean);    &#125;&#125;</code></pre><p>9.运行结果</p><pre><code>Emp [eid=1001, ename=张三, car=com.atguigu.ioc.auto.Car@31ef45e3, dept=com.atguigu.ioc.auto.Dept@598067a5]</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自动装配（自动为属性赋值）&quot;&gt;&lt;a href=&quot;#自动装配（自动为属性赋值）&quot; class=&quot;headerlink&quot; title=&quot;自动装配（自动为属性赋值）&quot;&gt;&lt;/a&gt;自动装配（自动为属性赋值）&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="自动装配（自动为属性赋值）" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%EF%BC%88%E8%87%AA%E5%8A%A8%E4%B8%BA%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC%EF%BC%89/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring | 引用外部属性文件</title>
    <link href="http://example.com/2022/03/05/%E5%BC%95%E7%94%A8%E5%A4%96%E9%83%A8%E5%B1%9E%E6%80%A7%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2022/03/05/%E5%BC%95%E7%94%A8%E5%A4%96%E9%83%A8%E5%B1%9E%E6%80%A7%E6%96%87%E4%BB%B6/</id>
    <published>2022-03-06T07:58:42.000Z</published>
    <updated>2022-03-06T08:15:14.354Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引用外部属性文件"><a href="#引用外部属性文件" class="headerlink" title="引用外部属性文件"></a>引用外部属性文件</h1><p>1.项目目录<br><img src="/2022/03/05/%E5%BC%95%E7%94%A8%E5%A4%96%E9%83%A8%E5%B1%9E%E6%80%A7%E6%96%87%E4%BB%B6/1.PNG"></p><p>2.导入druid-1.1.9.jar、mysql-connector-java-5.1.7-bin.jar</p><p>3.db.properties</p><pre><code># k = vjdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/testjdbc.username=rootjdbc.password=123456</code></pre><p>4.datasource.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;        &lt;!-- 直接配置 --&gt;    &lt;!-- &lt;bean id=&quot;datasource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;password&quot; value=&quot;123456&quot;&gt;&lt;/property&gt;    &lt;/bean&gt; --&gt;        &lt;!-- 加载资源文件（引用外部资源文件） --&gt;    &lt;!-- &lt;bean class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;        &lt;property name=&quot;location&quot; value=&quot;db.properties&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;    &lt;bean id=&quot;datasource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt;    &lt;/bean&gt; --&gt;        &lt;!-- 使用context标签加载资源文件（引用外部属性文件） --&gt;    &lt;context:property-placeholder location=&quot;db.properties&quot;/&gt;    &lt;bean class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;        &lt;property name=&quot;location&quot; value=&quot;db.properties&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;    &lt;bean id=&quot;datasource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt;    &lt;/bean&gt; &lt;/beans&gt;</code></pre><p>5.Test.java</p><pre><code>package com.atguigu.ioc.datasource;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;import com.alibaba.druid.pool.DruidDataSource;public class Test &#123;    public static void main(String[] args) throws Exception &#123;        // TODO Auto-generated method stub        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;datasource.xml&quot;);                DruidDataSource bean = ac.getBean(&quot;datasource&quot;, DruidDataSource.class);                System.out.println(bean);                //System.out.println(bean.getConnection());    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;引用外部属性文件&quot;&gt;&lt;a href=&quot;#引用外部属性文件&quot; class=&quot;headerlink&quot; title=&quot;引用外部属性文件&quot;&gt;&lt;/a&gt;引用外部属性文件&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/03/05/%E5%BC%95%E7%9</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="引用外部属性文件" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/%E5%BC%95%E7%94%A8%E5%A4%96%E9%83%A8%E5%B1%9E%E6%80%A7%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring | bean的生命周期</title>
    <link href="http://example.com/2022/03/05/bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://example.com/2022/03/05/bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2022-03-06T07:55:51.000Z</published>
    <updated>2022-03-06T08:15:14.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="bean的生命周期、bean的后置处理器"><a href="#bean的生命周期、bean的后置处理器" class="headerlink" title="bean的生命周期、bean的后置处理器"></a>bean的生命周期、bean的后置处理器</h1><p>1.项目目录<br><img src="/2022/03/05/bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/1.PNG"></p><p>2.bean的生命周期（******）<br>① 通过构造器或工厂方法创建bean实例<br>② 为bean的属性设置值和对其他bean的引用<br>③ 调用bean的初始化方法<br>④  bean可以使用了<br>⑤ 当容器关闭时，调用bean的销毁方法</p><p>3.Person.java</p><pre><code>package com.atguigu.ioc.life;public class Person &#123;    private Integer id;    private String sex;    private String name;        public Integer getId() &#123;        return id;    &#125;        public void setId(Integer id) &#123;        System.out.println(&quot;Two:依赖注入&quot;);        this.id = id;    &#125;        public String getSex() &#123;        return sex;    &#125;        public void setSex(String sex) &#123;        this.sex = sex;    &#125;        public String getName() &#123;        return name;    &#125;        public void setName(String name) &#123;        this.name = name;    &#125;        public Person() &#123;        System.out.println(&quot;One:创建对象&quot;);    &#125;        public void init()&#123;        System.out.println(&quot;Three:初始化&quot;);    &#125;            @Override    public String toString() &#123;        return &quot;Four: Person [id=&quot; + id + &quot;, sex=&quot; + sex + &quot;, name=&quot; + name + &quot;]&quot;;    &#125;    public void destroy()&#123;        System.out.println(&quot;Five:销毁&quot;);    &#125;&#125;</code></pre><p>4.AfterHandler.java(后置处理器)</p><pre><code>package com.atguigu.ioc.life;import org.springframework.beans.BeansException;import org.springframework.beans.factory.config.BeanPostProcessor;public class AfterHandler implements BeanPostProcessor&#123;    @Override    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123;        // TODO Auto-generated method stub        return bean;    &#125;    @Override    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123;        Person person = (Person)bean;        if(person.getSex().equals(&quot;男&quot;))&#123;            person.setName(&quot;张无忌&quot;);        &#125;else&#123;            person.setName(&quot;赵敏&quot;);        &#125;        return person;    &#125; &#125;</code></pre><p>5.life.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;        &lt;!-- 测试bean的生命周期 --&gt;    &lt;bean id=&quot;person&quot; class=&quot;com.atguigu.ioc.life.Person&quot; init-method=&quot;init&quot; destroy-method=&quot;destroy&quot;&gt;        &lt;property name=&quot;id&quot; value=&quot;1001&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;sex&quot; value=&quot;男&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;!-- 测试后置处理器 --&gt;    &lt;bean class=&quot;com.atguigu.ioc.life.AfterHandler&quot;&gt;&lt;/bean&gt;&lt;/beans&gt;</code></pre><p>6.Test.java</p><pre><code>package com.atguigu.ioc.life;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class Test &#123;    public static void main(String[] args) &#123;        // TODO Auto-generated method stub        ClassPathXmlApplicationContext ac = new ClassPathXmlApplicationContext(&quot;life.xml&quot;);                Person person = ac.getBean(&quot;person&quot;, Person.class);        System.out.println(person);                ac.close();    &#125;&#125;</code></pre><p>7.运行结果</p><pre><code>One:创建对象Two:依赖注入Three:初始化Four: Person [id=1001, sex=男, name=张无忌]二月 15, 2022 4:34:28 下午 org.springframework.context.support.ClassPathXmlApplicationContext doClose信息: Closing org.springframework.context.support.ClassPathXmlApplicationContext@2dda6444: startup date [Tue Feb 15 16:34:27 CST 2022]; root of context hierarchyFive:销毁</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;bean的生命周期、bean的后置处理器&quot;&gt;&lt;a href=&quot;#bean的生命周期、bean的后置处理器&quot; class=&quot;headerlink&quot; title=&quot;bean的生命周期、bean的后置处理器&quot;&gt;&lt;/a&gt;bean的生命周期、bean的后置处理器&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="bean的生命周期、bean的后置处理器" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E3%80%81bean%E7%9A%84%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring | bean的作用域</title>
    <link href="http://example.com/2022/03/05/bean%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://example.com/2022/03/05/bean%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/</id>
    <published>2022-03-06T07:53:10.000Z</published>
    <updated>2022-03-06T08:15:25.213Z</updated>
    
    <content type="html"><![CDATA[<h1 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h1><p>1.项目目录<br><img src="/2022/03/05/bean%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/1.PNG"></p><p>2.Student.java</p><pre><code>package com.atguigu.ioc.scope;public class Student &#123;    private Integer sid;    private String sname;    public Student() &#123;        System.out.println(&quot;Student 无参构造方法&quot;);    &#125;    public Integer getSid() &#123;        return sid;    &#125;    public void setSid(Integer sid) &#123;        this.sid = sid;    &#125;    public String getSname() &#123;        return sname;    &#125;    public void setSname(String sname) &#123;        this.sname = sname;    &#125;//    @Override//    public String toString() &#123;//        return &quot;Student [sid=&quot; + sid + &quot;, sname=&quot; + sname + &quot;]&quot;;//    &#125;&#125;</code></pre><p>3.scope.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;        &lt;bean id=&quot;student&quot; class=&quot;com.atguigu.ioc.scope.Student&quot; scope=&quot;singleton&quot;&gt;        &lt;property name=&quot;sid&quot; value=&quot;1001&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;sname&quot; value=&quot;张三&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><p>4.Test.java</p><pre><code>package com.atguigu.ioc.scope;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class Test &#123;    public static void main(String[] args)&#123;        /**         * 若spring中有单例模式（singleton）的bean，在初始化容器时就会创建此对象         * 而多例即原型(prototype)的bean，会在使用时创建         */        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;scope.xml&quot;);        //        Student student1 = ac.getBean(&quot;student&quot;,Student.class);//        Student student2 = ac.getBean(&quot;student&quot;,Student.class);//        //        System.out.println(student1);//        System.out.println(student2);    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;bean的作用域&quot;&gt;&lt;a href=&quot;#bean的作用域&quot; class=&quot;headerlink&quot; title=&quot;bean的作用域&quot;&gt;&lt;/a&gt;bean的作用域&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/03/05/bean%E7%9A%84%</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="bean的作用域" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/bean%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring | FactoryBean</title>
    <link href="http://example.com/2022/03/05/FactoryBean/"/>
    <id>http://example.com/2022/03/05/FactoryBean/</id>
    <published>2022-03-06T07:49:32.000Z</published>
    <updated>2022-03-06T08:15:29.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h1><p>Spring中有两种类型的bean，一种是普通bean，另一种是工厂bean，即FactoryBean。工厂bean跟普通bean不同，其返回的对象不是指定类的一个实例，其返回的是该工厂bean的getObject方法所返回的对象。<br><strong>示例：</strong><br>1.项目目录<br><img src="/2022/03/05/FactoryBean/1.PNG"></p><p>2.Car.java</p><pre><code>package com.atguigu.spring.factorybean;public class Car &#123;    private String brand;    private Double price;    public String getBrand() &#123;        return brand;    &#125;    public void setBrand(String brand) &#123;        this.brand = brand;    &#125;    @Override    public String toString() &#123;        return &quot;Car [brand=&quot; + brand + &quot;, price=&quot; + price + &quot;]&quot;;    &#125;    public Double getPrice() &#123;        return price;    &#125;    public void setPrice(Double price) &#123;        this.price = price;    &#125;    &#125;</code></pre><p>3.MyFactory.java</p><pre><code>package com.atguigu.spring.factorybean;import org.springframework.beans.factory.FactoryBean;public class MyFactory implements FactoryBean&lt;Car&gt;&#123;    @Override    public Car getObject() throws Exception &#123;        Car car = new Car();        car.setBrand(&quot;奥迪&quot;);        car.setPrice(200000.0);        return car;    &#125;    @Override    public Class&lt;?&gt; getObjectType() &#123;        return Car.class;    &#125;    @Override    public boolean isSingleton() &#123;        return false;    &#125;&#125;</code></pre><p>4.factory-bean.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;        &lt;!-- 工厂bean --&gt;    &lt;bean id=&quot;factory&quot; class=&quot;com.atguigu.spring.factorybean.MyFactory&quot;&gt;&lt;/bean&gt;&lt;/beans&gt;</code></pre><p>5.Test.java</p><pre><code>package com.atguigu.spring.factorybean;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class Test &#123;    public static void main(String[] args) &#123;        // TODO Auto-generated method stub        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;factory-bean.xml&quot;);        Object bean = ac.getBean(&quot;factory&quot;);        System.out.println(bean);    &#125;&#125;</code></pre><p>6.运行结果<br>Car [brand=奥迪, price=200000.0]</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;FactoryBean&quot;&gt;&lt;a href=&quot;#FactoryBean&quot; class=&quot;headerlink&quot; title=&quot;FactoryBean&quot;&gt;&lt;/a&gt;FactoryBean&lt;/h1&gt;&lt;p&gt;Spring中有两种类型的bean，一种是普通bean，另一种是工厂</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="FactoryBean" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/FactoryBean/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring | 属性赋值</title>
    <link href="http://example.com/2022/03/05/%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC/"/>
    <id>http://example.com/2022/03/05/%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC/</id>
    <published>2022-03-06T07:45:07.000Z</published>
    <updated>2022-03-06T08:15:37.988Z</updated>
    
    <content type="html"><![CDATA[<h1 id="属性赋值-字面量和ref"><a href="#属性赋值-字面量和ref" class="headerlink" title="属性赋值-字面量和ref"></a>属性赋值-字面量和ref</h1><p>spring管理对象时，可以使用<property></property>标签给对象的属性赋值。<br>1.字面量<br><property name="name" vlaue="张三"></property><br><property name="age" vlaue="23"></property><br>…..<br>2.外部已声明的bean引用其他的bean(使用ref属性)<br>3.内部bean<br>4.集合属性赋值（list/array/set）<br>示例：<br>1.项目目录<br><img src="/2022/03/05/%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC/2.PNG"><br>2.Student.java</p><pre><code>package com.atguigu.spring.di;public class Student &#123;    private Integer id;    private String name;    private Integer age;    private String sex;    private Double score;    private Teacher teacher;            public Teacher getTeacher() &#123;        return teacher;    &#125;    public void setTeacher(Teacher teacher) &#123;        this.teacher = teacher;    &#125;    public Double getScore() &#123;        return score;    &#125;        public void setScore(Double score) &#123;        this.score = score;    &#125;        public Integer getId() &#123;        return id;    &#125;        public void setId(Integer id) &#123;        this.id = id;    &#125;        public String getName() &#123;        return name;    &#125;        public void setName(String name) &#123;        this.name = name;    &#125;        public Integer getAge() &#123;        return age;    &#125;        public void setAge(Integer age) &#123;        this.age = age;    &#125;        public String getSex() &#123;        return sex;    &#125;        public void setSex(String sex) &#123;        this.sex = sex;    &#125;        @Override    public String toString() &#123;        return &quot;Student [id=&quot; + id + &quot;, name=&quot; + name + &quot;, age=&quot; + age + &quot;, sex=&quot; + sex + &quot;, score=&quot; + score                + &quot;, teacher=&quot; + teacher + &quot;]&quot;;    &#125;    public Student() &#123;        super();        // TODO Auto-generated constructor stub    &#125;        public Student(Integer id, String name, Integer age, String sex) &#123;        super();        this.id = id;        this.name = name;        this.age = age;        this.sex = sex;    &#125;        public Student(Integer id, String name, Double score, String sex)&#123;        this.id = id;        this.name = name;        this.score = score;        this.sex = sex;    &#125;&#125;</code></pre><p>3.Teacher.java</p><pre><code>package com.atguigu.spring.di;import java.util.List;import java.util.Map;public class Teacher &#123;    private Integer tid;        private String tname;        private List&lt;String&gt; cls;        private List&lt;Student&gt; students;        private Map&lt;String, String&gt; bossMap;        public Map&lt;String, String&gt; getBossMap() &#123;        return bossMap;    &#125;    public void setBossMap(Map&lt;String, String&gt; bossMap) &#123;        this.bossMap = bossMap;    &#125;    public List&lt;Student&gt; getStudents() &#123;        return students;    &#125;    public void setStudents(List&lt;Student&gt; students) &#123;        this.students = students;    &#125;    public List&lt;String&gt; getCls() &#123;        return cls;    &#125;    public void setCls(List&lt;String&gt; cls) &#123;        this.cls = cls;    &#125;    public Integer getTid() &#123;        return tid;    &#125;    public void setTid(Integer tid) &#123;        this.tid = tid;    &#125;    public String getTname() &#123;        return tname;    &#125;    public void setTname(String tname) &#123;        this.tname = tname;    &#125;    @Override    public String toString() &#123;        return &quot;Teacher [tid=&quot; + tid + &quot;, tname=&quot; + tname + &quot;, cls=&quot; + cls + &quot;, students=&quot; + students + &quot;, bossMap=&quot;                + bossMap + &quot;]&quot;;    &#125;        &#125;</code></pre><p>5.beans-di.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:p=&quot;http://www.springframework.org/schema/p&quot;    xmlns:util=&quot;http://www.springframework.org/schema/util&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd&quot;&gt;    &lt;bean id=&quot;s1&quot; class=&quot;com.atguigu.spring.di.Student&quot;&gt;        &lt;!-- 通过set方法注入 --&gt;        &lt;property name=&quot;id&quot; value=&quot;10010&quot;&gt;&lt;/property&gt;        &lt;!--             &lt;property name=&quot;id&quot;&gt;                &lt;value&gt;10010&lt;/value&gt;            &lt;/property&gt;         --&gt;                 &lt;property name=&quot;name&quot; value=&quot;张三&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;age&quot; value=&quot;23&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;sex&quot; value=&quot;男&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;            &lt;bean id=&quot;s2&quot; class=&quot;com.atguigu.spring.di.Student&quot;&gt;        &lt;!-- 通过构造方法注入 --&gt;        &lt;constructor-arg value=&quot;10086&quot;&gt;&lt;/constructor-arg&gt;        &lt;constructor-arg value=&quot;李四&quot;&gt;&lt;/constructor-arg&gt;        &lt;constructor-arg value=&quot;24&quot;&gt;&lt;/constructor-arg&gt;        &lt;constructor-arg value=&quot;女&quot;&gt;&lt;/constructor-arg&gt;    &lt;/bean&gt;        &lt;bean id=&quot;s3&quot; class=&quot;com.atguigu.spring.di.Student&quot;&gt;        &lt;!-- 通过构造方法注入 --&gt;        &lt;constructor-arg value=&quot;10022&quot;&gt;&lt;/constructor-arg&gt;        &lt;constructor-arg value=&quot;王五&quot;&gt;&lt;/constructor-arg&gt;        &lt;constructor-arg value=&quot;90&quot; index=&quot;2&quot; type=&quot;java.lang.Double&quot;&gt;&lt;/constructor-arg&gt;        &lt;constructor-arg value=&quot;女&quot;&gt;&lt;/constructor-arg&gt;    &lt;/bean&gt;        &lt;!-- Namespaces勾选p（beans标签会增加内容xmlns:p=&quot;http://www.springframework.org/schema/p&quot;） --&gt;    &lt;bean id=&quot;s4&quot; class=&quot;com.atguigu.spring.di.Student&quot; p:id=&quot;10033&quot; p:name=&quot;赵六&quot; p:age=&quot;26&quot; p:sex=&quot;男&quot; p:teacher-ref=&quot;teacher&quot;&gt;&lt;/bean&gt;        &lt;!-- 给bean的级联属性赋值 --&gt;    &lt;bean id=&quot;s5&quot; class=&quot;com.atguigu.spring.di.Student&quot;&gt;        &lt;property name=&quot;id&quot; value=&quot;10055&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;name&quot; value=&quot;张三三&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;age&quot; value=&quot;23&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;sex&quot; value=&quot;男&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;teacher&quot; ref=&quot;teacher&quot;&gt;&lt;/property&gt;                &lt;!-- 级联测试 给bean的级联属性赋值--&gt;        &lt;property name=&quot;teacher.tname&quot; value=&quot;小红&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;            &lt;!-- 外部已声明的bean、引用其他的bean --&gt;    &lt;bean id=&quot;teacher&quot; class=&quot;com.atguigu.spring.di.Teacher&quot;&gt;        &lt;property name=&quot;tid&quot; value=&quot;10000&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;tname&quot; value=&quot;小明&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;!-- 内部bean --&gt;    &lt;bean id=&quot;s6&quot; class=&quot;com.atguigu.spring.di.Student&quot;&gt;        &lt;property name=&quot;id&quot; value=&quot;10066&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;name&quot; value=&quot;崔八&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;age&quot; value=&quot;18&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;sex&quot; value=&quot;男&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;teacher&quot;&gt;            &lt;bean id=&quot;tt&quot; class=&quot;com.atguigu.spring.di.Teacher&quot;&gt;                &lt;property name=&quot;tid&quot; value=&quot;2222&quot;&gt;&lt;/property&gt;                &lt;property name=&quot;tname&quot; value=&quot;admin&quot;&gt;&lt;/property&gt;            &lt;/bean&gt;        &lt;/property&gt;    &lt;/bean&gt;    &lt;!-- 定义在某个bean内部的bean，只能在当前bean中使用 --&gt;    &lt;!--         &lt;bean id=&quot;s7&quot; class=&quot;com.atguigu.spring.di.Student&quot;&gt;            &lt;property name=&quot;id&quot; value=&quot;10066&quot;&gt;&lt;/property&gt;            &lt;property name=&quot;name&quot; value=&quot;崔八&quot;&gt;&lt;/property&gt;            &lt;property name=&quot;age&quot; value=&quot;18&quot;&gt;&lt;/property&gt;            &lt;property name=&quot;sex&quot; value=&quot;男&quot;&gt;&lt;/property&gt;            &lt;property name=&quot;teacher&quot; ref=&quot;tt&quot;&gt;            &lt;/property&gt;        &lt;/bean&gt;     --&gt;          &lt;!-- list属性赋值1 --&gt;     &lt;bean id=&quot;t1&quot; class=&quot;com.atguigu.spring.di.Teacher&quot;&gt;        &lt;property name=&quot;tid&quot; value=&quot;0000&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;tname&quot; value=&quot;佟老师&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;cls&quot;&gt;            &lt;list&gt;                &lt;value&gt;A&lt;/value&gt;                &lt;value&gt;B&lt;/value&gt;                &lt;value&gt;C&lt;/value&gt;            &lt;/list&gt;        &lt;/property&gt;     &lt;/bean&gt;          &lt;!-- list属性赋值2 --&gt;     &lt;bean id=&quot;t2&quot; class=&quot;com.atguigu.spring.di.Teacher&quot;&gt;        &lt;property name=&quot;tid&quot; value=&quot;10002&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;tname&quot; value=&quot;婷姐&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;students&quot;&gt;            &lt;list&gt;                &lt;ref bean=&quot;s1&quot;/&gt;                &lt;ref bean=&quot;s2&quot;/&gt;                &lt;ref bean=&quot;s3&quot;/&gt;            &lt;/list&gt;        &lt;/property&gt;     &lt;/bean&gt;          &lt;!-- array属性赋值 --&gt;     &lt;!-- set属性赋值 --&gt;          &lt;!-- map属性赋值 --&gt;     &lt;bean id=&quot;t3&quot; class=&quot;com.atguigu.spring.di.Teacher&quot;&gt;        &lt;property name=&quot;tid&quot; value=&quot;10003&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;tname&quot; value=&quot;admin&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;bossMap&quot;&gt;            &lt;map&gt;                &lt;entry&gt;                    &lt;key&gt;                        &lt;value&gt;10001&lt;/value&gt;                    &lt;/key&gt;                    &lt;value&gt;佟老师&lt;/value&gt;                &lt;/entry&gt;                                &lt;entry&gt;                    &lt;key&gt;                        &lt;value&gt;10002&lt;/value&gt;                    &lt;/key&gt;                    &lt;value&gt;陈老师&lt;/value&gt;                &lt;/entry&gt;            &lt;/map&gt;        &lt;/property&gt;     &lt;/bean&gt;          &lt;bean id=&quot;t4&quot; class=&quot;com.atguigu.spring.di.Teacher&quot;&gt;        &lt;property name=&quot;tid&quot; value=&quot;10004&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;tname&quot; value=&quot;root&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;students&quot; ref=&quot;students&quot;&gt;&lt;/property&gt;     &lt;/bean&gt;        &lt;util:list id=&quot;students&quot;&gt;        &lt;ref bean=&quot;s4&quot;/&gt;        &lt;ref bean=&quot;s5&quot;/&gt;        &lt;ref bean=&quot;s6&quot;/&gt;    &lt;/util:list&gt;        &lt;util:map id=&quot;map&quot;&gt;        &lt;entry&gt;            &lt;key&gt;                &lt;value&gt;1&lt;/value&gt;            &lt;/key&gt;            &lt;value&gt;张三&lt;/value&gt;        &lt;/entry&gt;    &lt;/util:map&gt;&lt;/beans&gt;</code></pre><p>6.Test.java</p><pre><code>package com.atguigu.spring.di;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class Test &#123;    public static void main(String[] args) &#123;        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;beans-di.xml&quot;);                Student s1 = ac.getBean(&quot;s1&quot;, Student.class);        Student s2 = ac.getBean(&quot;s2&quot;, Student.class);        Student s3 = ac.getBean(&quot;s3&quot;, Student.class);        Student s4 = ac.getBean(&quot;s4&quot;, Student.class);        Student s5 = ac.getBean(&quot;s5&quot;, Student.class);        Student s6 = ac.getBean(&quot;s6&quot;, Student.class);        Teacher t1 = ac.getBean(&quot;t1&quot;, Teacher.class);        Teacher t2 = ac.getBean(&quot;t2&quot;, Teacher.class);        Teacher t3 = ac.getBean(&quot;t3&quot;, Teacher.class);        Teacher t4 = ac.getBean(&quot;t4&quot;, Teacher.class);                System.out.println(s1);        System.out.println(s2);        System.out.println(s3);        System.out.println(s4);        System.out.println(s5);        System.out.println(s6);        System.out.println(t1);        System.out.println(t2);        System.out.println(t3);        System.out.println(t4);    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;属性赋值-字面量和ref&quot;&gt;&lt;a href=&quot;#属性赋值-字面量和ref&quot; class=&quot;headerlink&quot; title=&quot;属性赋值-字面量和ref&quot;&gt;&lt;/a&gt;属性赋值-字面量和ref&lt;/h1&gt;&lt;p&gt;spring管理对象时，可以使用&lt;property&gt;&lt;/pr</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="依赖注入" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
    <category term="属性赋值" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring | 注入方式</title>
    <link href="http://example.com/2022/03/05/%E6%B3%A8%E5%85%A5%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2022/03/05/%E6%B3%A8%E5%85%A5%E6%96%B9%E5%BC%8F/</id>
    <published>2022-03-06T07:34:44.000Z</published>
    <updated>2022-03-06T08:15:46.579Z</updated>
    
    <content type="html"><![CDATA[<h1 id="依赖注入的两种方式"><a href="#依赖注入的两种方式" class="headerlink" title="依赖注入的两种方式"></a>依赖注入的两种方式</h1><ol><li>通过bean的setXxx()方法赋值</li><li>通过bean的构造器赋值<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2></li><li>项目目录<br><img src="/2022/03/05/%E6%B3%A8%E5%85%A5%E6%96%B9%E5%BC%8F/1.PNG"></li></ol><p>2.创建Student.java</p><pre><code>package com.atguigu.spring.di;public class Student &#123;    private Integer id;    private String name;    private Integer age;    private String sex;    private Double score;    public Double getScore() &#123;        return score;    &#125;    public void setScore(Double score) &#123;        this.score = score;    &#125;    public Integer getId() &#123;        return id;    &#125;    public void setId(Integer id) &#123;        this.id = id;    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name = name;    &#125;    public Integer getAge() &#123;        return age;    &#125;    public void setAge(Integer age) &#123;        this.age = age;    &#125;    public String getSex() &#123;        return sex;    &#125;    public void setSex(String sex) &#123;        this.sex = sex;    &#125;        @Override    public String toString() &#123;        return &quot;Student [id=&quot; + id + &quot;, name=&quot; + name + &quot;, age=&quot; + age + &quot;, sex=&quot; + sex + &quot;, score=&quot; + score + &quot;]&quot;;    &#125;    public Student() &#123;        super();        // TODO Auto-generated constructor stub    &#125;    public Student(Integer id, String name, Integer age, String sex) &#123;        super();        this.id = id;        this.name = name;        this.age = age;        this.sex = sex;    &#125;        public Student(Integer id, String name, Double score, String sex)&#123;        this.id = id;        this.name = name;        this.score = score;        this.sex = sex;    &#125;&#125;</code></pre><p>3.创建beans-di.xml配置文件</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:p=&quot;http://www.springframework.org/schema/p&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;    &lt;bean id=&quot;s1&quot; class=&quot;com.atguigu.spring.di.Student&quot;&gt;        &lt;!-- 通过set方法注入 --&gt;        &lt;property name=&quot;id&quot; value=&quot;10010&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;name&quot; value=&quot;张三&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;age&quot; value=&quot;23&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;sex&quot; value=&quot;男&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;            &lt;bean id=&quot;s2&quot; class=&quot;com.atguigu.spring.di.Student&quot;&gt;        &lt;!-- 通过构造方法注入 --&gt;        &lt;constructor-arg value=&quot;10086&quot;&gt;&lt;/constructor-arg&gt;        &lt;constructor-arg value=&quot;李四&quot;&gt;&lt;/constructor-arg&gt;        &lt;constructor-arg value=&quot;24&quot;&gt;&lt;/constructor-arg&gt;        &lt;constructor-arg value=&quot;女&quot;&gt;&lt;/constructor-arg&gt;    &lt;/bean&gt;        &lt;bean id=&quot;s3&quot; class=&quot;com.atguigu.spring.di.Student&quot;&gt;        &lt;!-- 通过构造方法注入 --&gt;        &lt;constructor-arg value=&quot;10022&quot;&gt;&lt;/constructor-arg&gt;        &lt;constructor-arg value=&quot;王五&quot;&gt;&lt;/constructor-arg&gt;        &lt;constructor-arg value=&quot;90&quot; index=&quot;2&quot; type=&quot;java.lang.Double&quot;&gt;&lt;/constructor-arg&gt;        &lt;constructor-arg value=&quot;女&quot;&gt;&lt;/constructor-arg&gt;    &lt;/bean&gt;    &lt;!-- Namespaces勾选p（beans标签会增加内容xmlns:p=&quot;http://www.springframework.org/schema/p&quot;） --&gt;    &lt;bean id=&quot;s4&quot; class=&quot;com.atguigu.spring.di.Student&quot; p:id=&quot;10033&quot; p:name=&quot;赵六&quot; p:age=&quot;26&quot; p:sex=&quot;男&quot;&gt;&lt;/bean&gt;&lt;/beans&gt;</code></pre><p>4.编写测试类</p><pre><code>package com.atguigu.spring.di;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class Test &#123;    public static void main(String[] args) &#123;        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;beans-di.xml&quot;);                Student s1 = ac.getBean(&quot;s1&quot;, Student.class);        Student s2 = ac.getBean(&quot;s2&quot;, Student.class);        Student s3 = ac.getBean(&quot;s3&quot;, Student.class);        Student s4 = ac.getBean(&quot;s4&quot;, Student.class);        System.out.println(s1);        System.out.println(s2);        System.out.println(s3);        System.out.println(s4);    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;依赖注入的两种方式&quot;&gt;&lt;a href=&quot;#依赖注入的两种方式&quot; class=&quot;headerlink&quot; title=&quot;依赖注入的两种方式&quot;&gt;&lt;/a&gt;依赖注入的两种方式&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;通过bean的setXxx()方法赋值&lt;/li&gt;
&lt;li&gt;通过bean的</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="依赖注入" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
    <category term="依赖注入的两种方式" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    
    
    <category term="p命名空间" scheme="http://example.com/tags/p%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
    
    <category term="依赖注入的两种方式" scheme="http://example.com/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>spring | spring简单案例</title>
    <link href="http://example.com/2022/01/27/spring%E7%AE%80%E5%8D%95%E6%A1%88%E4%BE%8B/"/>
    <id>http://example.com/2022/01/27/spring%E7%AE%80%E5%8D%95%E6%A1%88%E4%BE%8B/</id>
    <published>2022-01-27T11:24:34.000Z</published>
    <updated>2022-01-27T13:28:14.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring简单案例"><a href="#spring简单案例" class="headerlink" title="spring简单案例"></a>spring简单案例</h1><h2 id="使用软件：STS"><a href="#使用软件：STS" class="headerlink" title="使用软件：STS"></a>使用软件：STS</h2><p><a href="https://www.cnblogs.com/larryzeal/p/5800980.html">下载地址</a></p><h2 id="搭建spring运行时环境"><a href="#搭建spring运行时环境" class="headerlink" title="搭建spring运行时环境"></a>搭建spring运行时环境</h2><p>1.加入JAR包<br>1)Spring自身JAR包：spring-framework-4.0.0.RELEASE\libs目录下<br>spring-beans-4.0.0.RELEASE.jar<br>spring-context-4.0.0.RELE2ASE.jar<br>spring-core-4.0.0.RELEASE.jar<br>spring-expression-4.0.0.RELEASE.jar<br>2)commons-logging-1.1.1.jar<br>注：将以上所有的jar包复制到项目中的lib目录下并全选所有jar包–&gt;右键–&gt;build path–&gt;config bulid path<br>2.在Spring Tool Suite工具中通过如下步骤创建Spring的配置文件<br>1)File-&gt;New-&gt;Spring Bean Configuration File<br>2)为文件取名字 例如：applicationContext.xml<br><img src="/2022/01/27/spring%E7%AE%80%E5%8D%95%E6%A1%88%E4%BE%8B/1.PNG"></p><h2 id="创建一个类：Person-java"><a href="#创建一个类：Person-java" class="headerlink" title="创建一个类：Person.java"></a>创建一个类：Person.java</h2><pre><code>package com.atguigu.spring.mod;public class Person &#123;    private Integer id;    private String name;    public Integer getId() &#123;        return id;    &#125;    public void setId(Integer id) &#123;        this.id = id;    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name = name;    &#125;    @Override    public String toString() &#123;        return &quot;Person [id=&quot; + id + &quot;, name=&quot; + name + &quot;]&quot;;    &#125;    &#125;</code></pre><h2 id="常规方法操作对象"><a href="#常规方法操作对象" class="headerlink" title="常规方法操作对象"></a>常规方法操作对象</h2><p>创建一个测试类Test.java</p><pre><code>package com.atguigu.spring.mod;public class Test &#123;    public static void main(String[] args)&#123;        Person person = new Person();        person.setId(1);        person.setName(&quot;zhangsan&quot;);        System.out.println(person);    &#125;&#125;</code></pre><h2 id="spring管理对象"><a href="#spring管理对象" class="headerlink" title="spring管理对象"></a>spring管理对象</h2><p>1.创建applicationContext.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;    &lt;!-- 命名空间 规定当前的文件里面能写什么--&gt;    &lt;!--        &lt;bean&gt;：定义spring管理的一个对象        id:该对象的唯一标识，注意不能重复,在类型获取bean的过程中可以不设置        class:该对象所属类的全限定名     --&gt;        &lt;!-- 通过反射创建对象 --&gt;    &lt;bean id=&quot;person&quot; class=&quot;com.atguigu.spring.mod.Person&quot;&gt;        &lt;!--            &lt;property&gt;:为对象的某个属性赋值            name:属性名            value:属性值         --&gt;        &lt;property name=&quot;id&quot; value=&quot;1111&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;name&quot; value=&quot;小明&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;    &lt;/beans&gt;</code></pre><p>2.创建一个测试类TestBySpring.java</p><pre><code>package com.atguigu.spring.mod;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class TestBySpring &#123;    public static void main(String[] args) &#123;        //初始化容器        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);                //通过getBean()获取对象        Person person = (Person) ac.getBean(&quot;person&quot;);        System.out.println(person);    &#125;&#125;</code></pre><p><strong>注：IOC和DI</strong><br>反转控制（IOC）：对象的管理权（创建、赋值等）由程序员交给了spring容器<br>依赖注入（DI）:bean对象依赖于属性 向属性注入资源（赋值）<br>总结: IOC 就是一种反转控制的思想， 而DI是对IOC的一种具体实现。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;spring简单案例&quot;&gt;&lt;a href=&quot;#spring简单案例&quot; class=&quot;headerlink&quot; title=&quot;spring简单案例&quot;&gt;&lt;/a&gt;spring简单案例&lt;/h1&gt;&lt;h2 id=&quot;使用软件：STS&quot;&gt;&lt;a href=&quot;#使用软件：STS&quot; cla</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="spring简单案例" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/spring/spring%E7%AE%80%E5%8D%95%E6%A1%88%E4%BE%8B/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="框架" scheme="http://example.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="IOC" scheme="http://example.com/tags/IOC/"/>
    
    <category term="DI" scheme="http://example.com/tags/DI/"/>
    
    <category term="控制反转" scheme="http://example.com/tags/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC/"/>
    
    <category term="依赖注入" scheme="http://example.com/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>框架 | Java中的6大框架</title>
    <link href="http://example.com/2022/01/26/Java%E4%B8%AD%E7%9A%846%E5%A4%A7%E6%A1%86%E6%9E%B6/"/>
    <id>http://example.com/2022/01/26/Java%E4%B8%AD%E7%9A%846%E5%A4%A7%E6%A1%86%E6%9E%B6/</id>
    <published>2022-01-27T04:48:39.000Z</published>
    <updated>2022-01-27T04:52:32.894Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java中的6大框架"><a href="#Java中的6大框架" class="headerlink" title="Java中的6大框架"></a>Java中的6大框架</h1><p><strong>6大框架</strong><br>1)structs1<br>2)structs2<br>3)hibernate<br>4)spring<br>5)springMVC<br>6)mybatis<br><strong>SSM</strong><br><strong>SSM=spring+springMVC+mybatis</strong><br><strong>框架分类</strong><br>MVC框架：struts1(封装了servlet),struts2(封装了filter),springMVC<br>持久层框架：hibernate,mybatis<br>整合型框架，设计型框架：spring</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java中的6大框架&quot;&gt;&lt;a href=&quot;#Java中的6大框架&quot; class=&quot;headerlink&quot; title=&quot;Java中的6大框架&quot;&gt;&lt;/a&gt;Java中的6大框架&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;6大框架&lt;/strong&gt;&lt;br&gt;1)structs1&lt;br</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Java中的6大框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/Java%E4%B8%AD%E7%9A%846%E5%A4%A7%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="框架" scheme="http://example.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb项目开发 | 事务</title>
    <link href="http://example.com/2022/01/26/%E4%BA%8B%E5%8A%A1/"/>
    <id>http://example.com/2022/01/26/%E4%BA%8B%E5%8A%A1/</id>
    <published>2022-01-26T11:46:22.000Z</published>
    <updated>2022-01-26T12:09:44.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>当我们一次需要执行多条sql语句时就要考虑控制事务以避免出现一些错误。<br>例如：当我们从一个账户给另一个账户转账时，假设第一个账户的余额已经扣除，此时电脑断电了，<br>第二个账户的余额也没有增加；为了避免此类事情的发生，我们可以对事物进行控制，要么增扣除和增加都成功，<br>要么扣除、增加都失败。<br><strong>创建表user</strong></p><pre><code>CREATE TABLE user(id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,NAME VARCHAR(20),balance DOUBLE);</code></pre><p><strong>创建测试类Test1.java</strong></p><pre><code>package com.oracle.test;import java.sql.SQLException;import org.apache.commons.dbutils.QueryRunner;import com.oracle.utils.DataSourceUtils;public class Test1 &#123;    public static void main(String[] args)&#123;        try &#123;            //开启事务            DataSourceUtils.startTransaction();            //创建QueryRunner对象            QueryRunner qr = new QueryRunner();            //编写sql语句            String sql1 = &quot;update user set balance=balance-500 where id=1&quot;;            String sql2 = &quot;update user set balance=balance+500 where id=2&quot;;            //执行sql            qr.update(DataSourceUtils.getConnection(), sql1);                        //失败            int c=100/0;                        qr.update(DataSourceUtils.getConnection(), sql2);            //事务提交            DataSourceUtils.commitAndRelease();            //关闭事务            DataSourceUtils.closeConnection();        &#125; catch (Exception e) &#123;            //失败则回滚            try &#123;                DataSourceUtils.rollback();            &#125; catch (Exception e1) &#123;                // TODO Auto-generated catch block                e1.printStackTrace();            &#125;        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h1&gt;&lt;p&gt;当我们一次需要执行多条sql语句时就要考虑控制事务以避免出现一些错误。&lt;br&gt;例如：当我们从一个账户给另一个账户转账时，假设第一个账户的余额</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="JavaWeb项目开发" scheme="http://example.com/categories/Java/JavaWeb%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
    
    <category term="事务" scheme="http://example.com/categories/Java/JavaWeb%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/%E4%BA%8B%E5%8A%A1/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="事务" scheme="http://example.com/tags/%E4%BA%8B%E5%8A%A1/"/>
    
    <category term="数据库" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
</feed>
