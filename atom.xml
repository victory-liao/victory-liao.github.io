<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Victory&#39;s Blog</title>
  
  <subtitle>非淡泊无以明志，非宁静无以致远</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-10-11T09:08:40.332Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>victory-liao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GPU | CPU和GPU的设计区别</title>
    <link href="http://example.com/2021/10/11/CPU%E5%92%8CGPU%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2021/10/11/CPU%E5%92%8CGPU%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%8C%BA%E5%88%AB/</id>
    <published>2021-10-11T09:06:56.000Z</published>
    <updated>2021-10-11T09:08:40.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CPU和GPU的设计区别"><a href="#CPU和GPU的设计区别" class="headerlink" title="CPU和GPU的设计区别"></a>CPU和GPU的设计区别</h1><p><a href="https://www.cnblogs.com/biglucky/p/4223565.html">点击链接查看CPU和GPU的设计区别！！！</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CPU和GPU的设计区别&quot;&gt;&lt;a href=&quot;#CPU和GPU的设计区别&quot; class=&quot;headerlink&quot; title=&quot;CPU和GPU的设计区别&quot;&gt;&lt;/a&gt;CPU和GPU的设计区别&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.c</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="GPU" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/GPU/"/>
    
    
    <category term="GPU" scheme="http://example.com/tags/GPU/"/>
    
    <category term="CPU" scheme="http://example.com/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>GPU | GPU利用率低？</title>
    <link href="http://example.com/2021/10/09/GPU%E5%88%A9%E7%94%A8%E7%8E%87%E4%BD%8E%EF%BC%9F/"/>
    <id>http://example.com/2021/10/09/GPU%E5%88%A9%E7%94%A8%E7%8E%87%E4%BD%8E%EF%BC%9F/</id>
    <published>2021-10-10T07:49:06.000Z</published>
    <updated>2021-10-10T08:02:49.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GPU利用率低？"><a href="#GPU利用率低？" class="headerlink" title="GPU利用率低？"></a>GPU利用率低？</h1><p><a href="https://blog.csdn.net/qq_32998593/article/details/92849585">GPU利用率低？</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GPU利用率低？&quot;&gt;&lt;a href=&quot;#GPU利用率低？&quot; class=&quot;headerlink&quot; title=&quot;GPU利用率低？&quot;&gt;&lt;/a&gt;GPU利用率低？&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_32998593/art</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="GPU" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/GPU/"/>
    
    
    <category term="GPU" scheme="http://example.com/tags/GPU/"/>
    
  </entry>
  
  <entry>
    <title>GPU | NVIDIAGeForceGTX1650驱动安装</title>
    <link href="http://example.com/2021/10/09/NVIDIAGeForceGTX1650%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85/"/>
    <id>http://example.com/2021/10/09/NVIDIAGeForceGTX1650%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85/</id>
    <published>2021-10-10T03:03:51.000Z</published>
    <updated>2021-10-10T03:21:27.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NVIDIAGeForceGTX1650驱动安装"><a href="#NVIDIAGeForceGTX1650驱动安装" class="headerlink" title="NVIDIAGeForceGTX1650驱动安装"></a>NVIDIAGeForceGTX1650驱动安装</h1><p>当我们想使用GPU（可以用来加速）来跑深度学习代码前，需要进行显卡驱动安装，我的显卡是NVIDIA GeForce GTX 1650。</p><p><strong>需要安装：</strong><br>1.Cuda<br>2.CuDNN<br><strong>下载地址：</strong><br><a href="https://developer.nvidia.com/cuda-toolkit">Cuda</a><br><a href=" https://developer.nvidia.com/cudnn">CuDNN</a><br><strong>我的显卡使用的Cuda、CuDNN版本：</strong><br>1.Cuda-10.1<br>2.CuDNN-7.6<br>3.Tensorflow-gpu-1.15.0(可选，在这里我是想用来加速Tensorflow代码的训练)</p><p><strong>注意：深度学习框架、python、Cuda、CuDNN版本的对应以及Cuda与自己显卡的兼容性</strong><br><a href="https://blog.csdn.net/s_hikki/article/details/106107778">NVIDIA GeForce GTX 1650驱动安装</a><br><a href="https://tensorflow.google.cn/install/source_windows#configuration_options">版本对应参考资料</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NVIDIAGeForceGTX1650驱动安装&quot;&gt;&lt;a href=&quot;#NVIDIAGeForceGTX1650驱动安装&quot; class=&quot;headerlink&quot; title=&quot;NVIDIAGeForceGTX1650驱动安装&quot;&gt;&lt;/a&gt;NVIDIAGeForceG</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="GPU" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/GPU/"/>
    
    
    <category term="GPU" scheme="http://example.com/tags/GPU/"/>
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>leetcode | 单词规律</title>
    <link href="http://example.com/2021/09/08/%E5%8D%95%E8%AF%8D%E8%A7%84%E5%BE%8B/"/>
    <id>http://example.com/2021/09/08/%E5%8D%95%E8%AF%8D%E8%A7%84%E5%BE%8B/</id>
    <published>2021-09-08T18:55:10.000Z</published>
    <updated>2021-09-08T02:58:26.337Z</updated>
    
    <content type="html"><![CDATA[<h1 id="290-单词规律"><a href="#290-单词规律" class="headerlink" title="290.单词规律"></a>290.单词规律</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一种规律 pattern 和一个字符串 str ，判断 str 是否遵循相同的规律。<br>这里的 遵循 指完全匹配，例如， pattern 里的每个字母和字符串 str 中的每个非空单词之间存在着双向连接的对应规律。</p><p>示例1:<br>输入: pattern = “abba”, str = “dog cat cat dog”<br>输出: true</p><span id="more"></span><p><a href="https://leetcode-cn.com/problems/word-pattern/">题目链接</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1.哈希表<br>在本题中，我们需要判断字符与字符串之间是否恰好一一对应。即任意一个字符都对应着唯一的字符串，任意一个字符串也只被唯一的一个字符对应。在集合论中，这种关系被称为「双射」。<br>想要解决本题，我们可以利用哈希表记录每一个字符对应的字符串，以及每一个字符串对应的字符。然后我们枚举每一对字符与字符串的配对过程，不断更新哈希表，如果发生了冲突，则说明给定的输入不满足双射关系。<br>在实际代码中，我们枚举 pattern 中的每一个字符，利用双指针来均摊线性地找到该字符在 str 中对应的字符串。每次确定一个字符与字符串的组合，我们就检查是否出现冲突，最后我们再检查两字符串是否比较完毕即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>class Solution(object):    def wordPattern(self, pattern, s):        &quot;&quot;&quot;        :type pattern: str        :type s: str        :rtype: bool        &quot;&quot;&quot;        word2ch = dict()        ch2word = dict()        words = s.split()        if len(pattern) != len(words):            return False        for ch, word in zip(pattern, words):            if (word in word2ch and word2ch[word] != ch) or (ch in ch2word and ch2word[ch] != word):                return False            word2ch[word] = ch            ch2word[ch] = word        return True    def wordPattern(self, pattern, s):        dct = dict()        s = s.split(&#39; &#39;)        if len(s) != len(pattern):  # 两个字符串长度不相同，返回False            return False        for i in range(len(pattern)):            if pattern[i] not in dct:  # 如果pattern[i]不在字典中，此时要加入pattern[i]                if s[i] not in dct.values():  # 如果s[i]还未存在，则加入新的映射                    dct[pattern[i]] = s[i]                else:                    return False  # 但是如果与dct[pattern[i]]对应的s[i]已经存在字典的值中，说明不是唯一映射            else:                if dct[pattern[i]] != s[i]:  # 如果pattern[i]在字典中，但是dct[pattern[i]]的值不等于s[i]，说明已存在其他映射                    return False        return Trueif __name__ == &#39;__main__&#39;:    slt = Solution()    res = slt.wordPattern1(&quot;abba&quot;, &quot;dog cat cat dog&quot;)    print(res)</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;290-单词规律&quot;&gt;&lt;a href=&quot;#290-单词规律&quot; class=&quot;headerlink&quot; title=&quot;290.单词规律&quot;&gt;&lt;/a&gt;290.单词规律&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一种规律 pattern 和一个字符串 str ，判断 str 是否遵循相同的规律。&lt;br&gt;这里的 遵循 指完全匹配，例如， pattern 里的每个字母和字符串 str 中的每个非空单词之间存在着双向连接的对应规律。&lt;/p&gt;
&lt;p&gt;示例1:&lt;br&gt;输入: pattern = “abba”, str = “dog cat cat dog”&lt;br&gt;输出: true&lt;/p&gt;</summary>
    
    
    
    <category term="算法刷题" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/"/>
    
    <category term="leetcode" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/"/>
    
    <category term="哈希表" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode | 在系统中查找重复文件</title>
    <link href="http://example.com/2021/09/05/%E5%9C%A8%E7%B3%BB%E7%BB%9F%E4%B8%AD%E6%9F%A5%E6%89%BE%E9%87%8D%E5%A4%8D%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2021/09/05/%E5%9C%A8%E7%B3%BB%E7%BB%9F%E4%B8%AD%E6%9F%A5%E6%89%BE%E9%87%8D%E5%A4%8D%E6%96%87%E4%BB%B6/</id>
    <published>2021-09-06T00:48:33.000Z</published>
    <updated>2021-09-07T10:00:23.629Z</updated>
    
    <content type="html"><![CDATA[<h1 id="609-在系统中查找重复文件"><a href="#609-在系统中查找重复文件" class="headerlink" title="609.在系统中查找重复文件"></a>609.在系统中查找重复文件</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个目录信息列表，包括目录路径，以及该目录中的所有包含内容的文件，您需要找到文件系统中的所有重复文件组的路径。一组重复的文件至少包括二个具有完全相同内容的文件。<br>输入列表中的单个目录信息字符串的格式如下：<br>“root/d1/d2/…/dm f1.txt(f1_content) f2.txt(f2_content) … fn.txt(fn_content)”<br>这意味着有 n 个文件（f1.txt, f2.txt … fn.txt 的内容分别是 f1_content, f2_content … fn_content）在目录 root/d1/d2/…/dm 下。注意：n&gt;=1 且 m&gt;=0。如果 m=0，则表示该目录是根目录。<br>该输出是重复文件路径组的列表。对于每个组，它包含具有相同内容的文件的所有文件路径。文件路径是具有下列格式的字符串：<br>“directory_path/file_name.txt”</p><span id="more"></span><p>示例 1：<br>输入：<br>[“root/a 1.txt(abcd) 2.txt(efgh)”, “root/c 3.txt(abcd)”, “root/c/d 4.txt(efgh)”, “root 4.txt(efgh)”]<br>输出：<br>[[“root/a/2.txt”,”root/c/d/4.txt”,”root/4.txt”],[“root/a/1.txt”,”root/c/3.txt”]]</p><p><a href="https://leetcode-cn.com/problems/find-duplicate-file-in-system">题目链接</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1.哈希表<br>首先我们通过字符串操作获取目录路径、文件名和文件内容。我们使用哈希映射（HashMap）来寻找重复文件，哈希映射中的键（key）是文件内容，值（value）是存储路径和文件名的列表。<br>我们遍历每一个文件，并把它加入哈希映射中。在这之后，我们遍历哈希映射，如果一个键对应的值列表的长度大于 1，说明我们找到了重复文件，可以把这个列表加入到答案中。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>class Solution(object):    def findDuplicate(self, paths):        &quot;&quot;&quot;        :type paths: List[str]        :rtype: List[List[str]]        &quot;&quot;&quot;        map = &#123;&#125;        for path in paths:            values = path.split(&quot; &quot;)            for i in range(1, len(values)):                name_cont = values[i].split(&#39;(&#39;)[-1]                name_cont = name_cont.replace(&#39;)&#39;, &#39;&#39;)                value_list = map.get(name_cont, [])                value_list.append(values[0] + &#39;/&#39; + values[i].split(&#39;(&#39;)[0])                map[name_cont] = value_list        res = []        for key in map.keys():            if len(map.get(key)) &gt; 1:                res.append(map.get(key))        return resif __name__ == &#39;__main__&#39;:    slt = Solution()    result = slt.findDuplicate([&quot;root/a 1.txt(abcd) 2.txt(efgh)&quot;, &quot;root/c 3.txt(abcd)&quot;, &quot;root/c/d 4.txt(efgh)&quot;, &quot;root 4.txt(efgh)&quot;])    print(result)</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;609-在系统中查找重复文件&quot;&gt;&lt;a href=&quot;#609-在系统中查找重复文件&quot; class=&quot;headerlink&quot; title=&quot;609.在系统中查找重复文件&quot;&gt;&lt;/a&gt;609.在系统中查找重复文件&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个目录信息列表，包括目录路径，以及该目录中的所有包含内容的文件，您需要找到文件系统中的所有重复文件组的路径。一组重复的文件至少包括二个具有完全相同内容的文件。&lt;br&gt;输入列表中的单个目录信息字符串的格式如下：&lt;br&gt;“root/d1/d2/…/dm f1.txt(f1_content) f2.txt(f2_content) … fn.txt(fn_content)”&lt;br&gt;这意味着有 n 个文件（f1.txt, f2.txt … fn.txt 的内容分别是 f1_content, f2_content … fn_content）在目录 root/d1/d2/…/dm 下。注意：n&amp;gt;=1 且 m&amp;gt;=0。如果 m=0，则表示该目录是根目录。&lt;br&gt;该输出是重复文件路径组的列表。对于每个组，它包含具有相同内容的文件的所有文件路径。文件路径是具有下列格式的字符串：&lt;br&gt;“directory_path/file_name.txt”&lt;/p&gt;</summary>
    
    
    
    <category term="算法刷题" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/"/>
    
    <category term="leetcode" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/"/>
    
    <category term="字符串" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode | 字符串相乘</title>
    <link href="http://example.com/2021/09/05/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%B9%98/"/>
    <id>http://example.com/2021/09/05/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%B9%98/</id>
    <published>2021-09-06T00:37:34.000Z</published>
    <updated>2021-09-05T08:44:16.177Z</updated>
    
    <content type="html"><![CDATA[<h1 id="43-字符串相乘"><a href="#43-字符串相乘" class="headerlink" title="43.字符串相乘"></a>43.字符串相乘</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。</p><p>示例 1:<br>输入: num1 = “2”, num2 = “3”<br>输出: “6”</p><span id="more"></span><p><a href="https://leetcode-cn.com/problems/multiply-strings">题目链接</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1.将num1、num2两个字符串转为整数相乘，然后将结果转为字符串返回<br>2.使用python内置函数eval()执行num1 * num2表达式，将eval函数返回结果转为字符串返回<br>3.做加法（<a href="https://leetcode-cn.com/problems/multiply-strings/solution/zi-fu-chuan-xiang-cheng-by-leetcode-solution/">详细思路见leetcode题解</a>）<br>4.做乘法（<a href="https://leetcode-cn.com/problems/multiply-strings/solution/zi-fu-chuan-xiang-cheng-by-leetcode-solution/">详细思路见leetcode题解</a>）</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>class Solution(object):    def multiply(self, num1, num2):        &quot;&quot;&quot;        将num1、num2两个字符串转为整数相乘，然后将结果转为字符串返回        :type num1: str        :type num2: str        :rtype: str        &quot;&quot;&quot;        return str(int(num1) * int(num2))    def multiply1(self, num1: str, num2: str) -&gt; str:        &quot;&quot;&quot;        将num1、num2两个字符串转为整数相乘，然后将结果转为字符串返回        :param num1:        :param num2:        :return:        &quot;&quot;&quot;        if num1 == &quot;0&quot; or num2 == &quot;0&quot;:            return &quot;0&quot;        num1_to_int = 0        num2_to_int = 0        t = 1        for i in range(1, len(num1)+1):            num1_to_int += int(num1[-i]) * t            t = t * 10        t = 1        for i in range(1, len(num2)+1):            num2_to_int += int(num2[-i]) * t            t = t * 10        return str(num1_to_int * num2_to_int)    def multiply2(self, num1: str, num2: str) -&gt; str:        &quot;&quot;&quot;使用python内置函数eval()执行num1 * num2表达式，将eval函数返回结果转为字符串返回&quot;&quot;&quot;        if num1 == &quot;0&quot; or num2 == &quot;0&quot;:            return &quot;0&quot;        return str(eval(num1 + &#39;*&#39; + num2))  # eval() 函数用来执行一个字符串表达式，并返回表达式的值。    def multiply3(self, num1: str, num2: str) -&gt; str:        &quot;&quot;&quot;做加法&quot;&quot;&quot;        if num1 == &quot;0&quot; or num2 == &quot;0&quot;:            return &quot;0&quot;        ans = &quot;0&quot;        m, n = len(num1), len(num2)        for i in range(n - 1, -1, -1):            add = 0            y = int(num2[i])            curr = [&quot;0&quot;] * (n - i - 1)  # num2除了最低位以外，其余的每一位的运算结果都需要补0            print(&quot;curr:&quot;, curr)            for j in range(m - 1, -1, -1):                product = int(num1[j]) * y + add                curr.append(str(product % 10))                add = product // 10            if add &gt; 0:                curr.append(str(add))            curr = &quot;&quot;.join(curr[::-1])            ans = self.addStrings(ans, curr)        return ans    def addStrings(self, num1: str, num2: str) -&gt; str:        i, j = len(num1) - 1, len(num2) - 1        add = 0        ans = list()        while i &gt;= 0 or j &gt;= 0 or add != 0:            x = int(num1[i]) if i &gt;= 0 else 0            y = int(num2[j]) if j &gt;= 0 else 0            result = x + y + add            ans.append(str(result % 10))            add = result // 10            i -= 1            j -= 1        return &#39;&#39;.join(ans[::-1])    def multiply4(self, num1: str, num2: str) -&gt; str:        &quot;&quot;&quot;做乘法&quot;&quot;&quot;        if num1 == &quot;0&quot; or num2 == &quot;0&quot;:            return &quot;0&quot;        m, n = len(num1), len(num2)        ansArr = [0] * (m + n)        for i in range(m - 1, -1, -1):            x = int(num1[i])            for j in range(n - 1, -1, -1):                ansArr[i + j + 1] += x * int(num2[j])        for i in range(m + n - 1, 0, -1):            ansArr[i-1] += ansArr[i] // 10            ansArr[i] %= 10        index = 1 if ansArr[0] == 0 else 0        ans = &quot;&quot;.join(str(x) for x in ansArr[index:])        return ansif __name__ == &quot;__main__&quot;:    slt = Solution()    result = slt.multiply4(&quot;12&quot;, &quot;34&quot;)    print(result)    print(type(result))</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;43-字符串相乘&quot;&gt;&lt;a href=&quot;#43-字符串相乘&quot; class=&quot;headerlink&quot; title=&quot;43.字符串相乘&quot;&gt;&lt;/a&gt;43.字符串相乘&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;br&gt;输入: num1 = “2”, num2 = “3”&lt;br&gt;输出: “6”&lt;/p&gt;</summary>
    
    
    
    <category term="算法刷题" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/"/>
    
    <category term="leetcode" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/"/>
    
    <category term="字符串" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode | 括号生成</title>
    <link href="http://example.com/2021/09/05/%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/"/>
    <id>http://example.com/2021/09/05/%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/</id>
    <published>2021-09-05T19:57:25.000Z</published>
    <updated>2021-09-05T04:01:46.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="22-括号生成"><a href="#22-括号生成" class="headerlink" title="22.括号生成"></a>22.括号生成</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。<br>有效括号组合需满足：左括号必须以正确的顺序闭合。</p><span id="more"></span><p><a href="https://leetcode-cn.com/problems/generate-parentheses/">题目链接</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><strong>1.暴力法</strong><br>可以生成所有 2^2n 个 ‘(‘ 和 ‘)’ 字符构成的序列，然后我们检查每一个是否有效即可。<br><strong>2.回溯法</strong><br>方法一还有改进的余地：我们可以只在序列仍然保持有效时才添加 ‘(‘ or ‘)’，而不是像 方法一 那样每次添加。我们可以通过跟踪到目前为止放置的左括号和右括号的数目来做到这一点，<br>如果左括号数量不大于 n，我们可以放一个左括号。如果右括号数量小于左括号的数量，我们可以放一个右括号。<br>3.按括号序列的长度递归</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>from functools import lru_cacheclass Solution(object):    def generateParenthesis(self, n):        &quot;&quot;&quot;        暴力法        :type n: int        :rtype: List[str]        &quot;&quot;&quot;        # 生成所有括号组合，然后判断是否是有效括号        def generate(A):            if len(A) == 2 * n:                # print(A)                if valid(A):                    ans.append(&quot;&quot;.join(A))            else:                A.append(&#39;(&#39;)                generate(A)                A.pop()                A.append(&#39;)&#39;)                generate(A)                A.pop()        def valid(A):            bal = 0  # 表示左括号的数量减去右括号的数量            for c in A:                if c == &#39;(&#39;:                    bal += 1                else:                    bal -= 1                if bal &lt; 0:                    return False            return bal == 0        ans = []        generate([])        return ans    def generateParenthesis1(self, n):        &quot;&quot;&quot;        回溯法        对暴力解法的改进：        只在序列仍然保持有效时才添加 &#39;(&#39; or &#39;)&#39;，而不是像 暴力解法 那样每次添加        我们可以通过跟踪到目前为止放置的左括号和右括号的数目来做到这一点        如果左括号数量不大于 n，我们可以放一个左括号        如果右括号数量小于左括号的数量，我们可以放一个右括号        &quot;&quot;&quot;        def backtrack(S, left, right):            if len(S) == 2 * n:                ans.append(&#39;&#39;.join(S))                return            if left &lt; n:                S.append(&#39;(&#39;)                backtrack(S, left + 1, right)                S.pop()            if right &lt; left:                S.append(&#39;)&#39;)                backtrack(S, left, right + 1)                S.pop()        ans = []        backtrack([], 0, 0)        return ansclass Solution1:    @lru_cache(None)    def generateParenthesis(self, n: int):        &quot;&quot;&quot;按括号序列的长度递归&quot;&quot;&quot;        if n == 0:            return [&#39;&#39;]        ans = []        for c in range(n):            for left in self.generateParenthesis(c):                for right in self.generateParenthesis(n-1-c):                    ans.append(&#39;(&#123;&#125;)&#123;&#125;&#39;.format(left, right))        return ansif __name__ == &#39;__main__&#39;:    slt = Solution1()    parenthesis_list = slt.generateParenthesis(3)    print(parenthesis_list)</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;22-括号生成&quot;&gt;&lt;a href=&quot;#22-括号生成&quot; class=&quot;headerlink&quot; title=&quot;22.括号生成&quot;&gt;&lt;/a&gt;22.括号生成&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。&lt;br&gt;有效括号组合需满足：左括号必须以正确的顺序闭合。&lt;/p&gt;</summary>
    
    
    
    <category term="算法刷题" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/"/>
    
    <category term="leetcode" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/"/>
    
    <category term="字符串" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>itertools | product</title>
    <link href="http://example.com/2021/09/04/product/"/>
    <id>http://example.com/2021/09/04/product/</id>
    <published>2021-09-05T01:16:27.000Z</published>
    <updated>2021-09-04T10:54:29.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="itertools-product"><a href="#itertools-product" class="headerlink" title="itertools.product()"></a>itertools.product()</h1><p>使用product()前需要导入itertools库<br><strong>用法1：</strong></p><pre><code>print(list(itertools.product(‘a&#39;, repeat=4)))   # 等价于 print(list(itertools.product(&#39;a&#39;, &#39;a&#39;, &#39;a&#39;, &#39;a&#39;)))a = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]print(list(itertools.product(a, repeat=2)))  # s等价于 print(list(itertools.product(a, a)))</code></pre><p><strong>用法2：</strong></p><pre><code>print(list(itertools.product(a, b)))  # 等价于 print(list((x, y) for x in a for y in b))</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;itertools-product&quot;&gt;&lt;a href=&quot;#itertools-product&quot; class=&quot;headerlink&quot; title=&quot;itertools.product()&quot;&gt;&lt;/a&gt;itertools.product()&lt;/h1&gt;&lt;p&gt;使用prod</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="内置模块" scheme="http://example.com/categories/python/%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/"/>
    
    <category term="itertools" scheme="http://example.com/categories/python/%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/itertools/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="itertools" scheme="http://example.com/tags/itertools/"/>
    
  </entry>
  
  <entry>
    <title>leetcode | 电话号码的字母组合</title>
    <link href="http://example.com/2021/09/04/%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/"/>
    <id>http://example.com/2021/09/04/%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</id>
    <published>2021-09-04T23:57:00.000Z</published>
    <updated>2021-09-04T10:58:17.398Z</updated>
    
    <content type="html"><![CDATA[<h1 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17.电话号码的字母组合"></a>17.电话号码的字母组合</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。<br>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><span id="more"></span><p><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/">题目链接</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1.遍历并组合每一个数字对应的字母列表 –&gt; letterCombinations()<br><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/solution/zhi-xing-yong-shi-ji-bai-9954nei-cun-xia-gwkb/">点击这里查看完整解题思路！！！</a><br>2.使用内置库 –&gt; letterCombinations1()<br><strong>3.回溯</strong> –&gt; letterCombinations2()<br><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/solution/dian-hua-hao-ma-de-zi-mu-zu-he-by-leetcode-solutio/">回溯法和使用内置库思路见leetcode题解</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>class Solution:    num2ch = &#123;        &#39;2&#39;: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;],        &#39;3&#39;: [&#39;d&#39;, &#39;e&#39;, &#39;f&#39;],        &#39;4&#39;: [&#39;g&#39;, &#39;h&#39;, &#39;i&#39;],        &#39;5&#39;: [&#39;j&#39;, &#39;k&#39;, &#39;l&#39;],        &#39;6&#39;: [&#39;m&#39;, &#39;n&#39;, &#39;o&#39;],        &#39;7&#39;: [&#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;],        &#39;8&#39;: [&#39;t&#39;, &#39;u&#39;, &#39;v&#39;],        &#39;9&#39;: [&#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;]    &#125;    def letterCombinations(self, digits: str) -&gt; list:        if len(digits) == 0:            return []        list1 = []  # 用于存储digits数组中每个字符对应的字母列表        for d in digits:            list1.append(self.num2ch[d])        i = 0        j = 1        while j &lt; len(list1):            list1[j] = self.concat(list1[i], list1[j])            i = j            j += 1        return list1[-1]    def concat(self, list1, list2):        res = []        for e1 in list1:            for e2 in list2:                res.append(e1 + e2)        return res    def letterCombinations1(self, digits: str):        if not digits:            return list()        phoneMap = &#123;            &quot;2&quot;: &quot;abc&quot;,            &quot;3&quot;: &quot;def&quot;,            &quot;4&quot;: &quot;ghi&quot;,            &quot;5&quot;: &quot;jkl&quot;,            &quot;6&quot;: &quot;mno&quot;,            &quot;7&quot;: &quot;pqrs&quot;,            &quot;8&quot;: &quot;tuv&quot;,            &quot;9&quot;: &quot;wxyz&quot;,        &#125;        groups = (phoneMap[digit] for digit in digits)        import itertools        return [&quot;&quot;.join(combination) for combination in itertools.product(*groups)]    def letterCombinations2(self, digits: str):        if not digits:            return list()        phoneMap = &#123;            &quot;2&quot;: &quot;abc&quot;,            &quot;3&quot;: &quot;def&quot;,            &quot;4&quot;: &quot;ghi&quot;,            &quot;5&quot;: &quot;jkl&quot;,            &quot;6&quot;: &quot;mno&quot;,            &quot;7&quot;: &quot;pqrs&quot;,            &quot;8&quot;: &quot;tuv&quot;,            &quot;9&quot;: &quot;wxyz&quot;,        &#125;        def backtrack(index: int):            if index == len(digits):                combinations.append(&#39;&#39;.join(combination))            else:                digit = digits[index]                for letter in phoneMap[digit]:                    combination.append(letter)                    backtrack(index + 1)                    combination.pop()        combination = list()        combinations = list()        backtrack(0)        return combinationsif __name__ == &#39;__main__&#39;:    slt = Solution()    digits = &quot;23&quot;    res = slt.letterCombinations2(digits)    print(res)</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;17-电话号码的字母组合&quot;&gt;&lt;a href=&quot;#17-电话号码的字母组合&quot; class=&quot;headerlink&quot; title=&quot;17.电话号码的字母组合&quot;&gt;&lt;/a&gt;17.电话号码的字母组合&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。&lt;br&gt;给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。&lt;/p&gt;</summary>
    
    
    
    <category term="算法刷题" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/"/>
    
    <category term="leetcode" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/"/>
    
    <category term="字符串" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode | 最长回文串</title>
    <link href="http://example.com/2021/09/03/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    <id>http://example.com/2021/09/03/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2/</id>
    <published>2021-09-04T02:23:45.000Z</published>
    <updated>2021-09-04T07:55:21.821Z</updated>
    
    <content type="html"><![CDATA[<h1 id="5-最长回文串"><a href="#5-最长回文串" class="headerlink" title="5.最长回文串"></a>5.最长回文串</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个字符串 s，找到 s 中最长的回文子串。</p><span id="more"></span><p>示例 1：<br>输入：s = “babad”<br>输出：”bab”<br>解释：”aba” 同样是符合题意的答案。</p><p><a href="https://leetcode-cn.com/problems/longest-palindromic-substring">题目链接</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1.暴力解法<br><strong>2.动态规划</strong><br><strong>3.中心扩展算法</strong><br>4.Manacher 算法<br>注：算法详情请参考leetcode题解</p><p><a href="https://writings.sh/post/algorithm-longest-palindromic-substring">几种方法的总结！！！强烈推荐！！！</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>class Solution:    def longestPalindrome(self, s: str) -&gt; str:        &quot;&quot;&quot;暴力解法（超出时间限制）&quot;&quot;&quot;        # max_len = 0        # longest_palindrome = &quot;&quot;        # for i in range(0, len(s)):        #     for j in range(i+1, len(s)+1):        #         string = s[i:j]        #         # print(string)        #         if self.isPalindrome(string):        #             if len(string) &gt; max_len:        #                 max_len = len(string)        #                 longest_palindrome = string        #        # return longest_palindrome        len_s = len(s)        if len_s &lt; 2:            return s        max_len = 1        begin = 0        # 枚举所有长度严格大于1的字串        for i in range(0, len_s-1):            for j in range(i + 1, len_s):                if j - i + 1 &gt; max_len and self.isPalindrome(s[i: j+1]):                    max_len = j - i + 1                    begin = i        return s[begin:begin + max_len]    def isPalindrome(self, s: str) -&gt; bool:        &quot;&quot;&quot;        筛选+判断（判断反转字符串是否与原字符串相同）        &quot;&quot;&quot;        new_s = &quot;&quot;.join(ch.lower() for ch in s if ch.isalnum())        return new_s == new_s[::-1]    def longestPalindrome1(self, s: str) -&gt; str:        &quot;&quot;&quot;        动态规划算法        一个回文串去掉两头以后，剩下的部分依然是回文        -状态：dp[i][j]表示字串s[i..j]是否为回文子串        -得到状态转移方程：dp[i][j] = (s[i] == s[j]) and dp[i + 1][j - 1]         边界条件：j - 1 - (i + 1) + 1 &lt; 2,整理得j - i &lt; 3 &lt;===&gt; j - i + 1 &lt; 4         (s[i][j]长度为2或者3时，不用检查字串是否回文)        -初始化：dp[i][i] = true        -输出：在得到一个状态的值为true的时候，记录起始位置和长度，填表完成以后再截取        状态转移方程：dp[i][j] = (s[i] == s[j]) and (j - i &lt; 3 or dp[i + 1][j - 1]        &quot;&quot;&quot;        n = len(s)        if n &lt; 2:            return s        max_len = 1        begin = 0        # dp[i][j]表示s[i..j]是否是回文串        dp = [[False] * n for _ in range(n)]        for i in range(n):            dp[i][i] = True        # 注意：先填左下角        for j in range(1, n):            for i in range(0, j):                if s[i] != s[j]:                    dp[i][j] = False                else:                    if j - i &lt; 3:                        dp[i][j] = True                    else:                        dp[i][j] = dp[i + 1][j-1]                # 只要 dp[i][j] == true 成立，就表示子串 s[i..j] 是回文，此时记录回文长度和起始位置                if dp[i][j] and j - i + 1 &gt; max_len:                    max_len = j - i + 1                    begin = i        return s[begin:begin + max_len]    def longestPalindrome2(self, s: str) -&gt; str:        &quot;&quot;&quot;中心扩展算法&quot;&quot;&quot;        start = 0  # 最长回文串的起始位置        end = 0  # 最长回文串的结束位置        for i in range(len(s)):            left1, right1 = self.expandAroundCenter(s, i, i)  # 边界情况1：子串长度为1的情况            left2, right2 = self.expandAroundCenter(s, i, i + 1)  # # 边界情况2：子串长度为2的情况            if right1 - left1 &gt; end - start:  # 扩展的新回文串长度大于当前最长回文串                start, end = left1, right1            if right2 - left2 &gt; end - start:                start, end = left2, right2        return s[start:end + 1]    def expandAroundCenter(self, s, left, right):        while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:            left -= 1            right += 1        return left + 1, right - 1    def expand(self, s, left, right):        while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:            left -= 1            right += 1        return (right - left - 2) // 2    def longestPalindrome3(self, s: str) -&gt; str:        &quot;&quot;&quot;Manacher 算法&quot;&quot;&quot;        end = -1        start = 0        s = &#39;#&#39; + &#39;#&#39;.join(list(s)) + &#39;#&#39;        arm_len = []        right = -1        j = -1        for i in range(len(s)):            if right &gt;= i:                i_sym = 2 * j - i                min_arm_len = min(arm_len[i_sym], right - i)                cur_arm_len = self.expand(s, i - min_arm_len, i + min_arm_len)            else:                cur_arm_len = self.expand(s, i, i)            arm_len.append(cur_arm_len)            if i + cur_arm_len &gt; right:                j = i                right = i + cur_arm_len            if 2 * cur_arm_len + 1 &gt; end - start:                start = i - cur_arm_len                end = i + cur_arm_len        return s[start + 1:end + 1:2]if __name__ == &#39;__main__&#39;:    slt = Solution()    s = &quot;abad&quot;    res = slt.longestPalindrome(s)    print(&quot;最长的回文串为：&quot;, res)</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;5-最长回文串&quot;&gt;&lt;a href=&quot;#5-最长回文串&quot; class=&quot;headerlink&quot; title=&quot;5.最长回文串&quot;&gt;&lt;/a&gt;5.最长回文串&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给你一个字符串 s，找到 s 中最长的回文子串。&lt;/p&gt;</summary>
    
    
    
    <category term="算法刷题" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/"/>
    
    <category term="leetcode" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/"/>
    
    <category term="字符串" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode | 机器人能否返回原点</title>
    <link href="http://example.com/2021/09/03/%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%83%BD%E5%90%A6%E8%BF%94%E5%9B%9E%E5%8E%9F%E7%82%B9/"/>
    <id>http://example.com/2021/09/03/%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%83%BD%E5%90%A6%E8%BF%94%E5%9B%9E%E5%8E%9F%E7%82%B9/</id>
    <published>2021-09-04T00:33:46.000Z</published>
    <updated>2021-09-03T08:38:31.369Z</updated>
    
    <content type="html"><![CDATA[<h1 id="657-机器人能够返回原点"><a href="#657-机器人能够返回原点" class="headerlink" title="657.机器人能够返回原点"></a>657.机器人能够返回原点</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在二维平面上，有一个机器人从原点 (0, 0) 开始。给出它的移动顺序，判断这个机器人在完成移动后是否在 (0, 0) 处结束。<br>移动顺序由字符串表示。字符 move[i] 表示其第 i 次移动。机器人的有效动作有 R（右），L（左），U（上）和 D（下）。如果机器人在完成所有动作后返回原点，则返回 true。否则，返回 false。<br>注意：机器人“面朝”的方向无关紧要。 “R” 将始终使机器人向右移动一次，“L” 将始终向左移动等。此外，假设每次移动机器人的移动幅度相同。</p><span id="more"></span><p><a href="https://leetcode-cn.com/problems/robot-return-to-origin/">题目链接</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>起始时机器人的坐标为 (0,0)，在遍历完所有指令并对机器人进行移动之后，判断机器人的坐标是否为 (0,0) 即可。</p><p>具体来说，我们用两个变量 x 和 y 来表示机器人当前所在的坐标为 (x,y)，起始时 x=0，y=0。接下来我们遍历指令并更新机器人的坐标：<br>    如果指令是 U，则令 y=y−1<br>    如果指令是 D，则令 y=y+1<br>    如果指令是 L，则令 x=x−1<br>    如果指令是 R，则令 x=x+1<br>最后判断 (x,y) 是否为 (0,0) 即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>class Solution:    def judgeCircle(self, moves: str) -&gt; bool:        if len(moves) % 2 != 0:            return False        pos_x = 0        pos_y = 0        for move in moves:            if move == &#39;U&#39;:                pos_y += 1            elif move == &#39;D&#39;:                pos_y -= 1            elif move == &#39;R&#39;:                pos_x += 1            elif move == &#39;L&#39;:                pos_x -= 1        if pos_x == 0 and pos_y == 0:            return True        else:            return False    def judgeCircle1(self, moves: str) -&gt; bool:        if moves.count(&#39;L&#39;) == moves.count(&#39;R&#39;) and moves.count(&#39;U&#39;) == moves.count(&#39;D&#39;):            return True        else:            return Falseif __name__ == &quot;__main__&quot;:    slt = Solution()    res = slt.judgeCircle(&quot;UD&quot;)    # res = slt.judgeCircle1(&quot;LLL&quot;)    print(res)</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;657-机器人能够返回原点&quot;&gt;&lt;a href=&quot;#657-机器人能够返回原点&quot; class=&quot;headerlink&quot; title=&quot;657.机器人能够返回原点&quot;&gt;&lt;/a&gt;657.机器人能够返回原点&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;在二维平面上，有一个机器人从原点 (0, 0) 开始。给出它的移动顺序，判断这个机器人在完成移动后是否在 (0, 0) 处结束。&lt;br&gt;移动顺序由字符串表示。字符 move[i] 表示其第 i 次移动。机器人的有效动作有 R（右），L（左），U（上）和 D（下）。如果机器人在完成所有动作后返回原点，则返回 true。否则，返回 false。&lt;br&gt;注意：机器人“面朝”的方向无关紧要。 “R” 将始终使机器人向右移动一次，“L” 将始终向左移动等。此外，假设每次移动机器人的移动幅度相同。&lt;/p&gt;</summary>
    
    
    
    <category term="算法刷题" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/"/>
    
    <category term="leetcode" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/"/>
    
    <category term="字符串" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode | 反转字符串中的单词3</title>
    <link href="http://example.com/2021/09/02/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D3/"/>
    <id>http://example.com/2021/09/02/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D3/</id>
    <published>2021-09-03T04:21:14.000Z</published>
    <updated>2021-09-03T08:50:04.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="557-反转字符串中的单词3"><a href="#557-反转字符串中的单词3" class="headerlink" title="557.反转字符串中的单词3"></a>557.反转字符串中的单词3</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。</p><span id="more"></span><p>示例：<br>输入：”Let’s take LeetCode contest”<br>输出：”s’teL ekat edoCteeL tsetnoc”</p><p><a href="https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/">题目链接</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1.将字符串按照空格划分开得到字符串中的每一个单词,然后将每个单词反转<br>，在将反转后的所有单词用空格拼接起来<br>2.使用额外空间<br>开辟一个新字符串。然后从头到尾遍历原字符串，直到找到空格为止，此时找到了一个单词，并能得到单词的起止位置。随后，根据单词的起止位置，可以将该单词逆序放到新字符串当中。如此循环多次，直到遍历完原字符串，就能得到翻转后的结果。<br>3.原地解法<br>此题也可以直接在原字符串上进行操作，避免额外的空间开销。当找到一个单词的时候，我们交换字符串第一个字符与倒数第一个字符，随后交换第二个字符与倒数第二个字符……如此反复，就可以在原空间上翻转单词。<br>需要注意的是，原地解法在某些语言（比如 Java，JavaScript，python）中不适用，因为在这些语言中 String 类型是一个不可变的类型。<br>在python中可以先将字符串转为列表然后进行算法设计。</p><p><a href="https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/solution/python-fan-zhuan-zi-fu-chuan-zhong-dan-ci-si-lu-xi/">更多思路参考“一行流”，简直牛逼！！！</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>class Solution:    def reverseWords(self, s: str) -&gt; str:        &quot;&quot;&quot;        将字符串按照空格划分开得到字符串中的每一个单词        将每个单词反转        将反转后的所有单词用空格拼接起来        &quot;&quot;&quot;        words = s.split(&#39; &#39;)        reversed_words = []        for word in words:            reversed_words.append(self.reverseStr(word))        return &#39; &#39;.join(reversed_words)    def reverseStr(self, s: str) -&gt; str:        s = list(s)        s[:] = s[::-1]        return &#39;&#39;.join(s)    def reverseWords2(self, s: str) -&gt; str:        &quot;&quot;&quot;使用额外空间&quot;&quot;&quot;        ret = &#39;&#39;        length = len(s)        i = 0        while i &lt; length:            start = i            # 遍历字符串找到空格位置（找到了一个单词）            while i &lt; length and s[i] != &#39; &#39;:                i += 1            # 根据单词的起止位置，可以将该单词逆序放到新字符串当中            for p in range(start, i):                ret += s[start + i - 1 - p]            # 拼上单词后的空格            while i &lt; length and s[i] == &#39; &#39;:                i += 1                ret += &#39; &#39;        return ret    def reverseWords3(self, s: str) -&gt; str:        s = list(s)  # python中字符串为不可变类型，不支持原地修改，可转列表        length = len(s)        i = 0        while i &lt; length:            start = i            while i &lt; length and s[i] != &#39; &#39;:                i += 1            left = start            right = i - 1            while left &lt; right:                s[left], s[right] = s[right], s[left]                left += 1                right -= 1            while i &lt; length and s[i] == &#39; &#39;:                i += 1        return &#39;&#39;.join(s)if __name__ == &quot;__main__&quot;:    slt = Solution()    s = &quot;Let&#39;s take LeetCode contest&quot;    res = slt.reverseWords3(s)    print(&quot;反转单词后的字符串：&quot;, res)</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;557-反转字符串中的单词3&quot;&gt;&lt;a href=&quot;#557-反转字符串中的单词3&quot; class=&quot;headerlink&quot; title=&quot;557.反转字符串中的单词3&quot;&gt;&lt;/a&gt;557.反转字符串中的单词3&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。&lt;/p&gt;</summary>
    
    
    
    <category term="算法刷题" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/"/>
    
    <category term="leetcode" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/"/>
    
    <category term="字符串" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode | 学生出勤记录1</title>
    <link href="http://example.com/2021/09/02/%E5%AD%A6%E7%94%9F%E5%87%BA%E5%8B%A4%E8%AE%B0%E5%BD%951/"/>
    <id>http://example.com/2021/09/02/%E5%AD%A6%E7%94%9F%E5%87%BA%E5%8B%A4%E8%AE%B0%E5%BD%951/</id>
    <published>2021-09-03T04:13:33.000Z</published>
    <updated>2021-09-02T12:18:17.164Z</updated>
    
    <content type="html"><![CDATA[<h1 id="551-学生出勤记录1"><a href="#551-学生出勤记录1" class="headerlink" title="551.学生出勤记录1"></a>551.学生出勤记录1</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个字符串 s 表示一个学生的出勤记录，其中的每个字符用来标记当天的出勤情况（缺勤、迟到、到场）。记录中只含下面三种字符：<br>    ‘A’：Absent，缺勤<br>    ‘L’：Late，迟到<br>    ‘P’：Present，到场<br>如果学生能够 同时 满足下面两个条件，则可以获得出勤奖励：<br>    按 总出勤 计，学生缺勤（’A’）严格 少于两天。<br>    学生 不会 存在 连续 3 天或 连续 3 天以上的迟到（’L’）记录。<br>如果学生可以获得出勤奖励，返回 true ；否则，返回 false 。</p><span id="more"></span><p>示例 1：<br>输入：s = “PPALLP”<br>输出：true<br>解释：学生缺勤次数少于 2 次，且不存在 3 天或以上的连续迟到记录。</p><p><a href>题目链接</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1.一次遍历<br>可奖励的出勤记录要求缺勤次数少于 2 和连续迟到次数少于 3。判断出勤记录是否可奖励，只需要遍历出勤记录，判断这两个条件是否同时满足即可。<br>遍历过程中，记录缺勤次数和连续迟到次数，根据遍历到的字符更新缺勤次数和连续迟到次数：<br>    如果遇到 ‘A’，即缺勤，则将缺勤次数加 1，否则缺勤次数不变；<br>    如果遇到 ‘L’，即迟到，则将连续迟到次数加 1，否则将连续迟到次数清零。<br>如果在更新缺勤次数和连续迟到次数之后，出现缺勤次数大于或等于 2 或者连续迟到次数大于或等于 3，则该出勤记录不满足可奖励的要求，返回 false。如果遍历结束时未出现出勤记录不满足可奖励的要求的情况，则返回 true。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>class Solution:    def checkRecord(self, s: str) -&gt; bool:        # 统计字符串中出现‘A’的的次数        count_A = s.count(&#39;A&#39;)        # 字符串中是否有连续3个以上的‘L&#39;        for i in range(len(s)):            if i + 2 &lt; len(s) and s[i] == &#39;L&#39; and s[i+1] == &#39;L&#39; and s[i+2] == &#39;L&#39;:                    return False        return True if count_A &lt; 2 else False    def checkRecord1(self, s: str) -&gt; bool:        absents = lates = 0        for char in s:            if char == &quot;A&quot;:                absents += 1                lates = 0            elif char == &quot;L&quot;:                lates += 1            else:                lates = 0            if lates &gt;= 3 or absents &gt; 1:                return False        return True        # absents = lates = 0        # for i, c in enumerate(s):        #     if c == &quot;A&quot;:        #         absents += 1        #         if absents &gt;= 2:        #             return False        #        #     if c == &quot;L&quot;:        #         lates += 1        #         if lates &gt;= 3:        #             return False        #     else:        #         lates = 0        #        # return Trueif __name__ == &quot;__main__&quot;:    slt = Solution()    # res = slt.checkRecord2(&quot;PPALLL&quot;)    res = slt.checkRecord2(&quot;PPALLP&quot;)    print(res)</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;551-学生出勤记录1&quot;&gt;&lt;a href=&quot;#551-学生出勤记录1&quot; class=&quot;headerlink&quot; title=&quot;551.学生出勤记录1&quot;&gt;&lt;/a&gt;551.学生出勤记录1&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给你一个字符串 s 表示一个学生的出勤记录，其中的每个字符用来标记当天的出勤情况（缺勤、迟到、到场）。记录中只含下面三种字符：&lt;br&gt;    ‘A’：Absent，缺勤&lt;br&gt;    ‘L’：Late，迟到&lt;br&gt;    ‘P’：Present，到场&lt;br&gt;如果学生能够 同时 满足下面两个条件，则可以获得出勤奖励：&lt;br&gt;    按 总出勤 计，学生缺勤（’A’）严格 少于两天。&lt;br&gt;    学生 不会 存在 连续 3 天或 连续 3 天以上的迟到（’L’）记录。&lt;br&gt;如果学生可以获得出勤奖励，返回 true ；否则，返回 false 。&lt;/p&gt;</summary>
    
    
    
    <category term="算法刷题" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/"/>
    
    <category term="leetcode" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/"/>
    
    <category term="字符串" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode | 反转字符串2</title>
    <link href="http://example.com/2021/09/01/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B22/"/>
    <id>http://example.com/2021/09/01/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B22/</id>
    <published>2021-09-02T04:05:22.000Z</published>
    <updated>2021-09-02T04:13:05.464Z</updated>
    
    <content type="html"><![CDATA[<h1 id="541-反转字符串2"><a href="#541-反转字符串2" class="headerlink" title="541.反转字符串2"></a>541.反转字符串2</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个字符串 s 和一个整数 k，从字符串开头算起，每 2k 个字符反转前 k 个字符。<br>    如果剩余字符少于 k 个，则将剩余字符全部反转。<br>    如果剩余字符小于 2k 但大于或等于 k 个，则反转前 k 个字符，其余字符保持原样。</p><span id="more"></span><p>示例 1：<br>输入：s = “abcdefg”, k = 2<br>输出：”bacdfeg”</p><p><a href="https://leetcode-cn.com/problems/reverse-string-ii/">题目链接</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>反转每个下标从 2k 的倍数开始的，长度为 k 的子串。若该子串长度不足 k，则反转整个子串</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>class Solution:    def reverseStr(self, s: str, k: int) -&gt; str:        t = list(s)        for i in range(0, len(t), 2 * k):            t[i: i + k] = reversed(t[i: i + k])        return &quot;&quot;.join(t)if __name__ == &#39;__main__&#39;:    slt = Solution()    s = &quot;abcdefg&quot;    k = 2    res = slt.reverseStr(s, k)  # bacdfeg    print(res)</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;541-反转字符串2&quot;&gt;&lt;a href=&quot;#541-反转字符串2&quot; class=&quot;headerlink&quot; title=&quot;541.反转字符串2&quot;&gt;&lt;/a&gt;541.反转字符串2&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个字符串 s 和一个整数 k，从字符串开头算起，每 2k 个字符反转前 k 个字符。&lt;br&gt;    如果剩余字符少于 k 个，则将剩余字符全部反转。&lt;br&gt;    如果剩余字符小于 2k 但大于或等于 k 个，则反转前 k 个字符，其余字符保持原样。&lt;/p&gt;</summary>
    
    
    
    <category term="算法刷题" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/"/>
    
    <category term="leetcode" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/"/>
    
    <category term="字符串" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode | 最长特殊序列</title>
    <link href="http://example.com/2021/09/01/%E6%9C%80%E9%95%BF%E7%89%B9%E6%AE%8A%E5%BA%8F%E5%88%97/"/>
    <id>http://example.com/2021/09/01/%E6%9C%80%E9%95%BF%E7%89%B9%E6%AE%8A%E5%BA%8F%E5%88%97/</id>
    <published>2021-09-02T02:41:31.000Z</published>
    <updated>2021-09-01T12:02:33.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="521-最长特殊序列"><a href="#521-最长特殊序列" class="headerlink" title="521.最长特殊序列"></a>521.最长特殊序列</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你两个字符串，请你从这两个字符串中找出最长的特殊序列。<br>「最长特殊序列」定义如下：该序列为某字符串独有的最长子序列（即不能是其他字符串的子序列）。<br>子序列 可以通过删去字符串中的某些字符实现，但不能改变剩余字符的相对顺序。空序列为所有字符串的子序列，任何字符串为其自身的子序列。<br>输入为两个字符串，输出最长特殊序列的长度。如果不存在，则返回 -1。</p><span id="more"></span><p>刷到这道题目时我表示有点没看懂，然后就看了leetcode的评论，也有许多人没看懂，最后就看了题解。。。<br>我认为，本题按照leetcode官方题解解法二的解决方案容易理解。</p><p><a href="https://leetcode-cn.com/problems/longest-uncommon-subsequence-i/">题目链接</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>字符串 aaa 和 bbb 共有 3 种情况：<br>    a=b。如果两个字符串相同，则没有特殊子序列，返回 -1。<br>    length(a)=length(b) 且 a≠b。例如：abc 和 abd。这种情况下，一个字符串一定不会是另外一个字符串的子序列，因此可以将任意一个字符串看作是特殊子序列，返回 length(a) 或 length(b)。<br>    length(a)≠length(b)。例如：abcd 和 abc。这种情况下，长的字符串一定不会是短字符串的子序列，因此可以将长字符串看作是特殊子序列，返回 max(length(a),length(b))。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>class Solution:    def findLUSlength(self, a: str, b: str) -&gt; int:        if a == b:            return -1        return max(len(a), len(b))if __name__ == &quot;__main__&quot;:    slt = Solution()    a = &quot;aaa&quot;    b = &quot;bbb&quot;    res = slt.findLUSlength(a, b)    print(res)</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;521-最长特殊序列&quot;&gt;&lt;a href=&quot;#521-最长特殊序列&quot; class=&quot;headerlink&quot; title=&quot;521.最长特殊序列&quot;&gt;&lt;/a&gt;521.最长特殊序列&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给你两个字符串，请你从这两个字符串中找出最长的特殊序列。&lt;br&gt;「最长特殊序列」定义如下：该序列为某字符串独有的最长子序列（即不能是其他字符串的子序列）。&lt;br&gt;子序列 可以通过删去字符串中的某些字符实现，但不能改变剩余字符的相对顺序。空序列为所有字符串的子序列，任何字符串为其自身的子序列。&lt;br&gt;输入为两个字符串，输出最长特殊序列的长度。如果不存在，则返回 -1。&lt;/p&gt;</summary>
    
    
    
    <category term="算法刷题" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/"/>
    
    <category term="leetcode" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/"/>
    
    <category term="字符串" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode | 检测大写字母</title>
    <link href="http://example.com/2021/09/01/%E6%A3%80%E6%B5%8B%E5%A4%A7%E5%86%99%E5%AD%97%E6%AF%8D/"/>
    <id>http://example.com/2021/09/01/%E6%A3%80%E6%B5%8B%E5%A4%A7%E5%86%99%E5%AD%97%E6%AF%8D/</id>
    <published>2021-09-02T02:29:42.000Z</published>
    <updated>2021-09-01T10:39:54.524Z</updated>
    
    <content type="html"><![CDATA[<h1 id="520-检测大写字母"><a href="#520-检测大写字母" class="headerlink" title="520.检测大写字母"></a>520.检测大写字母</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个单词，你需要判断单词的大写使用是否正确。<br>我们定义，在以下情况时，单词的大写用法是正确的：<br>    全部字母都是大写，比如”USA”。<br>    单词中所有字母都不是大写，比如”leetcode”。<br>    如果单词不只含有一个字母，只有首字母大写， 比如 “Google”。<br>否则，我们定义这个单词没有正确使用大写字母。</p><span id="more"></span><p>示例 1:<br>输入: “USA”<br>输出: True<br>示例 2:<br>输入: “FlaG”<br>输出: False<br>注意: 输入是由大写和小写拉丁字母组成的非空单词。</p><p><a href="https://leetcode-cn.com/problems/detect-capital/">题目链接</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>按照单词大写用法进行判断，满足返回True，不满足返回False</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>class Solution:    def detectCapitalUse(self, word: str) -&gt; bool:        if word.islower() or word.isupper():            return True        elif word[0].isupper() and word[1:].islower():            return True        else:            return Falseif __name__ == &quot;__main__&quot;:    slt = Solution()    # word = &quot;USA&quot;    # word = &quot;leetcode&quot;    # word = &quot;Google&quot;    word = &quot;flaG&quot;    res = slt.detectCapitalUse(word)    print(res)</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;520-检测大写字母&quot;&gt;&lt;a href=&quot;#520-检测大写字母&quot; class=&quot;headerlink&quot; title=&quot;520.检测大写字母&quot;&gt;&lt;/a&gt;520.检测大写字母&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个单词，你需要判断单词的大写使用是否正确。&lt;br&gt;我们定义，在以下情况时，单词的大写用法是正确的：&lt;br&gt;    全部字母都是大写，比如”USA”。&lt;br&gt;    单词中所有字母都不是大写，比如”leetcode”。&lt;br&gt;    如果单词不只含有一个字母，只有首字母大写， 比如 “Google”。&lt;br&gt;否则，我们定义这个单词没有正确使用大写字母。&lt;/p&gt;</summary>
    
    
    
    <category term="算法刷题" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/"/>
    
    <category term="leetcode" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/"/>
    
    <category term="字符串" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode | 字符串中的单词数</title>
    <link href="http://example.com/2021/09/01/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D%E6%95%B0/"/>
    <id>http://example.com/2021/09/01/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D%E6%95%B0/</id>
    <published>2021-09-02T02:25:59.000Z</published>
    <updated>2021-09-01T10:31:00.206Z</updated>
    
    <content type="html"><![CDATA[<h1 id="434-字符串中的单词数"><a href="#434-字符串中的单词数" class="headerlink" title="434.字符串中的单词数"></a>434.字符串中的单词数</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>统计字符串中的单词个数，这里的单词指的是连续的不是空格的字符。<br>请注意，你可以假定字符串里不包括任何不可打印的字符。</p><span id="more"></span><p><a href="https://leetcode-cn.com/problems/number-of-segments-in-a-string/">题目链接</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1.使用语言内置函数split()<br>2.原地法<br>计算单词的数量，就等同于计数单词开始的下标个数。因此，只需要定义好下标的条件，就可以遍历整个字符串，检测每个下标。定义如下：若该下标前为空格（或者为初始下标），且自身不为空格，则其为单词开始的下标。该条件可以以常数时间检测。最后，返回满足条件的下标个数。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>class Solution:    def countSegments(self, s: str) -&gt; int:        list_s = s.split(&#39; &#39;)        for i in range(list_s.count(&#39;&#39;)):            list_s.remove(&#39;&#39;)        if not list_s:            return 0        return len(list_s)    def countSegments1(self, s):        return len(s.split())    def countSegments2(self, s):        segment_count = 0        for i in range(len(s)):            if (i == 0 or s[i-1] == &#39; &#39;) and s[i] != &#39; &#39;:                segment_count +=1        return segment_countif __name__ == &#39;__main__&#39;:    slt = Solution()    # s = &quot;      &quot;    s = &quot;The one-hour drama series Westworld is a dark odyssey about the dawn of artificial consciousness and the evolution of sin. Set at the intersection of the near future and the reimagined past, it explores a world in which every human appetite, no matter how noble or depraved, can be indulged.&quot;    res = slt.countSegments2(s)    print(res)    # 分割文本    # s = &quot;The sky is very blue.&quot;    # words = s.split(&quot; &quot;)    # print(words)</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;434-字符串中的单词数&quot;&gt;&lt;a href=&quot;#434-字符串中的单词数&quot; class=&quot;headerlink&quot; title=&quot;434.字符串中的单词数&quot;&gt;&lt;/a&gt;434.字符串中的单词数&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;统计字符串中的单词个数，这里的单词指的是连续的不是空格的字符。&lt;br&gt;请注意，你可以假定字符串里不包括任何不可打印的字符。&lt;/p&gt;</summary>
    
    
    
    <category term="算法刷题" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/"/>
    
    <category term="leetcode" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/"/>
    
    <category term="字符串" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode | 赎金信</title>
    <link href="http://example.com/2021/09/01/%E8%B5%8E%E9%87%91%E4%BF%A1/"/>
    <id>http://example.com/2021/09/01/%E8%B5%8E%E9%87%91%E4%BF%A1/</id>
    <published>2021-09-02T01:32:57.000Z</published>
    <updated>2021-09-01T09:35:33.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383.赎金信"></a>383.赎金信</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个赎金信 (ransom) 字符串和一个杂志(magazine)字符串，判断第一个字符串 ransom 能不能由第二个字符串 magazines 里面的字符构成。如果可以构成，返回 true ；否则返回 false。<br>(题目说明：为了不暴露赎金信字迹，要从杂志上搜索各个需要的字母，组成单词来表达意思。杂志字符串中的每个字符只能在赎金信字符串中使用一次。)</p><span id="more"></span><p><a href="https://leetcode-cn.com/problems/ransom-note/">题目链接</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>遍历ransomNote中的每一个元素，并查找这个元素是否在magazine中，如果没有查找到，则返回False，如果查找到了，则将这个元素在magazine中移除，以此类推，直到遍历完ransomNote中的每一个元素。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>class Solution:    def canConstruct(self, ransomNote: str, magazine: str) -&gt; bool:        ransomNote = list(ransomNote)        magazine = list(magazine)        for i in range(len(ransomNote)):            if ransomNote[i] in magazine:                magazine.remove(ransomNote[i])                print(ransomNote)            else:                return False        if i == len(ransomNote)-1:            return Trueif __name__ == &#39;__main__&#39;:    s = Solution()    res = s.canConstruct(&#39;aa&#39;, &#39;aab&#39;)    print(res)    # list1 = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;a&#39;]    # list1.remove(&#39;a&#39;)    # print(list1)</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;383-赎金信&quot;&gt;&lt;a href=&quot;#383-赎金信&quot; class=&quot;headerlink&quot; title=&quot;383.赎金信&quot;&gt;&lt;/a&gt;383.赎金信&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个赎金信 (ransom) 字符串和一个杂志(magazine)字符串，判断第一个字符串 ransom 能不能由第二个字符串 magazines 里面的字符构成。如果可以构成，返回 true ；否则返回 false。&lt;br&gt;(题目说明：为了不暴露赎金信字迹，要从杂志上搜索各个需要的字母，组成单词来表达意思。杂志字符串中的每个字符只能在赎金信字符串中使用一次。)&lt;/p&gt;</summary>
    
    
    
    <category term="算法刷题" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/"/>
    
    <category term="leetcode" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/"/>
    
    <category term="字符串" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode | 反转字符串中的元音字母</title>
    <link href="http://example.com/2021/09/01/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%85%83%E9%9F%B3%E5%AD%97%E6%AF%8D/"/>
    <id>http://example.com/2021/09/01/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%85%83%E9%9F%B3%E5%AD%97%E6%AF%8D/</id>
    <published>2021-09-01T19:05:01.000Z</published>
    <updated>2021-09-01T03:12:51.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="345-反转字符串中的元音字母"><a href="#345-反转字符串中的元音字母" class="headerlink" title="345.反转字符串中的元音字母"></a>345.反转字符串中的元音字母</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个字符串 s ，仅反转字符串中的所有元音字母，并返回结果字符串。<br>元音字母包括 ‘a’、’e’、’i’、’o’、’u’，且可能以大小写两种形式出现。</p><span id="more"></span><p><a href="https://leetcode-cn.com/problems/reverse-vowels-of-a-string">题目链接</a>+</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1.先将字符串中的元音字母的位置找出来，然后再将各元音字母反转<br>2.双指针<br>我们可以使用两个指针 i 和 j 对字符串相向地进行遍历。<br>具体地，指针 i 初始时指向字符串 s 的首位，指针 j 初始时指向字符串 s 的末位。在遍历的过程中，我们不停地将 i 向右移动，直到 i 指向一个元音字母（或者超出字符串的边界范围）；同时，我们不停地将 j 向左移动，直到 j 指向一个元音字母。此时，如果 i&lt;j，那么我们交换 i 和 j 指向的元音字母，否则说明所有的元音字母均已遍历过，就可以退出遍历的过程。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>class Solution:    def reverseVowels(self, s: str) -&gt; str:        &quot;&quot;&quot;        find ans reverse        :param s:        :return:        &quot;&quot;&quot;        vowels = list()        s = list(s)        for i in range(len(s)):            ch = s[i].lower()            if ch == &#39;a&#39; or ch == &#39;e&#39; or ch == &#39;i&#39; or ch == &#39;o&#39; or ch == &#39;u&#39;:                vowels.append(i)        for i in range(len(vowels)//2):            s[vowels[i]], s[vowels[len(vowels) - i -1]] = s[vowels[len(vowels) - i -1]], s[vowels[i]]        return &#39;&#39;.join(s)    def reverseVowels1(self, s: str) -&gt; str:        &quot;&quot;&quot;双指针&quot;&quot;&quot;        def isVowel(ch: str) -&gt; bool:            return ch in &quot;aeiouAEIOU&quot;        n = len(s)        s = list(s)        i, j = 0, n - 1        while i &lt; j:            while i &lt; n and not isVowel(s[i]):                i += 1            while j &gt; 0 and not isVowel(s[j]):                j -= 1            if i &lt; j:                s[i], s[j] = s[j], s[i]                i += 1                j -= 1        return &#39;&#39;.join(s)if __name__ == &quot;__main__&quot;:    s = Solution()    string = &quot;hello&quot;    res = s.reverseVowels(string)    print(res)</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;345-反转字符串中的元音字母&quot;&gt;&lt;a href=&quot;#345-反转字符串中的元音字母&quot; class=&quot;headerlink&quot; title=&quot;345.反转字符串中的元音字母&quot;&gt;&lt;/a&gt;345.反转字符串中的元音字母&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给你一个字符串 s ，仅反转字符串中的所有元音字母，并返回结果字符串。&lt;br&gt;元音字母包括 ‘a’、’e’、’i’、’o’、’u’，且可能以大小写两种形式出现。&lt;/p&gt;</summary>
    
    
    
    <category term="算法刷题" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/"/>
    
    <category term="leetcode" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/"/>
    
    <category term="字符串" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>hexo | hexo博客换电脑了怎么办</title>
    <link href="http://example.com/2021/08/30/hexo%E5%8D%9A%E5%AE%A2%E6%8D%A2%E7%94%B5%E8%84%91%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/"/>
    <id>http://example.com/2021/08/30/hexo%E5%8D%9A%E5%AE%A2%E6%8D%A2%E7%94%B5%E8%84%91%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/</id>
    <published>2021-08-30T18:41:12.000Z</published>
    <updated>2021-10-09T08:21:09.287Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo博客换电脑了怎么办"><a href="#hexo博客换电脑了怎么办" class="headerlink" title="hexo博客换电脑了怎么办"></a>hexo博客换电脑了怎么办</h1><p>我们搭建的hexo博客在更换电脑之后，如果重新搭建博客比较费时费力，可以按照以下资料快速在新的电脑上使用hexo博客发布内容。</p><p><a href="https://www.cnblogs.com/study-everyday/p/8902136.html">参考资料1</a><br><a href="https://www.cnblogs.com/study-everyday/p/8902136.html">参考资料2</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo博客换电脑了怎么办&quot;&gt;&lt;a href=&quot;#hexo博客换电脑了怎么办&quot; class=&quot;headerlink&quot; title=&quot;hexo博客换电脑了怎么办&quot;&gt;&lt;/a&gt;hexo博客换电脑了怎么办&lt;/h1&gt;&lt;p&gt;我们搭建的hexo博客在更换电脑之后，如果重新搭建博</summary>
      
    
    
    
    <category term="hexo" scheme="http://example.com/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
  </entry>
  
</feed>
