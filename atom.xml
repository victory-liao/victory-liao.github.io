<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Victory&#39;s Blog</title>
  
  <subtitle>非淡泊无以明志，非宁静无以致远</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-14T11:51:36.732Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>victory-liao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MyBatis | 缓存</title>
    <link href="http://example.com/2022/04/14/mybatis%E7%BC%93%E5%AD%98/"/>
    <id>http://example.com/2022/04/14/mybatis%E7%BC%93%E5%AD%98/</id>
    <published>2022-04-14T11:39:49.000Z</published>
    <updated>2022-04-14T11:51:36.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><p>mybatis中的一级缓存默认开启，是SqlSession级别的，即同一个SqlSession对于一个SQL语句执行之后就会存储在缓存中，<br>下次执行相同的sql，直接从缓存中取。<br><strong>一级缓存失效的几种情况：</strong><br>（1）不同的SqlSession对应不同的一级缓存<br>（2）同一个SqlSession但是查询条件不同<br>（3）同一个SqlSession两次查询期间执行了任何一次增删改操作，会自动将缓存清空<br>（4）同一个SqlSession两次查询期间手动清空了缓存</p><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><p>mybatis的二级缓存默认不开启，需要设置：<br>1）全局配置文件中开启二级缓存<setting name="cacheEnabled" value="true"><br>2）需要使用二级缓存的映射文件处使用cache配置缓存<cache><br>3）POJO需要实现Serializable接口<br>注意：二级缓存在 SqlSession 关闭或提交之后才会生效<br>1)全局setting的cacheEnable：<br>配置二级缓存的开关，一级缓存一直是打开的。<br>2)select标签的useCache属性：<br>配置这个select是否使用二级缓存。一级缓存一直是使用的<br>3)sql标签的flushCache属性：<br>增删改默认flushCache=true。sql执行以后，会同时清空一级和二级缓存。<br>查询默认 flushCache=false。<br>4)sqlSession.clearCache()：只是用来清除一级缓存。</cache></setting></p><span id="more"></span><p>1.项目目录<br><img src="/2022/04/14/mybatis%E7%BC%93%E5%AD%98/1.PNG"><br>2.EmpMapper.java</p><pre><code>public interface EmpMapper &#123;    .....        //添加员工信息，将0|1--&gt;女|男    void insertEmp(Emp emp);        //根据eid所组成的字符串进行批量删除    void deleteMoreEmp(String eids);     //test cache    //根据eid查询员工信息    Emp getEmpByEid(String eid);&#125;</code></pre><p>3.EmpMapper.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.atguigu.mapper.EmpMapper&quot;&gt;    &lt;!-- 第三方缓存 --&gt;    &lt;cache type=&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;/&gt;         &lt;!-- Emp getEmpByEid(String eid); --&gt;     &lt;!--        useCache:配置这个select是否使用二级缓存       --&gt;     &lt;select id=&quot;getEmpByEid&quot; resultType=&quot;Emp&quot; useCache=&quot;true&quot;&gt;        &lt;include refid=&quot;empColumns&quot;&gt;&lt;/include&gt; where eid=#&#123;eid&#125;     &lt;/select&gt;&lt;/mapper&gt;</code></pre><p>4.TestCache.java</p><pre><code>package com.atguigu.test;import java.io.InputStream;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.Test;import com.atguigu.bean.Emp;import com.atguigu.mapper.EmpMapper;public class TestCache &#123;    @Test    public void testFirstCache() throws Exception&#123;        //测试一级缓存        //同一个SqlSession//        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();//        SqlSession sqlSession = sqlSessionFactory.openSession(true);//        EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);//        Emp emp1 = mapper.getEmpByEid(&quot;8&quot;);//        System.out.println(emp1);//        System.out.println(&quot;===================&quot;);//        Emp emp2 = mapper.getEmpByEid(&quot;8&quot;);//        System.out.println(emp2);        //        DEBUG 04-14 16:23:56,710 ==&gt;  Preparing: select eid,ename,age,sex,did from emp where eid=?   (BaseJdbcLogger.java:145) //        DEBUG 04-14 16:23:56,726 ==&gt; Parameters: 8(String)  (BaseJdbcLogger.java:145) //        DEBUG 04-14 16:23:56,738 &lt;==      Total: 1  (BaseJdbcLogger.java:145) //        Emp [eid=8, ename=小红, age=11, sex=0, dept=null]//        ===================//        Emp [eid=8, ename=小红, age=11, sex=0, dept=null]                        //不同SqlSession//        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();//        SqlSession sqlSession1 = sqlSessionFactory.openSession(true);//        EmpMapper mapper1 = sqlSession1.getMapper(EmpMapper.class);//        Emp emp1 = mapper1.getEmpByEid(&quot;8&quot;);//        System.out.println(emp1);//        //        System.out.println(&quot;===================&quot;);//        //        SqlSession sqlSession2 = sqlSessionFactory.openSession(true);//        EmpMapper mapper2 = sqlSession2.getMapper(EmpMapper.class);//        Emp emp2 = mapper2.getEmpByEid(&quot;8&quot;);//        System.out.println(emp2);        //        DEBUG 04-14 16:26:44,934 ==&gt;  Preparing: select eid,ename,age,sex,did from emp where eid=?   (BaseJdbcLogger.java:145) //        DEBUG 04-14 16:26:44,950 ==&gt; Parameters: 8(String)  (BaseJdbcLogger.java:145) //        DEBUG 04-14 16:26:44,961 &lt;==      Total: 1  (BaseJdbcLogger.java:145) //        Emp [eid=8, ename=小红, age=11, sex=0, dept=null]//        ===================//        DEBUG 04-14 16:26:44,966 ==&gt;  Preparing: select eid,ename,age,sex,did from emp where eid=?   (BaseJdbcLogger.java:145) //        DEBUG 04-14 16:26:44,966 ==&gt; Parameters: 8(String)  (BaseJdbcLogger.java:145) //        DEBUG 04-14 16:26:44,967 &lt;==      Total: 1  (BaseJdbcLogger.java:145) //        Emp [eid=8, ename=小红, age=11, sex=0, dept=null]                //同一个SqlSession两次查询期间执行了任何一次增删改操作        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();        SqlSession sqlSession1 = sqlSessionFactory.openSession(true);        EmpMapper mapper1 = sqlSession1.getMapper(EmpMapper.class);        Emp emp1 = mapper1.getEmpByEid(&quot;8&quot;);        System.out.println(emp1);                sqlSession1.clearCache();        System.out.println(&quot;===================&quot;);//        Emp emp = new Emp();//        emp.setEid(null);//        emp.setAge(25);//        emp.setEname(&quot;lisi&quot;);//        mapper1.insertEmp(emp);                EmpMapper mapper2 = sqlSession1.getMapper(EmpMapper.class);        Emp emp2 = mapper2.getEmpByEid(&quot;8&quot;);        System.out.println(emp2);//        DEBUG 04-14 16:39:56,334 ==&gt;  Preparing: select eid,ename,age,sex,did from emp where eid=?   (BaseJdbcLogger.java:145) //        DEBUG 04-14 16:39:56,350 ==&gt; Parameters: 8(String)  (BaseJdbcLogger.java:145) //        DEBUG 04-14 16:39:56,361 &lt;==      Total: 1  (BaseJdbcLogger.java:145) //        Emp [eid=8, ename=小红, age=11, sex=0, dept=null]//        ===================//        DEBUG 04-14 16:39:56,362 ==&gt;  Preparing: select eid,ename,age,sex,did from emp where eid=?   (BaseJdbcLogger.java:145) //        DEBUG 04-14 16:39:56,363 ==&gt; Parameters: 8(String)  (BaseJdbcLogger.java:145) //        DEBUG 04-14 16:39:56,364 &lt;==      Total: 1  (BaseJdbcLogger.java:145) //        Emp [eid=8, ename=小红, age=11, sex=0, dept=null]    &#125;        @Test    public void testSecondCache() throws Exception&#123;                SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();        SqlSession sqlSession = sqlSessionFactory.openSession(true);        EmpMapper mapper1 = sqlSession.getMapper(EmpMapper.class);        Emp emp1 = mapper1.getEmpByEid(&quot;8&quot;);        System.out.println(emp1);        sqlSession.commit();//二级缓存在 SqlSession 关闭或提交之后才会生效        System.out.println(&quot;====================&quot;);        EmpMapper mapper2 = sqlSession.getMapper(EmpMapper.class);        Emp emp2 = mapper2.getEmpByEid(&quot;8&quot;);        System.out.println(emp2);    &#125;        public SqlSessionFactory getSqlSessionFactory() throws Exception&#123;        InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);        return sqlSessionFactory;    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;缓存&quot;&gt;&lt;a href=&quot;#缓存&quot; class=&quot;headerlink&quot; title=&quot;缓存&quot;&gt;&lt;/a&gt;缓存&lt;/h1&gt;&lt;h2 id=&quot;一级缓存&quot;&gt;&lt;a href=&quot;#一级缓存&quot; class=&quot;headerlink&quot; title=&quot;一级缓存&quot;&gt;&lt;/a&gt;一级缓存&lt;/h2&gt;&lt;p&gt;mybatis中的一级缓存默认开启，是SqlSession级别的，即同一个SqlSession对于一个SQL语句执行之后就会存储在缓存中，&lt;br&gt;下次执行相同的sql，直接从缓存中取。&lt;br&gt;&lt;strong&gt;一级缓存失效的几种情况：&lt;/strong&gt;&lt;br&gt;（1）不同的SqlSession对应不同的一级缓存&lt;br&gt;（2）同一个SqlSession但是查询条件不同&lt;br&gt;（3）同一个SqlSession两次查询期间执行了任何一次增删改操作，会自动将缓存清空&lt;br&gt;（4）同一个SqlSession两次查询期间手动清空了缓存&lt;/p&gt;
&lt;h2 id=&quot;二级缓存&quot;&gt;&lt;a href=&quot;#二级缓存&quot; class=&quot;headerlink&quot; title=&quot;二级缓存&quot;&gt;&lt;/a&gt;二级缓存&lt;/h2&gt;&lt;p&gt;mybatis的二级缓存默认不开启，需要设置：&lt;br&gt;1）全局配置文件中开启二级缓存&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;&gt;&lt;br&gt;2）需要使用二级缓存的映射文件处使用cache配置缓存&lt;cache&gt;&lt;br&gt;3）POJO需要实现Serializable接口&lt;br&gt;注意：二级缓存在 SqlSession 关闭或提交之后才会生效&lt;br&gt;1)全局setting的cacheEnable：&lt;br&gt;配置二级缓存的开关，一级缓存一直是打开的。&lt;br&gt;2)select标签的useCache属性：&lt;br&gt;配置这个select是否使用二级缓存。一级缓存一直是使用的&lt;br&gt;3)sql标签的flushCache属性：&lt;br&gt;增删改默认flushCache=true。sql执行以后，会同时清空一级和二级缓存。&lt;br&gt;查询默认 flushCache=false。&lt;br&gt;4)sqlSession.clearCache()：只是用来清除一级缓存。&lt;/cache&gt;&lt;/setting&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyBatis" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/"/>
    
    <category term="缓存" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/%E7%BC%93%E5%AD%98/"/>
    
    
    <category term="MyBatis" scheme="http://example.com/tags/MyBatis/"/>
    
    <category term="缓存" scheme="http://example.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis | 动态SQL</title>
    <link href="http://example.com/2022/04/09/%E5%8A%A8%E6%80%81SQL/"/>
    <id>http://example.com/2022/04/09/%E5%8A%A8%E6%80%81SQL/</id>
    <published>2022-04-09T09:33:11.000Z</published>
    <updated>2022-04-09T09:37:21.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1><p>1.项目目录<br><img src="/2022/04/09/%E5%8A%A8%E6%80%81SQL/1.PNG"><br>2.EmpMapper.java</p><pre><code>package com.atguigu.mapper;import java.util.List;import org.apache.ibatis.annotations.Param;import com.atguigu.bean.Emp;public interface EmpMapper &#123;    //根据eid,ename,age,sex多条件查询员工信息    List&lt;Emp&gt; getEmpListByMoreTJ(Emp emp);        //根据eid,ename,age,sex其中一个查询员工信息    List&lt;Emp&gt; getEmpListByChoose(Emp emp);        //添加员工信息，将0|1--&gt;女|男    void insertEmp(Emp emp);        //根据eid所组成的字符串进行批量删除    void deleteMoreEmp(String eids);        //通过list集合实现批量删除    //void deleteMoreByList(List&lt;Integer&gt; eids);    void deleteMoreByList(@Param(&quot;eids&quot;)List&lt;Integer&gt; eids);        //批量添加    void insertMoreByArray(Emp[] emps);        //批量修改    void updateMoreByArray(@Param(&quot;emps&quot;)Emp[] emps);&#125;</code></pre><p>3.EmpMapper.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.atguigu.mapper.EmpMapper&quot;&gt;    &lt;!--         &lt;sql id=&quot;&quot;&gt;&lt;/sql&gt;:设置一段SQL片段，即公共SQL，可以被当前映射文件中所有的SQL语句所访问     --&gt;    &lt;sql id=&quot;empColumns&quot;&gt;        select eid,ename,age,sex,did from emp    &lt;/sql&gt;    &lt;!-- List&lt;Emp&gt; getEmpListByMoreTJ(); --&gt;    &lt;!--        多条件查询：若页面中没有设置此条件，SQL语句中一定不能有该条件     --&gt;    &lt;!--        &lt;if test=&quot;&quot;&gt;&lt;/if&gt;:通过test表达式拼接SQL         &lt;where&gt;:添加where关键字并去掉多余的and        &lt;trim prefix=&quot;&quot; suffix=&quot;&quot; prefixOverrides=&quot;&quot; suffixOverrides=&quot;&quot;&gt;:截取并拼接        prefix:在操作的SQL语句前加入某些内容        suffix:在操作的SQL语句后加入某些内容        prefixOverrides:把操作的SQL语句前的某些内容去掉        suffixOverrides:把操作的SQL语句后的某些内容去掉     --&gt;    &lt;select id=&quot;getEmpListByMoreTJ&quot; resultType=&quot;Emp&quot;&gt;        &lt;!-- select eid,ename,age,sex,did from emp        where 1 = 1        &lt;if test=&quot;eid != null&quot;&gt;            and eid=#&#123;eid&#125;        &lt;/if&gt;        &lt;if test=&quot;ename != null and ename != &#39;&#39;&quot;&gt;            and ename=#&#123;ename&#125;        &lt;/if&gt;        &lt;if test=&quot;age != null&quot;&gt;            and age=#&#123;age&#125;        &lt;/if&gt;        &lt;if test=&quot;sex == &#39;1&#39; or sex == &#39;0&#39;&quot;&gt;            and sex=#&#123;sex&#125;        &lt;/if&gt; --&gt;                        &lt;!-- select eid,ename,age,sex,did from emp        &lt;where&gt;            &lt;if test=&quot;eid != null&quot;&gt;                and eid=#&#123;eid&#125;            &lt;/if&gt;            &lt;if test=&quot;ename != null and ename != &#39;&#39;&quot;&gt;                and ename=#&#123;ename&#125;            &lt;/if&gt;            &lt;if test=&quot;age != null&quot;&gt;                and age=#&#123;age&#125;            &lt;/if&gt;            &lt;if test=&quot;sex == &#39;1&#39; or sex == &#39;0&#39;&quot;&gt;                and sex=#&#123;sex&#125;            &lt;/if&gt;        &lt;/where&gt; --&gt;                &lt;!-- select eid,ename,age,sex,did from emp --&gt;        &lt;include refid=&quot;empColumns&quot;&gt;&lt;/include&gt;        &lt;trim prefix=&quot;where&quot; suffixOverrides=&quot;and|or&quot;&gt;            &lt;if test=&quot;eid != null&quot;&gt;                eid=#&#123;eid&#125; and            &lt;/if&gt;            &lt;if test=&quot;ename != null and ename != &#39;&#39;&quot;&gt;                ename=#&#123;ename&#125; and            &lt;/if&gt;            &lt;if test=&quot;age != null&quot;&gt;                age=#&#123;age&#125; or            &lt;/if&gt;            &lt;if test=&quot;sex == &#39;1&#39; or sex == &#39;0&#39;&quot;&gt;                sex=#&#123;sex&#125;            &lt;/if&gt;        &lt;/trim&gt;    &lt;/select&gt;        &lt;!-- List&lt;Emp&gt; getEmpListByChoose(Emp emp); --&gt;    &lt;!--        &lt;choose&gt;选择某一个when或otherwise执行            &lt;when test=&quot;&quot;&gt;&lt;/when&gt;：通过test表达式拼接SQL            .            .            .            &lt;otherwise&gt;&lt;/otherwise&gt;:当when都不符合条件，就会选择otherwise拼接SQL语句        &lt;/choose&gt;      --&gt;    &lt;select id=&quot;getEmpListByChoose&quot; resultType=&quot;Emp&quot;&gt;        select eid,ename,age,sex from emp        where         &lt;choose&gt;            &lt;when test=&quot;eid != null&quot;&gt;                eid = #&#123;eid&#125;            &lt;/when&gt;            &lt;when test=&quot;ename != null and ename != &#39;&#39;&quot;&gt;                ename = #&#123;ename&#125;            &lt;/when&gt;            &lt;when test=&quot;age != null&quot;&gt;                age = #&#123;age&#125;            &lt;/when&gt;            &lt;otherwise&gt;                sex = #&#123;sex&#125;            &lt;/otherwise&gt;        &lt;/choose&gt;    &lt;/select&gt;        &lt;!-- void insertEmp(Emp emp); --&gt;    &lt;insert id=&quot;insertEmp&quot;&gt;        insert into emp(eid,ename,age,sex) values(            null,            #&#123;ename&#125;,            #&#123;age&#125;,            &lt;choose&gt;                &lt;when test=&quot;sex == 0&quot;&gt;&#39;女&#39;&lt;/when&gt;                &lt;when test=&quot;sex == 1&quot;&gt;&#39;男&#39;&lt;/when&gt;                &lt;otherwise&gt;&#39;不详&#39;&lt;/otherwise&gt;            &lt;/choose&gt;        )    &lt;/insert&gt;        &lt;!-- void deleteMoreEmp(String eids); --&gt;    &lt;delete id=&quot;deleteMoreEmp&quot;&gt;        delete from emp where eid in ($&#123;value&#125;)    &lt;/delete&gt;        &lt;!-- void deleteMoreByList(List&lt;Integer&gt; eids); --&gt;    &lt;!--        &lt;foreach collection=&quot;eids&quot; item=&quot;&quot; close=&quot;&quot; open=&quot;&quot; separator=&quot;&quot; index=&quot;&quot;&gt;&lt;/foreach&gt;        对一个数组或集合进行遍历        collection:指定要遍历的集合或数组        item:设置别名        close:设置循环体的结束内容        open:设置循环体的开始内容        separator:设置每一次循环之间的分隔符        index:若遍历的是list集合，index代表下标；若遍历的是map结合，index代表键     --&gt;     &lt;!--        delete from emp where eid in ();        delete from emp where eid = 1 or eid = 2 or eid = 3       --&gt;    &lt;delete id=&quot;deleteMoreByList&quot;&gt;        &lt;!-- delete from emp where eid in         &lt;foreach collection=&quot;list&quot; item=&quot;eid&quot; separator=&quot;,&quot; open=&quot;(&quot; close=&quot;)&quot;&gt;            #&#123;eid&#125;        &lt;/foreach&gt; --&gt;                delete from emp where        &lt;!-- &lt;foreach collection=&quot;list&quot; item=&quot;eid&quot; separator=&quot;or&quot;&gt;            eid = #&#123;eid&#125;        &lt;/foreach&gt; --&gt;        &lt;foreach collection=&quot;eids&quot; item=&quot;eid&quot; separator=&quot;or&quot;&gt;            eid = #&#123;eid&#125;        &lt;/foreach&gt;    &lt;/delete&gt;        &lt;!--        delete:            delete from emp where eid in ();            delete from emp where eid = 1 or eid = 2 or eid = 3         select:            select * from emp where eid in ();            select * from emp where eid = 1 or eid = 2 or eid = 3         update:            把每条数据修改成相同内容            update emp set ... where eid in ();            update emp set ... where eid = 1 or eid = 2 or eid = 3             把每条数据修改成对应内容,注意必须在链接地址（url）后添加?allowMultiQueries=true            update emp set ... where eid=1;            update emp set ... where eid=2;            update emp set ... where eid=3;        insert:            insert into emp values(),(),()     --&gt;          &lt;!-- void insertMoreByArray(Emp[] emps); --&gt;     &lt;insert id=&quot;insertMoreByArray&quot;&gt;        insert into emp values        &lt;foreach collection=&quot;array&quot; item=&quot;emp&quot; separator=&quot;,&quot;&gt;            (null,#&#123;emp.ename&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,1)        &lt;/foreach&gt;     &lt;/insert&gt;          &lt;!-- void updateMoreByArray(@Param(&quot;emps&quot;)Emp[] emps); --&gt;     &lt;update id=&quot;updateMoreByArray&quot;&gt;        &lt;foreach collection=&quot;emps&quot; item=&quot;emp&quot;&gt;            update emp set ename=#&#123;emp.ename&#125;, age=#&#123;emp.age&#125;, sex=#&#123;emp.sex&#125; where eid = #&#123;emp.eid&#125;;        &lt;/foreach&gt;     &lt;/update&gt;&lt;/mapper&gt;</code></pre><p>4.TestDynamicSQl.java</p><pre><code>package com.atguigu.test;import java.io.IOException;import java.io.InputStream;import java.util.ArrayList;import java.util.List;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.Test;import com.atguigu.bean.Emp;import com.atguigu.mapper.EmpMapper;public class TestDynamicSQL &#123;    @Test    public void TestMore() throws Exception&#123;        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();        SqlSession sqlSession = sqlSessionFactory.openSession(true);        EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);                //批量删除//        List&lt;Integer&gt; eids = new ArrayList&lt;&gt;();//        eids.add(10);//        eids.add(16);//        eids.add(17);//        mapper.deleteMoreByList(eids);//只能删除id为1的员工                //批量添加        //Emp[] emps = new Emp[3];        //Emp[] emps = new Emp[]&#123;&#125;;        //Emp[] emps = &#123;&#125;;//        Emp emp1 = new Emp(null, &quot;a&quot;,23,&quot;男&quot;);//        Emp emp2 = new Emp(null, &quot;aa&quot;,23,&quot;男&quot;);//        Emp emp3 = new Emp(null, &quot;aaa&quot;,23,&quot;男&quot;);//        Emp[] emps = &#123;emp1, emp2, emp3&#125;;//        mapper.insertMoreByArray(emps);                //批量修改(需要在jdbc.url后加?allowMultiQueries=true)        //jdbc.url=jdbc:mysql://localhost:3306/ssm?allowMultiQueries=true        Emp emp1 = new Emp(20, &quot;a1&quot;,233,&quot;女&quot;);        Emp emp2 = new Emp(21, &quot;aa1&quot;,233,&quot;女&quot;);        Emp emp3 = new Emp(22, &quot;aaa1&quot;,233,&quot;女&quot;);        Emp[] emps = &#123;emp1, emp2, emp3&#125;;        mapper.updateMoreByArray(emps);    &#125;        @Test    public void TestChoose() throws Exception&#123;        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();        SqlSession sqlSession = sqlSessionFactory.openSession(true);        EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);                //测试1        //Emp emp = new Emp();//        emp.setEid(1);//        emp.setEname(&quot;张三&quot;);//        emp.setAge(12);        //emp.setSex(&quot;1&quot;);//        List&lt;Emp&gt; list = mapper.getEmpListByChoose(emp);//        for (Emp e : list) &#123;//            System.out.println(e);//        &#125;                //测试2//        Emp emp = new Emp();//        emp.setEname(&quot;张三&quot;);//        emp.setAge(12);    //        emp.setSex(&quot;1&quot;);//        mapper.insertEmp(emp);                Emp emp = new Emp();        emp.setEname(&quot;张三三&quot;);        emp.setAge(12);            emp.setSex(&quot;123&quot;);        mapper.insertEmp(emp);    &#125;        @Test    public void TestIf() throws Exception&#123;        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();        SqlSession sqlSession = sqlSessionFactory.openSession(true);        EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);        Emp emp = new Emp();        //emp.setEid(1);        emp.setEname(&quot;张三&quot;);        emp.setAge(12);        //emp.setSex(&quot;1&quot;);        List&lt;Emp&gt; list = mapper.getEmpListByMoreTJ(emp);        for (Emp e : list) &#123;            System.out.println(e);        &#125;    &#125;        public SqlSessionFactory getSqlSessionFactory() throws Exception&#123;        InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);        return sqlSessionFactory;    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;动态SQL&quot;&gt;&lt;a href=&quot;#动态SQL&quot; class=&quot;headerlink&quot; title=&quot;动态SQL&quot;&gt;&lt;/a&gt;动态SQL&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/04/09/%E5%8A%A8%E6%80%81SQL/1.PN</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyBatis" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/"/>
    
    <category term="动态SQL" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/%E5%8A%A8%E6%80%81SQL/"/>
    
    
    <category term="MyBatis" scheme="http://example.com/tags/MyBatis/"/>
    
    <category term="动态SQL" scheme="http://example.com/tags/%E5%8A%A8%E6%80%81SQL/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis | 一对多自定义映射、分步查询和延迟加载</title>
    <link href="http://example.com/2022/04/06/%E4%B8%80%E5%AF%B9%E5%A4%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E6%98%A0%E5%B0%84%E3%80%81%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2%E5%92%8C%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/"/>
    <id>http://example.com/2022/04/06/%E4%B8%80%E5%AF%B9%E5%A4%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E6%98%A0%E5%B0%84%E3%80%81%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2%E5%92%8C%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/</id>
    <published>2022-04-07T02:13:19.000Z</published>
    <updated>2022-04-07T02:18:53.614Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一对多自定义映射、分步查询和延迟加载"><a href="#一对多自定义映射、分步查询和延迟加载" class="headerlink" title="一对多自定义映射、分步查询和延迟加载"></a>一对多自定义映射、分步查询和延迟加载</h1><p>1.项目目录<br><img src="/2022/04/06/%E4%B8%80%E5%AF%B9%E5%A4%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E6%98%A0%E5%B0%84%E3%80%81%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2%E5%92%8C%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/1.PNG"><br>2.Dept.java<br>在”一”方添加List&lt;多&gt;</p><pre><code>package com.atguigu.bean;import java.util.List;public class Dept &#123;    private Integer did;    private String dname;    private List&lt;Emp&gt; emps;        public List&lt;Emp&gt; getEmps() &#123;        return emps;    &#125;    public void setEmps(List&lt;Emp&gt; emps) &#123;        this.emps = emps;    &#125;    public Integer getDid() &#123;        return did;    &#125;    public void setDid(Integer did) &#123;        this.did = did;    &#125;    public String getDname() &#123;        return dname;    &#125;    public void setDname(String dname) &#123;        this.dname = dname;    &#125;    @Override    public String toString() &#123;        return &quot;Dept [did=&quot; + did + &quot;, dname=&quot; + dname + &quot;, emps=&quot; + emps + &quot;]&quot;;    &#125;&#125;</code></pre><p>3.EmpDeptMapper.java</p><pre><code>package com.atguigu.mapper;import java.util.List;import com.atguigu.bean.Dept;import com.atguigu.bean.Emp;public interface EmpDeptMapper &#123;    List&lt;Emp&gt; getAllEmp();        Emp getEmpStep(String eid);        Dept getDeptEmpsByDid(String did);        Dept getOnlyDeptByDid(String did);//测试一对多        List&lt;Emp&gt; getEmpListByDid(String did);//测试一对多&#125;</code></pre><p>4.EmpDeptMapper.xml<br>在映射文件中做以下配置：</p><pre><code>&lt;resultMap type=&quot;Dept&quot; id=&quot;deptMapStep&quot;&gt;    &lt;id column=&quot;did&quot; property=&quot;did&quot; /&gt;    &lt;result column=&quot;dname&quot; property=&quot;dname&quot; /&gt;    &lt;!-- &lt;collection property=&quot;emps&quot; select=&quot;com.atguigu.mapper.EmpDeptMapper.getEmpListByDid&quot; column=&quot;did&quot;&gt;&lt;/collection&gt; --&gt;    &lt;!--         fetchType:            lazy 延迟加载            eager 不进行延迟加载     --&gt;    &lt;collection property=&quot;emps&quot; select=&quot;com.atguigu.mapper.EmpDeptMapper.getEmpListByDid&quot; column=&quot;&#123;did=did&#125;&quot; fetchType=&quot;lazy&quot;&gt;&lt;/collection&gt;&lt;/resultMap&gt;&lt;!-- Dept getOnlyDeptByDid(String did); --&gt;&lt;select id=&quot;getOnlyDeptByDid&quot; resultMap=&quot;deptMapStep&quot;&gt;    select did,dname from dept where did=#&#123;did&#125;&lt;/select&gt;&lt;!-- List&lt;Emp&gt; getEmpListByDid(String did); --&gt;&lt;select id=&quot;getEmpListByDid&quot; resultType=&quot;Emp&quot;&gt;    select eid,ename,age,sex from emp where did = #&#123;did&#125;&lt;/select&gt;</code></pre><p>5.TestEmpDept.java</p><pre><code>package com.atguigu.test;import java.io.IOException;import java.io.InputStream;import java.util.List;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import com.atguigu.bean.Dept;import com.atguigu.bean.Emp;import com.atguigu.mapper.EmpDeptMapper;public class TestEmpDept &#123;    public static void main(String[] args) throws IOException &#123;        InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);        SqlSession sqlSession = sqlSessionFactory.openSession(true);        EmpDeptMapper mapper = sqlSession.getMapper(EmpDeptMapper.class);        //        List&lt;Emp&gt; empList = mapper.getAllEmp();//        System.out.println(empList);        //        Emp emp = mapper.getEmpStep(&quot;3&quot;);//        System.out.println(emp.getEname());//        System.out.println(emp.getDept());        //        Dept dept = mapper.getDeptEmpsByDid(&quot;2&quot;);//        System.out.println(dept);                Dept dept = mapper.getOnlyDeptByDid(&quot;3&quot;);        //System.out.println(dept);        System.out.println(dept.getDname());        System.out.println(dept.getEmps());    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一对多自定义映射、分步查询和延迟加载&quot;&gt;&lt;a href=&quot;#一对多自定义映射、分步查询和延迟加载&quot; class=&quot;headerlink&quot; title=&quot;一对多自定义映射、分步查询和延迟加载&quot;&gt;&lt;/a&gt;一对多自定义映射、分步查询和延迟加载&lt;/h1&gt;&lt;p&gt;1.项目目录</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyBatis" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/"/>
    
    <category term="一对多自定义映射、分步查询和延迟加载" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/%E4%B8%80%E5%AF%B9%E5%A4%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E6%98%A0%E5%B0%84%E3%80%81%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2%E5%92%8C%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/"/>
    
    
    <category term="MyBatis" scheme="http://example.com/tags/MyBatis/"/>
    
    <category term="自定义映射" scheme="http://example.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%98%A0%E5%B0%84/"/>
    
    <category term="分步查询" scheme="http://example.com/tags/%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2/"/>
    
    <category term="延迟加载" scheme="http://example.com/tags/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis | 分步查询、分步查询延迟加载</title>
    <link href="http://example.com/2022/04/05/%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2%E3%80%81%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/"/>
    <id>http://example.com/2022/04/05/%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2%E3%80%81%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/</id>
    <published>2022-04-06T01:53:04.000Z</published>
    <updated>2022-04-06T02:32:32.798Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分步查询、分步查询延迟加载"><a href="#分步查询、分步查询延迟加载" class="headerlink" title="分步查询、分步查询延迟加载"></a>分步查询、分步查询延迟加载</h1><p>项目目录<br><img src="/2022/04/05/%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2%E3%80%81%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/1.PNG"><br>1.mybatis-config.xml<br>分步查询延迟加载需要在MyBatis核心配置文件中做以下配置：</p><pre><code>&lt;settings&gt;    &lt;!-- 开启延迟加载 --&gt;    &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;&gt;&lt;/setting&gt;    &lt;!-- 是否查询所有数据 --&gt;    &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;&gt;&lt;/setting&gt;&lt;/settings&gt;</code></pre><p>2.DeptMapper.java</p><pre><code>public interface DeptMapper &#123;    Dept getDeptByDid(String did);&#125;</code></pre><p>3.DeptMapper.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.atguigu.mapper.DeptMapper&quot;&gt;    &lt;select id=&quot;getDeptByDid&quot; resultType=&quot;Dept&quot;&gt;        select did,dname from dept where did=#&#123;did&#125;    &lt;/select&gt;&lt;/mapper&gt;</code></pre><p>4.EmpDeptMapper.java</p><pre><code>public interface EmpDeptMapper &#123;    List&lt;Emp&gt; getAllEmp();        Emp getEmpStep(String eid);//分步查询&#125;</code></pre><p>5.EmpDeptMapper.xml<br>添加查询语句</p><pre><code>&lt;resultMap type=&quot;Emp&quot; id=&quot;empMapStep&quot;&gt;    &lt;id column=&quot;eid&quot; property=&quot;eid&quot;/&gt;    &lt;result column=&quot;ename&quot; property=&quot;ename&quot;/&gt;    &lt;result column=&quot;age&quot; property=&quot;age&quot;/&gt;    &lt;result column=&quot;sex&quot; property=&quot;sex&quot;/&gt;    &lt;!--        select:分步查询的SQL的id，即接口全限定名.方法名或者namespace.SQL的id        column:分步查询的条件，注意：此条件必须是从数据库查询过的      --&gt;    &lt;association property=&quot;dept&quot; select=&quot;com.atguigu.mapper.DeptMapper.getDeptByDid&quot; column=&quot;did&quot;&gt;&lt;/association&gt;&lt;/resultMap&gt;&lt;!-- Emp getEmpStep(String eid); --&gt;&lt;select id=&quot;getEmpStep&quot; resultMap=&quot;empMapStep&quot;&gt;    select eid,ename,age,sex,did from emp where eid = #&#123;eid&#125;&lt;/select&gt;</code></pre><p>6.TestEmpDept.java</p><pre><code>public class TestEmpDept &#123;    public static void main(String[] args) throws IOException &#123;        InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);        SqlSession sqlSession = sqlSessionFactory.openSession(true);        EmpDeptMapper mapper = sqlSession.getMapper(EmpDeptMapper.class);                Emp emp = mapper.getEmpStep(&quot;3&quot;);        System.out.println(emp.getEname());        System.out.println(emp.getDept());    &#125;&#125;</code></pre><p>7.运行结果<br>执行emp.getEname()运行结果为前四行<br>再执行emp.getDept()运行结果为八行</p><pre><code>DEBUG 04-06 09:48:10,087 ==&gt;  Preparing: select eid,ename,age,sex,did from emp where eid = ?   (BaseJdbcLogger.java:145) DEBUG 04-06 09:48:10,102 ==&gt; Parameters: 3(String)  (BaseJdbcLogger.java:145) DEBUG 04-06 09:48:10,147 &lt;==      Total: 1  (BaseJdbcLogger.java:145) 王五DEBUG 04-06 09:48:10,147 ==&gt;  Preparing: select did,dname from dept where did=?   (BaseJdbcLogger.java:145) DEBUG 04-06 09:48:10,148 ==&gt; Parameters: 3(Integer)  (BaseJdbcLogger.java:145) DEBUG 04-06 09:48:10,149 &lt;==      Total: 1  (BaseJdbcLogger.java:145) Dept [did=3, dname=研发部]</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分步查询、分步查询延迟加载&quot;&gt;&lt;a href=&quot;#分步查询、分步查询延迟加载&quot; class=&quot;headerlink&quot; title=&quot;分步查询、分步查询延迟加载&quot;&gt;&lt;/a&gt;分步查询、分步查询延迟加载&lt;/h1&gt;&lt;p&gt;项目目录&lt;br&gt;&lt;img src=&quot;/2022/04</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyBatis" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/"/>
    
    <category term="分步查询、分步查询延迟加载" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2%E3%80%81%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/"/>
    
    
    <category term="MyBatis" scheme="http://example.com/tags/MyBatis/"/>
    
    <category term="分步查询" scheme="http://example.com/tags/%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2/"/>
    
    <category term="分步查询延迟加载" scheme="http://example.com/tags/%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>python | 统计字符串中各个字符出现的次数并返回出现次数最多的字符</title>
    <link href="http://example.com/2022/04/05/%E7%BB%9F%E8%AE%A1%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%90%84%E4%B8%AA%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E5%B9%B6%E8%BF%94%E5%9B%9E%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%97%E7%AC%A6/"/>
    <id>http://example.com/2022/04/05/%E7%BB%9F%E8%AE%A1%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%90%84%E4%B8%AA%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E5%B9%B6%E8%BF%94%E5%9B%9E%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%97%E7%AC%A6/</id>
    <published>2022-04-06T00:50:00.000Z</published>
    <updated>2022-04-06T01:04:22.628Z</updated>
    
    <content type="html"><![CDATA[<h1 id="找出字符串中出现次数最多的字符"><a href="#找出字符串中出现次数最多的字符" class="headerlink" title="找出字符串中出现次数最多的字符"></a>找出字符串中出现次数最多的字符</h1><pre><code>string = &quot;abcdaab&quot;word_frequency = dict()for ch in string:    if ch not in word_frequency.keys():        word_frequency[ch] = 1    else:        word_frequency[ch] += 1print(word_frequency)print(max(word_frequency, key=word_frequency.get))</code></pre><p><a href="https://blog.csdn.net/weixin_42444693/article/details/104203479?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&utm_relevant_index=1">参考资料</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;找出字符串中出现次数最多的字符&quot;&gt;&lt;a href=&quot;#找出字符串中出现次数最多的字符&quot; class=&quot;headerlink&quot; title=&quot;找出字符串中出现次数最多的字符&quot;&gt;&lt;/a&gt;找出字符串中出现次数最多的字符&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;string = &amp;</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="基础" scheme="http://example.com/categories/python/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="找出字符串中出现次数最多的字符" scheme="http://example.com/categories/python/%E5%9F%BA%E7%A1%80/%E6%89%BE%E5%87%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%97%E7%AC%A6/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="找出字符串中出现次数最多的字符" scheme="http://example.com/tags/%E6%89%BE%E5%87%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis | 多对一查询自定义映射</title>
    <link href="http://example.com/2022/04/03/%E5%A4%9A%E5%AF%B9%E4%B8%80%E6%9F%A5%E8%AF%A2%E8%87%AA%E5%AE%9A%E4%B9%89%E6%98%A0%E5%B0%84/"/>
    <id>http://example.com/2022/04/03/%E5%A4%9A%E5%AF%B9%E4%B8%80%E6%9F%A5%E8%AF%A2%E8%87%AA%E5%AE%9A%E4%B9%89%E6%98%A0%E5%B0%84/</id>
    <published>2022-04-03T09:38:59.000Z</published>
    <updated>2022-04-03T09:44:07.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多对一查询自定义映射"><a href="#多对一查询自定义映射" class="headerlink" title="多对一查询自定义映射"></a>多对一查询自定义映射</h1><p>1.项目目录<br><img src="/2022/04/03/%E5%A4%9A%E5%AF%B9%E4%B8%80%E6%9F%A5%E8%AF%A2%E8%87%AA%E5%AE%9A%E4%B9%89%E6%98%A0%E5%B0%84/1.PNG"><br>2.Emp.java</p><pre><code>package com.atguigu.bean;public class Emp &#123;    private Integer eid;    private String ename;    private Integer age;    private String sex;    private Dept dept;            public Dept getDept() &#123;        return dept;    &#125;    public void setDept(Dept dept) &#123;        this.dept = dept;    &#125;    public Integer getEid() &#123;        return eid;    &#125;    public void setEid(Integer eid) &#123;        this.eid = eid;    &#125;    public String getEname() &#123;        return ename;    &#125;    public void setEname(String ename) &#123;        this.ename = ename;    &#125;    public Integer getAge() &#123;        return age;    &#125;    public void setAge(Integer age) &#123;        this.age = age;    &#125;    public String getSex() &#123;        return sex;    &#125;    public void setSex(String sex) &#123;        this.sex = sex;    &#125;        @Override    public String toString() &#123;        return &quot;Emp [eid=&quot; + eid + &quot;, ename=&quot; + ename + &quot;, age=&quot; + age + &quot;, sex=&quot; + sex + &quot;, dept=&quot; + dept + &quot;]&quot;;    &#125;    public Emp(Integer eid, String ename, Integer age, String sex) &#123;        super();        this.eid = eid;        this.ename = ename;        this.age = age;        this.sex = sex;    &#125;    public Emp() &#123;        super();        // TODO Auto-generated constructor stub    &#125;&#125;</code></pre><p>3.Dept.java</p><pre><code>package com.atguigu.bean;public class Dept &#123;    private Integer did;    private String dname;    public Integer getDid() &#123;        return did;    &#125;    public void setDid(Integer did) &#123;        this.did = did;    &#125;    public String getDname() &#123;        return dname;    &#125;    public void setDname(String dname) &#123;        this.dname = dname;    &#125;    @Override    public String toString() &#123;        return &quot;Dept [did=&quot; + did + &quot;, dname=&quot; + dname + &quot;]&quot;;    &#125;    &#125;</code></pre><p>4.EmpDeptMapper.java</p><pre><code>package com.atguigu.mapper;import java.util.List;import com.atguigu.bean.Emp;public interface EmpDeptMapper &#123;    List&lt;Emp&gt; getAllEmp();&#125;</code></pre><p>5.EmpDeptMapper.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.atguigu.mapper.EmpDeptMapper&quot;&gt;        &lt;!-- &lt;select id=&quot;getAllEmp&quot; resultType=&quot;Emp&quot;&gt;        select e.eid,e.ename,e.age,e.sex,e.did,d.dname from emp e left join dept d on e.did=d.did                    查询结果：            [Emp [eid=1, ename=张三, age=12, sex=男, dept=null],             不能够查询出员工所对应的部门，需要进行自定义映射            &lt;/select&gt; --&gt;        &lt;!-- 自定义映射-第一种方式 --&gt;    &lt;!-- &lt;resultMap type=&quot;Emp&quot; id=&quot;empMap&quot;&gt;        &lt;id column=&quot;eid&quot; property=&quot;eid&quot;/&gt;        &lt;result column=&quot;ename&quot; property=&quot;ename&quot;/&gt;        &lt;result column=&quot;age&quot; property=&quot;age&quot;/&gt;        &lt;result column=&quot;sex&quot; property=&quot;sex&quot;/&gt;        &lt;result column=&quot;did&quot; property=&quot;dept.did&quot;/&gt;        &lt;result column=&quot;dname&quot; property=&quot;dept.dname&quot;/&gt;    &lt;/resultMap&gt; --&gt;    &lt;!--        &lt;resultMap&gt;:自定义映射，处理复杂的表关系        &lt;id/&gt;:设置主键的映射关系，column设置字段名，property设置属性名        &lt;result/&gt;:设置非主键的映射关系， column设置字段名，property设置属性名     --&gt;          &lt;!-- 自定义映射-第二种方式 --&gt;     &lt;resultMap type=&quot;Emp&quot; id=&quot;empMap&quot;&gt;        &lt;id column=&quot;eid&quot; property=&quot;eid&quot;/&gt;        &lt;result column=&quot;ename&quot; property=&quot;ename&quot;/&gt;        &lt;result column=&quot;age&quot; property=&quot;age&quot;/&gt;        &lt;result column=&quot;sex&quot; property=&quot;sex&quot;/&gt;        &lt;association property=&quot;dept&quot; javaType=&quot;Dept&quot;&gt;            &lt;id column=&quot;did&quot; property=&quot;did&quot;/&gt;            &lt;result column=&quot;dname&quot; property=&quot;dname&quot;/&gt;        &lt;/association&gt;     &lt;/resultMap&gt;        &lt;!-- List&lt;Emp&gt; getAllEmp(); --&gt;    &lt;select id=&quot;getAllEmp&quot; resultMap=&quot;empMap&quot;&gt;        &lt;!-- select * from emp e, dept d where e.did = d.did --&gt;        select e.eid,e.ename,e.age,e.sex,e.did,d.dname from emp e left join dept d on e.did=d.did    &lt;/select&gt;&lt;/mapper&gt;</code></pre><p>6.TestEmpDept.java</p><pre><code>package com.atguigu.test;import java.io.IOException;import java.io.InputStream;import java.util.List;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import com.atguigu.bean.Emp;import com.atguigu.mapper.EmpDeptMapper;public class TestEmpDept &#123;    public static void main(String[] args) throws IOException &#123;        InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);        SqlSession sqlSession = sqlSessionFactory.openSession(true);        EmpDeptMapper mapper = sqlSession.getMapper(EmpDeptMapper.class);                List&lt;Emp&gt; empList = mapper.getAllEmp();        System.out.println(empList);    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;多对一查询自定义映射&quot;&gt;&lt;a href=&quot;#多对一查询自定义映射&quot; class=&quot;headerlink&quot; title=&quot;多对一查询自定义映射&quot;&gt;&lt;/a&gt;多对一查询自定义映射&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/04/03/%E5%A4</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyBatis" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/"/>
    
    <category term="多对一查询自定义映射" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/%E5%A4%9A%E5%AF%B9%E4%B8%80%E6%9F%A5%E8%AF%A2%E8%87%AA%E5%AE%9A%E4%B9%89%E6%98%A0%E5%B0%84/"/>
    
    
    <category term="MyBatis" scheme="http://example.com/tags/MyBatis/"/>
    
    <category term="自定义映射" scheme="http://example.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%98%A0%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis | 获取参数值的两种方式</title>
    <link href="http://example.com/2022/04/02/MyBatis%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E5%80%BC%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2022/04/02/MyBatis%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E5%80%BC%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2022-04-02T13:00:31.000Z</published>
    <updated>2022-04-03T04:10:52.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis获取参数值的两种方式"><a href="#MyBatis获取参数值的两种方式" class="headerlink" title="MyBatis获取参数值的两种方式"></a>MyBatis获取参数值的两种方式</h1><p>1.${}:insert into emp values(null,admin,23,男)<br>Statement:<br>    必须使用字符串拼接的方式操作SQL，一定要注意单引号问题<br>    不能防止SQL注入<br>2.#{}:insert into emp values(null,?,?,?)<br>PreparedStatement：<br>    可以使用通配符操作SQL，因为在为String赋值时可以自动加单引号，因此不需要注意单引号问题<br>    <strong>可以防止SQL注入</strong><br>使用建议：**建议使用#{}**，在特殊情况下，需要使用${}，例如模糊查询和批量删除</p><h2 id="不同的参数类型，-和-的不同取值方式："><a href="#不同的参数类型，-和-的不同取值方式：" class="headerlink" title="不同的参数类型，${}和#{}的不同取值方式："></a>不同的参数类型，${}和#{}的不同取值方式：</h2><p>1、当传输参数为单个String或基本数据类型和其包装类型<br>#{}：可以以任意的名字获取参数值<br>${}：只能以${value}或${_parameter}获取<br>2、当传输参数为JavaBean时<br>#{}和${}都可以通过属性名直接获取属性值，但是要注意${}的单引号问题<br>3、当传输多个参数时，mybatis会默认将这些参数放在map集合中<br>两种方式：<br>（1）键为0，1，2，3…N-1,以参数为值<br>（2）键为param1,param2,param3…paramN，以参数为值<br>#{}:#{0}、#{1}；#{param1}、#{param2}<br>${}:#{param1}、{param2}，但是要注意${}的单引号问题<br>4、当传输Map参数时<br>#{}和${}都可以通过键的名字直接获取值，但是要注意${}的单引号问题<br>5、命名参数<br>可以通过@Param(“key”)为map集合指定键的名字<br>Emp getEmpByEidAndEnameByParam(@Param(“eid”)String eid, @Param(“ename”)String ename);<br>6、当传输参数为List或Array,mybatis会将List或Array放在map中<br>List以list为键，Array以array为键</p><h2 id="Statement与PreparedStatement"><a href="#Statement与PreparedStatement" class="headerlink" title="Statement与PreparedStatement"></a>Statement与PreparedStatement</h2><pre><code>package com.atguigu.test;import java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.Statement;import com.atguigu.bean.Emp;public class TestJDBC &#123;    public static void main(String[] args) throws Exception &#123;        Class.forName(&quot;&quot;);        Connection conn = DriverManager.getConnection(&quot;&quot;,&quot;&quot;,&quot;&quot;);        //可以使用通配符赋值        PreparedStatement ps = conn.prepareStatement(&quot;insert into emp values(null, ?, ?,?&quot;);        ps.setString(1, &quot;root&quot;);        ps.setString(2, &quot;23&quot;);        ps.setString(3, &quot;男&quot;);        ps.executeUpdate();                Statement statement = conn.createStatement();        Emp emp = new Emp(null, &quot;a&quot;, 1, &quot;b&quot;);        //不可以使用通配符赋值        statement.executeUpdate(&quot;insert into emp values(null, &#39;&quot;+emp.getEname()+&quot;&#39;, &quot;+emp.getAge()+&quot;, &#39;&quot;+emp.getSex()+&quot;&#39;)&quot;);    &#125;&#125;</code></pre><span id="more"></span><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>1.项目目录<br><img src="/2022/04/02/MyBatis%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E5%80%BC%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/1.PNG"><br>2.ParamMapper.java</p><pre><code>package com.atguigu.mapper;import java.util.List;import java.util.Map;import org.apache.ibatis.annotations.Param;import com.atguigu.bean.Emp;public interface ParamMapper &#123;    //添加员工信息    void insertEmp(Emp emp);        //获取名字中包含以name开头且后面多一个任意字符的员工信息    List&lt;Emp&gt; getAllEmp(String name);            //删除名字中包含name的员工信息    void deleteEmp(String name);        //根据eid获取员工信息    Emp getEmpByEid(String eid);        //根据eid和ename获取员工信息    Emp getEmpByEidAndEname(String eid, String ename);        //根据map查询员工信息    Emp getEmpByMap(Map&lt;String, Object&gt; map);        //根据eid和ename获取员工信息    Emp getEmpByEidAndEnameByParam(@Param(&quot;eid&quot;)String eid, @Param(&quot;ename&quot;)String ename);&#125;</code></pre><p>3.ParamMapper.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.atguigu.mapper.ParamMapper&quot;&gt;    &lt;!--        useGeneratedKeys:可以使用自动生成的主键         keyProperty:将自动生成的主键赋值给传递过来的参数的哪一个属性     --&gt;    &lt;insert id=&quot;insertEmp&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;eid&quot;&gt;        &lt;!-- insert into emp values(null, #&#123;ename&#125;, #&#123;age&#125;, #&#123;sex&#125;) --&gt;                insert into emp values(null, &#39;$&#123;ename&#125;&#39;, $&#123;age&#125;, &#39;$&#123;sex&#125;&#39;)    &lt;/insert&gt;        &lt;select id=&quot;getAllEmp&quot; resultType=&quot;Emp&quot;&gt;        &lt;!-- 模糊查询 --&gt;        select eid,ename,age,sex from emp where ename like &#39;$&#123;value&#125;_&#39;    &lt;/select&gt;        &lt;delete id=&quot;deleteEmp&quot;&gt;        &lt;!-- 批量删除 --&gt;        delete from emp where ename like &#39;%$&#123;value&#125;%&#39;    &lt;/delete&gt;        &lt;!-- Emp getEmpByEid(String eid); --&gt;    &lt;select id=&quot;getEmpByEid&quot; resultType=&quot;Emp&quot;&gt;        &lt;!-- select eid,ename,age,sex from emp where eid=#&#123;eid&#125; --&gt;                &lt;!-- 参数与接口中的参数不一致也可以 --&gt;        &lt;!-- select eid,ename,age,sex from emp where eid=#&#123;eids&#125; --&gt;                &lt;!--             报错：            org.apache.ibatis.reflection.ReflectionException:             There is no getter for property named &#39;eid&#39; in             &#39;class java.lang.String&#39;         --&gt;        &lt;!-- select eid,ename,age,sex from emp where eid = $&#123;eid&#125; --&gt;                &lt;!-- 成功 --&gt;        &lt;!-- select eid,ename,age,sex from emp where eid = $&#123;value&#125; --&gt;                select eid,ename,age,sex from emp where eid = $&#123;_parameter&#125;    &lt;/select&gt;        &lt;!-- Emp getEmpByEidAndEname(String eid, String ename); --&gt;    &lt;select id=&quot;getEmpByEidAndEname&quot; resultType=&quot;Emp&quot;&gt;        &lt;!-- select eid,ename,age,sex from emp where eid=#&#123;0&#125; and ename=#&#123;1&#125; --&gt;        &lt;!-- select eid,ename,age,sex from emp where eid=#&#123;param1&#125; and ename=#&#123;param2&#125; --&gt;                select eid,ename,age,sex from emp where eid=$&#123;param1&#125; and ename=&#39;$&#123;param2&#125;&#39;        &lt;!-- select eid,ename,age,sex from emp where eid=$&#123;0&#125; and ename=$&#123;1&#125; --&gt;&lt;!-- 不可行 --&gt;    &lt;/select&gt;        &lt;!-- Emp getEmpByMap(Map&lt;String, Object&gt; map); --&gt;    &lt;select id=&quot;getEmpByMap&quot; resultType=&quot;Emp&quot;&gt;        select eid,ename,age,sex from emp where eid=$&#123;eid&#125; and ename=&#39;$&#123;ename&#125;&#39;    &lt;/select&gt;        &lt;!-- Emp getEmpByEidAndEnameByParam(@Param(&quot;eid&quot;)String eid, @Param(&quot;ename&quot;)String ename); --&gt;    &lt;select id=&quot;getEmpByEidAndEnameByParam&quot; resultType=&quot;Emp&quot;&gt;        select eid,ename,age,sex from emp where eid=#&#123;eid&#125; and ename=#&#123;ename&#125;    &lt;/select&gt;    &lt;/mapper&gt;</code></pre><p>4.TestParam.java</p><pre><code>package com.atguigu.test;import java.io.IOException;import java.io.InputStream;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.Test;import com.atguigu.bean.Emp;import com.atguigu.mapper.ParamMapper;public class TestParam &#123;    @Test    public void testCRUD() throws IOException&#123;        InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);//        SqlSession sqlSession = sqlSessionFactory.openSession();//需要手动处理事务        SqlSession sqlSession = sqlSessionFactory.openSession(true);//自动处理事务        ParamMapper mapper = sqlSession.getMapper(ParamMapper.class);                //获取名字中包含admin的所有员工信息(模糊查询)//        List&lt;Emp&gt; allEmp = mapper.getAllEmp(&quot;admin&quot;);//        System.out.println(allEmp);                //删除名字中包含admin的所有员工信息(批量删除)//        mapper.deleteEmp(&quot;admin&quot;);                //        Emp emp = new Emp(null, &quot;admin&quot;, 23, &quot;男&quot;);//        mapper.insertEmp(emp);//        System.out.println(emp.getEid());        //        Emp emp = mapper.getEmpByEid(&quot;1&quot;);//        System.out.println(emp);        //        Emp emp = mapper.getEmpByEidAndEname(&quot;1&quot;, &quot;张三&quot;);//        System.out.println(emp);        //        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();//        map.put(&quot;eid&quot;, &quot;1&quot;);//        map.put(&quot;ename&quot;, &quot;张三&quot;);//        Emp emp = mapper.getEmpByMap(map);//        System.out.println(emp);                Emp emp = mapper.getEmpByEidAndEnameByParam(&quot;1&quot;, &quot;张三&quot;);        System.out.println(emp);    &#125;&#125; </code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;MyBatis获取参数值的两种方式&quot;&gt;&lt;a href=&quot;#MyBatis获取参数值的两种方式&quot; class=&quot;headerlink&quot; title=&quot;MyBatis获取参数值的两种方式&quot;&gt;&lt;/a&gt;MyBatis获取参数值的两种方式&lt;/h1&gt;&lt;p&gt;1.${}:insert into emp values(null,admin,23,男)&lt;br&gt;Statement:&lt;br&gt;    必须使用字符串拼接的方式操作SQL，一定要注意单引号问题&lt;br&gt;    不能防止SQL注入&lt;br&gt;2.#{}:insert into emp values(null,?,?,?)&lt;br&gt;PreparedStatement：&lt;br&gt;    可以使用通配符操作SQL，因为在为String赋值时可以自动加单引号，因此不需要注意单引号问题&lt;br&gt;    &lt;strong&gt;可以防止SQL注入&lt;/strong&gt;&lt;br&gt;使用建议：**建议使用#{}**，在特殊情况下，需要使用${}，例如模糊查询和批量删除&lt;/p&gt;
&lt;h2 id=&quot;不同的参数类型，-和-的不同取值方式：&quot;&gt;&lt;a href=&quot;#不同的参数类型，-和-的不同取值方式：&quot; class=&quot;headerlink&quot; title=&quot;不同的参数类型，${}和#{}的不同取值方式：&quot;&gt;&lt;/a&gt;不同的参数类型，${}和#{}的不同取值方式：&lt;/h2&gt;&lt;p&gt;1、当传输参数为单个String或基本数据类型和其包装类型&lt;br&gt;#{}：可以以任意的名字获取参数值&lt;br&gt;${}：只能以${value}或${_parameter}获取&lt;br&gt;2、当传输参数为JavaBean时&lt;br&gt;#{}和${}都可以通过属性名直接获取属性值，但是要注意${}的单引号问题&lt;br&gt;3、当传输多个参数时，mybatis会默认将这些参数放在map集合中&lt;br&gt;两种方式：&lt;br&gt;（1）键为0，1，2，3…N-1,以参数为值&lt;br&gt;（2）键为param1,param2,param3…paramN，以参数为值&lt;br&gt;#{}:#{0}、#{1}；#{param1}、#{param2}&lt;br&gt;${}:#{param1}、{param2}，但是要注意${}的单引号问题&lt;br&gt;4、当传输Map参数时&lt;br&gt;#{}和${}都可以通过键的名字直接获取值，但是要注意${}的单引号问题&lt;br&gt;5、命名参数&lt;br&gt;可以通过@Param(“key”)为map集合指定键的名字&lt;br&gt;Emp getEmpByEidAndEnameByParam(@Param(“eid”)String eid, @Param(“ename”)String ename);&lt;br&gt;6、当传输参数为List或Array,mybatis会将List或Array放在map中&lt;br&gt;List以list为键，Array以array为键&lt;/p&gt;
&lt;h2 id=&quot;Statement与PreparedStatement&quot;&gt;&lt;a href=&quot;#Statement与PreparedStatement&quot; class=&quot;headerlink&quot; title=&quot;Statement与PreparedStatement&quot;&gt;&lt;/a&gt;Statement与PreparedStatement&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;package com.atguigu.test;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.Statement;

import com.atguigu.bean.Emp;

public class TestJDBC &amp;#123;
    public static void main(String[] args) throws Exception &amp;#123;
        Class.forName(&amp;quot;&amp;quot;);
        Connection conn = DriverManager.getConnection(&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;);
        //可以使用通配符赋值
        PreparedStatement ps = conn.prepareStatement(&amp;quot;insert into emp values(null, ?, ?,?&amp;quot;);
        ps.setString(1, &amp;quot;root&amp;quot;);
        ps.setString(2, &amp;quot;23&amp;quot;);
        ps.setString(3, &amp;quot;男&amp;quot;);
        ps.executeUpdate();
        
        Statement statement = conn.createStatement();
        Emp emp = new Emp(null, &amp;quot;a&amp;quot;, 1, &amp;quot;b&amp;quot;);
        //不可以使用通配符赋值
        statement.executeUpdate(&amp;quot;insert into emp values(null, &amp;#39;&amp;quot;+emp.getEname()+&amp;quot;&amp;#39;, &amp;quot;+emp.getAge()+&amp;quot;, &amp;#39;&amp;quot;+emp.getSex()+&amp;quot;&amp;#39;)&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyBatis" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/"/>
    
    <category term="MyBatis获取参数值的两种方式" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/MyBatis%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E5%80%BC%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    
    
    <category term="Mybatis" scheme="http://example.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis | 三种查询方式</title>
    <link href="http://example.com/2022/04/02/MyBatis%E4%B8%89%E7%A7%8D%E6%9F%A5%E8%AF%A2%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2022/04/02/MyBatis%E4%B8%89%E7%A7%8D%E6%9F%A5%E8%AF%A2%E6%96%B9%E5%BC%8F/</id>
    <published>2022-04-02T12:55:34.000Z</published>
    <updated>2022-04-02T12:59:18.223Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis三种查询方式"><a href="#MyBatis三种查询方式" class="headerlink" title="MyBatis三种查询方式"></a>MyBatis三种查询方式</h1><p>1.项目目录<br><img src="/2022/04/02/MyBatis%E4%B8%89%E7%A7%8D%E6%9F%A5%E8%AF%A2%E6%96%B9%E5%BC%8F/1.PNG"><br>2.EmpSelectMapper.java</p><pre><code>package com.atguigu.mapper;import java.util.Map;import org.apache.ibatis.annotations.MapKey;import com.atguigu.bean.Emp;public interface EmpSelectMapper &#123;    //根据eid查询一个员工信息    Emp getEmpByEid(String eid);        //获取所有的员工数量    Integer getCount();        //以map集合获取一个员工信息    Map&lt;String, Object&gt; getEmpMapByEid(String eid);        //以map集合获取所有员工信息        @MapKey(&quot;eid&quot;)//设置map的建，因为在查询时传出所有的员工信息，可以把员工信息作为值，但是必须设置键    Map&lt;String, Object&gt; getAllEmpMap();&#125;</code></pre><p>3.EmpSelectMapper.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.atguigu.mapper.EmpSelectMapper&quot;&gt;            &lt;!-- //根据eid查询一个员工信息    Emp getEmpByEid(String eid); --&gt;    &lt;select id=&quot;getEmpByEid&quot; resultType=&quot;Emp&quot;&gt;        select eid,ename,age,sex from emp where eid=#&#123;eid&#125;    &lt;/select&gt;        &lt;!-- //获取所有的员工数量    Integer getCount(); --&gt;    &lt;select id=&quot;getCount&quot; resultType=&quot;Integer&quot;&gt;        select count(eid) from emp    &lt;/select&gt;        &lt;!-- //以map集合获取一个员工信息    Map&lt;String, Object&gt; getEmpMapByEid(String eid); --&gt;    &lt;select id=&quot;getEmpMapByEid&quot; resultType=&quot;java.util.HashMap&quot;&gt;        select eid,ename,age,sex from emp where eid=#&#123;eid&#125;    &lt;/select&gt;        &lt;!-- //以map集合获取所有员工信息    @MapKey(&quot;eid&quot;)//设置map的建，因为在查询时传出所有的员工信息，可以把员工信息作为值，但是必须设置键    Map&lt;String, Object&gt; getAllEmpMap(); --&gt;    &lt;select id=&quot;getAllEmpMap&quot; resultType=&quot;Emp&quot;&gt;    select eid,ename,age,sex from emp    &lt;/select&gt;    &lt;/mapper&gt;</code></pre><p>4.TestSelect.java</p><pre><code>package com.atguigu.test;import java.io.IOException;import java.io.InputStream;import java.util.Map;import javax.annotation.Resource;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.Test;import com.atguigu.bean.Emp;import com.atguigu.mapper.EmpSelectMapper;public class TestSelect &#123;    @Test    public void testSelect() throws IOException&#123;        InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);        SqlSession sqlSession = sqlSessionFactory.openSession(true);        EmpSelectMapper mapper = sqlSession.getMapper(EmpSelectMapper.class);        //若查询出的数据有多条，则绝不能将接口中方法的返回值设置为Javabean//        Emp emp = mapper.getEmpByEid(&quot;3&quot;);//        System.out.println(emp);                //获取员工总记录数//        Integer i = mapper.getCount();//        System.out.println(i);                //以map获取单个emp//        Map&lt;String, Object&gt; map = mapper.getEmpMapByEid(&quot;6&quot;);//        System.out.println(map);                //以map获取所有emp        Map&lt;String, Object&gt; map = mapper.getAllEmpMap();        System.out.println(map);    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MyBatis三种查询方式&quot;&gt;&lt;a href=&quot;#MyBatis三种查询方式&quot; class=&quot;headerlink&quot; title=&quot;MyBatis三种查询方式&quot;&gt;&lt;/a&gt;MyBatis三种查询方式&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyBatis" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/"/>
    
    <category term="MyBatis三种查询方式" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/MyBatis%E4%B8%89%E7%A7%8D%E6%9F%A5%E8%AF%A2%E6%96%B9%E5%BC%8F/"/>
    
    
    <category term="Mybatis" scheme="http://example.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis | 增删改查</title>
    <link href="http://example.com/2022/04/02/MyBatis%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>http://example.com/2022/04/02/MyBatis%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</id>
    <published>2022-04-02T12:43:59.000Z</published>
    <updated>2022-04-02T12:53:47.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis-CRUD"><a href="#MyBatis-CRUD" class="headerlink" title="MyBatis CRUD"></a>MyBatis CRUD</h1><p>按照<a href="https://victory-liao.github.io/2022/04/01/MyBatis%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/">MyBatis搭建过程</a>进行项目搭建，<br>并在mybatis-config.xml中将按如下方式引入映射文件：</p><pre><code>&lt;!-- 引入映射文件 --&gt;&lt;mappers&gt;    &lt;!-- &lt;mapper resource=&quot;EmpMapper.xml&quot; /&gt;    &lt;mapper resource=&quot;DeptMapper.xml&quot;&gt;&lt;/mapper&gt; --&gt;        &lt;!-- 此种写法要求mapper接口和mapper映射文件在同一个包下 --&gt;    &lt;package name=&quot;com.atguigu.mapper&quot;/&gt;    &lt;/mappers&gt;</code></pre><h2 id="CRUD-案例"><a href="#CRUD-案例" class="headerlink" title="CRUD 案例"></a>CRUD 案例</h2><p>1.项目目录<br><img src="/2022/04/02/MyBatis%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/1.PNG"><br>2.Emp.java</p><pre><code>package com.atguigu.bean;public class Emp &#123;    private Integer eid;    private String ename;    private Integer age;    private String sex;    public Integer getEid() &#123;        return eid;    &#125;    public void setEid(Integer eid) &#123;        this.eid = eid;    &#125;    public String getEname() &#123;        return ename;    &#125;    public void setEname(String ename) &#123;        this.ename = ename;    &#125;    public Integer getAge() &#123;        return age;    &#125;    public void setAge(Integer age) &#123;        this.age = age;    &#125;    public String getSex() &#123;        return sex;    &#125;    public void setSex(String sex) &#123;        this.sex = sex;    &#125;    @Override    public String toString() &#123;        return &quot;Emp [eid=&quot; + eid + &quot;, ename=&quot; + ename + &quot;, age=&quot; + age + &quot;, sex=&quot; + sex + &quot;]&quot;;    &#125;    public Emp(Integer eid, String ename, Integer age, String sex) &#123;        super();        this.eid = eid;        this.ename = ename;        this.age = age;        this.sex = sex;    &#125;    public Emp() &#123;        super();        // TODO Auto-generated constructor stub    &#125;            &#125;</code></pre><p>3.EmpMapper.java</p><pre><code>package com.atguigu.mapper;import java.util.List;import com.atguigu.bean.Emp;public interface EmpMapper &#123;    //根据eid查询员工信息    Emp getEmpByEid(String eid);        //获取所有的员工信息    List&lt;Emp&gt; getAllEmp();        //添加员工信息    void addEmp(Emp emp);        //修改员工信息    void updateEmp(Emp emp);        //删除员工信息    Integer deleteEmp(String id);&#125;</code></pre><p>4.EmpMapper.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.atguigu.mapper.EmpMapper&quot;&gt;    &lt;!-- Emp getEmpByEid(String eid); --&gt;    &lt;select id=&quot;getEmpByEid&quot; resultType=&quot;Emp&quot;&gt;        select eid,ename,age,sex from emp where eid=#&#123;eid&#125;    &lt;/select&gt;        &lt;!-- List&lt;Emp&gt; getAllEmp(); --&gt;    &lt;select id=&quot;getAllEmp&quot; resultType=&quot;Emp&quot;&gt;        select eid,ename,age,sex from emp    &lt;/select&gt;        &lt;!-- void addEmp(Emp emp); --&gt;    &lt;insert id=&quot;addEmp&quot;&gt;        insert into emp values(null, #&#123;ename&#125;, #&#123;age&#125;, #&#123;sex&#125;)    &lt;/insert&gt;        &lt;!-- void updateEmp(Emp emp); --&gt;    &lt;update id=&quot;updateEmp&quot; parameterType=&quot;Emp&quot;&gt;        update emp set ename=#&#123;ename&#125;,age=#&#123;age&#125;,sex=#&#123;sex&#125; where eid=#&#123;eid&#125;    &lt;/update&gt;        &lt;!-- void deleteEmp(String id);  --&gt;    &lt;delete id=&quot;deleteEmp&quot;&gt;        delete from emp where eid=#&#123;eid&#125;    &lt;/delete&gt;&lt;/mapper&gt;</code></pre><p>5.TestCRUD.java</p><pre><code>package com.atguigu.test;import java.io.IOException;import java.io.InputStream;import java.util.List;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.Test;import com.atguigu.bean.Emp;import com.atguigu.mapper.EmpMapper;public class TestCRUD &#123;    @Test    public void testCRUD() throws IOException&#123;        InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);//        SqlSession sqlSession = sqlSessionFactory.openSession();//需要手动处理事务        SqlSession sqlSession = sqlSessionFactory.openSession(true);//自动处理事务        EmpMapper empMapper = sqlSession.getMapper(EmpMapper.class);        //测试：根据eid获取员工信息//        Emp emp = empMapper.getEmpByEid(&quot;3&quot;);//        System.out.println(emp);                //测试：获取所有的员工信息//        List&lt;Emp&gt; list = empMapper.getAllEmp();//        System.out.println(list);                //测试：添加员工信息//        empMapper.addEmp(new Emp(null,&quot;admin&quot;,23,&quot;女&quot;));//        sqlSession.commit();//提交事务                //测试：修改员工信息        empMapper.updateEmp(new Emp(2, &quot;张二&quot;, 33, &quot;女&quot;));                //测试：删除员工信息//        Integer rowNum = empMapper.deleteEmp(&quot;5&quot;);//        System.out.println(rowNum);//返回值类型为Integer:返回受影响的行数 Boolean:·    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MyBatis-CRUD&quot;&gt;&lt;a href=&quot;#MyBatis-CRUD&quot; class=&quot;headerlink&quot; title=&quot;MyBatis CRUD&quot;&gt;&lt;/a&gt;MyBatis CRUD&lt;/h1&gt;&lt;p&gt;按照&lt;a href=&quot;https://victory-lia</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyBatis" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/"/>
    
    <category term="CRUD" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/CRUD/"/>
    
    
    <category term="Mybatis" scheme="http://example.com/tags/Mybatis/"/>
    
    <category term="CRUD" scheme="http://example.com/tags/CRUD/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis | MyBatis搭建过程</title>
    <link href="http://example.com/2022/04/01/MyBatis%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    <id>http://example.com/2022/04/01/MyBatis%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/</id>
    <published>2022-04-01T13:16:26.000Z</published>
    <updated>2022-04-02T12:45:02.095Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis搭建过程"><a href="#MyBatis搭建过程" class="headerlink" title="MyBatis搭建过程"></a>MyBatis搭建过程</h1><p>1.导入MyBatis框架的jar包、Mysql驱动包、log4j的jar包</p><pre><code>myBatis-3.4.1.jarmysql-connector-java-5.1.37-bin.jarlog4j.jar</code></pre><p>2.创建MyBatis的核心（全局）配置文件mybatis-config.xml并配置（如何连接数据库）<br>3.创建映射文件XxxMapper.xml并配置（如何操作数据库）<br>4.创建mapper接口，实现两个绑定:<br>4.1接口全限定名要和映射文件的namespace保持一致<br>4.2接口中方法名和SQL语句的id保持一致<br>5.获取MyBatis操作数据库的会话对象SqlSession，通过getMapper()获取接口的动态代理实现类</p><pre><code>InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);SqlSession sqlSession = sqlSessionFactory.openSession();UserMapper mapper = sqlSession.getMapper(UserMapper.class);</code></pre><p>6、测试</p><span id="more"></span><h2 id="搭建过程案例"><a href="#搭建过程案例" class="headerlink" title="搭建过程案例"></a>搭建过程案例</h2><p>1.项目目录<br><img src="/2022/04/01/MyBatis%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/1.PNG"></p><p><strong>user表</strong><br><img src="/2022/04/01/MyBatis%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/2.PNG"></p><p><strong>log4j.xml</strong></p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE log4j:configuration SYSTEM &quot;log4j.dtd&quot;&gt; &lt;log4j:configuration xmlns:log4j=&quot;http://jakarta.apache.org/log4j/&quot;&gt;  &lt;appender name=&quot;STDOUT&quot; class=&quot;org.apache.log4j.ConsoleAppender&quot;&gt;   &lt;param name=&quot;Encoding&quot; value=&quot;UTF-8&quot; /&gt;   &lt;layout class=&quot;org.apache.log4j.PatternLayout&quot;&gt;    &lt;param name=&quot;ConversionPattern&quot; value=&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m  (%F:%L) \n&quot; /&gt;   &lt;/layout&gt; &lt;/appender&gt; &lt;logger name=&quot;java.sql&quot;&gt;   &lt;level value=&quot;debug&quot; /&gt; &lt;/logger&gt; &lt;logger name=&quot;org.apache.ibatis&quot;&gt;   &lt;level value=&quot;info&quot; /&gt; &lt;/logger&gt; &lt;root&gt;   &lt;level value=&quot;debug&quot; /&gt;   &lt;appender-ref ref=&quot;STDOUT&quot; /&gt; &lt;/root&gt;&lt;/log4j:configuration&gt;</code></pre><p>2.导入上图中所示的jar包<br>3.jdbc.properties</p><pre><code>jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/ssmjdbc.username=rootjdbc.password=root</code></pre><p>4.mybatis-config.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;    &lt;!-- &lt;properties&gt;        &lt;property name=&quot;jdbc.driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;    &lt;/properties&gt; --&gt;        &lt;!--         &lt;properties&gt;:设置或引入资源文件        resource:在类路径下访问资源文件        url:在网络路径或磁盘路径下访问资源文件     --&gt;    &lt;properties resource=&quot;jdbc.properties&quot;&gt;&lt;/properties&gt;        &lt;settings&gt;        &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;&gt;&lt;/setting&gt;    &lt;/settings&gt;        &lt;typeAliases&gt;        &lt;!--             为类型设置类型别名            type:Java类型，若只设置type，默认的别名就是类型，且不区分大小写         --&gt;         &lt;!-- &lt;typeAlias type=&quot;com.atguigu.bean.User&quot; alias=&quot;User&quot;/&gt; --&gt;                  &lt;package name=&quot;com.atguigu.bean&quot;/&gt;    &lt;/typeAliases&gt;    &lt;!--        &lt;environments&gt;:设置连接数据库的环境        default:设置默认使用的数据库环境     --&gt;    &lt;environments default=&quot;development&quot;&gt;        &lt;!--             &lt;environment&gt;:设置某个具体的数据库环境            id:数据库环境的唯一标识         --&gt;        &lt;environment id=&quot;development&quot;&gt;            &lt;!--                type=&quot;JDBC|MANAGED&quot;              --&gt;            &lt;transactionManager type=&quot;JDBC&quot; /&gt;            &lt;!--                type=&quot;POOLED|UNPOOLED|JNDI&quot;              --&gt;            &lt;dataSource type=&quot;POOLED&quot;&gt;                &lt;property name=&quot;driver&quot; value=&quot;$&#123;jdbc.driver&#125;&quot; /&gt;                &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt;                &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt;                &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;        &lt;!-- 引入映射文件 --&gt;    &lt;mappers&gt;        &lt;mapper resource=&quot;UserMapper.xml&quot; /&gt;    &lt;/mappers&gt;&lt;/configuration&gt;</code></pre><p>5.User.java</p><pre><code>package com.atguigu.bean;public class User &#123;    private Integer uid;    private String userName;    private String password;    private Integer age;    private String sex;    public Integer getUid() &#123;        return uid;    &#125;    public void setUid(Integer uid) &#123;        this.uid = uid;    &#125;    public String getUserName() &#123;        return userName;    &#125;    public void setUserName(String userName) &#123;        this.userName = userName;    &#125;    public String getPassword() &#123;        return password;    &#125;    public void setPassword(String password) &#123;        this.password = password;    &#125;    public Integer getAge() &#123;        return age;    &#125;    public void setAge(Integer age) &#123;        this.age = age;    &#125;    public String getSex() &#123;        return sex;    &#125;    public void setSex(String sex) &#123;        this.sex = sex;    &#125;    @Override    public String toString() &#123;        return &quot;User [uid=&quot; + uid + &quot;, userName=&quot; + userName + &quot;, password=&quot; + password + &quot;, age=&quot; + age + &quot;, sex=&quot;                + sex + &quot;]&quot;;    &#125;    &#125;</code></pre><p>6.UserMapper.xml(举例：操作数据库中的user表)</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.atguigu.mapper.UserMapper&quot;&gt;    &lt;!--         &lt;select&gt;:定义查询语句         id:设置SQL语句的唯一标识        resultType:结果类型，即实体类的全限定名    --&gt;    &lt;select id=&quot;getUserByUid&quot; resultType=&quot;User&quot;&gt;        &lt;!--         当数据库表中的字段与类中的属性名不一样时，可以在查询时指定别名        select uid,user_name userName,password,age,sex from user where uid = #&#123;id&#125;         --&gt;                &lt;!--         当数据库表中的字段与类中的属性名不一样时，如果不指定别名，需要在核心配置文件mybatis-config.xml中做以下配置：         &lt;settings&gt;            &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;&gt;&lt;/setting&gt;         &lt;/settings&gt;                  注：此配置通常不使用，即在开发时将数据库的字段名与类的属性名保持一致         --&gt;        select uid,user_name,password,age,sex from user where uid = #&#123;id&#125;    &lt;/select&gt;&lt;/mapper&gt;</code></pre><p>7.UserMapper.java(mapper接口)</p><pre><code>package com.atguigu.mapper;import com.atguigu.bean.User;public interface UserMapper &#123;    User getUserByUid(String uid);&#125;</code></pre><p>8.TestMybatis.java(测试类)</p><pre><code>package com.atguigu.mapper;import java.io.IOException;import java.io.InputStream;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.Test;import com.atguigu.bean.User;public class TestMybatis &#123;    @Test    public void test() throws IOException&#123;        InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);        SqlSession sqlSession = sqlSessionFactory.openSession();        //getMapper():会通过动态代理动态生成UserMapper的代理实现类        UserMapper mapper = sqlSession.getMapper(UserMapper.class);        //System.out.println(mapper.getClass().getName());        User user = mapper.getUserByUid(&quot;1&quot;);        System.out.println(user);      &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;MyBatis搭建过程&quot;&gt;&lt;a href=&quot;#MyBatis搭建过程&quot; class=&quot;headerlink&quot; title=&quot;MyBatis搭建过程&quot;&gt;&lt;/a&gt;MyBatis搭建过程&lt;/h1&gt;&lt;p&gt;1.导入MyBatis框架的jar包、Mysql驱动包、log4j的jar包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;myBatis-3.4.1.jar
mysql-connector-java-5.1.37-bin.jar
log4j.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2.创建MyBatis的核心（全局）配置文件mybatis-config.xml并配置（如何连接数据库）&lt;br&gt;3.创建映射文件XxxMapper.xml并配置（如何操作数据库）&lt;br&gt;4.创建mapper接口，实现两个绑定:&lt;br&gt;4.1接口全限定名要和映射文件的namespace保持一致&lt;br&gt;4.2接口中方法名和SQL语句的id保持一致&lt;br&gt;5.获取MyBatis操作数据库的会话对象SqlSession，通过getMapper()获取接口的动态代理实现类&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;InputStream is = Resources.getResourceAsStream(&amp;quot;mybatis-config.xml&amp;quot;);
SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);
SqlSession sqlSession = sqlSessionFactory.openSession();
UserMapper mapper = sqlSession.getMapper(UserMapper.class);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6、测试&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyBatis" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/"/>
    
    <category term="MyBatis搭建过程" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/MyBatis%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="MyBatis" scheme="http://example.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>python | 迭代器</title>
    <link href="http://example.com/2022/03/27/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>http://example.com/2022/03/27/%E8%BF%AD%E4%BB%A3%E5%99%A8/</id>
    <published>2022-03-27T10:02:05.000Z</published>
    <updated>2022-03-27T10:06:05.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><pre><code># 创建一个返回数字的迭代器，初始值为 1，逐步递增 1：class MyNumbers:    def __iter__(self):        self.a = 0        return self    def __next__(self):        self.a = self.a + 1        return self.a# 奇数迭代器class MyOddNumbers:    def __iter__(self):        self.num = 1        return self    def __next__(self):        self.num = self.num + 2        return self.num# 偶数迭代器class MyEvenNumbers:    def __iter__(self):        self.num = 0        return self    def __next__(self):        self.num = self.num + 2        return self.nummyclass = MyNumbers()myiter = iter(myclass)print(next(myiter))print(next(myiter))print(next(myiter))print(next(myiter))print(next(myiter))print(&quot;======================================&quot;)my_odd_numbers = MyOddNumbers()my_odd_numbers_iter = iter(my_odd_numbers)print(next(my_odd_numbers_iter))print(next(my_odd_numbers_iter))print(next(my_odd_numbers_iter))print(next(my_odd_numbers_iter))print(&quot;======================================&quot;)my_even_numbers = MyEvenNumbers()my_even_numbers_iter = iter(my_even_numbers)print(next(my_even_numbers_iter))print(next(my_even_numbers_iter))print(next(my_even_numbers_iter))print(next(my_even_numbers_iter))</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;迭代器&quot;&gt;&lt;a href=&quot;#迭代器&quot; class=&quot;headerlink&quot; title=&quot;迭代器&quot;&gt;&lt;/a&gt;迭代器&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;# 创建一个返回数字的迭代器，初始值为 1，逐步递增 1：
class MyNumbers:
    def __i</summary>
      
    
    
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="迭代器" scheme="http://example.com/tags/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    
    <category term="iterator" scheme="http://example.com/tags/iterator/"/>
    
  </entry>
  
  <entry>
    <title>python | property和property装饰器</title>
    <link href="http://example.com/2022/03/25/property%E5%92%8Cproperty%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>http://example.com/2022/03/25/property%E5%92%8Cproperty%E8%A3%85%E9%A5%B0%E5%99%A8/</id>
    <published>2022-03-25T11:35:27.000Z</published>
    <updated>2022-03-25T11:36:33.956Z</updated>
    
    <content type="html"><![CDATA[<h1 id="property和property装饰器"><a href="#property和property装饰器" class="headerlink" title="property和property装饰器"></a>property和property装饰器</h1><pre><code>class Student:    def __init__(self, name):        self.__name = name    def get_name(self):        return self.__name    def set_name(self, new_name):        self.__name = new_name    name = property(get_name, set_name)s = Student(&quot;张三&quot;)s.name = &quot;李四&quot;print(s.name)class Student:    def __init__(self, name):        self.__name = name    @property    def name(self):        return self.__name    @name.setter    def name(self, new_name):        self.__name = new_names = Student(&quot;张三&quot;)s.name = &quot;李四&quot;print(s.name)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;property和property装饰器&quot;&gt;&lt;a href=&quot;#property和property装饰器&quot; class=&quot;headerlink&quot; title=&quot;property和property装饰器&quot;&gt;&lt;/a&gt;property和property装饰器&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="property" scheme="http://example.com/tags/property/"/>
    
    <category term="property装饰器" scheme="http://example.com/tags/property%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java | java引用</title>
    <link href="http://example.com/2022/03/24/java%E5%BC%95%E7%94%A8/"/>
    <id>http://example.com/2022/03/24/java%E5%BC%95%E7%94%A8/</id>
    <published>2022-03-25T04:32:36.000Z</published>
    <updated>2022-03-25T04:33:44.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="强软弱虚四大引用"><a href="#强软弱虚四大引用" class="headerlink" title="强软弱虚四大引用"></a>强软弱虚四大引用</h1><pre><code>import java.lang.ref.PhantomReference;import java.lang.ref.Reference;import java.lang.ref.ReferenceQueue;import java.lang.ref.SoftReference;import java.lang.ref.WeakReference;import java.util.ArrayList;import java.util.List;import java.util.Scanner;class StudentClass&#123;    @Override    protected void finalize() throws Throwable&#123;        System.out.println(&quot;student对象被回收了&quot;);    &#125;&#125;public class ReferencesTest &#123;    public static void main(String[] args) &#123;                /**         * 强引用         * 只要某个对象有强引用与之关联，这个对象永远不会被回收，即使内存不足，JVM宁愿抛出OOM，也不会去回收。         */        //StudentClass student = new StudentClass();        //student = null;//断开强引用与对象之间的关联        //System.gc();                        /**         * 软引用         * 内存不足时，JVM会回收软引用关联的对象         *          * 比较适合用作缓存，当内存足够，可以正常的拿到缓存，当内存不够，就会先干掉缓存，不至于马上抛出OOM。         *///        SoftReference&lt;byte[]&gt; softReference = new SoftReference&lt;byte[]&gt;(new byte[1024*1024*10]);//        System.out.println(softReference.get());//        System.gc();//        System.out.println(softReference.get());//        byte[] bytes = new byte[1024 * 1024 * 10];//        System.out.println(softReference.get());                /**         * 弱引用         * 不管内存是否足够，只要发生GC，都会被回收         *///        WeakReference&lt;byte[]&gt; weakReference = new WeakReference&lt;byte[]&gt;(new byte[1]);//        System.out.println(weakReference.get());//        System.gc();//        System.out.println(weakReference.get());        //        [B@15db9742//         null                /**         * 虚引用         * 特点一：无法通过虚引用来获取对一个对象的真实引用         * 特点二：虚引用必须与ReferenceQueue一起使用，当GC准备回收一个对象，如果发现它还有虚引用，就会在回收之前，把这个虚引用加入到与之关联的ReferenceQueue中。         *          *          * Unlike soft and weak references, phantom references are not automatically cleared by the garbage collector as they are enqueued.  Anobject that is reachable via phantom references will remain so until allsuch references are cleared or themselves become unreachable.         */        ReferenceQueue&lt;Object&gt; referenceQueue = new ReferenceQueue&lt;&gt;();        List&lt;byte[]&gt; bytes = new ArrayList&lt;&gt;();        PhantomReference&lt;StudentClass&gt; reference = new PhantomReference&lt;StudentClass&gt;(new StudentClass(),referenceQueue);                new Thread(() -&gt; &#123;            for (int i = 0; i &lt; 100;i++ ) &#123;                bytes.add(new byte[1024 * 1024]);            &#125;        &#125;).start();         new Thread(() -&gt; &#123;            while (true) &#123;                Reference poll = referenceQueue.poll();                if (poll != null) &#123;                    System.out.println(&quot;虚引用被回收了：&quot; + poll);                &#125;            &#125;        &#125;).start();        Scanner scanner = new Scanner(System.in);        scanner.hasNext();    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;强软弱虚四大引用&quot;&gt;&lt;a href=&quot;#强软弱虚四大引用&quot; class=&quot;headerlink&quot; title=&quot;强软弱虚四大引用&quot;&gt;&lt;/a&gt;强软弱虚四大引用&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;import java.lang.ref.PhantomReference;</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="基础" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="强软弱虚四大引用" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/%E5%BC%BA%E8%BD%AF%E5%BC%B1%E8%99%9A%E5%9B%9B%E5%A4%A7%E5%BC%95%E7%94%A8/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="引用" scheme="http://example.com/tags/%E5%BC%95%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>绘图 | ConfusionMatrix</title>
    <link href="http://example.com/2022/03/24/ConfusionMatrix/"/>
    <id>http://example.com/2022/03/24/ConfusionMatrix/</id>
    <published>2022-03-25T02:41:00.000Z</published>
    <updated>2022-03-25T02:43:56.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Confusion-Matrix"><a href="#Confusion-Matrix" class="headerlink" title="Confusion Matrix"></a>Confusion Matrix</h1><p><a href="https://www.cnblogs.com/yexionglin/p/11432180.html">混淆矩阵</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Confusion-Matrix&quot;&gt;&lt;a href=&quot;#Confusion-Matrix&quot; class=&quot;headerlink&quot; title=&quot;Confusion Matrix&quot;&gt;&lt;/a&gt;Confusion Matrix&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="绘图" scheme="http://example.com/categories/python/%E7%BB%98%E5%9B%BE/"/>
    
    <category term="Confusion Matrix" scheme="http://example.com/categories/python/%E7%BB%98%E5%9B%BE/Confusion-Matrix/"/>
    
    
    <category term="ConfusionMatrix" scheme="http://example.com/tags/ConfusionMatrix/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 | 抽象工厂模式</title>
    <link href="http://example.com/2022/03/21/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/03/21/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-03-22T04:20:47.000Z</published>
    <updated>2022-03-22T07:01:45.986Z</updated>
    
    <content type="html"><![CDATA[<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><p>抽象工厂模式(Abstract Factory),提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p><p><a href="https://blog.csdn.net/qq_33732195/article/details/110101808">抽象工厂模式(通俗易懂)</a></p><span id="more"></span><p><strong>案例</strong><br>类图：<br><img src="/2022/03/21/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/1.jpg"></p><pre><code>class Department&#123;    private int id;    private String deptName;        public int getId() &#123;        return id;    &#125;        public void setId(int id) &#123;        this.id = id;    &#125;        public String getDeptName() &#123;        return deptName;    &#125;        public void setDeptName(String deptName) &#123;        this.deptName = deptName;    &#125;&#125;interface IDepartment&#123;    void insert(Department deparment);    Department getDepartment(int id);&#125;//用于访问SQL Server中的Departmentclass SqlserverDepartment implements IDepartment&#123;    @Override    public void insert(Department department) &#123;        System.out.println(&quot;在SQL Server中给Department表增加一条记录&quot;);    &#125;    @Override    public Department getDepartment(int id) &#123;        System.out.println(&quot;在SQL Server中根据ID得到Department表一条记录&quot;);        return null;    &#125;&#125;//用于访问Access的Departmentclass AccessDepartment implements IDepartment&#123;    @Override    public void insert(Department deparment) &#123;        System.out.println(&quot;在Access中给Department表增加一条记录&quot;);    &#125;    @Override    public Department getDepartment(int id) &#123;        System.out.println(&quot;在Access中根据ID得到Department表一条记录&quot;);        return null;    &#125;&#125;class User&#123;    private int id;    private String name;        public int getId() &#123;        return id;    &#125;        public void setId(int id) &#123;        this.id = id;    &#125;        public String getName() &#123;        return name;    &#125;        public void setName(String name) &#123;        this.name = name;    &#125;&#125;interface IUser&#123;    public void insert(User user);    public User getUser(int id);&#125;//用于访问SQL Server中的Userclass SqlserverUser implements IUser&#123;    @Override    public void insert(User user) &#123;        System.out.println(&quot;在SQL Server中给User表增加一条记录&quot;);    &#125;    @Override    public User getUser(int id) &#123;        System.out.println(&quot;在SQL Server中根据ID得到User表一条记录&quot;);        return null;    &#125;&#125;//用于访问Access的Userclass AccessUser implements IUser&#123;    @Override    public void insert(User user) &#123;        System.out.println(&quot;在Access中给User表增加一条记录&quot;);    &#125;    @Override    public User getUser(int id) &#123;        System.out.println(&quot;在Access中根据ID得到User表一条记录&quot;);        return null;    &#125;&#125;//定义创建访问User、Department表对象的抽象的工厂接口interface IFactory1&#123;    IUser createUser();    IDepartment createDepartment();&#125;//实现IFactory1接口，实例化SqlserverUser和SqlserverDepartmentclass SqlserverFactory implements IFactory1&#123;    @Override    public IUser createUser() &#123;        return new SqlserverUser();    &#125;    @Override    public IDepartment createDepartment() &#123;        return new SqlserverDepartment();    &#125;&#125;//实现IFactory1接口，实例化AccessUser和AccessDepartmentclass AccessFactory implements IFactory1&#123;    @Override    public IUser createUser() &#123;        return new AccessUser();    &#125;    @Override    public IDepartment createDepartment() &#123;        return new AccessDepartment();    &#125;&#125;public class AbstractFactory &#123;    public static void main(String[] args) &#123;        User user = new User();        Department dept = new Department();                //只需确定实例化哪一个数据库访问对象给factory        IFactory1 factory = new SqlserverFactory();        //IFactory1 factory = new AccessFactory();                IUser iu = factory.createUser();                iu.insert(user);        iu.getUser(1);                IDepartment id = factory.createDepartment();        id.insert(dept);        id.getDepartment(1);            &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;抽象工厂模式&quot;&gt;&lt;a href=&quot;#抽象工厂模式&quot; class=&quot;headerlink&quot; title=&quot;抽象工厂模式&quot;&gt;&lt;/a&gt;抽象工厂模式&lt;/h1&gt;&lt;p&gt;抽象工厂模式(Abstract Factory),提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_33732195/article/details/110101808&quot;&gt;抽象工厂模式(通俗易懂)&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="抽象工厂模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="抽象工厂模式" scheme="http://example.com/tags/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 | 单例模式</title>
    <link href="http://example.com/2022/03/21/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/03/21/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-03-22T02:10:43.000Z</published>
    <updated>2022-03-22T02:14:41.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>单例模式(Singleton)，保证一个类有一个实例，并提供一个访问它的全局访问点。</p><p>“通常我们可以让一个全局变量使得一个对象被访问，但它不能防止你实例化多个对象。一个最好的办法就是，让类自身保存<br>它的唯一实例。这个类可以保证没有其他实例可以被创建，并且它可以提供一个访问该实例的方法。</p><span id="more"></span><pre><code>class Singleton&#123;    private static Singleton instance;        //构造方法让其private，这就堵死了外界利用new创建此类实例的可能    private Singleton()&#123;            &#125;        //此方法是获得本类实例实例的唯一全局访问点    public static Singleton getInstance()&#123;        //若实例不存在，则new一个新的实例，否则返回已有的实例        if(instance == null)&#123;            instance = new Singleton();        &#125;        return instance;    &#125;&#125;public class SingletonTest &#123;    public static void main(String[] args) &#123;        Singleton instance = Singleton.getInstance();        Singleton instance2 = Singleton.getInstance();        //比较两侧实例化后对象的结果是实例相同        System.out.println(instance.equals(instance2));//true    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h1&gt;&lt;p&gt;单例模式(Singleton)，保证一个类有一个实例，并提供一个访问它的全局访问点。&lt;/p&gt;
&lt;p&gt;“通常我们可以让一个全局变量使得一个对象被访问，但它不能防止你实例化多个对象。一个最好的办法就是，让类自身保存&lt;br&gt;它的唯一实例。这个类可以保证没有其他实例可以被创建，并且它可以提供一个访问该实例的方法。&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="单例模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="单例模式" scheme="http://example.com/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 | 工厂方法模式</title>
    <link href="http://example.com/2022/03/21/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/03/21/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-03-21T10:11:59.000Z</published>
    <updated>2022-03-22T01:48:06.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><p><strong>why 工厂方法模式？</strong><br>简单工厂模式违背了开放封闭原则（开放了拓展，也开放了修改），如果需要增加功能就需要在工厂类中修改逻辑判断，于是工厂方法模式应运而生。</p><p>工厂方法模式：定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法是一个类的实例化延迟到子类。</p><span id="more"></span><p><strong>案例</strong><br>类图：<br><img src="/2022/03/21/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/2.jpg"></p><pre><code>class Operation&#123;    private double numberA = 0;    private double numberB = 0;    public double getNumberA() &#123;        return numberA;    &#125;    public void setNumberA(double numberA) &#123;        this.numberA = numberA;    &#125;    public double getNumberB() &#123;        return numberB;    &#125;    public void setNumberB(double numberB) &#123;        this.numberB = numberB;    &#125;    public double getResult() throws Exception&#123;        double result = 0;        return result;    &#125;&#125;class Add extends Operation&#123;    public double getResult()    &#123;        double result = 0;        result = getNumberA() + getNumberB();        return result;    &#125;&#125;class Sub extends Operation&#123;    public double getResult()    &#123;        double result = 0;        result = getNumberA() - getNumberB();        return result;    &#125;&#125;class Mul extends Operation&#123;    public double getResult()    &#123;        double result = 0;        result = getNumberA() * getNumberB();        return result;    &#125;&#125;class Div extends Operation&#123;    public double getResult() throws Exception    &#123;        double result = 0;        if (getNumberB() == 0)&#123;            throw new Exception(&quot;除数不能为0&quot;);        &#125;        result = getNumberA() / getNumberB();        return result;    &#125;&#125;//定义一个用于创建对象的接口interface IFactory&#123;    Operation createOperation();&#125;class AddFactory implements IFactory&#123;    @Override    public Operation createOperation() &#123;        return new Add();    &#125;&#125;class SubFactory implements IFactory&#123;    @Override    public Operation createOperation() &#123;        return new Add();    &#125;&#125;class MulFactory implements IFactory&#123;    @Override    public Operation createOperation() &#123;        return new Add();    &#125;&#125;class DivFactory implements IFactory&#123;    @Override    public Operation createOperation() &#123;        return new Add();    &#125;&#125;public class FactoryMethodPatternTest &#123;    public static void main(String[] args) throws Exception &#123;        IFactory operFactory = new AddFactory();        Operation oper = operFactory.createOperation();        oper.setNumberA(1);        oper.setNumberB(2);        double result = oper.getResult();        System.out.println(result);    &#125;&#125;</code></pre><p>在使用工厂方法模式的情况下，如果我们要增加新的功能，比如说现在要增加一个求余操作，我们只需在上面代码的基础上增加两个类，即可实现。</p><pre><code>class Mod extends Operation&#123;    public double getResult()&#123;        double result = 0;        result = getNumberA() % getNumberB();        return result;    &#125;&#125;class ModFactory implements IFactory&#123;    @Override    public Operation createOperation() &#123;        return new Mod();    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;工厂方法模式&quot;&gt;&lt;a href=&quot;#工厂方法模式&quot; class=&quot;headerlink&quot; title=&quot;工厂方法模式&quot;&gt;&lt;/a&gt;工厂方法模式&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;why 工厂方法模式？&lt;/strong&gt;&lt;br&gt;简单工厂模式违背了开放封闭原则（开放了拓展，也开放了修改），如果需要增加功能就需要在工厂类中修改逻辑判断，于是工厂方法模式应运而生。&lt;/p&gt;
&lt;p&gt;工厂方法模式：定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法是一个类的实例化延迟到子类。&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="工厂方法模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="工厂方法模式" scheme="http://example.com/tags/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 | 简单工厂模式</title>
    <link href="http://example.com/2022/03/21/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/03/21/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-03-21T09:57:40.000Z</published>
    <updated>2022-03-22T01:51:35.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><p>工厂：用一个单独的类来完成创造实例的过程。<br><strong>案例</strong><br>类图：<br><img src="/2022/03/21/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/1.jpg"></p><pre><code>class Operation&#123;    private double numberA = 0;    private double numberB = 0;    public double getNumberA() &#123;        return numberA;    &#125;    public void setNumberA(double numberA) &#123;        this.numberA = numberA;    &#125;    public double getNumberB() &#123;        return numberB;    &#125;    public void setNumberB(double numberB) &#123;        this.numberB = numberB;    &#125;    public double getResult() throws Exception&#123;        double result = 0;        return result;    &#125;&#125;class Add extends Operation&#123;    public double getResult()    &#123;        double result = 0;        result = getNumberA() + getNumberB();        return result;    &#125;&#125;class Sub extends Operation&#123;    public double getResult()    &#123;        double result = 0;        result = getNumberA() - getNumberB();        return result;    &#125;&#125;class Mul extends Operation&#123;    public double getResult()    &#123;        double result = 0;        result = getNumberA() * getNumberB();        return result;    &#125;&#125;class Div extends Operation&#123;    public double getResult() throws Exception    &#123;        double result = 0;        if (getNumberB() == 0)&#123;            throw new Exception(&quot;除数不能为0&quot;);        &#125;        result = getNumberA() / getNumberB();        return result;    &#125;&#125;//工厂：用一个单独的类来做这个创造实例的过程class OperationFactory&#123;    public static Operation createOperate(String operate)&#123;        Operation oper = null;                if(operate.equals(&quot;+&quot;))&#123;            oper = new Add();        &#125;else if(operate.equals(&quot;-&quot;))&#123;            oper = new Sub();        &#125;else if(operate.equals(&quot;*&quot;))&#123;            oper = new Mul();        &#125;else if(operate.equals(&quot;/&quot;))&#123;            oper = new Div();        &#125;        return oper;    &#125;&#125;public class SimpleFactoryTest &#123;    public static void main(String[] args) throws Exception &#123;        Operation oper = OperationFactory.createOperate(&quot;+&quot;);        oper.setNumberA(1);        oper.setNumberB(2);        double result = oper.getResult();        System.out.println(result);    &#125;&#125;</code></pre><p>在使用简单工厂模式的情况下，如果我们要增加新的功能，比如说现在要增加一个求余操作，<br>我们需要增加一个用于求余运算的类，然后在OperationFactory中增加对于求余运算的逻辑判断，这样的做法违背了<br>开放封闭原则，即在开放拓展的同时也开放了修改。</p><pre><code>class Mod extends Operation&#123;    public double getResult()&#123;        double result = 0;        result = getNumberA() % getNumberB();        return result;    &#125;&#125;class OperationFactory&#123;    public static Operation createOperate(String operate)&#123;        ......        else if(operate.equals(&quot;%&quot;))&#123;            oper = new Div();        &#125;        ......    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简单工厂模式&quot;&gt;&lt;a href=&quot;#简单工厂模式&quot; class=&quot;headerlink&quot; title=&quot;简单工厂模式&quot;&gt;&lt;/a&gt;简单工厂模式&lt;/h1&gt;&lt;p&gt;工厂：用一个单独的类来完成创造实例的过程。&lt;br&gt;&lt;strong&gt;案例&lt;/strong&gt;&lt;br&gt;类图：&lt;br</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="简单工厂模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="简单工厂模式" scheme="http://example.com/tags/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 | 代理模式</title>
    <link href="http://example.com/2022/03/21/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/03/21/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-03-21T09:55:37.000Z</published>
    <updated>2022-03-21T09:57:24.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p><a href="https://victory-liao.github.io/2022/03/10/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/">动态代理</a><br><a href="https://victory-liao.github.io/2022/03/10/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/">静态代理</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;代理模式&quot;&gt;&lt;a href=&quot;#代理模式&quot; class=&quot;headerlink&quot; title=&quot;代理模式&quot;&gt;&lt;/a&gt;代理模式&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://victory-liao.github.io/2022/03/10/%E5%8A%A8%E</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="代理模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="代理模式" scheme="http://example.com/tags/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="动态代理" scheme="http://example.com/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
    <category term="静态代理" scheme="http://example.com/tags/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC | spring和springMVC的整合</title>
    <link href="http://example.com/2022/03/18/spring%E5%92%8CspringMVC%E7%9A%84%E6%95%B4%E5%90%88/"/>
    <id>http://example.com/2022/03/18/spring%E5%92%8CspringMVC%E7%9A%84%E6%95%B4%E5%90%88/</id>
    <published>2022-03-18T12:22:49.000Z</published>
    <updated>2022-03-18T13:22:54.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring和springMVC的整合"><a href="#spring和springMVC的整合" class="headerlink" title="spring和springMVC的整合"></a>spring和springMVC的整合</h1><p>1、不整合：需要将spring所管理的内容都交给springMVC管理，这样会造成业务逻辑混乱<br>2、整合：spring的配置文件什么时候加载？怎么加载？<br>解决办法：监听器，可以在ServletContext加载时，通过监听器加载spring的配置文件，创建spring容器<br>spring提供的监听器：ContextLoaderListener<br>3、bean被创建两次的问题：在springMVC中只扫描控制层，在spring中，通过包含或排除对所扫描的包进行指定<br>4、spring和springMVC的关系<br>spring是父容器<br>springMVC是子容器<br>规定：子容器能够调用父容器的bean，而父容器不能够调用访问子容器中的bean</p><span id="more"></span><p>1.项目目录<br><img src="/2022/03/18/spring%E5%92%8CspringMVC%E7%9A%84%E6%95%B4%E5%90%88/1.PNG"><br>2.web.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&gt;  &lt;display-name&gt;SpringMVC04&lt;/display-name&gt;  &lt;welcome-file-list&gt;    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;  &lt;/welcome-file-list&gt;    &lt;filter&gt;    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;    &lt;init-param&gt;      &lt;param-name&gt;encoding&lt;/param-name&gt;      &lt;param-value&gt;UTF-8&lt;/param-value&gt;    &lt;/init-param&gt;  &lt;/filter&gt;  &lt;filter-mapping&gt;    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  &lt;/filter-mapping&gt;    &lt;servlet&gt;    &lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;    &lt;init-param&gt;      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;      &lt;param-value&gt;classpath:springMVC.xml&lt;/param-value&gt;    &lt;/init-param&gt;    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;  &lt;/servlet&gt;  &lt;servlet-mapping&gt;    &lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;    &lt;url-pattern&gt;/&lt;/url-pattern&gt;  &lt;/servlet-mapping&gt;    &lt;!-- 使用自定义监听器模拟spring、springMVC整合 --&gt;  &lt;!-- &lt;listener&gt;    &lt;listener-class&gt;com.atguigu.listener.SpringListener&lt;/listener-class&gt;  &lt;/listener&gt; --&gt;    &lt;!-- 使用spring提供的监听器模整合spring、springMVC --&gt;  &lt;!-- needed for ContextLoaderListener --&gt;    &lt;context-param&gt;        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;        &lt;param-value&gt;classpath:spring.xml&lt;/param-value&gt;    &lt;/context-param&gt;    &lt;!-- Bootstraps the root web application context before servlet initialization --&gt;    &lt;listener&gt;        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;    &lt;/listener&gt;&lt;/web-app&gt;</code></pre><p>3.spring.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;    &lt;!-- &lt;bean id=&quot;user&quot; class=&quot;com.atguigu.bean.User&quot;&gt;&lt;/bean&gt; --&gt;        &lt;context:component-scan base-package=&quot;com.atguigu&quot;&gt;        &lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;    &lt;/context:component-scan&gt;        &lt;bean id=&quot;teacher&quot; class=&quot;com.atguigu.bean.Teacher&quot;&gt;&lt;/bean&gt;&lt;/beans&gt;</code></pre><p>4.springMVC.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;        &lt;context:component-scan base-package=&quot;com.atguigu.controller&quot;&gt;&lt;/context:component-scan&gt;        &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/view/&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;mvc:default-servlet-handler/&gt;    &lt;mvc:annotation-driven /&gt;        &lt;!--         处理文件，将客户端上传的File文件处理为MultipartFile        注意：文件解析器bean中的id必须设置为multipartResolver     --&gt;    &lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;        &lt;!-- 设置文件解析的编码，注意一定要和页面的pageEncoding保持一致 --&gt;        &lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/property&gt;        &lt;!-- 设置最大上传文件大小 --&gt;        &lt;property name=&quot;maxUploadSize&quot; value=&quot;88888888&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;!-- 异常处理 --&gt;    &lt;bean class=&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;&gt;        &lt;property name=&quot;exceptionMappings&quot;&gt;            &lt;props&gt;                &lt;prop key=&quot;java.lang.NullPointerException&quot;&gt;error&lt;/prop&gt;            &lt;/props&gt;        &lt;/property&gt;    &lt;/bean&gt;        &lt;!-- &lt;mvc:interceptors&gt;        默认拦截所有请求        第一种方式        &lt;bean class=&quot;com.atguigu.interceptor.FirstInterceptor&quot;&gt;&lt;/bean&gt;        &lt;bean class=&quot;com.atguigu.interceptor.SecondInterceptor&quot;&gt;&lt;/bean&gt;                    第二种方式            此方式要求拦截器上必须加注解@Component                &lt;ref bean=&quot;firstInterceptor&quot; /&gt;                设置自定义拦截方式        &lt;mvc:interceptor&gt;            &lt;bean&gt;&lt;/bean&gt;            &lt;mvc:mapping path=&quot;&quot;/&gt;            &lt;mvc:exclude-mapping path=&quot;&quot;/&gt;        &lt;/mvc:interceptor&gt;    &lt;/mvc:interceptors&gt; --&gt;&lt;/beans&gt;</code></pre><p>5.index.jsp</p><pre><code>&lt;a href=&quot;testListener&quot;&gt;测试监听器&lt;/a&gt;</code></pre><p>6.User.java</p><pre><code>package com.atguigu.bean;import org.springframework.stereotype.Component;@Componentpublic class User &#123;    private Integer id;    private String username;    public Integer getId() &#123;        return id;    &#125;    public void setId(Integer id) &#123;        this.id = id;    &#125;    public String getUsername() &#123;        return username;    &#125;    public void setUsername(String username) &#123;        this.username = username;    &#125;    public User() &#123;        System.out.println(&quot;User==&gt;构造方法&quot;);    &#125;&#125;</code></pre><p>7.Teacher.java</p><pre><code>package com.atguigu.bean;public class Teacher &#123;    private Integer id;        private String name;    public Integer getId() &#123;        return id;    &#125;    public void setId(Integer id) &#123;        this.id = id;    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name = name;    &#125;    public Teacher() &#123;        System.out.println(&quot;Teacher==&gt;构造方法&quot;);    &#125;    @Override    public String toString() &#123;        return &quot;Teacher [id=&quot; + id + &quot;, name=&quot; + name + &quot;]&quot;;    &#125;&#125;</code></pre><p>8.SpringListener.java（自定义监听器）</p><pre><code>package com.atguigu.listener;import javax.servlet.ServletContext;import javax.servlet.ServletContextEvent;import javax.servlet.ServletContextListener;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;/** * Application Lifecycle Listener implementation class SpringListener * */public class SpringListener implements ServletContextListener &#123;    /**     * Default constructor.      */    public SpringListener() &#123;        // TODO Auto-generated constructor stub    &#125;    /**     * @see ServletContextListener#contextDestroyed(ServletContextEvent)     */    public void contextDestroyed(ServletContextEvent arg0)  &#123;          // TODO Auto-generated method stub    &#125;    /**     * @see ServletContextListener#contextInitialized(ServletContextEvent)     */    public void contextInitialized(ServletContextEvent sce)  &#123;         ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;spring.xml&quot;);        ServletContext servletContext = sce.getServletContext();        servletContext.setAttribute(&quot;ac&quot;, ac);    &#125;&#125;</code></pre><p>9.TestController.java</p><pre><code>package com.atguigu.controller;import javax.servlet.ServletContext;import javax.servlet.http.HttpSession;import org.springframework.context.ApplicationContext;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import com.atguigu.bean.Teacher;@Controllerpublic class TestController &#123;    @RequestMapping(&quot;/testListener&quot;)    public void testListener(HttpSession session)&#123;        //获取spring所管理的teacher对象        ServletContext servletContext = session.getServletContext();        ApplicationContext ac = (ApplicationContext)servletContext.getAttribute(&quot;ac&quot;);        Teacher teacher = ac.getBean(&quot;teacher&quot;, Teacher.class);        System.out.println(teacher);    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;spring和springMVC的整合&quot;&gt;&lt;a href=&quot;#spring和springMVC的整合&quot; class=&quot;headerlink&quot; title=&quot;spring和springMVC的整合&quot;&gt;&lt;/a&gt;spring和springMVC的整合&lt;/h1&gt;&lt;p&gt;1、不整合：需要将spring所管理的内容都交给springMVC管理，这样会造成业务逻辑混乱&lt;br&gt;2、整合：spring的配置文件什么时候加载？怎么加载？&lt;br&gt;解决办法：监听器，可以在ServletContext加载时，通过监听器加载spring的配置文件，创建spring容器&lt;br&gt;spring提供的监听器：ContextLoaderListener&lt;br&gt;3、bean被创建两次的问题：在springMVC中只扫描控制层，在spring中，通过包含或排除对所扫描的包进行指定&lt;br&gt;4、spring和springMVC的关系&lt;br&gt;spring是父容器&lt;br&gt;springMVC是子容器&lt;br&gt;规定：子容器能够调用父容器的bean，而父容器不能够调用访问子容器中的bean&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    <category term="spring和springMVC的整合" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SpringMVC/spring%E5%92%8CspringMVC%E7%9A%84%E6%95%B4%E5%90%88/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
  </entry>
  
</feed>
