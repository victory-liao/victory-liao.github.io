<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>victory的博客</title>
  
  <subtitle>长安一片月，万户捣衣声</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-07-15T12:34:00.345Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>victory-liao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>加速芯片 | 不同加速芯片的特点</title>
    <link href="http://example.com/2024/07/15/%E4%B8%8D%E5%90%8C%E5%8A%A0%E9%80%9F%E8%8A%AF%E7%89%87%E7%9A%84%E7%89%B9%E7%82%B9/"/>
    <id>http://example.com/2024/07/15/%E4%B8%8D%E5%90%8C%E5%8A%A0%E9%80%9F%E8%8A%AF%E7%89%87%E7%9A%84%E7%89%B9%E7%82%B9/</id>
    <published>2024-07-15T12:25:06.000Z</published>
    <updated>2024-07-15T12:34:00.345Z</updated>
    
    <content type="html"><![CDATA[<p>当前，<code>AI服务器</code>的芯片构成为”<code>CPU+加速芯片</code>“，加速芯片主要有<code>CPU</code>、<code>FPGA</code>和<code>ASIC</code>等加速芯片，利用CPU与加速芯片的组合可以满足高吞吐量互联的需求，从而加速模型的训练（training）、推理（Inference）过程。</p><span id="more"></span><p>CPU中有大量的<code>缓存</code>和复杂的<code>逻辑控制单元</code>，擅长<strong>逻辑控制、串行运算</strong>,但CPU的<strong>算力小</strong>，<strong>不擅长复杂算法运算和并行运算</strong>，因此在AI模型的训练过程中需要加速芯片来加速大量数据的计算，加速算法的演进和模型的更新。</p><p>CPU以及加速芯片（GPU、存算一体芯片）的架构：</p><p><img src="/2024/07/15/%E4%B8%8D%E5%90%8C%E5%8A%A0%E9%80%9F%E8%8A%AF%E7%89%87%E7%9A%84%E7%89%B9%E7%82%B9/%E4%B8%8D%E5%90%8C%E8%8A%AF%E7%89%87%E7%9A%84%E6%9E%B6%E6%9E%84.png"></p><p>About 存算一体性芯片：大模型训练的过程是算法学习大数据中规律的过程，训练时间主要花费在<code>数据处理（学习）</code>和<code>数据搬运（在device和host之间搬运数据）</code>上，大模型的训练数据集往往非常庞大，<code>存算一体芯片</code>将计算单元需要的数据“放在自己身边”，减少芯片内外的数据搬运，从而提升了模型的训练效率。</p><p>不同AI加速芯片的优缺点：</p><table><thead><tr><th align="center">芯片类别（chips category）</th><th align="center">优点（advantages）</th><th align="center">缺点（disadvantages）</th><th align="center">产品</th></tr></thead><tbody><tr><td align="center">GPU</td><td align="center">支持大量<strong>并行计算</strong>（浮点运算能力）</td><td align="center"><strong>管理控制能力弱</strong>（CPU具备较强的管理控制能力），功耗高</td><td align="center">Nvidia A100、Nvidia H100等</td></tr><tr><td align="center">FPGA</td><td align="center">可重复编程、低延时、硬件可根据需求调整、<strong>灵活性最高</strong></td><td align="center">开发难度大、<strong>定点运算</strong>、价格贵</td><td align="center">Intel Arria 10等</td></tr><tr><td align="center">ASIC</td><td align="center">成本低、能耗低、性能强、<strong>针对AI设定特定架构</strong></td><td align="center">灵活性不够，价格高于FPGA</td><td align="center">谷歌TPU、华为昇腾910等</td></tr></tbody></table><p>参考链接：<a href="https://mp.weixin.qq.com/s/mkfVi3r9ehu67JpvlPG6_Q">AI 大模型算力芯片产业深度分析 2024</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;当前，&lt;code&gt;AI服务器&lt;/code&gt;的芯片构成为”&lt;code&gt;CPU+加速芯片&lt;/code&gt;“，加速芯片主要有&lt;code&gt;CPU&lt;/code&gt;、&lt;code&gt;FPGA&lt;/code&gt;和&lt;code&gt;ASIC&lt;/code&gt;等加速芯片，利用CPU与加速芯片的组合可以满足高吞吐量互联的需求，从而加速模型的训练（training）、推理（Inference）过程。&lt;/p&gt;</summary>
    
    
    
    <category term="AI" scheme="http://example.com/categories/AI/"/>
    
    <category term="AI基础设施" scheme="http://example.com/categories/AI/AI%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/"/>
    
    <category term="不同加速芯片的特点" scheme="http://example.com/categories/AI/AI%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/%E4%B8%8D%E5%90%8C%E5%8A%A0%E9%80%9F%E8%8A%AF%E7%89%87%E7%9A%84%E7%89%B9%E7%82%B9/"/>
    
    
    <category term="CPU" scheme="http://example.com/tags/CPU/"/>
    
    <category term="GPU" scheme="http://example.com/tags/GPU/"/>
    
    <category term="加速芯片" scheme="http://example.com/tags/%E5%8A%A0%E9%80%9F%E8%8A%AF%E7%89%87/"/>
    
    <category term="存算一体" scheme="http://example.com/tags/%E5%AD%98%E7%AE%97%E4%B8%80%E4%BD%93/"/>
    
    <category term="FPGA" scheme="http://example.com/tags/FPGA/"/>
    
    <category term="ASIC" scheme="http://example.com/tags/ASIC/"/>
    
  </entry>
  
  <entry>
    <title>CPU | 三条国产CPU发展路线</title>
    <link href="http://example.com/2024/07/15/%E4%B8%89%E6%9D%A1%E5%9B%BD%E4%BA%A7CPU%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/"/>
    <id>http://example.com/2024/07/15/%E4%B8%89%E6%9D%A1%E5%9B%BD%E4%BA%A7CPU%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/</id>
    <published>2024-07-15T12:20:28.000Z</published>
    <updated>2024-07-15T12:34:19.827Z</updated>
    
    <content type="html"><![CDATA[<p>三条国产CPU发展路线：</p><p><img src="/2024/07/15/%E4%B8%89%E6%9D%A1%E5%9B%BD%E4%BA%A7CPU%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/%E4%B8%8D%E5%90%8CCPU%E7%9A%84%E6%9E%B6%E6%9E%84.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;三条国产CPU发展路线：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2024/07/15/%E4%B8%89%E6%9D%A1%E5%9B%BD%E4%BA%A7CPU%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/%E4%B8%8D%E5%90%8CC</summary>
      
    
    
    
    <category term="AI" scheme="http://example.com/categories/AI/"/>
    
    <category term="AI基础设施" scheme="http://example.com/categories/AI/AI%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/"/>
    
    <category term="CPU" scheme="http://example.com/categories/AI/AI%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/CPU/"/>
    
    <category term="三条国产CPU发展路线" scheme="http://example.com/categories/AI/AI%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/CPU/%E4%B8%89%E6%9D%A1%E5%9B%BD%E4%BA%A7CPU%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF/"/>
    
    
    <category term="AI" scheme="http://example.com/tags/AI/"/>
    
    <category term="CPU" scheme="http://example.com/tags/CPU/"/>
    
    <category term="国产" scheme="http://example.com/tags/%E5%9B%BD%E4%BA%A7/"/>
    
    <category term="指令集" scheme="http://example.com/tags/%E6%8C%87%E4%BB%A4%E9%9B%86/"/>
    
    <category term="CISC" scheme="http://example.com/tags/CISC/"/>
    
    <category term="RISC" scheme="http://example.com/tags/RISC/"/>
    
    <category term="X86" scheme="http://example.com/tags/X86/"/>
    
    <category term="ARM" scheme="http://example.com/tags/ARM/"/>
    
    <category term="MIPS" scheme="http://example.com/tags/MIPS/"/>
    
    <category term="兆芯" scheme="http://example.com/tags/%E5%85%86%E8%8A%AF/"/>
    
    <category term="海光" scheme="http://example.com/tags/%E6%B5%B7%E5%85%89/"/>
    
    <category term="鲲鹏" scheme="http://example.com/tags/%E9%B2%B2%E9%B9%8F/"/>
    
    <category term="飞腾" scheme="http://example.com/tags/%E9%A3%9E%E8%85%BE/"/>
    
    <category term="龙芯" scheme="http://example.com/tags/%E9%BE%99%E8%8A%AF/"/>
    
    <category term="申威" scheme="http://example.com/tags/%E7%94%B3%E5%A8%81/"/>
    
  </entry>
  
  <entry>
    <title>高速互联 | PCIe与NVLink的对比</title>
    <link href="http://example.com/2024/07/15/PCIe%E4%B8%8ENVLink%E7%9A%84%E5%AF%B9%E6%AF%94/"/>
    <id>http://example.com/2024/07/15/PCIe%E4%B8%8ENVLink%E7%9A%84%E5%AF%B9%E6%AF%94/</id>
    <published>2024-07-15T12:13:52.000Z</published>
    <updated>2024-07-15T12:34:33.070Z</updated>
    
    <content type="html"><![CDATA[<p><code>AI</code>算法极大程度上依赖于<code>大数据</code>（<code>Big Data</code>）,AI 算法的训练对机器的<code>算力</code>以及数据传输能力有着非常高的要求。算力问题的解决是通过提升<code>GPU</code>、<code>NPU</code>的计算能力，并且将多块<code>GPU/NPU</code>连接起来组成一个<code>算力网络</code>（Computing Force Network, <code>CFN</code>）。算力网络中的不同GPU/NPU需要进行互联，GPU/NPU也需要与CPU进行互联，从而共同协作完成大量数据的运算。</p><span id="more"></span><p>目前的<code>GPU互联方式</code>主要有两种：<code>PCIe</code>和<code>NVLink</code>，<strong>在同一个机器内，PCIe负责CPU与GPU之间的通信，NVlink负责GPU与GPU之间的通信。机器间的通信可通过TCP/IP网络协议或RDMA网络协议（InfiniBand、iWARP、RoCE）进行。</strong></p><p><img src="/2024/07/15/PCIe%E4%B8%8ENVLink%E7%9A%84%E5%AF%B9%E6%AF%94/NVLink.png"></p><ol><li><p>PCIe（PCI-Express）</p><ul><li><p>Peripheral Component Interconnect Express的简称，它是一种<code>内部总线</code>，也是一种<code>计算机扩展总线标准</code>，是一种<code>高速串行</code>、<code>高带宽</code>扩展总线，通常用于主板上连接<code>显卡</code>、<code>固态硬盘</code>以及采集卡和<code>无线网卡</code>等外设。</p></li><li><p>PCIe的两种存在形式：<code>M.2接口</code>和<code>PCIe标准插槽</code>。<code>加速卡</code>、<code>高带宽网卡</code>和<code>显卡</code>一般都是安装在<code>插槽</code>中。<code>固态硬盘</code>、<code>笔记本网卡</code>等一般使用<code>M.2接口</code>。</p></li><li><p>PCIe数据传输速率</p><table><thead><tr><th align="center">协议（Protocol）</th><th align="center">传输速率/Gbps</th></tr></thead><tbody><tr><td align="center">PCIe1.0</td><td align="center">2.5</td></tr><tr><td align="center">PCIe2.0</td><td align="center">5.0</td></tr><tr><td align="center">PCIe3.0</td><td align="center"><strong>8.0</strong></td></tr><tr><td align="center">PCIe4.0</td><td align="center">16</td></tr><tr><td align="center">PCIe5.0</td><td align="center">32</td></tr><tr><td align="center">PCIe6.0</td><td align="center">64</td></tr></tbody></table></li></ul></li><li><p>NVLink</p><ul><li><p><code>NVLink</code> 是一种<code>高速互连</code>技术，旨在加快 <code>CPU 与 GPU</code>、<code>GPU 与 GPU</code> 之间的数据传输速度，提高系统性能。</p></li><li><p>NVLink高速互联的两种形式：直连、NVSwitch。</p></li><li><p>NVLink数据传输速率</p><table><thead><tr><th align="center">协议（Protocol）</th><th align="center">发布时间</th><th align="center">显卡</th><th align="center">最大链数</th><th align="center">GPU之间总带宽</th><th align="center">应用架构</th></tr></thead><tbody><tr><td align="center">NVLink 1.0</td><td align="center">2016</td><td align="center">P100</td><td align="center">4</td><td align="center">160GB/s</td><td align="center">Pascal</td></tr><tr><td align="center">NVLink 2.0</td><td align="center">2017</td><td align="center">V100</td><td align="center">6</td><td align="center">300GB/s</td><td align="center">Volta</td></tr><tr><td align="center">NVLink 3.0</td><td align="center">2020</td><td align="center">A100</td><td align="center">12</td><td align="center">600GB/s</td><td align="center">Ampere</td></tr><tr><td align="center">NVLink 4.0</td><td align="center">2022</td><td align="center">H100</td><td align="center">18</td><td align="center">900GB/s</td><td align="center">Hopper</td></tr><tr><td align="center">NVLink 5.0</td><td align="center">2024</td><td align="center">GB200</td><td align="center">18</td><td align="center">1800GB/s</td><td align="center">Blackwell</td></tr></tbody></table></li></ul><p>![](./PCIe与NVLink的对比/NVLink Performance.png)</p></li><li><p>PCIe VS NVLink</p><p>![](./PCIe与NVLink的对比/PCIe VS NVLink.png)</p></li></ol><p>参考链接1：<a href="https://mp.weixin.qq.com/s/leRVFe9_ETxIOUvv3Wjecw">AI服务器内部“高速公路”：PCIe和NVLink技术！</a></p><p>参考链接2：<a href="https://www.nvidia.cn/data-center/nvlink/">NVLink 和 NVSwitch：卓越的 HPC 数据中心平台 | NVIDIA</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;AI&lt;/code&gt;算法极大程度上依赖于&lt;code&gt;大数据&lt;/code&gt;（&lt;code&gt;Big Data&lt;/code&gt;）,AI 算法的训练对机器的&lt;code&gt;算力&lt;/code&gt;以及数据传输能力有着非常高的要求。算力问题的解决是通过提升&lt;code&gt;GPU&lt;/code&gt;、&lt;code&gt;NPU&lt;/code&gt;的计算能力，并且将多块&lt;code&gt;GPU/NPU&lt;/code&gt;连接起来组成一个&lt;code&gt;算力网络&lt;/code&gt;（Computing Force Network, &lt;code&gt;CFN&lt;/code&gt;）。算力网络中的不同GPU/NPU需要进行互联，GPU/NPU也需要与CPU进行互联，从而共同协作完成大量数据的运算。&lt;/p&gt;</summary>
    
    
    
    <category term="AI" scheme="http://example.com/categories/AI/"/>
    
    <category term="AI基础设施" scheme="http://example.com/categories/AI/AI%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/"/>
    
    <category term="GPU" scheme="http://example.com/categories/AI/AI%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/GPU/"/>
    
    <category term="GPU高速互联-PCIe与NVLink的对比" scheme="http://example.com/categories/AI/AI%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/GPU/GPU%E9%AB%98%E9%80%9F%E4%BA%92%E8%81%94-PCIe%E4%B8%8ENVLink%E7%9A%84%E5%AF%B9%E6%AF%94/"/>
    
    
    <category term="AI" scheme="http://example.com/tags/AI/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="CPU" scheme="http://example.com/tags/CPU/"/>
    
    <category term="GPU" scheme="http://example.com/tags/GPU/"/>
    
    <category term="高速互联" scheme="http://example.com/tags/%E9%AB%98%E9%80%9F%E4%BA%92%E8%81%94/"/>
    
    <category term="PCIe" scheme="http://example.com/tags/PCIe/"/>
    
    <category term="NVLink" scheme="http://example.com/tags/NVLink/"/>
    
    <category term="InfiniBand" scheme="http://example.com/tags/InfiniBand/"/>
    
    <category term="iWARP" scheme="http://example.com/tags/iWARP/"/>
    
    <category term="RoCE" scheme="http://example.com/tags/RoCE/"/>
    
    <category term="模型" scheme="http://example.com/tags/%E6%A8%A1%E5%9E%8B/"/>
    
    <category term="CFN" scheme="http://example.com/tags/CFN/"/>
    
    <category term="NPU" scheme="http://example.com/tags/NPU/"/>
    
    <category term="NVSwitch" scheme="http://example.com/tags/NVSwitch/"/>
    
  </entry>
  
  <entry>
    <title>AI Native | 全新软件开发模式</title>
    <link href="http://example.com/2024/07/13/%E5%85%A8%E6%96%B0%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2024/07/13/%E5%85%A8%E6%96%B0%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/</id>
    <published>2024-07-14T02:23:04.000Z</published>
    <updated>2024-07-14T02:26:01.128Z</updated>
    
    <content type="html"><![CDATA[<p><code>AI</code>的迅猛发展，对各行各业都带来了巨大的冲击，同时也带来了新的机会，催生了<code>AI+</code>的产业新模式，例如<code>AI+教育</code>、<code>AI+交通</code>、<code>AI+医疗</code>、<code>AI+农业</code>等，大量的AI+应用/项目已成熟落地。AI+应用的出现、普及改变了传统的<code>软件开发模式</code>，实现了focus on 软件到focus on 模型的转变。</p><span id="more"></span><p>软件是静态的代码数量，应用的价值与生产代码的数量成正比，主要靠人力scale；模型是动态的泛化智慧，应用价值与模型泛化能力成正比，靠数据scale。</p><p>传统软件依赖于提前制定的<code>规则</code>、约束，软件表现的能力依赖于软件产品设计者和开发者的能力。AI Native应用依赖于<code>模型</code>、<code>算法</code>的设计，而算法、模型又依赖于<code>大量的数据</code>，算法从大量的数据中学习并习得相应的能力，应用的能力不在约束于规则之内，像是拥有了某种<code>智能</code>。</p><p>市面上常见的三种主流AI产品类型包括<code>AI-by side</code>、<code>AI-Inside</code>和<code>AI-Based</code>。</p><ul><li><p>AI-by side</p><p>AI（算法、模型）在产品中是一个<code>可选项</code>，产品核心价值不受AI技术影响，即在用户使用产品时使用不使用AI能力都行，此时AI充当辅助的角色。例如，<code>Microsoft</code> 办公软件中的<code>AI copilot</code>功能。</p></li><li><p>AI-inside</p><p>AI在该类产品中是一个核心组件，称为影响产品价值的关键因素。例如市面上的<code>Gamma（AI展示工具）</code>应用，提供预先设计的模板，并为内容生成和设计元素添加人工智能，需要人工操作辅助+人工智能共同完成作品创作。在这个过程中，AI充当的是核心执行者，应用所依赖的算法的能力极大程度上影响着应用的核心价值。</p></li><li><p>AI-based</p><p>在该类产品中，AI是产品成立的基础，<code>没有AI就没有产品</code>，AI起到决定性的作用。例如市面上的<code>Tome（AI展示工具）</code>, 用户只需向应用提供想要生成的PPT的关键描述，应用即可按需完成任务，此过程中AI技术是该产品的基础。</p><p>AI-inside presentation tools Gamma 与AI-bassed presentation tools Tome的比较：<a href="https://slidespeak.co/blog/2024/01/03/tome-vs-gamma-comparing-two-ai-presentation-tools/">Tome vs Gamma：比较两种 AI 演示工具 - SlideSpeak</a></p></li></ul><p><img src="/2024/07/13/%E5%85%A8%E6%96%B0%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/%E4%B8%89%E7%A7%8D%E4%B8%BB%E6%B5%81AI%E4%BA%A7%E5%93%81%E7%B1%BB%E5%9E%8B.png"></p><p>具备了以上认知之后，再去认识<code>AI Native</code>就显得比较容易了，<code>AI Native</code>简单来说就是将AI技术集成到了软件中，并在软件中起到重要的作用，向用户提供智慧能力。这里也给出比较官方的解释：<code>AI Native</code>是一种基于人工智能技术的软件开发模式，它将<code>人工智能算法和模型</code>直接嵌入到应用程序中，使得应用程序具备<code>智能化</code>、<code>自动化</code>和<code>高效化</code>的能力。</p><p>对<code>AI Native</code>作一个简单总结：<code>AI Native</code>作为一种基于人工智能技术的软件开发模式，已经成为当今应用程序开发的重要趋势。未来，随着技术的不断进步和应用场景的不断拓展，<code>AI Native</code>将会在更多的领域得到应用和推广。对个人来说，应该在日常的work、study、life中提高AI Native应用的使用频率，通过AI Native应用的AI能力提高work、study的效率。</p><p><strong>参考文章：</strong></p><ol><li><a href="https://www.woshipm.com/ai/6044022.html">AI-Native 的大产品时代 | 人人都是产品经理 (woshipm.com)</a></li><li><a href="https://developer.baidu.com/article/details/3150909">AI Native工程化：百度App AI互动技术实践-百度开发者中心 (baidu.com)</a></li></ol><p>本文对AI Native的认识比较浅薄，想要深入认识AI Native，可以精读参考文章1，文章作者对于AI Native进行了独到的分析。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;AI&lt;/code&gt;的迅猛发展，对各行各业都带来了巨大的冲击，同时也带来了新的机会，催生了&lt;code&gt;AI+&lt;/code&gt;的产业新模式，例如&lt;code&gt;AI+教育&lt;/code&gt;、&lt;code&gt;AI+交通&lt;/code&gt;、&lt;code&gt;AI+医疗&lt;/code&gt;、&lt;code&gt;AI+农业&lt;/code&gt;等，大量的AI+应用/项目已成熟落地。AI+应用的出现、普及改变了传统的&lt;code&gt;软件开发模式&lt;/code&gt;，实现了focus on 软件到focus on 模型的转变。&lt;/p&gt;</summary>
    
    
    
    <category term="AI" scheme="http://example.com/categories/AI/"/>
    
    <category term="AI Native" scheme="http://example.com/categories/AI/AI-Native/"/>
    
    <category term="一种全新的软件开发模式-AI Native" scheme="http://example.com/categories/AI/AI-Native/%E4%B8%80%E7%A7%8D%E5%85%A8%E6%96%B0%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F-AI-Native/"/>
    
    
    <category term="AI" scheme="http://example.com/tags/AI/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="模型" scheme="http://example.com/tags/%E6%A8%A1%E5%9E%8B/"/>
    
    <category term="软件开发模式" scheme="http://example.com/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="AI Native" scheme="http://example.com/tags/AI-Native/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络 | RDMA以及支持RDMA的网络协议</title>
    <link href="http://example.com/2024/07/13/RDMA%E4%BB%A5%E5%8F%8A%E6%94%AF%E6%8C%81RDMA%E7%9A%84%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    <id>http://example.com/2024/07/13/RDMA%E4%BB%A5%E5%8F%8A%E6%94%AF%E6%8C%81RDMA%E7%9A%84%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/</id>
    <published>2024-07-14T02:15:57.000Z</published>
    <updated>2024-07-14T02:20:11.008Z</updated>
    
    <content type="html"><![CDATA[<p><code>RDMA</code>(Remote Direct Memory Access)技术起初是为了缓解<code>CPU</code>的压力，提高CPU利用率，从而提高系统性能。随着<code>人工智能</code>（<code>AI</code>）、<code>AIGC</code>以及<code>大模型(LLM)</code>的快速发展，AI对于计算设备的<code>算力</code>以及数据处理能力有了更高的要求。</p><span id="more"></span><p>AI模型训练过程中需要反复、多次的在<code>host侧</code>（<code>CPU</code>）和<code>device侧</code>（<code>GPU</code>）之间进行大量数据的搬运，因此提升设备的数据搬运能够加快模型的训练。</p><p>传统的数据交换是通过<code>socket</code>进行通信，<code>socket</code>通信过程中，需要为<code>TCP</code>连接建立<code>socket</code>句柄，每次传输通信都要经过OS，因此数据传输效率不高。RDMA在每个服务器的网卡（Network Interface Card, <code>NIC</code>）中实现。通过绕过操作系统和网络内核，两台服务器之间的网络性能和数据交换会更快。<strong>传统socket通信类似于以红包的形式发压岁钱，需要长辈将钱先放入红包，然后晚辈收到红包之后，再拆开红包，才能获得红包中的钱。RDMA通信类似于如今比较流行的支付宝/微信转账方式，钱直接从一方到另一方，不需要“中转站”。</strong></p><p>![](./RDMA以及支持RDMA的网络协议/socket and rdma.png)</p><p><code>RDMA</code>具有<code>高带宽</code>、<code>低延迟</code>、<code>低CPU消耗</code>三种特点。</p><p>支持<code>RDMA</code>的三种网络协议：</p><ul><li><strong>InfiniBand(IB)</strong></li><li>RoCE(RDMA over converged Ethernet)<ul><li>RoCE v1</li><li><strong>RoCE v2</strong></li></ul></li><li>iWARP(RDMA over TCP/IP)</li></ul><p>![](./RDMA以及支持RDMA的网络协议/different protocol.png)</p><p>参考链接1：<a href="https://mp.weixin.qq.com/s/6_7RiyVr29bdc71dQcwmmw">AI 网络，为什么需要RDMA？</a></p><p>参考链接2：<a href="https://mp.weixin.qq.com/s/SG1iksSWI3N1WHx2ns4C4g">RoCE vs iWARP 十问十答</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;RDMA&lt;/code&gt;(Remote Direct Memory Access)技术起初是为了缓解&lt;code&gt;CPU&lt;/code&gt;的压力，提高CPU利用率，从而提高系统性能。随着&lt;code&gt;人工智能&lt;/code&gt;（&lt;code&gt;AI&lt;/code&gt;）、&lt;code&gt;AIGC&lt;/code&gt;以及&lt;code&gt;大模型(LLM)&lt;/code&gt;的快速发展，AI对于计算设备的&lt;code&gt;算力&lt;/code&gt;以及数据处理能力有了更高的要求。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机基础" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="计算机网络" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="RDMA" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/RDMA/"/>
    
    <category term="RDMA以及支持RDMA的网络协议" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/RDMA/RDMA%E4%BB%A5%E5%8F%8A%E6%94%AF%E6%8C%81RDMA%E7%9A%84%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
    
    <category term="AI" scheme="http://example.com/tags/AI/"/>
    
    <category term="iWARP" scheme="http://example.com/tags/iWARP/"/>
    
    <category term="RoCE" scheme="http://example.com/tags/RoCE/"/>
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="RDMA" scheme="http://example.com/tags/RDMA/"/>
    
    <category term="IB" scheme="http://example.com/tags/IB/"/>
    
  </entry>
  
  <entry>
    <title>Some Ideas | 工作一周年快乐</title>
    <link href="http://example.com/2024/07/11/%E5%B7%A5%E4%BD%9C%E4%B8%80%E5%91%A8%E5%B9%B4%E5%BF%AB%E4%B9%90/"/>
    <id>http://example.com/2024/07/11/%E5%B7%A5%E4%BD%9C%E4%B8%80%E5%91%A8%E5%B9%B4%E5%BF%AB%E4%B9%90/</id>
    <published>2024-07-11T14:49:56.000Z</published>
    <updated>2024-07-11T15:00:02.134Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5890859dee33723eb5c58007ca4ce9ab1a4a6bee7fd88df744a8e44b1a6dfdc3">b780b0a90ab26cc39689a6bfa1e86daa85a23b37a0e6f2f4464173655f6ba4b2eefde371ceceadf186ce1a31c45b5b56644bd7ae01825ea010c2180ebb954e1b6cb449543c6047ee4bc0882e813dca83e197a4583afef7a6d6d9ce81ee5b8d4e20f0a9c86fbd01ca1ba0c318e330e1bbb53de828fb4744f53c754cf41037c1abb6edbbc74bcc6d6603b16a9393fa304ed2d94cba60300d57b8711af1910d9b2f</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">不公开，暂时保密哦！！！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="V Life" scheme="http://example.com/categories/V-Life/"/>
    
    <category term="Some Ideas" scheme="http://example.com/categories/V-Life/Some-Ideas/"/>
    
    <category term="victory, 工作一周年快乐！" scheme="http://example.com/categories/V-Life/Some-Ideas/victory-%E5%B7%A5%E4%BD%9C%E4%B8%80%E5%91%A8%E5%B9%B4%E5%BF%AB%E4%B9%90%EF%BC%81/"/>
    
    
    <category term="工作" scheme="http://example.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Triton | 基于Triton语言实现的算子库FlagGems的环境配置以及测试</title>
    <link href="http://example.com/2024/07/11/%E5%9F%BA%E4%BA%8ETriton%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%AE%97%E5%AD%90%E5%BA%93FlagGems%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%B5%8B%E8%AF%95/"/>
    <id>http://example.com/2024/07/11/%E5%9F%BA%E4%BA%8ETriton%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%AE%97%E5%AD%90%E5%BA%93FlagGems%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%B5%8B%E8%AF%95/</id>
    <published>2024-07-11T13:54:23.000Z</published>
    <updated>2024-07-11T14:12:55.937Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>FlagGems介绍</p><p><code>FlagGems</code>是基于<code>OpenAI</code> <code>Triton</code>编程语言实现的<code>高性能通用算子库</code>，能够为<code>大语言模型</code>提供一系列可应用于<code>PyTorch</code>框架的算子，加速模型的<code>推理</code>与<code>训练</code>。</p><p>FlagGems通过对<code>PyTorch的后端aten算子进行覆盖重写</code>，实现算子库的无缝替换，使用户能够在不修改模型代码的情况下平稳地切换到triton算子库。FlagGems不会影响aten后端的正常使用。</p><p><img src="/2024/07/11/%E5%9F%BA%E4%BA%8ETriton%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%AE%97%E5%AD%90%E5%BA%93FlagGems%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%B5%8B%E8%AF%95/FlagGems%E5%AE%9E%E7%8E%B0.png"></p><p><strong>在pytorch中，核心的张量操作以及底层硬件通信是由ATen库实现的，当ATen需要执行一些可以在GPU上加速的操作时，它会通过CUDA来调用GPU的资源。具体来说，pytorch提供了易于使用的高层API,而ATen则提供张量计算和底层硬件通信。</strong></p></li></ul><span id="more"></span><ul><li><p>FlagGems的技术路线</p><p>FlagGems的技术路线选择的是统一开源算子库</p><p><img src="/2024/07/11/%E5%9F%BA%E4%BA%8ETriton%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%AE%97%E5%AD%90%E5%BA%93FlagGems%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%B5%8B%E8%AF%95/%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF.png"></p></li><li><p>FlagGems Github仓库</p><p><a href="https://github.com/FlagOpen/FlagGems/blob/master/README_cn.md">FlagGems Github仓库</a></p></li><li><p>基础环境</p><ul><li>系统类型：<code>linux</code></li><li>CUDA version: 12.1</li></ul></li><li><p>FlagGems环境准备、搭建，环境搭建脚本如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> create virtual env.</span></span><br><span class="line">conda create -n flag-gems-test python==3.10</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> activate created virtual env.</span></span><br><span class="line">conda activate flag-gems-test</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> install pytorch <span class="keyword">in</span> virtual env.</span></span><br><span class="line">pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> install pytest <span class="keyword">in</span> virtual env <span class="keyword">for</span> running <span class="built_in">test</span> code.</span></span><br><span class="line">pip install pytest</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">clone</span> <span class="string">&quot;FlagGems&quot;</span> from github repository.</span></span><br><span class="line">git clone https://github.com/FlagOpen/FlagGems.git</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> change directory to <span class="string">&quot;FlagGems/“.</span></span></span><br><span class="line">cd FlagGems</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> install &quot;</span>FlagGems<span class="string">&quot;.</span></span></span><br><span class="line">pip install .</span><br></pre></td></tr></table></figure></li><li><p>测试</p><ul><li><p>创建demo.py python文件并输入以下内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入pytorch</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="comment"># 导入FlagGems</span></span><br><span class="line"><span class="keyword">import</span> flag_gems</span><br><span class="line"></span><br><span class="line">M, N, K = <span class="number">1024</span>, <span class="number">1024</span>, <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建M行K列的矩阵A</span></span><br><span class="line">A = torch.randn((M, K), dtype=torch.float16, device=<span class="string">&quot;cuda&quot;</span>)</span><br><span class="line"><span class="comment"># 输出矩阵A</span></span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建K行N列的矩阵B</span></span><br><span class="line">B = torch.randn((K, N), dtype=torch.float16, device=<span class="string">&quot;cuda&quot;</span>)</span><br><span class="line"><span class="comment"># 输出矩阵B</span></span><br><span class="line"><span class="built_in">print</span>(B)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用FlagGems</span></span><br><span class="line"><span class="keyword">with</span> flag_gems.use_gems():</span><br><span class="line">    <span class="comment"># 矩阵乘法</span></span><br><span class="line">    C = torch.mm(A, B)</span><br><span class="line">    <span class="comment"># 输出矩阵乘法结果</span></span><br><span class="line">    <span class="built_in">print</span>(C)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>运行demo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python demo.py</span><br></pre></td></tr></table></figure></li><li><p>运行结果</p><p><img src="/2024/07/11/%E5%9F%BA%E4%BA%8ETriton%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%AE%97%E5%AD%90%E5%BA%93FlagGems%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%B5%8B%E8%AF%95/result-of-mm.png"></p></li><li><p>算子以及模型正确性测试等参考github仓库介绍</p></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;FlagGems介绍&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FlagGems&lt;/code&gt;是基于&lt;code&gt;OpenAI&lt;/code&gt; &lt;code&gt;Triton&lt;/code&gt;编程语言实现的&lt;code&gt;高性能通用算子库&lt;/code&gt;，能够为&lt;code&gt;大语言模型&lt;/code&gt;提供一系列可应用于&lt;code&gt;PyTorch&lt;/code&gt;框架的算子，加速模型的&lt;code&gt;推理&lt;/code&gt;与&lt;code&gt;训练&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;FlagGems通过对&lt;code&gt;PyTorch的后端aten算子进行覆盖重写&lt;/code&gt;，实现算子库的无缝替换，使用户能够在不修改模型代码的情况下平稳地切换到triton算子库。FlagGems不会影响aten后端的正常使用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2024/07/11/%E5%9F%BA%E4%BA%8ETriton%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%AE%97%E5%AD%90%E5%BA%93FlagGems%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%B5%8B%E8%AF%95/FlagGems%E5%AE%9E%E7%8E%B0.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在pytorch中，核心的张量操作以及底层硬件通信是由ATen库实现的，当ATen需要执行一些可以在GPU上加速的操作时，它会通过CUDA来调用GPU的资源。具体来说，pytorch提供了易于使用的高层API,而ATen则提供张量计算和底层硬件通信。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="AI" scheme="http://example.com/categories/AI/"/>
    
    <category term="AI工具链" scheme="http://example.com/categories/AI/AI%E5%B7%A5%E5%85%B7%E9%93%BE/"/>
    
    <category term="Triton" scheme="http://example.com/categories/AI/AI%E5%B7%A5%E5%85%B7%E9%93%BE/Triton/"/>
    
    <category term="基于Triton语言实现的算子库FlagGems的环境配置以及测试" scheme="http://example.com/categories/AI/AI%E5%B7%A5%E5%85%B7%E9%93%BE/Triton/%E5%9F%BA%E4%BA%8ETriton%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%AE%97%E5%AD%90%E5%BA%93FlagGems%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="AI" scheme="http://example.com/tags/AI/"/>
    
    <category term="工具链" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7%E9%93%BE/"/>
    
    <category term="Triton" scheme="http://example.com/tags/Triton/"/>
    
    <category term="算子库" scheme="http://example.com/tags/%E7%AE%97%E5%AD%90%E5%BA%93/"/>
    
    <category term="FlagGems" scheme="http://example.com/tags/FlagGems/"/>
    
  </entry>
  
  <entry>
    <title>Github | github加速器</title>
    <link href="http://example.com/2024/07/11/github%E5%8A%A0%E9%80%9F%E5%99%A8/"/>
    <id>http://example.com/2024/07/11/github%E5%8A%A0%E9%80%9F%E5%99%A8/</id>
    <published>2024-07-11T13:53:57.000Z</published>
    <updated>2024-07-11T14:02:13.557Z</updated>
    
    <content type="html"><![CDATA[<p>每一个programmer都会使用<code>github</code>托管自己编写的代码，或从github下载、学习优秀开源代码。但是，经常会遇到<code>github打开慢</code>或<code>打不开</code>的情况。</p><p>解决办法：下载github加速访问软件<code>fastgithub</code>即可丝滑访问github。</p><span id="more"></span><p><strong>fastgithub安装步骤：</strong></p><ol><li><p>从github仓库下载你的操作系统对应版本的安装包</p><p>下载地址：<a href="https://github.com/WangGithubUser/FastGithub/releases">Releases · WangGithubUser/FastGitHub下载</a></p></li><li><p>解压安装包</p></li><li><p>启动github加速器后（双击FastGithub.UI.exe），访问github网站</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;每一个programmer都会使用&lt;code&gt;github&lt;/code&gt;托管自己编写的代码，或从github下载、学习优秀开源代码。但是，经常会遇到&lt;code&gt;github打开慢&lt;/code&gt;或&lt;code&gt;打不开&lt;/code&gt;的情况。&lt;/p&gt;
&lt;p&gt;解决办法：下载github加速访问软件&lt;code&gt;fastgithub&lt;/code&gt;即可丝滑访问github。&lt;/p&gt;</summary>
    
    
    
    <category term="开发工具" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Github" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Github/"/>
    
    <category term="github加速器" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Github/github%E5%8A%A0%E9%80%9F%E5%99%A8/"/>
    
    
    <category term="github" scheme="http://example.com/tags/github/"/>
    
    <category term="加速器" scheme="http://example.com/tags/%E5%8A%A0%E9%80%9F%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络 | 网关是如何实现通信的</title>
    <link href="http://example.com/2024/07/05/%E7%BD%91%E5%85%B3%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%80%9A%E4%BF%A1%E7%9A%84/"/>
    <id>http://example.com/2024/07/05/%E7%BD%91%E5%85%B3%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%80%9A%E4%BF%A1%E7%9A%84/</id>
    <published>2024-07-06T04:45:42.000Z</published>
    <updated>2024-07-06T04:48:26.337Z</updated>
    
    <content type="html"><![CDATA[<p>在网络的使用过程中，“网关”是一个非常常见的术语，那么网关到底是什么？网关起到什么作用？</p><span id="more"></span><ol><li><p>什么是网关？</p><p>网关（Gateway）是指<code>连接两个或多个网络的设备</code>，它可以是<code>硬件设备</code>，也可以是<code>软件</code>，使用不同的协议进行通信，将来自一个网络的<code>数据格式</code>转换为另一个网络的数据格式。</p></li></ol><p>​    网关可以作为<code>网络的入口</code>，<code>将来自互联网的网络通信转化为局域网内部的通信</code>。</p><ol><li><p>常用的网关</p><ul><li>路由器（Router）</li><li><a href="https://blog.csdn.net/m0_73995538/article/details/131131682">防火墙（FIrewall）</a></li><li>代理服务器（Proxy Server）</li></ul></li><li><p>网关的作用</p><ul><li><p><strong>协议翻译</strong></p><p>网关能够在不同的网络协议之间进行翻译，实现在不同网络之间的通信，使得不同的网络之间可以顺畅地进行数据传输。 </p></li><li><p><strong>路由转发</strong></p><p>网关能够根据路由表的信息对传输的数据包进行路由选择，以保证数据包能够在网络中流动，从而实现网络各个节点之间的互联互通。 </p></li><li><p><strong>安全控制</strong></p><p>网关可以对网络中的数据包进行<code>过滤</code>、<code>代理</code>和<code>加密</code>，增强网络的安全性，保护网络中的重要数据不受到非法访问、攻击或破坏。 </p></li><li><p><strong>流量控制</strong></p><p>网关可以<code>限制网络数据传输的速率</code>，避免网络拥塞或流量过载，提高网络传输的效 。 </p></li><li><p><strong>功能扩展</strong></p><p>网关可以通过软件或硬件的升级来扩展其功能，例如访问控制、负载均衡、防火墙、 VPN等功能，提高网络的可用性和可靠性。</p></li></ul></li><li><p>网关是如何通信的？</p><p>假设你家中的网络如下： 192.168.1.2是一台计算机，使用内部IP地址，希望访问互联网上的<a href="http://www.baidu.com./">www.baidu.com。</a> 家庭路由器（192.168.1.1）是家庭网络的网关，与互联网相连。 当计算机192.168.1.2发出向 <a href="http://www.baidu.com的请求时，通信的过程如下：">www.baidu.com的请求时，通信的过程如下：</a> </p><ul><li>计算机192.168.1.2向家庭路由器 （192.168.1.1）发送数据包，数据包包含源地址 （192.168.1.2 和目标地址 （<a href="http://www.baidu.com),但是家庭路由器无法直接路由到www.baidu.com./">www.baidu.com），但是家庭路由器无法直接路由到www.baidu.com。</a> </li><li>家庭路由器收到数据包后会检查包头信息，并判断数据包是否有效。如果有效，家庭路由器会根据路由表判断应该将数据包发送到哪个网关去寻找 <a href="http://www.baidu.com./">www.baidu.com。</a></li><li>家庭路由器将数据包发送到互联网服务提供商 （ISP）的网关（例如203.208.48.96）。 </li><li>ISP的网关将数据包再次检查，并根据路由表将数据包转发到下一跳，直到能够到达 <a href="http://www.baidu.com所在的服务器./">www.baidu.com所在的服务器。</a> </li><li>数据包到达<a href="http://www.baidu.com所在的服务器后,服务器返回网页数据包,通过isp的网关、/">www.baidu.com所在的服务器后，服务器返回网页数据包，通过ISP的网关、</a> 家庭路由器和计算机192.168.1.2之间的相同路径，返回给发起请求的计算机。 </li><li>返回的数据包也是经过类似的过程返回给计算机192.168.1.2的。 在这个过程中，网关的主要作用是实现<code>地址转换</code>和<code>路由选择</code>，<code>将内部的IP地址转换成公网IP地址</code>，<code>将数据包转发到适当的目标地址</code>。但是请注意，在实际的通信过程中，数据包的传输可能因为路由选择、网络拥塞等多种原因而产生延迟、丢包等问题。</li></ul></li><li><p>常见家庭网络</p><p>![home network](./网关是如何实现通信的/home network.png)</p></li></ol><p>网关连接了外部网络（internet）与内部网络（家庭LAN）。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在网络的使用过程中，“网关”是一个非常常见的术语，那么网关到底是什么？网关起到什么作用？&lt;/p&gt;</summary>
    
    
    
    <category term="计算机基础" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="计算机网络" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="网关是如何实现通信的" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E5%85%B3%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%80%9A%E4%BF%A1%E7%9A%84/"/>
    
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="网关" scheme="http://example.com/tags/%E7%BD%91%E5%85%B3/"/>
    
    <category term="通信" scheme="http://example.com/tags/%E9%80%9A%E4%BF%A1/"/>
    
    <category term="gateway" scheme="http://example.com/tags/gateway/"/>
    
    <category term="流量控制" scheme="http://example.com/tags/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/"/>
    
    <category term="安全控制" scheme="http://example.com/tags/%E5%AE%89%E5%85%A8%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络 | 虚拟机的不同网络模式</title>
    <link href="http://example.com/2024/07/04/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E4%B8%8D%E5%90%8C%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2024/07/04/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E4%B8%8D%E5%90%8C%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F/</id>
    <published>2024-07-04T14:13:23.000Z</published>
    <updated>2024-07-04T16:06:47.115Z</updated>
    
    <content type="html"><![CDATA[<p>使用虚拟机软件创建虚拟机时，虚拟机的<code>网络模式</code>可选择以下模式（以VMWare为例）：</p><ol><li>桥接模式</li><li>NAT模式</li><li>仅主机模式</li></ol><span id="more"></span><p>下面通过实践测试网络连通情况：</p><ol><li>虚拟机与虚拟机的互相访问</li><li>虚拟机与宿主机的互相访问</li><li>虚拟机与互联网的互相访问</li></ol><p>组网情况：</p><ul><li>宿主机<ul><li>虚拟机A</li><li>虚拟机B</li></ul></li></ul><p>实践过程：</p><ol><li>通过VMware虚拟机软件创建虚拟机A、虚拟机B。</li></ol><img src="/2024/07/04/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E4%B8%8D%E5%90%8C%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F/vm.png"><ol start="2"><li>将虚拟机A和虚拟机B的网络模式设置为<code>桥接模式</code>，测试虚拟机、宿主机以及互联网的连通情况。</li></ol><img src="/2024/07/04/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E4%B8%8D%E5%90%8C%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F/bridge.png"><ol start="3"><li>将虚拟机A和虚拟机B的网络模式设置为<code>NAT模式</code>，测试虚拟机、宿主机以及互联网的连通情况。</li></ol><img src="/2024/07/04/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E4%B8%8D%E5%90%8C%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F/NAT.png"><ol start="4"><li>将虚拟机A和虚拟机B的网络模式设置为<code>仅主机模式</code>，测试虚拟机、宿主机以及互联网的连通情况。</li></ol><img src="/2024/07/04/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E4%B8%8D%E5%90%8C%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F/hostonly.png"><p>结论：</p><table><thead><tr><th align="center"></th><th align="center">虚拟机&lt;–&gt;虚拟机</th><th align="center">虚拟机–&gt;宿主机</th><th align="center">宿主机–&gt;虚拟机</th><th align="center">虚拟机–&gt;互联网</th></tr></thead><tbody><tr><td align="center">桥接模式</td><td align="center">是</td><td align="center">否</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">NAT模式</td><td align="center">是</td><td align="center">是</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">仅主机模式</td><td align="center">是</td><td align="center">否</td><td align="center">是</td><td align="center">否</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用虚拟机软件创建虚拟机时，虚拟机的&lt;code&gt;网络模式&lt;/code&gt;可选择以下模式（以VMWare为例）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;桥接模式&lt;/li&gt;
&lt;li&gt;NAT模式&lt;/li&gt;
&lt;li&gt;仅主机模式&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="计算机基础" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="计算机网络" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="虚拟机的不同网络模式" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E4%B8%8D%E5%90%8C%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="虚拟机" scheme="http://example.com/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    <category term="网络模式" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>数据结构 | 数据结构测试</title>
    <link href="http://example.com/2024/06/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%B5%8B%E8%AF%95/"/>
    <id>http://example.com/2024/06/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%B5%8B%E8%AF%95/</id>
    <published>2024-06-26T13:09:39.000Z</published>
    <updated>2024-06-26T13:13:04.735Z</updated>
    
    
    
    
    <category term="计算机基础" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="数据结构" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="数据结构测试" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>操作系统 | 操作系统测试</title>
    <link href="http://example.com/2024/06/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/"/>
    <id>http://example.com/2024/06/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/</id>
    <published>2024-06-26T13:09:28.000Z</published>
    <updated>2024-06-26T13:12:30.037Z</updated>
    
    
    
    
    <category term="计算机基础" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="操作系统" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="操作系统测试" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="操作系统" scheme="http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="OS" scheme="http://example.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理 | 计算机组成原理测试</title>
    <link href="http://example.com/2024/06/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E6%B5%8B%E8%AF%95/"/>
    <id>http://example.com/2024/06/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E6%B5%8B%E8%AF%95/</id>
    <published>2024-06-26T13:09:19.000Z</published>
    <updated>2024-06-26T13:11:51.178Z</updated>
    
    
    
    
    <category term="计算机基础" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="计算机组成原理" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    <category term="计算机组成原理测试" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="计算机组成原理" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Github | github个人主页美化</title>
    <link href="http://example.com/2024/06/26/github%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/"/>
    <id>http://example.com/2024/06/26/github%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/</id>
    <published>2024-06-26T12:03:41.000Z</published>
    <updated>2024-07-11T13:56:05.838Z</updated>
    
    <content type="html"><![CDATA[<p>如何美化github的个人主页？</p><span id="more"></span><p>github个人主页美化主要分为两步：</p><ol><li><p>创建名称与github用户名相同的仓库（public），并在仓库中创建README.md</p></li><li><p>自定义README.md中的内容，以达到美化个人主页的目的</p></li></ol><p>快速美化方式：</p><p>找到已美化的github个人主页，粘贴到自己仓库的README.md中并加以修改</p><p>推荐：<a href="https://github.com/lhccong">lhccong (聪ζ) (github.com)</a>，如有侵权请联系删除。</p><p>参考教程：</p><p><a href="https://blog.csdn.net/weixin_62651706/article/details/137957144">GitHub 个人主页的究极美化攻略：当一个外链战士（万字详述）_github的外链-CSDN博客</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;如何美化github的个人主页？&lt;/p&gt;</summary>
    
    
    
    <category term="开发工具" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Github" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Github/"/>
    
    <category term="github个人主页美化" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Github/github%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/"/>
    
    
    <category term="github" scheme="http://example.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>ssh | ssh登录服务器</title>
    <link href="http://example.com/2024/06/17/ssh%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://example.com/2024/06/17/ssh%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2024-06-17T13:02:52.000Z</published>
    <updated>2024-06-26T12:22:24.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSH-使用密钥登录服务器"><a href="#SSH-使用密钥登录服务器" class="headerlink" title="SSH 使用密钥登录服务器"></a>SSH 使用密钥登录服务器</h2><p>在使用git维护github仓库的代码/文档前，需要先登录github服务器，登录的方式有两种：</p><ul><li><p>密码登录</p><p>该方式需要每次登录时需要手动输入密码，比较麻烦</p></li><li><p>秘钥登录</p><p>通过在github服务器配置客户端的公钥用于用户验证。</p></li></ul><span id="more"></span><p>​    密钥：公钥 + 私钥，用于非对称加密和解密。公钥可以公开分享，用于加密数据或验证签名。私钥必须保密，用于解密数据或创建签名。使用公钥或私钥加密的数据，只能由另一个密钥解密。</p><p>​    github ssh key配置过程：</p><ol><li>点击github主页个人头像</li><li>进入设置（settings）</li><li>点击设置页面左侧的SSH and GPG keys</li><li>点击“New SSH keys”按钮</li><li>将本地公钥复制到“Key”区域中</li><li>点击Add SSH key完成ssh key配置</li></ol><p>参考文章：</p><p><a href="https://cloud.tencent.com/developer/article/1780788">Linux系列 | SSH 如何使用密钥登录服务器-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;SSH-使用密钥登录服务器&quot;&gt;&lt;a href=&quot;#SSH-使用密钥登录服务器&quot; class=&quot;headerlink&quot; title=&quot;SSH 使用密钥登录服务器&quot;&gt;&lt;/a&gt;SSH 使用密钥登录服务器&lt;/h2&gt;&lt;p&gt;在使用git维护github仓库的代码/文档前，需要先登录github服务器，登录的方式有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;密码登录&lt;/p&gt;
&lt;p&gt;该方式需要每次登录时需要手动输入密码，比较麻烦&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;秘钥登录&lt;/p&gt;
&lt;p&gt;通过在github服务器配置客户端的公钥用于用户验证。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="开发工具" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="ssh" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/ssh/"/>
    
    <category term="ssh登录服务器" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/ssh/ssh%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
    <category term="ssh" scheme="http://example.com/tags/ssh/"/>
    
    <category term="远程访问" scheme="http://example.com/tags/%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/"/>
    
    <category term="验证" scheme="http://example.com/tags/%E9%AA%8C%E8%AF%81/"/>
    
    <category term="签名" scheme="http://example.com/tags/%E7%AD%BE%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>wifi设置双频合一</title>
    <link href="http://example.com/2024/06/04/wifi%E8%AE%BE%E7%BD%AE%E5%8F%8C%E9%A2%91%E5%90%88%E4%B8%80/"/>
    <id>http://example.com/2024/06/04/wifi%E8%AE%BE%E7%BD%AE%E5%8F%8C%E9%A2%91%E5%90%88%E4%B8%80/</id>
    <published>2024-06-04T11:39:26.000Z</published>
    <updated>2024-06-17T13:06:27.292Z</updated>
    
    <content type="html"><![CDATA[<p>家里装网线通常需要自备路由器并对路由器进行一些设置，其中重要的一项设置是2.4g和5g双频合一。</p><span id="more"></span><p>需关掉wifi双频合一功能。</p><p><strong>两个频段的优缺点</strong>：2.4g频段覆盖范围广、穿墙能力强但是干扰较大。5g信号穿墙能力弱但干扰较小。</p><p><strong>推荐</strong>：将家里的低数据交换设备（智能门锁、洗衣机、冰箱等）连接2.4g频段信号，将高数据交换设备（手机、笔记本电脑等）连接5g频段信号。</p><p><strong>2.4g信道设置</strong>：选择重叠较小的1/6/11频段。</p><p><strong>功率设置</strong>：选择高功率。高功率的传输距离远、穿墙能力强、有更好的干扰抵抗能力。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;家里装网线通常需要自备路由器并对路由器进行一些设置，其中重要的一项设置是2.4g和5g双频合一。&lt;/p&gt;</summary>
    
    
    
    <category term="电脑使用小技巧" scheme="http://example.com/categories/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    <category term="wifi设置双频合一" scheme="http://example.com/categories/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/wifi%E8%AE%BE%E7%BD%AE%E5%8F%8C%E9%A2%91%E5%90%88%E4%B8%80/"/>
    
    
    <category term="wifi" scheme="http://example.com/tags/wifi/"/>
    
    <category term="双频合一" scheme="http://example.com/tags/%E5%8F%8C%E9%A2%91%E5%90%88%E4%B8%80/"/>
    
  </entry>
  
  <entry>
    <title>Django | django自定义后台表单</title>
    <link href="http://example.com/2024/05/24/django%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%8E%E5%8F%B0%E8%A1%A8%E5%8D%95/"/>
    <id>http://example.com/2024/05/24/django%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%8E%E5%8F%B0%E8%A1%A8%E5%8D%95/</id>
    <published>2024-05-24T13:25:18.000Z</published>
    <updated>2024-05-24T13:28:44.026Z</updated>
    
    <content type="html"><![CDATA[<p>django自定义后台表单的显示方式。</p><span id="more"></span><p>以问题投票为例说明后台表单的自定义：</p><p>1.准备所需的模型类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">&quot;date published&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.question_text</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定制布尔值字段的显式方式</span></span><br><span class="line"><span class="meta">    @admin.display(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="meta">        boolean=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">        ordering=<span class="string">&quot;pub_date&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">        description=<span class="string">&quot;Published recently?&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">    </span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">was_published_recently</span>(<span class="params">self</span>):</span></span><br><span class="line">        now = timezone.now()</span><br><span class="line">        <span class="keyword">return</span> now - datetime.timedelta(days=<span class="number">1</span>) &lt;= self.pub_date &lt;= now</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</span><br><span class="line">    choice_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    votes = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.choice_text</span><br></pre></td></tr></table></figure><p>2.自定义后台表单的显式方式</p><p>django后台访问：<code>ip:port/admin</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin  <span class="comment"># 导入django内置模型管理类</span></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question, Choice  <span class="comment"># 导入自定义模型类</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChoiceInline</span>(<span class="params">admin.TabularInline</span>):</span></span><br><span class="line">    <span class="comment"># admin.TabularInline: 单行显示关联对象</span></span><br><span class="line">    <span class="comment"># admin.StackedInline: 多行显示关联对象</span></span><br><span class="line">    model = Choice</span><br><span class="line">    extra = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义后台Question表单</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    <span class="comment"># 定义属性显式顺序</span></span><br><span class="line">    <span class="comment"># fields = [&quot;pub_date&quot;, &quot;question_text&quot;]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将模型类的属性划分成不同的信息区域，适用于模型类有多个属性且存在同类型属性</span></span><br><span class="line">    fieldsets = [</span><br><span class="line">        (<span class="literal">None</span>, &#123;<span class="string">&quot;fields&quot;</span>: [<span class="string">&quot;question_text&quot;</span>]&#125;),</span><br><span class="line">        (<span class="string">&quot;Date information&quot;</span>, &#123;<span class="string">&quot;fields&quot;</span>: [<span class="string">&quot;pub_date&quot;</span>]&#125;),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改列表页中列表项的显式信息</span></span><br><span class="line">    list_display = [<span class="string">&quot;question_text&quot;</span>, <span class="string">&quot;pub_date&quot;</span>, <span class="string">&quot;was_published_recently&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 增加过滤器</span></span><br><span class="line">    list_filter = [<span class="string">&quot;pub_date&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 增加搜索框</span></span><br><span class="line">    search_fields = [<span class="string">&quot;question_text&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分页，一页展示5个列表项</span></span><br><span class="line">    list_per_page = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加关联的对象</span></span><br><span class="line">    inlines = [ChoiceInline]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义后台Choice表单</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChoiceAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    fieldsets = [</span><br><span class="line">        (<span class="string">&quot;Question Information&quot;</span>, &#123;<span class="string">&quot;fields&quot;</span>: [<span class="string">&quot;question&quot;</span>]&#125;),</span><br><span class="line">        (<span class="string">&quot;Seletions Information&quot;</span>, &#123;<span class="string">&quot;fields&quot;</span>: [<span class="string">&quot;choice_text&quot;</span>]&#125;),</span><br><span class="line">        (<span class="string">&quot;Voting Information&quot;</span>, &#123;<span class="string">&quot;fields&quot;</span>: [<span class="string">&quot;votes&quot;</span>]&#125;),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 增加搜索框</span></span><br><span class="line">    search_fields = [<span class="string">&quot;choice_text&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 增加过滤器</span></span><br><span class="line">    list_filter = [<span class="string">&quot;votes&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 列表项展示内容</span></span><br><span class="line">    list_display = [<span class="string">&quot;choice_text&quot;</span>, <span class="string">&quot;votes&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分页，一页展示5个列表项</span></span><br><span class="line">    list_per_page = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 字段（选项投票数）可编辑</span></span><br><span class="line">    list_editable = [<span class="string">&quot;votes&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将模型类注册到后台中进行管理</span></span><br><span class="line">admin.site.register(Question, QuestionAdmin)</span><br><span class="line">admin.site.register(Choice, ChoiceAdmin)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;django自定义后台表单的显示方式。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="框架" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Django" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/Django/"/>
    
    <category term="django自定义后台表单" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/Django/django%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%8E%E5%8F%B0%E8%A1%A8%E5%8D%95/"/>
    
    
    <category term="Django" scheme="http://example.com/tags/Django/"/>
    
    <category term="后台表单" scheme="http://example.com/tags/%E5%90%8E%E5%8F%B0%E8%A1%A8%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>Django | django模板继承和模板引入</title>
    <link href="http://example.com/2024/05/24/django%E6%A8%A1%E6%9D%BF%E7%BB%A7%E6%89%BF%E5%92%8C%E6%A8%A1%E6%9D%BF%E5%BC%95%E5%85%A5/"/>
    <id>http://example.com/2024/05/24/django%E6%A8%A1%E6%9D%BF%E7%BB%A7%E6%89%BF%E5%92%8C%E6%A8%A1%E6%9D%BF%E5%BC%95%E5%85%A5/</id>
    <published>2024-05-24T13:25:05.000Z</published>
    <updated>2024-05-24T13:29:40.496Z</updated>
    
    <content type="html"><![CDATA[<p>Django提供html网页的继承和引入机制，减少重复代码。</p><span id="more"></span><p>模板继承：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;parent.html&quot; %&#125;</span><br></pre></td></tr></table></figure><p>模板引入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include &#x27;header.html&#x27; %&#125;</span><br></pre></td></tr></table></figure><p>参考文章：<a href="https://blog.csdn.net/likunkun__/article/details/88080559">Django的html继承(extends)和引入(include)用法_django使用includehtml继承另一个html的数据-CSDN博客</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Django提供html网页的继承和引入机制，减少重复代码。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="框架" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Django" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/Django/"/>
    
    <category term="django模板继承和模板引入" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/Django/django%E6%A8%A1%E6%9D%BF%E7%BB%A7%E6%89%BF%E5%92%8C%E6%A8%A1%E6%9D%BF%E5%BC%95%E5%85%A5/"/>
    
    
    <category term="Django" scheme="http://example.com/tags/Django/"/>
    
    <category term="模板继承" scheme="http://example.com/tags/%E6%A8%A1%E6%9D%BF%E7%BB%A7%E6%89%BF/"/>
    
    <category term="模板引入" scheme="http://example.com/tags/%E6%A8%A1%E6%9D%BF%E5%BC%95%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Django | django模板</title>
    <link href="http://example.com/2024/05/24/django%E6%A8%A1%E6%9D%BF/"/>
    <id>http://example.com/2024/05/24/django%E6%A8%A1%E6%9D%BF/</id>
    <published>2024-05-24T13:24:43.000Z</published>
    <updated>2024-05-24T13:27:18.965Z</updated>
    
    <content type="html"><![CDATA[<p>使用django模板语言（DTL）动态生成页面内容。</p><span id="more"></span><p>模板包含<code>变量</code>和<code>标签</code>，变量在模板被执行时被替换为值，标签控制模板的逻辑。</p><p>模板中表示变量：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; variable &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--变量举例--&gt;</span></span><br><span class="line">&#123;&#123;student.name&#125;&#125;</span><br></pre></td></tr></table></figure><p>模板中表示标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--两种形式的标签--&gt;</span></span><br><span class="line">&#123;% tag %&#125; <span class="comment">&lt;!--单标签--&gt;</span></span><br><span class="line">&#123;% tag %&#125;...tag contents...&#123;% endtag %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--常见标签--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--for--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% for athlete in athlete_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; athlete.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--is、elif和else--&gt;</span></span><br><span class="line">&#123;% if athlete_list %&#125;</span><br><span class="line">    Number of athletes: &#123;&#123; athlete_list|length &#125;&#125;</span><br><span class="line">&#123;% elif athlete_in_locker_room_list %&#125;</span><br><span class="line">    Athletes should be out of the locker room soon!</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    No athletes.</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>模板中的过滤器：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; variable|filter &#125;&#125;</span><br><span class="line">&#123;&#123; variable|filter1|filter2&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--过滤器距离--&gt;</span></span><br><span class="line">&#123;&#123; name|lower &#125;&#125;<span class="comment">&lt;!--这将显示 lower 过滤器过滤后的 &#123;&#123; name &#125;&#125; 变量的值，该过滤器将文本转换为小写。使用管道（|）来应用过滤器。--&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用django模板语言（DTL）动态生成页面内容。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="框架" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Django" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/Django/"/>
    
    <category term="django模板" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/Django/django%E6%A8%A1%E6%9D%BF/"/>
    
    
    <category term="Django" scheme="http://example.com/tags/Django/"/>
    
    <category term="DTL" scheme="http://example.com/tags/DTL/"/>
    
    <category term="模板" scheme="http://example.com/tags/%E6%A8%A1%E6%9D%BF/"/>
    
    <category term="变量" scheme="http://example.com/tags/%E5%8F%98%E9%87%8F/"/>
    
    <category term="标签" scheme="http://example.com/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>Django | django模板搜索路径</title>
    <link href="http://example.com/2024/05/24/django%E6%9F%A5%E6%89%BE%E6%A8%A1%E6%9D%BF/"/>
    <id>http://example.com/2024/05/24/django%E6%9F%A5%E6%89%BE%E6%A8%A1%E6%9D%BF/</id>
    <published>2024-05-24T13:24:30.000Z</published>
    <updated>2024-05-24T13:31:10.878Z</updated>
    
    <content type="html"><![CDATA[<p>django搜索模板的路径分析。</p><span id="more"></span><p>django模板搜索路径的配置在[project_name]/[project_name]/settings.py中，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;BACKEND&quot;: &quot;django.template.backends.django.DjangoTemplates&quot;,</span><br><span class="line">        &quot;DIRS&quot;: [BASE_DIR / &quot;templates&quot;],</span><br><span class="line">        &quot;APP_DIRS&quot;: True,</span><br><span class="line">        &quot;OPTIONS&quot;: &#123;</span><br><span class="line">            &quot;context_processors&quot;: [</span><br><span class="line">                &quot;django.template.context_processors.debug&quot;,</span><br><span class="line">                &quot;django.template.context_processors.request&quot;,</span><br><span class="line">                &quot;django.contrib.auth.context_processors.auth&quot;,</span><br><span class="line">                &quot;django.contrib.messages.context_processors.messages&quot;,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>一个重要的点：<code>TEMPLATES</code>中 <code>DIRS</code>默认是空的，Django 是怎么找到默认的后台模板的？答：因为 <code>APP_DIRS</code>被置为 <code>True</code>，Django 会自动在每个应用包内递归查找 <code>templates/</code> 子目录。</p><p>自定义模板目录：若想让django搜索到自定义的模板目录，可将自定义目录添加在<code>DIRS</code>中。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;django搜索模板的路径分析。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="框架" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Django" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/Django/"/>
    
    <category term="django查找模板" scheme="http://example.com/categories/python/%E6%A1%86%E6%9E%B6/Django/django%E6%9F%A5%E6%89%BE%E6%A8%A1%E6%9D%BF/"/>
    
    
    <category term="Django" scheme="http://example.com/tags/Django/"/>
    
    <category term="DTL" scheme="http://example.com/tags/DTL/"/>
    
    <category term="模板" scheme="http://example.com/tags/%E6%A8%A1%E6%9D%BF/"/>
    
    <category term="模板搜索路径" scheme="http://example.com/tags/%E6%A8%A1%E6%9D%BF%E6%90%9C%E7%B4%A2%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
</feed>
