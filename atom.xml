<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Victory&#39;s Blog</title>
  
  <subtitle>非淡泊无以明志，非宁静无以致远</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-07T02:28:05.158Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>victory-liao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis | Jedis实现手机号验证码</title>
    <link href="http://example.com/2022/05/06/Jedis%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E5%8F%B7%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>http://example.com/2022/05/06/Jedis%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E5%8F%B7%E9%AA%8C%E8%AF%81%E7%A0%81/</id>
    <published>2022-05-07T02:19:55.000Z</published>
    <updated>2022-05-07T02:28:05.158Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jedis实现手机号验证码"><a href="#Jedis实现手机号验证码" class="headerlink" title="Jedis实现手机号验证码"></a>Jedis实现手机号验证码</h1><p><img src="/2022/05/06/Jedis%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E5%8F%B7%E9%AA%8C%E8%AF%81%E7%A0%81/1.PNG"><br><strong>要求</strong><br>1.输入手机号，点击发送后随机生成6位数字码，2分钟有效<br>2.输入验证码，点击验证，返回成功或失败<br>3.每个手机号每天只能输入3次</p><span id="more"></span><p>1.index.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=ISO-8859-1&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;script  src=&quot;/Verify_code/static/jquery/jquery-3.1.0.js&quot; &gt;&lt;/script&gt;&lt;link href=&quot;/Verify_code/static/bs/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; /&gt;&lt;script  src=&quot;/Verify_code/static/bs/js/bootstrap.min.js&quot;   &gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;   &lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;row&quot;&gt;            &lt;div id=&quot;alertdiv&quot; class=&quot;col-md-12&quot;&gt;                  &lt;form class=&quot;navbar-form navbar-left&quot; role=&quot;search&quot; id=&quot;codeform&quot;&gt;                  &lt;div class=&quot;form-group&quot;&gt;                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;填写手机号&quot; name=&quot;phone_no&quot;&gt;                    &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; id=&quot;sendCode&quot;&gt;发送验证码&lt;/button&gt;&lt;br&gt;                    &lt;font id=&quot;countdown&quot; color=&quot;red&quot; &gt;&lt;/font&gt;                    &lt;br&gt;                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;填写验证码&quot; name=&quot;verify_code&quot;&gt;                    &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; id=&quot;verifyCode&quot;&gt;确定&lt;/button&gt;                    &lt;font id=&quot;result&quot; color=&quot;green&quot; &gt;&lt;/font&gt;&lt;font id=&quot;error&quot; color=&quot;red&quot; &gt;&lt;/font&gt;                    &lt;/div&gt;                    &lt;/form&gt;    &lt;/div&gt;   &lt;/div&gt;  &lt;/div&gt;&lt;/body&gt;&lt;script type=&quot;text/javascript&quot;&gt; var t=120;//设定倒计时的时间 var interval;function refer()&#123;      $(&quot;#countdown&quot;).text(&quot;请于&quot;+t+&quot;秒内填写验证码 &quot;); // 显示倒计时     t--; // 计数器递减     if(t&lt;=0)&#123;        clearInterval(interval);        $(&quot;#countdown&quot;).text(&quot;验证码已失效，请重新发送！ &quot;);    &#125;&#125; $(function()&#123;    $(&quot;#sendCode&quot;).click( function () &#123;                      $.post(&quot;/Verify_code/CodeSenderServlet&quot;,$(&quot;#codeform&quot;).serialize(),function(data)&#123;             if(data==&quot;true&quot;)&#123;                 t=120;                 clearInterval(interval);                 interval= setInterval(&quot;refer()&quot;,1000);//启动1秒定时               &#125;else if (data==&quot;limit&quot;)&#123;                clearInterval(interval);                $(&quot;#countdown&quot;).text(&quot;单日发送超过次数！ &quot;)             &#125;          &#125;);       &#125;);        $(&quot;#verifyCode&quot;).click( function () &#123;                   $.post(&quot;/Verify_code/CodeVerifyServlet&quot;,$(&quot;#codeform&quot;).serialize(),function(data)&#123;             if(data==&quot;true&quot;)&#123;                 $(&quot;#result&quot;).attr(&quot;color&quot;,&quot;green&quot;);                 $(&quot;#result&quot;).text(&quot;验证成功&quot;);                 clearInterval(interval);                 $(&quot;#countdown&quot;).text(&quot;&quot;);             &#125;else&#123;                 $(&quot;#result&quot;).attr(&quot;color&quot;,&quot;red&quot;);                 $(&quot;#result&quot;).text(&quot;验证失败&quot;);             &#125;          &#125;);       &#125;);        &#125;);&lt;/script&gt;&lt;/html&gt;</code></pre><p>2.CodeSenderServlet.java(发送验证码)</p><pre><code>@WebServlet(&quot;/CodeSenderServlet&quot;)public class CodeSenderServlet extends HttpServlet &#123;    private static final long serialVersionUID = 1L;           /**     * @see HttpServlet#HttpServlet()     */    public CodeSenderServlet() &#123;        super();        // TODO Auto-generated constructor stub    &#125;    /**     * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)     */    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;                //获取手机号        String phone_no = request.getParameter(&quot;phone_no&quot;);        //获取验证码        String code = getCode(6);        //拼接key        String codeKey = &quot;Verify_code:&quot; + phone_no + &quot;:code&quot;;//Verify_code:12345:code        String countKey = &quot;Verify_code:&quot; + phone_no + &quot;:count&quot;;                Jedis jedis = new Jedis(&quot;192.168.44.132&quot;, 6379);        //判断发送验证码的次数        String count = jedis.get(countKey);        if(count == null) &#123;            //代表第一次            jedis.setex(countKey, 24*60*60, &quot;1&quot;);        &#125;else if(Integer.parseInt(count) &lt;= 2) &#123;            jedis.incr(countKey);        &#125;else if(Integer.parseInt(count) &gt; 2) &#123;            response.getWriter().print(&quot;limit&quot;);            jedis.close();            return ;        &#125;                //向redis中进行存储，以手机号为键，以验证码为值        jedis.setex(codeKey, 120, code);        jedis.close();        response.getWriter().print(true);            &#125;            private String getCode(int length) &#123;        String code = &quot;&quot;;        Random random = new Random();        for(int i = 0; i &lt; length; i++) &#123;            int rand = random.nextInt(10);            code += rand;        &#125;        return code;    &#125;&#125;</code></pre><p>3.验证</p><pre><code>@WebServlet(&quot;/CodeVerifyServlet&quot;)public class CodeVerifyServlet extends HttpServlet &#123;    private static final long serialVersionUID = 1L;           /**     * @see HttpServlet#HttpServlet()     */    public CodeVerifyServlet() &#123;        super();        // TODO Auto-generated constructor stub    &#125;    /**     * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)     */    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;            //获取验证码和手机号        String phone_no = request.getParameter(&quot;phone_no&quot;);        String verify_code = request.getParameter(&quot;verify_code&quot;);        //拼接key        String codeKey = &quot;Verify_code:&quot; + phone_no + &quot;:code&quot;;        //从redis中获取手机号所对应的验证码        Jedis jedis = new Jedis(&quot;192.168.44.132&quot;, 6379);        String code = jedis.get(codeKey);        if(code.equals(verify_code)) &#123;            response.getWriter().print(true);        &#125;        jedis.close();            &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Jedis实现手机号验证码&quot;&gt;&lt;a href=&quot;#Jedis实现手机号验证码&quot; class=&quot;headerlink&quot; title=&quot;Jedis实现手机号验证码&quot;&gt;&lt;/a&gt;Jedis实现手机号验证码&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2022/05/06/Jedis%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E5%8F%B7%E9%AA%8C%E8%AF%81%E7%A0%81/1.PNG&quot;&gt;&lt;br&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;br&gt;1.输入手机号，点击发送后随机生成6位数字码，2分钟有效&lt;br&gt;2.输入验证码，点击验证，返回成功或失败&lt;br&gt;3.每个手机号每天只能输入3次&lt;/p&gt;</summary>
    
    
    
    <category term="Redis" scheme="http://example.com/categories/Redis/"/>
    
    <category term="Jedis实现手机号验证码" scheme="http://example.com/categories/Redis/Jedis%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E5%8F%B7%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
    <category term="Jedis" scheme="http://example.com/tags/Jedis/"/>
    
    <category term="手机号验证码" scheme="http://example.com/tags/%E6%89%8B%E6%9C%BA%E5%8F%B7%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Java | 创建线程的三种方式</title>
    <link href="http://example.com/2022/04/24/%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2022/04/24/%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2022-04-25T01:05:43.000Z</published>
    <updated>2022-04-25T01:08:26.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建线程的三种方式"><a href="#创建线程的三种方式" class="headerlink" title="创建线程的三种方式"></a>创建线程的三种方式</h1><p>创建线程有三种方式，分别是继承Thread类、实现Runnable接口、实现Callable接口。</p><p>1.通过继承Thread类来创建并启动线程的步骤如下：<br>1.1定义Thread类的子类，并重写该类的run()方法，该run()方法将作为线程执行体。<br>1.2创建Thread子类的实例，即创建了线程对象。<br>1.3调用线程对象的start()方法来启动该线程。<br>2.通过实现Runnable接口来创建并启动线程的步骤如下：<br>2.1定义Runnable接口的实现类，并实现该接口的run()方法，该run()方法将作为线程执行体。<br>2.2创建Runnable实现类的实例，并将其作为Thread的target来创建Thread对象，Thread对象为线程对象。<br>2.3调用线程对象的start()方法来启动该线程。<br>3.通过实现Callable接口来创建并启动线程的步骤如下：<br>3.1创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，且该call()方法有返回值。然后再创建Callable实现类的实例。<br>3.2使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值。<br>3.3使用FutureTask对象作为Thread对象的target创建并启动新线程。<br>3.4调用FutureTask对象的get()方法来获得子线程执行结束后的返回值。</p><span id="more"></span><p><strong>代码</strong></p><pre><code>import java.util.concurrent.Callable;import java.util.concurrent.ExecutionException;import java.util.concurrent.FutureTask;class MyThread extends Thread&#123;    @Override    public void run()&#123;        System.out.println(Thread.currentThread().getName());    &#125;&#125;class MyThread1 implements Runnable&#123;    @Override    public void run() &#123;        System.out.println(Thread.currentThread().getName());    &#125;&#125;class MyThread2 implements Callable&#123;    @Override    public Object call() throws Exception &#123;        return &quot;success&quot;;    &#125;&#125;public class ThreadTest &#123;    public static void main(String[] args) throws ExecutionException &#123;        for(int i=0;i&lt;10;i++)&#123;            //继承Thread类            //new MyThread().start();                        //实现Runnable接口            //new Thread(new MyThread1()).start();                        //实现Callable接口            FutureTask&lt;String&gt; task = new FutureTask&lt;&gt;(new MyThread2());            new Thread(task).start();                    try &#123;                System.out.println(task.get());            &#125; catch (InterruptedException e) &#123;                e.printStackTrace();            &#125;        &#125;        &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;创建线程的三种方式&quot;&gt;&lt;a href=&quot;#创建线程的三种方式&quot; class=&quot;headerlink&quot; title=&quot;创建线程的三种方式&quot;&gt;&lt;/a&gt;创建线程的三种方式&lt;/h1&gt;&lt;p&gt;创建线程有三种方式，分别是继承Thread类、实现Runnable接口、实现Callable接口。&lt;/p&gt;
&lt;p&gt;1.通过继承Thread类来创建并启动线程的步骤如下：&lt;br&gt;1.1定义Thread类的子类，并重写该类的run()方法，该run()方法将作为线程执行体。&lt;br&gt;1.2创建Thread子类的实例，即创建了线程对象。&lt;br&gt;1.3调用线程对象的start()方法来启动该线程。&lt;br&gt;2.通过实现Runnable接口来创建并启动线程的步骤如下：&lt;br&gt;2.1定义Runnable接口的实现类，并实现该接口的run()方法，该run()方法将作为线程执行体。&lt;br&gt;2.2创建Runnable实现类的实例，并将其作为Thread的target来创建Thread对象，Thread对象为线程对象。&lt;br&gt;2.3调用线程对象的start()方法来启动该线程。&lt;br&gt;3.通过实现Callable接口来创建并启动线程的步骤如下：&lt;br&gt;3.1创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，且该call()方法有返回值。然后再创建Callable实现类的实例。&lt;br&gt;3.2使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值。&lt;br&gt;3.3使用FutureTask对象作为Thread对象的target创建并启动新线程。&lt;br&gt;3.4调用FutureTask对象的get()方法来获得子线程执行结束后的返回值。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="基础" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="创建线程的三种方式" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="多线程" scheme="http://example.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="线程" scheme="http://example.com/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java | 创建线程池的7种方式</title>
    <link href="http://example.com/2022/04/24/%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%847%E4%B8%AD%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2022/04/24/%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%847%E4%B8%AD%E6%96%B9%E5%BC%8F/</id>
    <published>2022-04-24T09:57:42.000Z</published>
    <updated>2022-04-24T09:58:52.626Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建线程池的7种方式"><a href="#创建线程池的7种方式" class="headerlink" title="创建线程池的7种方式"></a>创建线程池的7种方式</h1><pre><code>import java.util.Date;import java.util.concurrent.ArrayBlockingQueue;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.Future;import java.util.concurrent.ScheduledExecutorService;import java.util.concurrent.ThreadPoolExecutor;import java.util.concurrent.TimeUnit;public class ThreadPoolCreationTest &#123;    public static void fixedThreadPool()&#123;//        ExecutorService threadPool = Executors.newFixedThreadPool(2);//        //        Runnable runnable = new Runnable()&#123;//            @Override//            public void run()&#123;//                System.out.println(&quot;任务被执行，线程：&quot; + Thread.currentThread().getName());//            &#125;//        &#125;;//        //        Future&lt;?&gt; submit = threadPool.submit(runnable);////        System.out.println(submit);////        System.out.println(submit.isDone());//        threadPool.execute(runnable);//        threadPool.execute(runnable);//        threadPool.execute(runnable);                ExecutorService threadPool = Executors.newFixedThreadPool(2);        for(int i = 0; i &lt; 4; i++)&#123;            threadPool.execute(() -&gt; &#123;                System.out.println(&quot;任务被执行，线程：&quot; + Thread.currentThread().getName());            &#125;);        &#125;    &#125;        public static void cachedThreadPool()&#123;        ExecutorService threadPool = Executors.newCachedThreadPool();        for(int i=0;i&lt;10;i++)&#123;            threadPool.execute(() -&gt; &#123;                System.out.println(&quot;任务被执行，线程：&quot; + Thread.currentThread().getName());            &#125;);        &#125;    &#125;        public static void singleThreadPool()&#123;        ExecutorService threadPool = Executors.newSingleThreadExecutor();        for(int i = 0; i &lt; 10; i++)&#123;            threadPool.execute(() -&gt; &#123;                System.out.println(&quot;任务被执行，线程：&quot; + Thread.currentThread().getName());            &#125;);        &#125;    &#125;        public static void scheduledThreadPool()&#123;        ScheduledExecutorService threadPool = Executors.newScheduledThreadPool(5);        System.out.println(&quot;添加任务，时间：&quot;+new Date());        threadPool.schedule(()-&gt;&#123;            System.out.println(&quot;任务被执行，时间：&quot;+new Date());            try &#123;                TimeUnit.SECONDS.sleep(1);            &#125; catch (InterruptedException e) &#123;                e.printStackTrace();            &#125;        &#125;, 1, TimeUnit.SECONDS);    &#125;        public static void singleThreadScheduledPool()&#123;        ScheduledExecutorService threadPool = Executors.newSingleThreadScheduledExecutor();        System.out.println(&quot;添加任务，时间：&quot;+new Date());        threadPool.schedule(()-&gt;&#123;            System.out.println(&quot;任务被执行，时间：&quot;+new Date());            try &#123;                TimeUnit.SECONDS.sleep(1);            &#125; catch (InterruptedException e) &#123;                e.printStackTrace();            &#125;        &#125;, 2, TimeUnit.SECONDS);    &#125;        public static void workStealingPool()&#123;        ExecutorService threadPool = Executors.newWorkStealingPool();        for(int i = 0; i &lt; 10; i++)&#123;            final int index = i;            threadPool.execute(() -&gt;&#123;                System.out.println(index + &quot;被执行，线程名&quot;+Thread.currentThread().getName());            &#125;);        &#125;        while(!threadPool.isTerminated())&#123;                    &#125;    &#125;        //推荐使用    //阿里巴巴开发手册：线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。    public static void myThreadPoolExecutor()&#123;        final int CORE_POOL_SIZE = 5;          final int MAX_POOL_SIZE = 10;        final int QUEUE_CAPACITY = 100;        final Long KEEP_ALIVE_TIME = 1L;        ThreadPoolExecutor threadPool = new ThreadPoolExecutor(                CORE_POOL_SIZE,                MAX_POOL_SIZE,                KEEP_ALIVE_TIME,                TimeUnit.SECONDS,                new ArrayBlockingQueue&lt;&gt;(QUEUE_CAPACITY),                new ThreadPoolExecutor.CallerRunsPolicy()                );        for(int i = 0; i &lt; 10; i++)&#123;            final int index = i;            threadPool.execute(() -&gt; &#123;                System.out.println(index+&quot;被执行，线程名：&quot;+Thread.currentThread().getName());                try &#123;                    Thread.sleep(1000);                &#125; catch (InterruptedException e) &#123;                    e.printStackTrace();                &#125;            &#125;);        &#125;            &#125;            public static void main(String[] args) &#123;        //fixedThreadPool();        //cachedThreadPool();        //singleThreadPool();        //scheduledThreadPool();        //singleThreadScheduledPool();        //workStealingPool();        myThreadPoolExecutor();    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创建线程池的7种方式&quot;&gt;&lt;a href=&quot;#创建线程池的7种方式&quot; class=&quot;headerlink&quot; title=&quot;创建线程池的7种方式&quot;&gt;&lt;/a&gt;创建线程池的7种方式&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;import java.util.Date;
import </summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="基础" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="创建线程池的7种方式" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%847%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="线程池" scheme="http://example.com/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>Java | ThreadLocal</title>
    <link href="http://example.com/2022/04/23/ThreadLocal/"/>
    <id>http://example.com/2022/04/23/ThreadLocal/</id>
    <published>2022-04-24T04:07:49.000Z</published>
    <updated>2022-04-24T04:10:42.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ThreadLocal示例"><a href="#ThreadLocal示例" class="headerlink" title="ThreadLocal示例"></a>ThreadLocal示例</h1><p>ThreadLocal:<br>通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。如果想实现每一个线程都有自己的专属本地变量该如何解决呢？ JDK 中提供的ThreadLocal类正是为了解决这样的问题。<br>ThreadLocal类主要解决的就是让每个线程绑定自己的值，可以将ThreadLocal类形象的比喻成存放数据的盒子，盒子中可以存储每个线程的私有数据。<br>如果你创建了一个ThreadLocal变量，那么访问这个变量的每个线程都会有这个变量的本地副本，这也是ThreadLocal变量名的由来。他们可以使用 get（） 和 set（） 方法来获取默认值或将修改其值，从而避免了线程安全问题。</p><p><strong>代码：</strong></p><pre><code>import java.text.SimpleDateFormat;import java.util.Random;public class ThreadLocalTest implements Runnable&#123;    //private static final ThreadLocal&lt;SimpleDateFormat&gt; formatter = ThreadLocal.withInitial(()-&gt;new SimpleDateFormat(&quot;yyyyMMdd HHmm&quot;));    private static final ThreadLocal&lt;SimpleDateFormat&gt; formatter = new ThreadLocal&lt;SimpleDateFormat&gt;()&#123;        @Override        protected SimpleDateFormat initialValue()&#123;            return new SimpleDateFormat(&quot;yyyyMMdd HHmm&quot;);        &#125;    &#125;;        @Override    public void run() &#123;        System.out.println(&quot;Thread Name=&quot;+Thread.currentThread().getName()+&quot; default formatter=&quot;+formatter.get().toPattern());        try &#123;            Thread.sleep(new Random().nextInt(1000));        &#125; catch (InterruptedException e) &#123;            e.printStackTrace();        &#125;        formatter.set(new SimpleDateFormat());        System.out.println(&quot;Thread Name=&quot;+Thread.currentThread().getName()+&quot; current formatter=&quot;+formatter.get().toPattern());            &#125;        public static void main(String[] args) throws InterruptedException&#123;        ThreadLocalTest obj = new ThreadLocalTest();        for(int i=0;i&lt;10;i++)&#123;            Thread t = new Thread(obj, &quot;&quot;+i);            Thread.sleep(new Random().nextInt(1000));            t.start();        &#125;    &#125;    &#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ThreadLocal示例&quot;&gt;&lt;a href=&quot;#ThreadLocal示例&quot; class=&quot;headerlink&quot; title=&quot;ThreadLocal示例&quot;&gt;&lt;/a&gt;ThreadLocal示例&lt;/h1&gt;&lt;p&gt;ThreadLocal:&lt;br&gt;通常情况下，我们创建</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="基础" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="ThreadLocal" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/ThreadLocal/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="ThreadLocal" scheme="http://example.com/tags/ThreadLocal/"/>
    
  </entry>
  
  <entry>
    <title>单例模式 | 双重检验锁方式实现单例模式</title>
    <link href="http://example.com/2022/04/23/%E5%8F%8C%E9%87%8D%E6%A3%80%E9%AA%8C%E9%94%81%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/04/23/%E5%8F%8C%E9%87%8D%E6%A3%80%E9%AA%8C%E9%94%81%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-04-24T02:43:26.000Z</published>
    <updated>2022-04-24T02:56:03.079Z</updated>
    
    <content type="html"><![CDATA[<p><a href>参考资料</a></p><pre><code>package SingletonTest;class Singleton&#123;    private volatile static Singleton instance;        private Singleton()&#123;            &#125;        public static Singleton getInstance()&#123;        if(instance == null)&#123;            synchronized (Singleton.class) &#123;                if(instance == null)&#123;                    instance = new Singleton();                &#125;                //instance = new Singleton();            &#125;        &#125;        return instance;    &#125;&#125;public class MyThread extends Thread&#123;    @Override    public void run()&#123;        System.out.println(Singleton.getInstance().hashCode());    &#125;        public static void main(String[] args)&#123;        MyThread[] myThread = new MyThread[10];        for(int i=0;i&lt;myThread.length;i++)&#123;            myThread[i] = new MyThread();        &#125;                for(int i=0;i&lt;myThread.length;i++)&#123;            myThread[i].start();        &#125;    &#125;&#125;</code></pre><p><strong>双重锁的运行结果：</strong></p><pre><code>1156205522115620552211562055221156205522115620552211562055221156205522115620552211562055221156205522</code></pre><p><strong>去掉第二重锁的运行结果（产生了多例）：</strong></p><pre><code>1700548907148620290814862029081700548907148620290814862029081700548907148620290814862029081700548907</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href&gt;参考资料&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package SingletonTest;

class Singleton&amp;#123;
    private volatile static Singleton instance;
    
    pr</summary>
      
    
    
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="单例模式" scheme="http://example.com/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="双重检验锁方式实现单例模式" scheme="http://example.com/tags/%E5%8F%8C%E9%87%8D%E6%A3%80%E9%AA%8C%E9%94%81%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java | HashMap的七种遍历方式</title>
    <link href="http://example.com/2022/04/23/HashMap%E7%9A%84%E4%B8%83%E7%A7%8D%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2022/04/23/HashMap%E7%9A%84%E4%B8%83%E7%A7%8D%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F/</id>
    <published>2022-04-23T13:00:26.000Z</published>
    <updated>2022-04-23T13:20:32.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HashMap的七种遍历方式"><a href="#HashMap的七种遍历方式" class="headerlink" title="HashMap的七种遍历方式"></a>HashMap的七种遍历方式</h1><p><a href="https://mp.weixin.qq.com/s/zQBN3UvJDhRTKP6SzcZFKw">参考资料</a></p><pre><code>import java.util.HashMap;import java.util.Iterator;import java.util.Map;import java.util.Map.Entry;public class HashMapTraversalMethodsTest &#123;    public static void main(String[] args) &#123;                Map&lt;Integer, String&gt; map = new HashMap();        map.put(1, &quot;Java&quot;);        map.put(2, &quot;Python&quot;);        map.put(3, &quot;C&quot;);        map.put(4, &quot;C++&quot;);        map.put(5, &quot;JavaScript&quot;);                //迭代器EntrySet（推荐使用）//        Iterator&lt;Entry&lt;Integer, String&gt;&gt; iterator = map.entrySet().iterator();//        while(iterator.hasNext())&#123;//            Entry&lt;Integer, String&gt; entry = iterator.next();//            System.out.println(entry.getKey());//            System.out.println(entry.getValue());//        &#125;                //迭代器KeySet//        Iterator&lt;Integer&gt; iterator = map.keySet().iterator();//        while(iterator.hasNext())&#123;//            Integer key = iterator.next();//            System.out.println(key);//            System.out.println(map.get(key));//        &#125;                //ForEach EntrySet//        for(Entry&lt;Integer, String&gt; entry:map.entrySet())&#123;//            System.out.println(entry.getKey());//            System.out.println(entry.getValue());//        &#125;                //ForEach KeySet//        for(Integer key:map.keySet())&#123;//            System.out.println(key);//            System.out.println(map.get(key));//        &#125;                //Lambda//        map.forEach((key, value) -&gt; &#123;//            System.out.println(key);//            System.out.println(value);//        &#125;);                //Streams API单线程//        map.entrySet().stream().forEach((entry) -&gt; &#123;//            System.out.println(entry.getKey());//            System.out.println(entry.getValue());//        &#125;);                //Streams API多线程        map.entrySet().parallelStream().forEach((entry) -&gt;&#123;            System.out.println(entry.getKey());            System.out.println(entry.getValue());        &#125;);    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HashMap的七种遍历方式&quot;&gt;&lt;a href=&quot;#HashMap的七种遍历方式&quot; class=&quot;headerlink&quot; title=&quot;HashMap的七种遍历方式&quot;&gt;&lt;/a&gt;HashMap的七种遍历方式&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://mp.we</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="基础" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="HashMap的七种遍历方式" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/HashMap%E7%9A%84%E4%B8%83%E7%A7%8D%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F/"/>
    
    
    <category term="HashMap" scheme="http://example.com/tags/HashMap/"/>
    
    <category term="遍历" scheme="http://example.com/tags/%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>SSM | 批量删除</title>
    <link href="http://example.com/2022/04/18/SSM-%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4/"/>
    <id>http://example.com/2022/04/18/SSM-%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4/</id>
    <published>2022-04-19T02:27:24.000Z</published>
    <updated>2022-04-19T02:32:27.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h1><p>1.list.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;展示员工信息&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;$&#123;pageContext.servletContext.contextPath&#125;/css/index_work.css&quot;/&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;$&#123;pageContext.servletContext.contextPath&#125;/js/jquery-1.8.2.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;    $(function()&#123;        $(&quot;#selectAll&quot;).click(function()&#123;            $(&quot;[name=&#39;eid&#39;]&quot;).prop(&quot;checked&quot;, $(this).prop(&quot;checked&quot;));        &#125;);                $(&quot;#deleteMore&quot;).click(function()&#123;            $(&quot;form&quot;).attr(&quot;action&quot;, $(this).attr(&quot;href&quot;)).submit();            return false;//关闭默认跳转        &#125;);    &#125;);&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;form method=&quot;post&quot;&gt;        &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;DELETE&quot;/&gt;        &lt;table&gt;            &lt;tr&gt;                &lt;th&gt;                    &lt;input type=&quot;checkbox&quot; id=&quot;selectAll&quot;&gt;                &lt;/th&gt;                &lt;th&gt;EID&lt;/th&gt;                &lt;th&gt;ENAME&lt;/th&gt;                &lt;th&gt;AGE&lt;/th&gt;                &lt;th&gt;SEX&lt;/th&gt;                &lt;th&gt;DEPARTMENTNAME&lt;/th&gt;                &lt;th&gt;OPTIONS&lt;/th&gt;            &lt;/tr&gt;            &lt;c:forEach items=&quot;$&#123;empList&#125;&quot; var=&quot;emp&quot;&gt;                &lt;tr&gt;                    &lt;td&gt;                        &lt;input type=&quot;checkbox&quot; name=&quot;eid&quot; value=&quot;$&#123;emp.eid&#125;&quot;/&gt;                    &lt;/td&gt;                    &lt;td&gt;$&#123;emp.eid&#125;&lt;/td&gt;                    &lt;td&gt;$&#123;emp.ename&#125;&lt;/td&gt;                    &lt;td&gt;$&#123;emp.age&#125;&lt;/td&gt;                    &lt;td&gt;$&#123;emp.sex == 0 ? &#39;女&#39;:&#39;男&#39;&#125;&lt;/td&gt;                    &lt;td&gt;$&#123;emp.dept.dname&#125;&lt;/td&gt;                    &lt;td&gt;                        &lt;a href=&quot;emp&quot;&gt;删除&lt;/a&gt;                        &lt;a href=&quot;$&#123;pageContext.servletContext.contextPath&#125;/emp/$&#123;emp.eid&#125;&quot;&gt;修改&lt;/a&gt;                    &lt;/td&gt;                &lt;/tr&gt;            &lt;/c:forEach&gt;            &lt;tr&gt;                &lt;td colspan=&quot;10&quot;&gt;                    &lt;a id=&quot;deleteMore&quot; href=&quot;$&#123;pageContext.servletContext.contextPath&#125;/emps&quot;&gt;批量删除&lt;/a&gt;&amp;nbsp;                    $&#123;page&#125;                &lt;/td&gt;            &lt;/tr&gt;        &lt;/table&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>2.EmpMapper.java</p><pre><code>public interface EmpMapper &#123;    //获取所有的员工信息    List&lt;Emp&gt; getAllEmp();        ......        void deleteMore(String eids);&#125;</code></pre><p>3.EmpMapper.xml</p><pre><code>&lt;!-- void deleteMore(String eids); --&gt;&lt;delete id=&quot;deleteMore&quot;&gt;    delete from emp where eid in ($&#123;value&#125;)&lt;/delete&gt;</code></pre><p>4.EmpService.java</p><pre><code>public interface EmpService &#123;    ......        void deleteMore(String eids);&#125;</code></pre><p>5.EmpServiceImpl.java</p><pre><code>@Servicepublic class EmpServiceImpl implements EmpService&#123;    @Autowired    private EmpMapper empMapper;        ......    @Override    public void deleteMore(String eids) &#123;        // TODO Auto-generated method stub        empMapper.deleteMore(eids);    &#125;&#125;</code></pre><p>6.EmpController.java</p><pre><code>@Controllerpublic class EmpController &#123;    @Autowired    private EmpService service;        ......        @RequestMapping(value=&quot;/emps&quot;, method=RequestMethod.DELETE)    public String deleteMore(String eid)&#123;        //获取客户端name属性相同的多个元素的值，可以通过字符串直接获取，每个值以逗号分隔，也可以以数组直接获取        System.out.println(eid);        service.deleteMore(eid);        return &quot;redirect:/emps/1&quot;;    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;批量删除&quot;&gt;&lt;a href=&quot;#批量删除&quot; class=&quot;headerlink&quot; title=&quot;批量删除&quot;&gt;&lt;/a&gt;批量删除&lt;/h1&gt;&lt;p&gt;1.list.jsp&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;%@ page language=&amp;quot;java&amp;quot</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SSM" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SSM/"/>
    
    <category term="批量删除" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SSM/%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="SSM" scheme="http://example.com/tags/SSM/"/>
    
    <category term="批量删除" scheme="http://example.com/tags/%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4/"/>
    
  </entry>
  
  <entry>
    <title>SSM | 修改</title>
    <link href="http://example.com/2022/04/18/SSM-%E4%BF%AE%E6%94%B9/"/>
    <id>http://example.com/2022/04/18/SSM-%E4%BF%AE%E6%94%B9/</id>
    <published>2022-04-19T01:07:54.000Z</published>
    <updated>2022-04-19T01:13:39.260Z</updated>
    
    <content type="html"><![CDATA[<h1 id="修改员工信息"><a href="#修改员工信息" class="headerlink" title="修改员工信息"></a>修改员工信息</h1><p>1.list.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;展示员工信息&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;$&#123;pageContext.servletContext.contextPath&#125;/css/index_work.css&quot;/&gt;&lt;/head&gt;&lt;body&gt;    &lt;table&gt;        &lt;tr&gt;            &lt;th&gt;EID&lt;/th&gt;            &lt;th&gt;ENAME&lt;/th&gt;            &lt;th&gt;AGE&lt;/th&gt;            &lt;th&gt;SEX&lt;/th&gt;            &lt;th&gt;DEPARTMENTNAME&lt;/th&gt;            &lt;th&gt;OPTIONS&lt;/th&gt;        &lt;/tr&gt;        &lt;c:forEach items=&quot;$&#123;empList&#125;&quot; var=&quot;emp&quot;&gt;            &lt;tr&gt;                &lt;td&gt;$&#123;emp.eid&#125;&lt;/td&gt;                &lt;td&gt;$&#123;emp.ename&#125;&lt;/td&gt;                &lt;td&gt;$&#123;emp.age&#125;&lt;/td&gt;                &lt;td&gt;$&#123;emp.sex == 0 ? &#39;女&#39;:&#39;男&#39;&#125;&lt;/td&gt;                &lt;td&gt;$&#123;emp.dept.dname&#125;&lt;/td&gt;                &lt;td&gt;                    &lt;a href=&quot;emp&quot;&gt;删除&lt;/a&gt;                    &lt;a href=&quot;$&#123;pageContext.servletContext.contextPath&#125;/emp/$&#123;emp.eid&#125;&quot;&gt;修改&lt;/a&gt;                &lt;/td&gt;            &lt;/tr&gt;        &lt;/c:forEach&gt;        &lt;tr&gt;            &lt;td colspan=&quot;10&quot;&gt;                $&#123;page&#125;            &lt;/td&gt;        &lt;/tr&gt;    &lt;/table&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>2.update.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%@taglib uri=&quot;http://www.springframework.org/tags/form&quot; prefix=&quot;form&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;修改员工信息&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;$&#123;pageContext.servletContext.contextPath&#125;/css/index_work.css&quot;/&gt;&lt;/head&gt;&lt;body&gt;    &lt;form:form action=&quot;$&#123;pageContext.servletContext.contextPath&#125;/emp&quot; method=&quot;post&quot; modelAttribute=&quot;emp&quot;&gt;        &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;PUT&quot;/&gt;        &lt;form:hidden path=&quot;eid&quot;/&gt;        &lt;table&gt;            &lt;tr&gt;                &lt;th colspan=&quot;2&quot;&gt;UPDATE EMP INFO&lt;/th&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;ENAME&lt;/td&gt;                &lt;td&gt;                    &lt;form:input path=&quot;ename&quot;/&gt;                &lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;AGE&lt;/td&gt;                &lt;td&gt;                    &lt;form:input path=&quot;age&quot;/&gt;                &lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;sex&lt;/td&gt;                &lt;td&gt;                    &lt;form:radiobuttons path=&quot;sex&quot; items=&quot;$&#123;sex&#125;&quot;/&gt;                &lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;DEPARTMENT&lt;/td&gt;                &lt;td&gt;                    &lt;form:select path=&quot;dept.did&quot; items=&quot;$&#123;deptList&#125;&quot; itemLabel=&quot;dname&quot; itemValue=&quot;did&quot;&gt;&lt;/form:select&gt;                &lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td colspan=&quot;2&quot;&gt;                    &lt;input type=&quot;submit&quot; value=&quot;修改&quot; /&gt;                &lt;/td&gt;            &lt;/tr&gt;        &lt;/table&gt;    &lt;/form:form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>3.EmpController.java</p><pre><code>@Controllerpublic class EmpController &#123;    @Autowired    private EmpService service;        @RequestMapping(value=&quot;/emp/&#123;eid&#125;&quot;, method=RequestMethod.GET)    public String toUpdate(@PathVariable(&quot;eid&quot;)String eid, Map&lt;String, Object&gt; map)&#123;        //要修改的员工信息        Emp emp = service.getEmpByEid(eid);                //所有的部门信息        List&lt;Dept&gt; deptList = service.getAllDept();                //获取存储性别的map集合        Map&lt;String, String&gt; sex = new HashMap&lt;&gt;();        sex.put(&quot;0&quot;, &quot;女&quot;);        sex.put(&quot;1&quot;, &quot;男&quot;);                map.put(&quot;emp&quot;, emp);        map.put(&quot;deptList&quot;, deptList);        map.put(&quot;sex&quot;, sex);                return &quot;update&quot;;    &#125;        @RequestMapping(value=&quot;/emp&quot;, method=RequestMethod.PUT)    public String updateEmp(Emp emp)&#123;        service.updateEmp(emp);        return &quot;redirect:/emps/1&quot;;    &#125;&#125;</code></pre><p>4.EmpService.java</p><pre><code>public interface EmpService &#123;    ......        List&lt;Dept&gt; getAllDept();&#125;</code></pre><p>5.EmpServiceImpl.java</p><pre><code>@Servicepublic class EmpServiceImpl implements EmpService&#123;    @Autowired    private EmpMapper empMapper;        @Autowired    private DeptMapper deptMapper;        ......        @Override    public List&lt;Dept&gt; getAllDept() &#123;        // TODO Auto-generated method stub        return deptMapper.getAllDept();    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;修改员工信息&quot;&gt;&lt;a href=&quot;#修改员工信息&quot; class=&quot;headerlink&quot; title=&quot;修改员工信息&quot;&gt;&lt;/a&gt;修改员工信息&lt;/h1&gt;&lt;p&gt;1.list.jsp&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;%@ page language=&amp;quot;j</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SSM" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SSM/"/>
    
    <category term="修改" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SSM/%E4%BF%AE%E6%94%B9/"/>
    
    
    <category term="SSM" scheme="http://example.com/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>Java | 反射</title>
    <link href="http://example.com/2022/04/18/%E5%8F%8D%E5%B0%84/"/>
    <id>http://example.com/2022/04/18/%E5%8F%8D%E5%B0%84/</id>
    <published>2022-04-19T00:07:36.000Z</published>
    <updated>2022-04-19T00:13:00.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>1.反射<br><strong>运行时分析类</strong>并调用类中的属性和方法<br>2.反射的应用场景<br>（1）spring、springboot等<strong>框架</strong>的实现<br>（2）动态代理<br>（3）注解<br>3.反射的优缺点<br>3.1优点<br>（1）灵活<br>（2）不安全（比如无视泛型参数的安全检查）<br>3.2缺点<br>性能稍差<br>4.获取Class对象的四种方式<br>（1）类.class<br>（2）Class.forName(类的全限定名)<br>（3）Instance.getClass()<br>（4）xxxClassLoader.loadClass()</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;反射&quot;&gt;&lt;a href=&quot;#反射&quot; class=&quot;headerlink&quot; title=&quot;反射&quot;&gt;&lt;/a&gt;反射&lt;/h1&gt;&lt;p&gt;1.反射&lt;br&gt;&lt;strong&gt;运行时分析类&lt;/strong&gt;并调用类中的属性和方法&lt;br&gt;2.反射的应用场景&lt;br&gt;（1）spring、s</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="基础" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="反射" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%B0%84/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="反射" scheme="http://example.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>SSM | SSM项目搭建</title>
    <link href="http://example.com/2022/04/18/SSM%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2022/04/18/SSM%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</id>
    <published>2022-04-18T08:51:25.000Z</published>
    <updated>2022-04-18T08:57:23.778Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSM整合步骤："><a href="#SSM整合步骤：" class="headerlink" title="SSM整合步骤："></a>SSM整合步骤：</h2><p>1.导入jar包<br>    spring:<br>    springMVC:<br>    mybatis:<br>    第三方支持:log4j,pageHelper,AspectJ,jackson,jstl<br><img src="/2022/04/18/SSM%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1.PNG"><br>2.搭建springMVC<br>    (1)web.xml<br>        CharacterEncodingFilter:filter<br>        HiddenHttpMethodFilter:filter<br>        DispatcherServlet:servlet<br>    (2)springMVC.xml<br>        扫描控制层组件：<a href="context:component-scan">context:component-scan</a><br>        视图解析器:InternalResourceViewResolver<br>        Default Servlet:<a href="mvc:default-servlet-handler/">mvc:default-servlet-handler/</a><br>        MVC驱动:&lt;mvc:annotation-driven /&gt;<br>        可选：MultipartResolver,拦截器</p><span id="more"></span><p>3.整合springMVC和spring<br>    (1)web.xml<br>        ContextLoaderListener:listener<br>        context-param<br>    (2)spring.xml<br>        扫描组件（排除控制层）<br>4.搭建mybatis<br>    核心配置文件mybatis-config.xml<br>    mapper接口和mapper映射文件<br>5.spring整合mybatis<br>    spring.xml:<br>        properties文件的引入<br>        DataSource数据源的配置：xxxDataSource<br>        事务管理器：DataSourceTransactionManager<br>        开启事务驱动:<a href="tx:annotation-driven">tx:annotation-driven</a><br>        SqlSessionFactoryBean:管理SqlSession<br>        MypperScannerConfigurer:自动生成Mapper接口的代理实现类<br>6.REST CRUD<br>    查询+分页<br>    修改（form）<br><strong>项目目录</strong><br><img src="/2022/04/18/SSM%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/2.PNG"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;SSM整合步骤：&quot;&gt;&lt;a href=&quot;#SSM整合步骤：&quot; class=&quot;headerlink&quot; title=&quot;SSM整合步骤：&quot;&gt;&lt;/a&gt;SSM整合步骤：&lt;/h2&gt;&lt;p&gt;1.导入jar包&lt;br&gt;    spring:&lt;br&gt;    springMVC:&lt;br&gt;    mybatis:&lt;br&gt;    第三方支持:log4j,pageHelper,AspectJ,jackson,jstl&lt;br&gt;&lt;img src=&quot;/2022/04/18/SSM%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1.PNG&quot;&gt;&lt;br&gt;2.搭建springMVC&lt;br&gt;    (1)web.xml&lt;br&gt;        CharacterEncodingFilter:filter&lt;br&gt;        HiddenHttpMethodFilter:filter&lt;br&gt;        DispatcherServlet:servlet&lt;br&gt;    (2)springMVC.xml&lt;br&gt;        扫描控制层组件：&lt;a href=&quot;context:component-scan&quot;&gt;context:component-scan&lt;/a&gt;&lt;br&gt;        视图解析器:InternalResourceViewResolver&lt;br&gt;        Default Servlet:&lt;a href=&quot;mvc:default-servlet-handler/&quot;&gt;mvc:default-servlet-handler/&lt;/a&gt;&lt;br&gt;        MVC驱动:&amp;lt;mvc:annotation-driven /&amp;gt;&lt;br&gt;        可选：MultipartResolver,拦截器&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SSM" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SSM/"/>
    
    <category term="SSM项目搭建" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SSM/SSM%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="SSM" scheme="http://example.com/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>SSM | 列表及分页</title>
    <link href="http://example.com/2022/04/18/SSM-%E5%88%97%E8%A1%A8%E5%8F%8A%E5%88%86%E9%A1%B5/"/>
    <id>http://example.com/2022/04/18/SSM-%E5%88%97%E8%A1%A8%E5%8F%8A%E5%88%86%E9%A1%B5/</id>
    <published>2022-04-18T08:50:35.000Z</published>
    <updated>2022-04-18T09:16:01.226Z</updated>
    
    <content type="html"><![CDATA[<h1 id="列表及分页"><a href="#列表及分页" class="headerlink" title="列表及分页"></a>列表及分页</h1><p>1.index.jsp(请求)</p><pre><code>......&lt;a href=&quot;emps/1&quot;&gt;展示员工信息&lt;/a&gt;......</code></pre><span id="more"></span><p>2.PageUtil.java</p><pre><code>package com.atguigu.ssm.util;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import com.atguigu.ssm.bean.Emp;import com.github.pagehelper.PageInfo;/** * 首页 上一页 1 2 3 4 5 下一页 末页 */public class PageUtil &#123;    public static String getPageInfo(PageInfo&lt;?&gt; pageInfo, HttpServletRequest request)&#123;        String path = request.getContextPath() + &quot;/&quot;;                StringBuilder builder = new StringBuilder();                //拼接首页        builder.append(&quot;&lt;a href=&#39;&quot;+path+&quot;emps/1&#39;&gt;首页&lt;/a&gt;&quot;);        builder.append(&quot;&amp;nbsp;&quot;);                //拼接上一页        if(pageInfo.isHasPreviousPage())&#123;            builder.append(&quot;&lt;a href=&#39;&quot;+path+&quot;emps/&quot;+pageInfo.getPrePage()+&quot;&#39;&gt;上一页 &lt;/a&gt;&quot;);            builder.append(&quot;&amp;nbsp;&quot;);        &#125;else&#123;            builder.append(&quot;上一页&quot;);            builder.append(&quot;&amp;nbsp;&quot;);        &#125;                //拼接页码        int[] nums = pageInfo.getNavigatepageNums();        for(int i : nums)&#123;            if(i == pageInfo.getPageNum())&#123;                builder.append(&quot;&lt;a style=&#39;color:red;&#39; href=&#39;&quot;+path+&quot;emps/&quot;+i+&quot;&#39;&gt;&quot;+i+&quot;&lt;/a&gt;&quot;);                builder.append(&quot;&amp;nbsp;&quot;);            &#125;else&#123;                builder.append(&quot;&lt;a href=&#39;&quot;+path+&quot;emps/&quot;+i+&quot;&#39;&gt;&quot;+i+&quot;&lt;/a&gt;&quot;);                builder.append(&quot;&amp;nbsp;&quot;);            &#125;        &#125;                //拼接下一页        if(pageInfo.isHasNextPage())&#123;            builder.append(&quot;&lt;a href=&#39;&quot;+path+&quot;emps/&quot;+pageInfo.getNextPage()+&quot;&#39;&gt;下一页&lt;/a&gt;&quot;);            builder.append(&quot;&amp;nbsp;&quot;);        &#125;else&#123;            builder.append(&quot;下一页&quot;);            builder.append(&quot;&amp;nbsp;&quot;);        &#125;                //拼接尾页        builder.append(&quot;&lt;a href=&#39;&quot;+path+&quot;emps/&quot;+pageInfo.getPages()+&quot;&#39;&gt;尾页&lt;/a&gt;&quot;);        builder.append(&quot;&amp;nbsp;&quot;);                return builder.toString();    &#125;&#125;</code></pre><p>3.EmpController.java</p><pre><code>package com.atguigu.ssm.controller;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import com.atguigu.ssm.bean.Emp;import com.atguigu.ssm.service.EmpService;import com.atguigu.ssm.util.PageUtil;import com.github.pagehelper.PageHelper;import com.github.pagehelper.PageInfo;@Controllerpublic class EmpController &#123;    @Autowired    private EmpService service;        @RequestMapping(value=&quot;/emps/&#123;pageNum&#125;&quot;, method=RequestMethod.GET)    public String getAllEmp(Map&lt;String, Object&gt; map, @PathVariable(&quot;pageNum&quot;)Integer pageNum, HttpServletRequest request)&#123;        PageHelper.startPage(pageNum, 1);        List&lt;Emp&gt; empList = service.getAllEmp();        PageInfo&lt;Emp&gt; pageInfo = new PageInfo&lt;&gt;(empList, 5);        String page = PageUtil.getPageInfo(pageInfo, request);        map.put(&quot;empList&quot;, empList);        map.put(&quot;page&quot;, page);        return &quot;list&quot;;    &#125;&#125;</code></pre><p>4.EmpService(Service接口)</p><pre><code>package com.atguigu.ssm.service;import java.util.List;import com.atguigu.ssm.bean.Emp;public interface EmpService &#123;    List&lt;Emp&gt; getAllEmp();        Emp getEmpByEid(String eid);        void updateEmp(Emp emp);&#125;</code></pre><p>5.EmpServiceImpl.java(Service实现类)</p><pre><code>package com.atguigu.ssm.service.impl;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.atguigu.ssm.bean.Emp;import com.atguigu.ssm.mapper.EmpMapper;import com.atguigu.ssm.service.EmpService;@Servicepublic class EmpServiceImpl implements EmpService&#123;    @Autowired    private EmpMapper mapper;    @Override    public List&lt;Emp&gt; getAllEmp() &#123;        // TODO Auto-generated method stub        return mapper.getAllEmp();    &#125;    @Override    public Emp getEmpByEid(String eid) &#123;        // TODO Auto-generated method stub        return mapper.getEmpByEid(eid);    &#125;    @Override    public void updateEmp(Emp emp) &#123;        // TODO Auto-generated method stub        mapper.updateEmp(emp);    &#125;&#125;</code></pre><p>6.Emp.java(Emp Bean)</p><pre><code>package com.atguigu.ssm.bean;public class Dept &#123;    private Integer did;    private String dname;    public Integer getDid() &#123;        return did;    &#125;    public void setDid(Integer did) &#123;        this.did = did;    &#125;    public String getDname() &#123;        return dname;    &#125;    public void setDname(String dname) &#123;        this.dname = dname;    &#125;&#125;</code></pre><p>7.Dept.java(Dept Bean)</p><pre><code>package com.atguigu.ssm.bean;public class Emp &#123;    private Integer eid;    private String ename;    private Integer age;    private String sex;    private Dept dept;    public Integer getEid() &#123;        return eid;    &#125;    public void setEid(Integer eid) &#123;        this.eid = eid;    &#125;    public String getEname() &#123;        return ename;    &#125;    public void setEname(String ename) &#123;        this.ename = ename;    &#125;    public Integer getAge() &#123;        return age;    &#125;    public void setAge(Integer age) &#123;        this.age = age;    &#125;    public String getSex() &#123;        return sex;    &#125;    public void setSex(String sex) &#123;        this.sex = sex;    &#125;    public Dept getDept() &#123;        return dept;    &#125;    public void setDept(Dept dept) &#123;        this.dept = dept;    &#125;&#125;</code></pre><p>8.EmpMapper.java(Emp Mapper接口)</p><pre><code>package com.atguigu.ssm.mapper;import java.util.List;import com.atguigu.ssm.bean.Emp;public interface EmpMapper &#123;    //获取所有的员工信息    List&lt;Emp&gt; getAllEmp();        //根据eid获取员工信息    Emp getEmpByEid(String eid);        //修改员工信息    void updateEmp(Emp emp);&#125;</code></pre><p>9.DeptMapper.java(Dept Mapper接口)</p><pre><code>package com.atguigu.ssm.mapper;import java.util.List;import com.atguigu.ssm.bean.Dept;public interface DeptMapper &#123;    //获取所有的部门信息    List&lt;Dept&gt; getAllDept();&#125;</code></pre><p>10.EmpMapper.xml(Emp映射文件)</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.atguigu.ssm.mapper.EmpMapper&quot;&gt;    &lt;!--         //获取所有的员工信息        List&lt;Emp&gt; getAllEmp();     --&gt;    &lt;resultMap type=&quot;Emp&quot; id=&quot;empMap&quot;&gt;        &lt;id column=&quot;eid&quot; property=&quot;eid&quot; /&gt;        &lt;result column=&quot;ename&quot; property=&quot;ename&quot;/&gt;        &lt;result column=&quot;age&quot; property=&quot;age&quot;/&gt;        &lt;result column=&quot;sex&quot; property=&quot;sex&quot;/&gt;        &lt;association property=&quot;dept&quot; javaType=&quot;Dept&quot;&gt;            &lt;id column=&quot;did&quot; property=&quot;did&quot;/&gt;            &lt;result column=&quot;dname&quot; property=&quot;dname&quot;/&gt;        &lt;/association&gt;    &lt;/resultMap&gt;    &lt;select id=&quot;getAllEmp&quot; resultMap=&quot;empMap&quot;&gt;        select         e.eid,e.ename,e.age,e.sex,d.did,d.dname        from emp e         left join         dept d        on         e.did = d.did    &lt;/select&gt;        &lt;!--         //根据eid获取员工信息        Emp getEmpByEid(String eid);     --&gt;    &lt;select id=&quot;getEmpByEid&quot; resultMap=&quot;empMap&quot;&gt;        select         e.eid,e.ename,e.age,e.sex,d.did,d.dname        from emp e         left join         dept d        on         e.did = d.did        where e.eid = #&#123;eid&#125;    &lt;/select&gt;        &lt;!--         //修改员工信息        void updateEmp(Emp emp);     --&gt;    &lt;update id=&quot;updateEmp&quot;&gt;        update emp set        ename = #&#123;ename&#125;,        age = #&#123;age&#125;,        sex = #&#123;sex&#125;,        did = #&#123;dept.did&#125;        where eid = #&#123;eid&#125;    &lt;/update&gt;&lt;/mapper&gt;</code></pre><p>11.DeptMapper.xml(Dept映射文件)</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.atguigu.ssm.mapper.DeptMapper&quot;&gt;    &lt;!--         //获取所有的部门信息        List&lt;Dept&gt; getAllDept();     --&gt;    &lt;select id=&quot;getAllDept&quot; resultType=&quot;Dept&quot;&gt;        select did,dname from dept    &lt;/select&gt;     &lt;/mapper&gt;</code></pre><p><strong>结果展示</strong><br><img src="/2022/04/18/SSM-%E5%88%97%E8%A1%A8%E5%8F%8A%E5%88%86%E9%A1%B5/1.PNG"></p><p><img src="/2022/04/18/SSM-%E5%88%97%E8%A1%A8%E5%8F%8A%E5%88%86%E9%A1%B5/2.PNG"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;列表及分页&quot;&gt;&lt;a href=&quot;#列表及分页&quot; class=&quot;headerlink&quot; title=&quot;列表及分页&quot;&gt;&lt;/a&gt;列表及分页&lt;/h1&gt;&lt;p&gt;1.index.jsp(请求)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;......
&amp;lt;a href=&amp;quot;emps/1&amp;quot;&amp;gt;展示员工信息&amp;lt;/a&amp;gt;
......
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SSM" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SSM/"/>
    
    <category term="列表及分页" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SSM/%E5%88%97%E8%A1%A8%E5%8F%8A%E5%88%86%E9%A1%B5/"/>
    
    
    <category term="SSM" scheme="http://example.com/tags/SSM/"/>
    
    <category term="分页" scheme="http://example.com/tags/%E5%88%86%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis | 分页插件PageHelper及PageHelper模拟分页</title>
    <link href="http://example.com/2022/04/17/%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6PageHelper%E5%8F%8APageHelper%E6%A8%A1%E6%8B%9F%E5%88%86%E9%A1%B5/"/>
    <id>http://example.com/2022/04/17/%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6PageHelper%E5%8F%8APageHelper%E6%A8%A1%E6%8B%9F%E5%88%86%E9%A1%B5/</id>
    <published>2022-04-17T08:14:54.000Z</published>
    <updated>2022-04-17T08:21:21.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分页插件PageHelper及PageHelper模拟分页"><a href="#分页插件PageHelper及PageHelper模拟分页" class="headerlink" title="分页插件PageHelper及PageHelper模拟分页"></a>分页插件PageHelper及PageHelper模拟分页</h1><p>1.导入相关包<br>1)pagehelper-x.x.x.jar<br>2)jsqlparser-0.9.5.jar<br>2)在MyBatis全局配置文件mybatis-config.xml中配置分页插件<br><plugins><br>    <plugin interceptor="com.github.pagehelper.PageInterceptor"></plugin><br></plugins><br>3)使用PageHelper提供的方法进行分页<br>4)可以使用更强大的PageInfo封装返回结果</p><h2 id="模拟分页"><a href="#模拟分页" class="headerlink" title="模拟分页"></a>模拟分页</h2><p><strong>PageUtil.java</strong></p><pre><code>package com.atguigu.test;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import com.atguigu.bean.Emp;import com.github.pagehelper.PageInfo;/** * 首页 上一页 1 2 3 4 5 下一页 末页 */public class PageUtil &#123;    public static String getPageInfo(PageInfo&lt;Emp&gt; pageInfo, HttpServletRequest request)&#123;        //String path = request.getContextPath() + &quot;/&quot;;        String path = &quot;/SSM/&quot;;                StringBuilder builder = new StringBuilder();                //拼接首页        builder.append(&quot;&lt;a href=&#39;&quot;+path+&quot;emps/1&#39;&gt;首页&lt;/a&gt;&quot;);        builder.append(&quot;&amp;nbsp;&quot;);                //拼接上一页        if(pageInfo.isHasPreviousPage())&#123;            builder.append(&quot;&lt;a href=&#39;&quot;+path+&quot;emps/&quot;+pageInfo.getPrePage()+&quot;&#39;&gt;上一页 &lt;/a&gt;&quot;);            builder.append(&quot;&amp;nbsp;&quot;);        &#125;else&#123;            builder.append(&quot;上一页&quot;);            builder.append(&quot;&amp;nbsp;&quot;);        &#125;                //拼接页码        int[] nums = pageInfo.getNavigatepageNums();        for(int i : nums)&#123;            if(i == pageInfo.getPageNum())&#123;                builder.append(&quot;&lt;a style=&#39;color:red;&#39; href=&#39;&quot;+path+&quot;emps/&quot;+i+&quot;&#39;&gt;&quot;+i+&quot;&lt;/a&gt;&quot;);                builder.append(&quot;&amp;nbsp;&quot;);            &#125;else&#123;                builder.append(&quot;&lt;a href=&#39;&quot;+path+&quot;emps/&quot;+i+&quot;&#39;&gt;&quot;+i+&quot;&lt;/a&gt;&quot;);                builder.append(&quot;&amp;nbsp;&quot;);            &#125;        &#125;                //拼接下一页        if(pageInfo.isHasNextPage())&#123;            builder.append(&quot;&lt;a href=&#39;&quot;+path+&quot;emps/&quot;+pageInfo.getNextPage()+&quot;&#39;&gt;下一页&lt;/a&gt;&quot;);            builder.append(&quot;&amp;nbsp;&quot;);        &#125;else&#123;            builder.append(&quot;下一页&quot;);            builder.append(&quot;&amp;nbsp;&quot;);        &#125;                //拼接尾页        builder.append(&quot;&lt;a href=&#39;&quot;+path+&quot;emps/&quot;+pageInfo.getPages()+&quot;&#39;&gt;尾页&lt;/a&gt;&quot;);        builder.append(&quot;&amp;nbsp;&quot;);                return builder.toString();    &#125;&#125;</code></pre><p><strong>TestPage.java</strong></p><pre><code>package com.atguigu.test;import java.io.InputStream;import java.util.Arrays;import java.util.List;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.Test;import com.atguigu.bean.Emp;import com.atguigu.mapper.EmpMapper;import com.github.pagehelper.PageHelper;import com.github.pagehelper.PageInfo;public class TestPage &#123;    @Test    public void testPage() throws Exception&#123;        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();        SqlSession sqlSession = sqlSessionFactory.openSession(true);        EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);        PageHelper.startPage(2, 2);        List&lt;Emp&gt; list = mapper.getAllEmp();                PageInfo&lt;Emp&gt; pageInfo = new PageInfo&lt;&gt;(list, 5);//        System.out.println(pageInfo);//        System.out.println(Arrays.toString(pageInfo.getNavigatepageNums()));                System.out.println(PageUtil.getPageInfo(pageInfo, null));                        for (Emp emp : list) &#123;            System.out.println(emp);        &#125;    &#125;        public SqlSessionFactory getSqlSessionFactory() throws Exception&#123;        InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);        return sqlSessionFactory;    &#125;&#125;</code></pre><p><strong>返回结果</strong><br>字符串：</p><pre><code>&lt;a href=&#39;/SSM/emps/1&#39;&gt;首页&lt;/a&gt;&amp;nbsp;&lt;a href=&#39;/SSM/emps/1&#39;&gt;上一页 &lt;/a&gt;&amp;nbsp;&lt;a href=&#39;/SSM/emps/1&#39;&gt;1&lt;/a&gt;&amp;nbsp;&lt;a style=&#39;color:red;&#39; href=&#39;/SSM/emps/2&#39;&gt;2&lt;/a&gt;&amp;nbsp;&lt;a href=&#39;/SSM/emps/3&#39;&gt;3&lt;/a&gt;&amp;nbsp;&lt;a href=&#39;/SSM/emps/4&#39;&gt;4&lt;/a&gt;&amp;nbsp;&lt;a href=&#39;/SSM/emps/5&#39;&gt;5&lt;/a&gt;&amp;nbsp;&lt;a href=&#39;/SSM/emps/3&#39;&gt;下一页&lt;/a&gt;&amp;nbsp;&lt;a href=&#39;/SSM/emps/6&#39;&gt;尾页&lt;/a&gt;&amp;nbsp;</code></pre><p>浏览器显示：<br><img src="/2022/04/17/%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6PageHelper%E5%8F%8APageHelper%E6%A8%A1%E6%8B%9F%E5%88%86%E9%A1%B5/1.PNG"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分页插件PageHelper及PageHelper模拟分页&quot;&gt;&lt;a href=&quot;#分页插件PageHelper及PageHelper模拟分页&quot; class=&quot;headerlink&quot; title=&quot;分页插件PageHelper及PageHelper模拟分页&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyBatis" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/"/>
    
    <category term="分页插件PageHelper及PageHelper模拟分页" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6PageHelper%E5%8F%8APageHelper%E6%A8%A1%E6%8B%9F%E5%88%86%E9%A1%B5/"/>
    
    
    <category term="MyBatis" scheme="http://example.com/tags/MyBatis/"/>
    
    <category term="分页插件PageHelper" scheme="http://example.com/tags/%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6PageHelper/"/>
    
    <category term="PageHelper模拟分页" scheme="http://example.com/tags/PageHelper%E6%A8%A1%E6%8B%9F%E5%88%86%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis | 逆向工程</title>
    <link href="http://example.com/2022/04/16/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    <id>http://example.com/2022/04/16/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/</id>
    <published>2022-04-17T02:04:43.000Z</published>
    <updated>2022-04-17T02:11:11.920Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h1><p>1.项目目录<br><img src="/2022/04/16/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/1.PNG"><br>2.导入逆向工程的jar包</p><pre><code>mybatis-generator-core-1.3.2.jar</code></pre><p>3.编写MBG的配置文件</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration  PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;  &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;&lt;generatorConfiguration&gt;  &lt;context id=&quot;DB2Tables&quot; targetRuntime=&quot;MyBatis3&quot;&gt;    &lt;!-- 设置连接数据库的信息 --&gt;    &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;        connectionURL=&quot;jdbc:mysql://localhost:3306/ssm&quot;        userId=&quot;root&quot;        password=&quot;root&quot;&gt;    &lt;/jdbcConnection&gt;    &lt;javaTypeResolver &gt;      &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot; /&gt;    &lt;/javaTypeResolver&gt;    &lt;!-- javabean的生成策略 --&gt;    &lt;javaModelGenerator targetPackage=&quot;com.atguigu.bean&quot; targetProject=&quot;.\src&quot;&gt;      &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt;      &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt;    &lt;/javaModelGenerator&gt;    &lt;!-- 映射文件的生成策略 --&gt;    &lt;sqlMapGenerator targetPackage=&quot;com.atguigu.mapper&quot;  targetProject=&quot;.\conf&quot;&gt;      &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt;    &lt;/sqlMapGenerator&gt;    &lt;!-- mapper接口的生成策略 --&gt;    &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.atguigu.mapper&quot;  targetProject=&quot;.\src&quot;&gt;      &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt;    &lt;/javaClientGenerator&gt;    &lt;!-- 设置要将数据库中的哪张表逆向生成哪一个javabean --&gt;    &lt;table tableName=&quot;emp&quot; domainObjectName=&quot;Emp&quot;&gt;&lt;/table&gt;    &lt;table tableName=&quot;dept&quot; domainObjectName=&quot;Dept&quot;&gt;&lt;/table&gt;  &lt;/context&gt;&lt;/generatorConfiguration&gt;</code></pre><p>4.运行代码生成器生成代码</p><pre><code>@Testpublic void testMBG() throws Exception &#123;   List&lt;String&gt; warnings = new ArrayList&lt;String&gt;();   boolean overwrite = true;   File configFile = new File(&quot;mbg.xml&quot;);   ConfigurationParser cp = new ConfigurationParser(warnings);   Configuration config = cp.parseConfiguration(configFile);   DefaultShellCallback callback = new DefaultShellCallback(overwrite);   MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings);   myBatisGenerator.generate(null);&#125;</code></pre><p>5.逆向工程的使用<br>基本查询与带条件查询测试</p><pre><code>@Test    public void testCRUD() throws Exception&#123;        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();        SqlSession sqlSession = sqlSessionFactory.openSession(true);        EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);        //        Emp emp = mapper.selectByPrimaryKey(2);//        System.out.println(emp);                EmpExample example = new EmpExample();                Criteria c1 = example.createCriteria();        c1.andEnameLike(&quot;%a%&quot;);        c1.andSexEqualTo(&quot;1&quot;);                Criteria c2 = example.createCriteria();        c2.andDidEqualTo(2);                example.or(c2);                List&lt;Emp&gt; list = mapper.selectByExample(example);        for (Emp emp : list) &#123;            System.out.println(emp);        &#125;                //查询全部//        List&lt;Emp&gt; list1 = mapper.selectByExample(null);//        for (Emp emp : list1) &#123;//            System.out.println(emp);//        &#125;    &#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;逆向工程&quot;&gt;&lt;a href=&quot;#逆向工程&quot; class=&quot;headerlink&quot; title=&quot;逆向工程&quot;&gt;&lt;/a&gt;逆向工程&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/04/16/%E9%80%86%E5%90%91%E5%B7%A5%E7</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyBatis" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/"/>
    
    <category term="逆向工程" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    
    <category term="逆向工程" scheme="http://example.com/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis | 缓存</title>
    <link href="http://example.com/2022/04/14/mybatis%E7%BC%93%E5%AD%98/"/>
    <id>http://example.com/2022/04/14/mybatis%E7%BC%93%E5%AD%98/</id>
    <published>2022-04-14T11:39:49.000Z</published>
    <updated>2022-04-14T11:51:36.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><p>mybatis中的一级缓存默认开启，是SqlSession级别的，即同一个SqlSession对于一个SQL语句执行之后就会存储在缓存中，<br>下次执行相同的sql，直接从缓存中取。<br><strong>一级缓存失效的几种情况：</strong><br>（1）不同的SqlSession对应不同的一级缓存<br>（2）同一个SqlSession但是查询条件不同<br>（3）同一个SqlSession两次查询期间执行了任何一次增删改操作，会自动将缓存清空<br>（4）同一个SqlSession两次查询期间手动清空了缓存</p><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><p>mybatis的二级缓存默认不开启，需要设置：<br>1）全局配置文件中开启二级缓存<setting name="cacheEnabled" value="true"><br>2）需要使用二级缓存的映射文件处使用cache配置缓存<cache><br>3）POJO需要实现Serializable接口<br>注意：二级缓存在 SqlSession 关闭或提交之后才会生效<br>1)全局setting的cacheEnable：<br>配置二级缓存的开关，一级缓存一直是打开的。<br>2)select标签的useCache属性：<br>配置这个select是否使用二级缓存。一级缓存一直是使用的<br>3)sql标签的flushCache属性：<br>增删改默认flushCache=true。sql执行以后，会同时清空一级和二级缓存。<br>查询默认 flushCache=false。<br>4)sqlSession.clearCache()：只是用来清除一级缓存。</cache></setting></p><span id="more"></span><p>1.项目目录<br><img src="/2022/04/14/mybatis%E7%BC%93%E5%AD%98/1.PNG"><br>2.EmpMapper.java</p><pre><code>public interface EmpMapper &#123;    .....        //添加员工信息，将0|1--&gt;女|男    void insertEmp(Emp emp);        //根据eid所组成的字符串进行批量删除    void deleteMoreEmp(String eids);     //test cache    //根据eid查询员工信息    Emp getEmpByEid(String eid);&#125;</code></pre><p>3.EmpMapper.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.atguigu.mapper.EmpMapper&quot;&gt;    &lt;!-- 第三方缓存 --&gt;    &lt;cache type=&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;/&gt;         &lt;!-- Emp getEmpByEid(String eid); --&gt;     &lt;!--        useCache:配置这个select是否使用二级缓存       --&gt;     &lt;select id=&quot;getEmpByEid&quot; resultType=&quot;Emp&quot; useCache=&quot;true&quot;&gt;        &lt;include refid=&quot;empColumns&quot;&gt;&lt;/include&gt; where eid=#&#123;eid&#125;     &lt;/select&gt;&lt;/mapper&gt;</code></pre><p>4.TestCache.java</p><pre><code>package com.atguigu.test;import java.io.InputStream;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.Test;import com.atguigu.bean.Emp;import com.atguigu.mapper.EmpMapper;public class TestCache &#123;    @Test    public void testFirstCache() throws Exception&#123;        //测试一级缓存        //同一个SqlSession//        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();//        SqlSession sqlSession = sqlSessionFactory.openSession(true);//        EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);//        Emp emp1 = mapper.getEmpByEid(&quot;8&quot;);//        System.out.println(emp1);//        System.out.println(&quot;===================&quot;);//        Emp emp2 = mapper.getEmpByEid(&quot;8&quot;);//        System.out.println(emp2);        //        DEBUG 04-14 16:23:56,710 ==&gt;  Preparing: select eid,ename,age,sex,did from emp where eid=?   (BaseJdbcLogger.java:145) //        DEBUG 04-14 16:23:56,726 ==&gt; Parameters: 8(String)  (BaseJdbcLogger.java:145) //        DEBUG 04-14 16:23:56,738 &lt;==      Total: 1  (BaseJdbcLogger.java:145) //        Emp [eid=8, ename=小红, age=11, sex=0, dept=null]//        ===================//        Emp [eid=8, ename=小红, age=11, sex=0, dept=null]                        //不同SqlSession//        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();//        SqlSession sqlSession1 = sqlSessionFactory.openSession(true);//        EmpMapper mapper1 = sqlSession1.getMapper(EmpMapper.class);//        Emp emp1 = mapper1.getEmpByEid(&quot;8&quot;);//        System.out.println(emp1);//        //        System.out.println(&quot;===================&quot;);//        //        SqlSession sqlSession2 = sqlSessionFactory.openSession(true);//        EmpMapper mapper2 = sqlSession2.getMapper(EmpMapper.class);//        Emp emp2 = mapper2.getEmpByEid(&quot;8&quot;);//        System.out.println(emp2);        //        DEBUG 04-14 16:26:44,934 ==&gt;  Preparing: select eid,ename,age,sex,did from emp where eid=?   (BaseJdbcLogger.java:145) //        DEBUG 04-14 16:26:44,950 ==&gt; Parameters: 8(String)  (BaseJdbcLogger.java:145) //        DEBUG 04-14 16:26:44,961 &lt;==      Total: 1  (BaseJdbcLogger.java:145) //        Emp [eid=8, ename=小红, age=11, sex=0, dept=null]//        ===================//        DEBUG 04-14 16:26:44,966 ==&gt;  Preparing: select eid,ename,age,sex,did from emp where eid=?   (BaseJdbcLogger.java:145) //        DEBUG 04-14 16:26:44,966 ==&gt; Parameters: 8(String)  (BaseJdbcLogger.java:145) //        DEBUG 04-14 16:26:44,967 &lt;==      Total: 1  (BaseJdbcLogger.java:145) //        Emp [eid=8, ename=小红, age=11, sex=0, dept=null]                //同一个SqlSession两次查询期间执行了任何一次增删改操作        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();        SqlSession sqlSession1 = sqlSessionFactory.openSession(true);        EmpMapper mapper1 = sqlSession1.getMapper(EmpMapper.class);        Emp emp1 = mapper1.getEmpByEid(&quot;8&quot;);        System.out.println(emp1);                sqlSession1.clearCache();        System.out.println(&quot;===================&quot;);//        Emp emp = new Emp();//        emp.setEid(null);//        emp.setAge(25);//        emp.setEname(&quot;lisi&quot;);//        mapper1.insertEmp(emp);                EmpMapper mapper2 = sqlSession1.getMapper(EmpMapper.class);        Emp emp2 = mapper2.getEmpByEid(&quot;8&quot;);        System.out.println(emp2);//        DEBUG 04-14 16:39:56,334 ==&gt;  Preparing: select eid,ename,age,sex,did from emp where eid=?   (BaseJdbcLogger.java:145) //        DEBUG 04-14 16:39:56,350 ==&gt; Parameters: 8(String)  (BaseJdbcLogger.java:145) //        DEBUG 04-14 16:39:56,361 &lt;==      Total: 1  (BaseJdbcLogger.java:145) //        Emp [eid=8, ename=小红, age=11, sex=0, dept=null]//        ===================//        DEBUG 04-14 16:39:56,362 ==&gt;  Preparing: select eid,ename,age,sex,did from emp where eid=?   (BaseJdbcLogger.java:145) //        DEBUG 04-14 16:39:56,363 ==&gt; Parameters: 8(String)  (BaseJdbcLogger.java:145) //        DEBUG 04-14 16:39:56,364 &lt;==      Total: 1  (BaseJdbcLogger.java:145) //        Emp [eid=8, ename=小红, age=11, sex=0, dept=null]    &#125;        @Test    public void testSecondCache() throws Exception&#123;                SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();        SqlSession sqlSession = sqlSessionFactory.openSession(true);        EmpMapper mapper1 = sqlSession.getMapper(EmpMapper.class);        Emp emp1 = mapper1.getEmpByEid(&quot;8&quot;);        System.out.println(emp1);        sqlSession.commit();//二级缓存在 SqlSession 关闭或提交之后才会生效        System.out.println(&quot;====================&quot;);        EmpMapper mapper2 = sqlSession.getMapper(EmpMapper.class);        Emp emp2 = mapper2.getEmpByEid(&quot;8&quot;);        System.out.println(emp2);    &#125;        public SqlSessionFactory getSqlSessionFactory() throws Exception&#123;        InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);        return sqlSessionFactory;    &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;缓存&quot;&gt;&lt;a href=&quot;#缓存&quot; class=&quot;headerlink&quot; title=&quot;缓存&quot;&gt;&lt;/a&gt;缓存&lt;/h1&gt;&lt;h2 id=&quot;一级缓存&quot;&gt;&lt;a href=&quot;#一级缓存&quot; class=&quot;headerlink&quot; title=&quot;一级缓存&quot;&gt;&lt;/a&gt;一级缓存&lt;/h2&gt;&lt;p&gt;mybatis中的一级缓存默认开启，是SqlSession级别的，即同一个SqlSession对于一个SQL语句执行之后就会存储在缓存中，&lt;br&gt;下次执行相同的sql，直接从缓存中取。&lt;br&gt;&lt;strong&gt;一级缓存失效的几种情况：&lt;/strong&gt;&lt;br&gt;（1）不同的SqlSession对应不同的一级缓存&lt;br&gt;（2）同一个SqlSession但是查询条件不同&lt;br&gt;（3）同一个SqlSession两次查询期间执行了任何一次增删改操作，会自动将缓存清空&lt;br&gt;（4）同一个SqlSession两次查询期间手动清空了缓存&lt;/p&gt;
&lt;h2 id=&quot;二级缓存&quot;&gt;&lt;a href=&quot;#二级缓存&quot; class=&quot;headerlink&quot; title=&quot;二级缓存&quot;&gt;&lt;/a&gt;二级缓存&lt;/h2&gt;&lt;p&gt;mybatis的二级缓存默认不开启，需要设置：&lt;br&gt;1）全局配置文件中开启二级缓存&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;&gt;&lt;br&gt;2）需要使用二级缓存的映射文件处使用cache配置缓存&lt;cache&gt;&lt;br&gt;3）POJO需要实现Serializable接口&lt;br&gt;注意：二级缓存在 SqlSession 关闭或提交之后才会生效&lt;br&gt;1)全局setting的cacheEnable：&lt;br&gt;配置二级缓存的开关，一级缓存一直是打开的。&lt;br&gt;2)select标签的useCache属性：&lt;br&gt;配置这个select是否使用二级缓存。一级缓存一直是使用的&lt;br&gt;3)sql标签的flushCache属性：&lt;br&gt;增删改默认flushCache=true。sql执行以后，会同时清空一级和二级缓存。&lt;br&gt;查询默认 flushCache=false。&lt;br&gt;4)sqlSession.clearCache()：只是用来清除一级缓存。&lt;/cache&gt;&lt;/setting&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyBatis" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/"/>
    
    <category term="缓存" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/%E7%BC%93%E5%AD%98/"/>
    
    
    <category term="MyBatis" scheme="http://example.com/tags/MyBatis/"/>
    
    <category term="缓存" scheme="http://example.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis | 动态SQL</title>
    <link href="http://example.com/2022/04/09/%E5%8A%A8%E6%80%81SQL/"/>
    <id>http://example.com/2022/04/09/%E5%8A%A8%E6%80%81SQL/</id>
    <published>2022-04-09T09:33:11.000Z</published>
    <updated>2022-04-09T09:37:21.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1><p>1.项目目录<br><img src="/2022/04/09/%E5%8A%A8%E6%80%81SQL/1.PNG"><br>2.EmpMapper.java</p><pre><code>package com.atguigu.mapper;import java.util.List;import org.apache.ibatis.annotations.Param;import com.atguigu.bean.Emp;public interface EmpMapper &#123;    //根据eid,ename,age,sex多条件查询员工信息    List&lt;Emp&gt; getEmpListByMoreTJ(Emp emp);        //根据eid,ename,age,sex其中一个查询员工信息    List&lt;Emp&gt; getEmpListByChoose(Emp emp);        //添加员工信息，将0|1--&gt;女|男    void insertEmp(Emp emp);        //根据eid所组成的字符串进行批量删除    void deleteMoreEmp(String eids);        //通过list集合实现批量删除    //void deleteMoreByList(List&lt;Integer&gt; eids);    void deleteMoreByList(@Param(&quot;eids&quot;)List&lt;Integer&gt; eids);        //批量添加    void insertMoreByArray(Emp[] emps);        //批量修改    void updateMoreByArray(@Param(&quot;emps&quot;)Emp[] emps);&#125;</code></pre><p>3.EmpMapper.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.atguigu.mapper.EmpMapper&quot;&gt;    &lt;!--         &lt;sql id=&quot;&quot;&gt;&lt;/sql&gt;:设置一段SQL片段，即公共SQL，可以被当前映射文件中所有的SQL语句所访问     --&gt;    &lt;sql id=&quot;empColumns&quot;&gt;        select eid,ename,age,sex,did from emp    &lt;/sql&gt;    &lt;!-- List&lt;Emp&gt; getEmpListByMoreTJ(); --&gt;    &lt;!--        多条件查询：若页面中没有设置此条件，SQL语句中一定不能有该条件     --&gt;    &lt;!--        &lt;if test=&quot;&quot;&gt;&lt;/if&gt;:通过test表达式拼接SQL         &lt;where&gt;:添加where关键字并去掉多余的and        &lt;trim prefix=&quot;&quot; suffix=&quot;&quot; prefixOverrides=&quot;&quot; suffixOverrides=&quot;&quot;&gt;:截取并拼接        prefix:在操作的SQL语句前加入某些内容        suffix:在操作的SQL语句后加入某些内容        prefixOverrides:把操作的SQL语句前的某些内容去掉        suffixOverrides:把操作的SQL语句后的某些内容去掉     --&gt;    &lt;select id=&quot;getEmpListByMoreTJ&quot; resultType=&quot;Emp&quot;&gt;        &lt;!-- select eid,ename,age,sex,did from emp        where 1 = 1        &lt;if test=&quot;eid != null&quot;&gt;            and eid=#&#123;eid&#125;        &lt;/if&gt;        &lt;if test=&quot;ename != null and ename != &#39;&#39;&quot;&gt;            and ename=#&#123;ename&#125;        &lt;/if&gt;        &lt;if test=&quot;age != null&quot;&gt;            and age=#&#123;age&#125;        &lt;/if&gt;        &lt;if test=&quot;sex == &#39;1&#39; or sex == &#39;0&#39;&quot;&gt;            and sex=#&#123;sex&#125;        &lt;/if&gt; --&gt;                        &lt;!-- select eid,ename,age,sex,did from emp        &lt;where&gt;            &lt;if test=&quot;eid != null&quot;&gt;                and eid=#&#123;eid&#125;            &lt;/if&gt;            &lt;if test=&quot;ename != null and ename != &#39;&#39;&quot;&gt;                and ename=#&#123;ename&#125;            &lt;/if&gt;            &lt;if test=&quot;age != null&quot;&gt;                and age=#&#123;age&#125;            &lt;/if&gt;            &lt;if test=&quot;sex == &#39;1&#39; or sex == &#39;0&#39;&quot;&gt;                and sex=#&#123;sex&#125;            &lt;/if&gt;        &lt;/where&gt; --&gt;                &lt;!-- select eid,ename,age,sex,did from emp --&gt;        &lt;include refid=&quot;empColumns&quot;&gt;&lt;/include&gt;        &lt;trim prefix=&quot;where&quot; suffixOverrides=&quot;and|or&quot;&gt;            &lt;if test=&quot;eid != null&quot;&gt;                eid=#&#123;eid&#125; and            &lt;/if&gt;            &lt;if test=&quot;ename != null and ename != &#39;&#39;&quot;&gt;                ename=#&#123;ename&#125; and            &lt;/if&gt;            &lt;if test=&quot;age != null&quot;&gt;                age=#&#123;age&#125; or            &lt;/if&gt;            &lt;if test=&quot;sex == &#39;1&#39; or sex == &#39;0&#39;&quot;&gt;                sex=#&#123;sex&#125;            &lt;/if&gt;        &lt;/trim&gt;    &lt;/select&gt;        &lt;!-- List&lt;Emp&gt; getEmpListByChoose(Emp emp); --&gt;    &lt;!--        &lt;choose&gt;选择某一个when或otherwise执行            &lt;when test=&quot;&quot;&gt;&lt;/when&gt;：通过test表达式拼接SQL            .            .            .            &lt;otherwise&gt;&lt;/otherwise&gt;:当when都不符合条件，就会选择otherwise拼接SQL语句        &lt;/choose&gt;      --&gt;    &lt;select id=&quot;getEmpListByChoose&quot; resultType=&quot;Emp&quot;&gt;        select eid,ename,age,sex from emp        where         &lt;choose&gt;            &lt;when test=&quot;eid != null&quot;&gt;                eid = #&#123;eid&#125;            &lt;/when&gt;            &lt;when test=&quot;ename != null and ename != &#39;&#39;&quot;&gt;                ename = #&#123;ename&#125;            &lt;/when&gt;            &lt;when test=&quot;age != null&quot;&gt;                age = #&#123;age&#125;            &lt;/when&gt;            &lt;otherwise&gt;                sex = #&#123;sex&#125;            &lt;/otherwise&gt;        &lt;/choose&gt;    &lt;/select&gt;        &lt;!-- void insertEmp(Emp emp); --&gt;    &lt;insert id=&quot;insertEmp&quot;&gt;        insert into emp(eid,ename,age,sex) values(            null,            #&#123;ename&#125;,            #&#123;age&#125;,            &lt;choose&gt;                &lt;when test=&quot;sex == 0&quot;&gt;&#39;女&#39;&lt;/when&gt;                &lt;when test=&quot;sex == 1&quot;&gt;&#39;男&#39;&lt;/when&gt;                &lt;otherwise&gt;&#39;不详&#39;&lt;/otherwise&gt;            &lt;/choose&gt;        )    &lt;/insert&gt;        &lt;!-- void deleteMoreEmp(String eids); --&gt;    &lt;delete id=&quot;deleteMoreEmp&quot;&gt;        delete from emp where eid in ($&#123;value&#125;)    &lt;/delete&gt;        &lt;!-- void deleteMoreByList(List&lt;Integer&gt; eids); --&gt;    &lt;!--        &lt;foreach collection=&quot;eids&quot; item=&quot;&quot; close=&quot;&quot; open=&quot;&quot; separator=&quot;&quot; index=&quot;&quot;&gt;&lt;/foreach&gt;        对一个数组或集合进行遍历        collection:指定要遍历的集合或数组        item:设置别名        close:设置循环体的结束内容        open:设置循环体的开始内容        separator:设置每一次循环之间的分隔符        index:若遍历的是list集合，index代表下标；若遍历的是map结合，index代表键     --&gt;     &lt;!--        delete from emp where eid in ();        delete from emp where eid = 1 or eid = 2 or eid = 3       --&gt;    &lt;delete id=&quot;deleteMoreByList&quot;&gt;        &lt;!-- delete from emp where eid in         &lt;foreach collection=&quot;list&quot; item=&quot;eid&quot; separator=&quot;,&quot; open=&quot;(&quot; close=&quot;)&quot;&gt;            #&#123;eid&#125;        &lt;/foreach&gt; --&gt;                delete from emp where        &lt;!-- &lt;foreach collection=&quot;list&quot; item=&quot;eid&quot; separator=&quot;or&quot;&gt;            eid = #&#123;eid&#125;        &lt;/foreach&gt; --&gt;        &lt;foreach collection=&quot;eids&quot; item=&quot;eid&quot; separator=&quot;or&quot;&gt;            eid = #&#123;eid&#125;        &lt;/foreach&gt;    &lt;/delete&gt;        &lt;!--        delete:            delete from emp where eid in ();            delete from emp where eid = 1 or eid = 2 or eid = 3         select:            select * from emp where eid in ();            select * from emp where eid = 1 or eid = 2 or eid = 3         update:            把每条数据修改成相同内容            update emp set ... where eid in ();            update emp set ... where eid = 1 or eid = 2 or eid = 3             把每条数据修改成对应内容,注意必须在链接地址（url）后添加?allowMultiQueries=true            update emp set ... where eid=1;            update emp set ... where eid=2;            update emp set ... where eid=3;        insert:            insert into emp values(),(),()     --&gt;          &lt;!-- void insertMoreByArray(Emp[] emps); --&gt;     &lt;insert id=&quot;insertMoreByArray&quot;&gt;        insert into emp values        &lt;foreach collection=&quot;array&quot; item=&quot;emp&quot; separator=&quot;,&quot;&gt;            (null,#&#123;emp.ename&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,1)        &lt;/foreach&gt;     &lt;/insert&gt;          &lt;!-- void updateMoreByArray(@Param(&quot;emps&quot;)Emp[] emps); --&gt;     &lt;update id=&quot;updateMoreByArray&quot;&gt;        &lt;foreach collection=&quot;emps&quot; item=&quot;emp&quot;&gt;            update emp set ename=#&#123;emp.ename&#125;, age=#&#123;emp.age&#125;, sex=#&#123;emp.sex&#125; where eid = #&#123;emp.eid&#125;;        &lt;/foreach&gt;     &lt;/update&gt;&lt;/mapper&gt;</code></pre><p>4.TestDynamicSQl.java</p><pre><code>package com.atguigu.test;import java.io.IOException;import java.io.InputStream;import java.util.ArrayList;import java.util.List;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.Test;import com.atguigu.bean.Emp;import com.atguigu.mapper.EmpMapper;public class TestDynamicSQL &#123;    @Test    public void TestMore() throws Exception&#123;        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();        SqlSession sqlSession = sqlSessionFactory.openSession(true);        EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);                //批量删除//        List&lt;Integer&gt; eids = new ArrayList&lt;&gt;();//        eids.add(10);//        eids.add(16);//        eids.add(17);//        mapper.deleteMoreByList(eids);//只能删除id为1的员工                //批量添加        //Emp[] emps = new Emp[3];        //Emp[] emps = new Emp[]&#123;&#125;;        //Emp[] emps = &#123;&#125;;//        Emp emp1 = new Emp(null, &quot;a&quot;,23,&quot;男&quot;);//        Emp emp2 = new Emp(null, &quot;aa&quot;,23,&quot;男&quot;);//        Emp emp3 = new Emp(null, &quot;aaa&quot;,23,&quot;男&quot;);//        Emp[] emps = &#123;emp1, emp2, emp3&#125;;//        mapper.insertMoreByArray(emps);                //批量修改(需要在jdbc.url后加?allowMultiQueries=true)        //jdbc.url=jdbc:mysql://localhost:3306/ssm?allowMultiQueries=true        Emp emp1 = new Emp(20, &quot;a1&quot;,233,&quot;女&quot;);        Emp emp2 = new Emp(21, &quot;aa1&quot;,233,&quot;女&quot;);        Emp emp3 = new Emp(22, &quot;aaa1&quot;,233,&quot;女&quot;);        Emp[] emps = &#123;emp1, emp2, emp3&#125;;        mapper.updateMoreByArray(emps);    &#125;        @Test    public void TestChoose() throws Exception&#123;        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();        SqlSession sqlSession = sqlSessionFactory.openSession(true);        EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);                //测试1        //Emp emp = new Emp();//        emp.setEid(1);//        emp.setEname(&quot;张三&quot;);//        emp.setAge(12);        //emp.setSex(&quot;1&quot;);//        List&lt;Emp&gt; list = mapper.getEmpListByChoose(emp);//        for (Emp e : list) &#123;//            System.out.println(e);//        &#125;                //测试2//        Emp emp = new Emp();//        emp.setEname(&quot;张三&quot;);//        emp.setAge(12);    //        emp.setSex(&quot;1&quot;);//        mapper.insertEmp(emp);                Emp emp = new Emp();        emp.setEname(&quot;张三三&quot;);        emp.setAge(12);            emp.setSex(&quot;123&quot;);        mapper.insertEmp(emp);    &#125;        @Test    public void TestIf() throws Exception&#123;        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();        SqlSession sqlSession = sqlSessionFactory.openSession(true);        EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);        Emp emp = new Emp();        //emp.setEid(1);        emp.setEname(&quot;张三&quot;);        emp.setAge(12);        //emp.setSex(&quot;1&quot;);        List&lt;Emp&gt; list = mapper.getEmpListByMoreTJ(emp);        for (Emp e : list) &#123;            System.out.println(e);        &#125;    &#125;        public SqlSessionFactory getSqlSessionFactory() throws Exception&#123;        InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);        return sqlSessionFactory;    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;动态SQL&quot;&gt;&lt;a href=&quot;#动态SQL&quot; class=&quot;headerlink&quot; title=&quot;动态SQL&quot;&gt;&lt;/a&gt;动态SQL&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/04/09/%E5%8A%A8%E6%80%81SQL/1.PN</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyBatis" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/"/>
    
    <category term="动态SQL" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/%E5%8A%A8%E6%80%81SQL/"/>
    
    
    <category term="MyBatis" scheme="http://example.com/tags/MyBatis/"/>
    
    <category term="动态SQL" scheme="http://example.com/tags/%E5%8A%A8%E6%80%81SQL/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis | 一对多自定义映射、分步查询和延迟加载</title>
    <link href="http://example.com/2022/04/06/%E4%B8%80%E5%AF%B9%E5%A4%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E6%98%A0%E5%B0%84%E3%80%81%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2%E5%92%8C%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/"/>
    <id>http://example.com/2022/04/06/%E4%B8%80%E5%AF%B9%E5%A4%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E6%98%A0%E5%B0%84%E3%80%81%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2%E5%92%8C%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/</id>
    <published>2022-04-07T02:13:19.000Z</published>
    <updated>2022-04-07T02:18:53.614Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一对多自定义映射、分步查询和延迟加载"><a href="#一对多自定义映射、分步查询和延迟加载" class="headerlink" title="一对多自定义映射、分步查询和延迟加载"></a>一对多自定义映射、分步查询和延迟加载</h1><p>1.项目目录<br><img src="/2022/04/06/%E4%B8%80%E5%AF%B9%E5%A4%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E6%98%A0%E5%B0%84%E3%80%81%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2%E5%92%8C%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/1.PNG"><br>2.Dept.java<br>在”一”方添加List&lt;多&gt;</p><pre><code>package com.atguigu.bean;import java.util.List;public class Dept &#123;    private Integer did;    private String dname;    private List&lt;Emp&gt; emps;        public List&lt;Emp&gt; getEmps() &#123;        return emps;    &#125;    public void setEmps(List&lt;Emp&gt; emps) &#123;        this.emps = emps;    &#125;    public Integer getDid() &#123;        return did;    &#125;    public void setDid(Integer did) &#123;        this.did = did;    &#125;    public String getDname() &#123;        return dname;    &#125;    public void setDname(String dname) &#123;        this.dname = dname;    &#125;    @Override    public String toString() &#123;        return &quot;Dept [did=&quot; + did + &quot;, dname=&quot; + dname + &quot;, emps=&quot; + emps + &quot;]&quot;;    &#125;&#125;</code></pre><p>3.EmpDeptMapper.java</p><pre><code>package com.atguigu.mapper;import java.util.List;import com.atguigu.bean.Dept;import com.atguigu.bean.Emp;public interface EmpDeptMapper &#123;    List&lt;Emp&gt; getAllEmp();        Emp getEmpStep(String eid);        Dept getDeptEmpsByDid(String did);        Dept getOnlyDeptByDid(String did);//测试一对多        List&lt;Emp&gt; getEmpListByDid(String did);//测试一对多&#125;</code></pre><p>4.EmpDeptMapper.xml<br>在映射文件中做以下配置：</p><pre><code>&lt;resultMap type=&quot;Dept&quot; id=&quot;deptMapStep&quot;&gt;    &lt;id column=&quot;did&quot; property=&quot;did&quot; /&gt;    &lt;result column=&quot;dname&quot; property=&quot;dname&quot; /&gt;    &lt;!-- &lt;collection property=&quot;emps&quot; select=&quot;com.atguigu.mapper.EmpDeptMapper.getEmpListByDid&quot; column=&quot;did&quot;&gt;&lt;/collection&gt; --&gt;    &lt;!--         fetchType:            lazy 延迟加载            eager 不进行延迟加载     --&gt;    &lt;collection property=&quot;emps&quot; select=&quot;com.atguigu.mapper.EmpDeptMapper.getEmpListByDid&quot; column=&quot;&#123;did=did&#125;&quot; fetchType=&quot;lazy&quot;&gt;&lt;/collection&gt;&lt;/resultMap&gt;&lt;!-- Dept getOnlyDeptByDid(String did); --&gt;&lt;select id=&quot;getOnlyDeptByDid&quot; resultMap=&quot;deptMapStep&quot;&gt;    select did,dname from dept where did=#&#123;did&#125;&lt;/select&gt;&lt;!-- List&lt;Emp&gt; getEmpListByDid(String did); --&gt;&lt;select id=&quot;getEmpListByDid&quot; resultType=&quot;Emp&quot;&gt;    select eid,ename,age,sex from emp where did = #&#123;did&#125;&lt;/select&gt;</code></pre><p>5.TestEmpDept.java</p><pre><code>package com.atguigu.test;import java.io.IOException;import java.io.InputStream;import java.util.List;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import com.atguigu.bean.Dept;import com.atguigu.bean.Emp;import com.atguigu.mapper.EmpDeptMapper;public class TestEmpDept &#123;    public static void main(String[] args) throws IOException &#123;        InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);        SqlSession sqlSession = sqlSessionFactory.openSession(true);        EmpDeptMapper mapper = sqlSession.getMapper(EmpDeptMapper.class);        //        List&lt;Emp&gt; empList = mapper.getAllEmp();//        System.out.println(empList);        //        Emp emp = mapper.getEmpStep(&quot;3&quot;);//        System.out.println(emp.getEname());//        System.out.println(emp.getDept());        //        Dept dept = mapper.getDeptEmpsByDid(&quot;2&quot;);//        System.out.println(dept);                Dept dept = mapper.getOnlyDeptByDid(&quot;3&quot;);        //System.out.println(dept);        System.out.println(dept.getDname());        System.out.println(dept.getEmps());    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一对多自定义映射、分步查询和延迟加载&quot;&gt;&lt;a href=&quot;#一对多自定义映射、分步查询和延迟加载&quot; class=&quot;headerlink&quot; title=&quot;一对多自定义映射、分步查询和延迟加载&quot;&gt;&lt;/a&gt;一对多自定义映射、分步查询和延迟加载&lt;/h1&gt;&lt;p&gt;1.项目目录</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyBatis" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/"/>
    
    <category term="一对多自定义映射、分步查询和延迟加载" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/%E4%B8%80%E5%AF%B9%E5%A4%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E6%98%A0%E5%B0%84%E3%80%81%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2%E5%92%8C%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/"/>
    
    
    <category term="MyBatis" scheme="http://example.com/tags/MyBatis/"/>
    
    <category term="自定义映射" scheme="http://example.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%98%A0%E5%B0%84/"/>
    
    <category term="分步查询" scheme="http://example.com/tags/%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2/"/>
    
    <category term="延迟加载" scheme="http://example.com/tags/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis | 分步查询、分步查询延迟加载</title>
    <link href="http://example.com/2022/04/05/%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2%E3%80%81%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/"/>
    <id>http://example.com/2022/04/05/%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2%E3%80%81%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/</id>
    <published>2022-04-06T01:53:04.000Z</published>
    <updated>2022-04-06T02:32:32.798Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分步查询、分步查询延迟加载"><a href="#分步查询、分步查询延迟加载" class="headerlink" title="分步查询、分步查询延迟加载"></a>分步查询、分步查询延迟加载</h1><p>项目目录<br><img src="/2022/04/05/%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2%E3%80%81%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/1.PNG"><br>1.mybatis-config.xml<br>分步查询延迟加载需要在MyBatis核心配置文件中做以下配置：</p><pre><code>&lt;settings&gt;    &lt;!-- 开启延迟加载 --&gt;    &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;&gt;&lt;/setting&gt;    &lt;!-- 是否查询所有数据 --&gt;    &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;&gt;&lt;/setting&gt;&lt;/settings&gt;</code></pre><p>2.DeptMapper.java</p><pre><code>public interface DeptMapper &#123;    Dept getDeptByDid(String did);&#125;</code></pre><p>3.DeptMapper.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.atguigu.mapper.DeptMapper&quot;&gt;    &lt;select id=&quot;getDeptByDid&quot; resultType=&quot;Dept&quot;&gt;        select did,dname from dept where did=#&#123;did&#125;    &lt;/select&gt;&lt;/mapper&gt;</code></pre><p>4.EmpDeptMapper.java</p><pre><code>public interface EmpDeptMapper &#123;    List&lt;Emp&gt; getAllEmp();        Emp getEmpStep(String eid);//分步查询&#125;</code></pre><p>5.EmpDeptMapper.xml<br>添加查询语句</p><pre><code>&lt;resultMap type=&quot;Emp&quot; id=&quot;empMapStep&quot;&gt;    &lt;id column=&quot;eid&quot; property=&quot;eid&quot;/&gt;    &lt;result column=&quot;ename&quot; property=&quot;ename&quot;/&gt;    &lt;result column=&quot;age&quot; property=&quot;age&quot;/&gt;    &lt;result column=&quot;sex&quot; property=&quot;sex&quot;/&gt;    &lt;!--        select:分步查询的SQL的id，即接口全限定名.方法名或者namespace.SQL的id        column:分步查询的条件，注意：此条件必须是从数据库查询过的      --&gt;    &lt;association property=&quot;dept&quot; select=&quot;com.atguigu.mapper.DeptMapper.getDeptByDid&quot; column=&quot;did&quot;&gt;&lt;/association&gt;&lt;/resultMap&gt;&lt;!-- Emp getEmpStep(String eid); --&gt;&lt;select id=&quot;getEmpStep&quot; resultMap=&quot;empMapStep&quot;&gt;    select eid,ename,age,sex,did from emp where eid = #&#123;eid&#125;&lt;/select&gt;</code></pre><p>6.TestEmpDept.java</p><pre><code>public class TestEmpDept &#123;    public static void main(String[] args) throws IOException &#123;        InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);        SqlSession sqlSession = sqlSessionFactory.openSession(true);        EmpDeptMapper mapper = sqlSession.getMapper(EmpDeptMapper.class);                Emp emp = mapper.getEmpStep(&quot;3&quot;);        System.out.println(emp.getEname());        System.out.println(emp.getDept());    &#125;&#125;</code></pre><p>7.运行结果<br>执行emp.getEname()运行结果为前四行<br>再执行emp.getDept()运行结果为八行</p><pre><code>DEBUG 04-06 09:48:10,087 ==&gt;  Preparing: select eid,ename,age,sex,did from emp where eid = ?   (BaseJdbcLogger.java:145) DEBUG 04-06 09:48:10,102 ==&gt; Parameters: 3(String)  (BaseJdbcLogger.java:145) DEBUG 04-06 09:48:10,147 &lt;==      Total: 1  (BaseJdbcLogger.java:145) 王五DEBUG 04-06 09:48:10,147 ==&gt;  Preparing: select did,dname from dept where did=?   (BaseJdbcLogger.java:145) DEBUG 04-06 09:48:10,148 ==&gt; Parameters: 3(Integer)  (BaseJdbcLogger.java:145) DEBUG 04-06 09:48:10,149 &lt;==      Total: 1  (BaseJdbcLogger.java:145) Dept [did=3, dname=研发部]</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分步查询、分步查询延迟加载&quot;&gt;&lt;a href=&quot;#分步查询、分步查询延迟加载&quot; class=&quot;headerlink&quot; title=&quot;分步查询、分步查询延迟加载&quot;&gt;&lt;/a&gt;分步查询、分步查询延迟加载&lt;/h1&gt;&lt;p&gt;项目目录&lt;br&gt;&lt;img src=&quot;/2022/04</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyBatis" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/"/>
    
    <category term="分步查询、分步查询延迟加载" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2%E3%80%81%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/"/>
    
    
    <category term="MyBatis" scheme="http://example.com/tags/MyBatis/"/>
    
    <category term="分步查询" scheme="http://example.com/tags/%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2/"/>
    
    <category term="分步查询延迟加载" scheme="http://example.com/tags/%E5%88%86%E6%AD%A5%E6%9F%A5%E8%AF%A2%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>python | 统计字符串中各个字符出现的次数并返回出现次数最多的字符</title>
    <link href="http://example.com/2022/04/05/%E7%BB%9F%E8%AE%A1%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%90%84%E4%B8%AA%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E5%B9%B6%E8%BF%94%E5%9B%9E%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%97%E7%AC%A6/"/>
    <id>http://example.com/2022/04/05/%E7%BB%9F%E8%AE%A1%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%90%84%E4%B8%AA%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E5%B9%B6%E8%BF%94%E5%9B%9E%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%97%E7%AC%A6/</id>
    <published>2022-04-06T00:50:00.000Z</published>
    <updated>2022-04-06T01:04:22.628Z</updated>
    
    <content type="html"><![CDATA[<h1 id="找出字符串中出现次数最多的字符"><a href="#找出字符串中出现次数最多的字符" class="headerlink" title="找出字符串中出现次数最多的字符"></a>找出字符串中出现次数最多的字符</h1><pre><code>string = &quot;abcdaab&quot;word_frequency = dict()for ch in string:    if ch not in word_frequency.keys():        word_frequency[ch] = 1    else:        word_frequency[ch] += 1print(word_frequency)print(max(word_frequency, key=word_frequency.get))</code></pre><p><a href="https://blog.csdn.net/weixin_42444693/article/details/104203479?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&utm_relevant_index=1">参考资料</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;找出字符串中出现次数最多的字符&quot;&gt;&lt;a href=&quot;#找出字符串中出现次数最多的字符&quot; class=&quot;headerlink&quot; title=&quot;找出字符串中出现次数最多的字符&quot;&gt;&lt;/a&gt;找出字符串中出现次数最多的字符&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;string = &amp;</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="基础" scheme="http://example.com/categories/python/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="找出字符串中出现次数最多的字符" scheme="http://example.com/categories/python/%E5%9F%BA%E7%A1%80/%E6%89%BE%E5%87%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%97%E7%AC%A6/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="找出字符串中出现次数最多的字符" scheme="http://example.com/tags/%E6%89%BE%E5%87%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis | 多对一查询自定义映射</title>
    <link href="http://example.com/2022/04/03/%E5%A4%9A%E5%AF%B9%E4%B8%80%E6%9F%A5%E8%AF%A2%E8%87%AA%E5%AE%9A%E4%B9%89%E6%98%A0%E5%B0%84/"/>
    <id>http://example.com/2022/04/03/%E5%A4%9A%E5%AF%B9%E4%B8%80%E6%9F%A5%E8%AF%A2%E8%87%AA%E5%AE%9A%E4%B9%89%E6%98%A0%E5%B0%84/</id>
    <published>2022-04-03T09:38:59.000Z</published>
    <updated>2022-04-03T09:44:07.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多对一查询自定义映射"><a href="#多对一查询自定义映射" class="headerlink" title="多对一查询自定义映射"></a>多对一查询自定义映射</h1><p>1.项目目录<br><img src="/2022/04/03/%E5%A4%9A%E5%AF%B9%E4%B8%80%E6%9F%A5%E8%AF%A2%E8%87%AA%E5%AE%9A%E4%B9%89%E6%98%A0%E5%B0%84/1.PNG"><br>2.Emp.java</p><pre><code>package com.atguigu.bean;public class Emp &#123;    private Integer eid;    private String ename;    private Integer age;    private String sex;    private Dept dept;            public Dept getDept() &#123;        return dept;    &#125;    public void setDept(Dept dept) &#123;        this.dept = dept;    &#125;    public Integer getEid() &#123;        return eid;    &#125;    public void setEid(Integer eid) &#123;        this.eid = eid;    &#125;    public String getEname() &#123;        return ename;    &#125;    public void setEname(String ename) &#123;        this.ename = ename;    &#125;    public Integer getAge() &#123;        return age;    &#125;    public void setAge(Integer age) &#123;        this.age = age;    &#125;    public String getSex() &#123;        return sex;    &#125;    public void setSex(String sex) &#123;        this.sex = sex;    &#125;        @Override    public String toString() &#123;        return &quot;Emp [eid=&quot; + eid + &quot;, ename=&quot; + ename + &quot;, age=&quot; + age + &quot;, sex=&quot; + sex + &quot;, dept=&quot; + dept + &quot;]&quot;;    &#125;    public Emp(Integer eid, String ename, Integer age, String sex) &#123;        super();        this.eid = eid;        this.ename = ename;        this.age = age;        this.sex = sex;    &#125;    public Emp() &#123;        super();        // TODO Auto-generated constructor stub    &#125;&#125;</code></pre><p>3.Dept.java</p><pre><code>package com.atguigu.bean;public class Dept &#123;    private Integer did;    private String dname;    public Integer getDid() &#123;        return did;    &#125;    public void setDid(Integer did) &#123;        this.did = did;    &#125;    public String getDname() &#123;        return dname;    &#125;    public void setDname(String dname) &#123;        this.dname = dname;    &#125;    @Override    public String toString() &#123;        return &quot;Dept [did=&quot; + did + &quot;, dname=&quot; + dname + &quot;]&quot;;    &#125;    &#125;</code></pre><p>4.EmpDeptMapper.java</p><pre><code>package com.atguigu.mapper;import java.util.List;import com.atguigu.bean.Emp;public interface EmpDeptMapper &#123;    List&lt;Emp&gt; getAllEmp();&#125;</code></pre><p>5.EmpDeptMapper.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.atguigu.mapper.EmpDeptMapper&quot;&gt;        &lt;!-- &lt;select id=&quot;getAllEmp&quot; resultType=&quot;Emp&quot;&gt;        select e.eid,e.ename,e.age,e.sex,e.did,d.dname from emp e left join dept d on e.did=d.did                    查询结果：            [Emp [eid=1, ename=张三, age=12, sex=男, dept=null],             不能够查询出员工所对应的部门，需要进行自定义映射            &lt;/select&gt; --&gt;        &lt;!-- 自定义映射-第一种方式 --&gt;    &lt;!-- &lt;resultMap type=&quot;Emp&quot; id=&quot;empMap&quot;&gt;        &lt;id column=&quot;eid&quot; property=&quot;eid&quot;/&gt;        &lt;result column=&quot;ename&quot; property=&quot;ename&quot;/&gt;        &lt;result column=&quot;age&quot; property=&quot;age&quot;/&gt;        &lt;result column=&quot;sex&quot; property=&quot;sex&quot;/&gt;        &lt;result column=&quot;did&quot; property=&quot;dept.did&quot;/&gt;        &lt;result column=&quot;dname&quot; property=&quot;dept.dname&quot;/&gt;    &lt;/resultMap&gt; --&gt;    &lt;!--        &lt;resultMap&gt;:自定义映射，处理复杂的表关系        &lt;id/&gt;:设置主键的映射关系，column设置字段名，property设置属性名        &lt;result/&gt;:设置非主键的映射关系， column设置字段名，property设置属性名     --&gt;          &lt;!-- 自定义映射-第二种方式 --&gt;     &lt;resultMap type=&quot;Emp&quot; id=&quot;empMap&quot;&gt;        &lt;id column=&quot;eid&quot; property=&quot;eid&quot;/&gt;        &lt;result column=&quot;ename&quot; property=&quot;ename&quot;/&gt;        &lt;result column=&quot;age&quot; property=&quot;age&quot;/&gt;        &lt;result column=&quot;sex&quot; property=&quot;sex&quot;/&gt;        &lt;association property=&quot;dept&quot; javaType=&quot;Dept&quot;&gt;            &lt;id column=&quot;did&quot; property=&quot;did&quot;/&gt;            &lt;result column=&quot;dname&quot; property=&quot;dname&quot;/&gt;        &lt;/association&gt;     &lt;/resultMap&gt;        &lt;!-- List&lt;Emp&gt; getAllEmp(); --&gt;    &lt;select id=&quot;getAllEmp&quot; resultMap=&quot;empMap&quot;&gt;        &lt;!-- select * from emp e, dept d where e.did = d.did --&gt;        select e.eid,e.ename,e.age,e.sex,e.did,d.dname from emp e left join dept d on e.did=d.did    &lt;/select&gt;&lt;/mapper&gt;</code></pre><p>6.TestEmpDept.java</p><pre><code>package com.atguigu.test;import java.io.IOException;import java.io.InputStream;import java.util.List;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import com.atguigu.bean.Emp;import com.atguigu.mapper.EmpDeptMapper;public class TestEmpDept &#123;    public static void main(String[] args) throws IOException &#123;        InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);        SqlSession sqlSession = sqlSessionFactory.openSession(true);        EmpDeptMapper mapper = sqlSession.getMapper(EmpDeptMapper.class);                List&lt;Emp&gt; empList = mapper.getAllEmp();        System.out.println(empList);    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;多对一查询自定义映射&quot;&gt;&lt;a href=&quot;#多对一查询自定义映射&quot; class=&quot;headerlink&quot; title=&quot;多对一查询自定义映射&quot;&gt;&lt;/a&gt;多对一查询自定义映射&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/04/03/%E5%A4</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyBatis" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/"/>
    
    <category term="多对一查询自定义映射" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/%E5%A4%9A%E5%AF%B9%E4%B8%80%E6%9F%A5%E8%AF%A2%E8%87%AA%E5%AE%9A%E4%B9%89%E6%98%A0%E5%B0%84/"/>
    
    
    <category term="MyBatis" scheme="http://example.com/tags/MyBatis/"/>
    
    <category term="自定义映射" scheme="http://example.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%98%A0%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis | 获取参数值的两种方式</title>
    <link href="http://example.com/2022/04/02/MyBatis%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E5%80%BC%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2022/04/02/MyBatis%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E5%80%BC%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2022-04-02T13:00:31.000Z</published>
    <updated>2022-04-03T04:10:52.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis获取参数值的两种方式"><a href="#MyBatis获取参数值的两种方式" class="headerlink" title="MyBatis获取参数值的两种方式"></a>MyBatis获取参数值的两种方式</h1><p>1.${}:insert into emp values(null,admin,23,男)<br>Statement:<br>    必须使用字符串拼接的方式操作SQL，一定要注意单引号问题<br>    不能防止SQL注入<br>2.#{}:insert into emp values(null,?,?,?)<br>PreparedStatement：<br>    可以使用通配符操作SQL，因为在为String赋值时可以自动加单引号，因此不需要注意单引号问题<br>    <strong>可以防止SQL注入</strong><br>使用建议：**建议使用#{}**，在特殊情况下，需要使用${}，例如模糊查询和批量删除</p><h2 id="不同的参数类型，-和-的不同取值方式："><a href="#不同的参数类型，-和-的不同取值方式：" class="headerlink" title="不同的参数类型，${}和#{}的不同取值方式："></a>不同的参数类型，${}和#{}的不同取值方式：</h2><p>1、当传输参数为单个String或基本数据类型和其包装类型<br>#{}：可以以任意的名字获取参数值<br>${}：只能以${value}或${_parameter}获取<br>2、当传输参数为JavaBean时<br>#{}和${}都可以通过属性名直接获取属性值，但是要注意${}的单引号问题<br>3、当传输多个参数时，mybatis会默认将这些参数放在map集合中<br>两种方式：<br>（1）键为0，1，2，3…N-1,以参数为值<br>（2）键为param1,param2,param3…paramN，以参数为值<br>#{}:#{0}、#{1}；#{param1}、#{param2}<br>${}:#{param1}、{param2}，但是要注意${}的单引号问题<br>4、当传输Map参数时<br>#{}和${}都可以通过键的名字直接获取值，但是要注意${}的单引号问题<br>5、命名参数<br>可以通过@Param(“key”)为map集合指定键的名字<br>Emp getEmpByEidAndEnameByParam(@Param(“eid”)String eid, @Param(“ename”)String ename);<br>6、当传输参数为List或Array,mybatis会将List或Array放在map中<br>List以list为键，Array以array为键</p><h2 id="Statement与PreparedStatement"><a href="#Statement与PreparedStatement" class="headerlink" title="Statement与PreparedStatement"></a>Statement与PreparedStatement</h2><pre><code>package com.atguigu.test;import java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.Statement;import com.atguigu.bean.Emp;public class TestJDBC &#123;    public static void main(String[] args) throws Exception &#123;        Class.forName(&quot;&quot;);        Connection conn = DriverManager.getConnection(&quot;&quot;,&quot;&quot;,&quot;&quot;);        //可以使用通配符赋值        PreparedStatement ps = conn.prepareStatement(&quot;insert into emp values(null, ?, ?,?&quot;);        ps.setString(1, &quot;root&quot;);        ps.setString(2, &quot;23&quot;);        ps.setString(3, &quot;男&quot;);        ps.executeUpdate();                Statement statement = conn.createStatement();        Emp emp = new Emp(null, &quot;a&quot;, 1, &quot;b&quot;);        //不可以使用通配符赋值        statement.executeUpdate(&quot;insert into emp values(null, &#39;&quot;+emp.getEname()+&quot;&#39;, &quot;+emp.getAge()+&quot;, &#39;&quot;+emp.getSex()+&quot;&#39;)&quot;);    &#125;&#125;</code></pre><span id="more"></span><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>1.项目目录<br><img src="/2022/04/02/MyBatis%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E5%80%BC%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/1.PNG"><br>2.ParamMapper.java</p><pre><code>package com.atguigu.mapper;import java.util.List;import java.util.Map;import org.apache.ibatis.annotations.Param;import com.atguigu.bean.Emp;public interface ParamMapper &#123;    //添加员工信息    void insertEmp(Emp emp);        //获取名字中包含以name开头且后面多一个任意字符的员工信息    List&lt;Emp&gt; getAllEmp(String name);            //删除名字中包含name的员工信息    void deleteEmp(String name);        //根据eid获取员工信息    Emp getEmpByEid(String eid);        //根据eid和ename获取员工信息    Emp getEmpByEidAndEname(String eid, String ename);        //根据map查询员工信息    Emp getEmpByMap(Map&lt;String, Object&gt; map);        //根据eid和ename获取员工信息    Emp getEmpByEidAndEnameByParam(@Param(&quot;eid&quot;)String eid, @Param(&quot;ename&quot;)String ename);&#125;</code></pre><p>3.ParamMapper.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.atguigu.mapper.ParamMapper&quot;&gt;    &lt;!--        useGeneratedKeys:可以使用自动生成的主键         keyProperty:将自动生成的主键赋值给传递过来的参数的哪一个属性     --&gt;    &lt;insert id=&quot;insertEmp&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;eid&quot;&gt;        &lt;!-- insert into emp values(null, #&#123;ename&#125;, #&#123;age&#125;, #&#123;sex&#125;) --&gt;                insert into emp values(null, &#39;$&#123;ename&#125;&#39;, $&#123;age&#125;, &#39;$&#123;sex&#125;&#39;)    &lt;/insert&gt;        &lt;select id=&quot;getAllEmp&quot; resultType=&quot;Emp&quot;&gt;        &lt;!-- 模糊查询 --&gt;        select eid,ename,age,sex from emp where ename like &#39;$&#123;value&#125;_&#39;    &lt;/select&gt;        &lt;delete id=&quot;deleteEmp&quot;&gt;        &lt;!-- 批量删除 --&gt;        delete from emp where ename like &#39;%$&#123;value&#125;%&#39;    &lt;/delete&gt;        &lt;!-- Emp getEmpByEid(String eid); --&gt;    &lt;select id=&quot;getEmpByEid&quot; resultType=&quot;Emp&quot;&gt;        &lt;!-- select eid,ename,age,sex from emp where eid=#&#123;eid&#125; --&gt;                &lt;!-- 参数与接口中的参数不一致也可以 --&gt;        &lt;!-- select eid,ename,age,sex from emp where eid=#&#123;eids&#125; --&gt;                &lt;!--             报错：            org.apache.ibatis.reflection.ReflectionException:             There is no getter for property named &#39;eid&#39; in             &#39;class java.lang.String&#39;         --&gt;        &lt;!-- select eid,ename,age,sex from emp where eid = $&#123;eid&#125; --&gt;                &lt;!-- 成功 --&gt;        &lt;!-- select eid,ename,age,sex from emp where eid = $&#123;value&#125; --&gt;                select eid,ename,age,sex from emp where eid = $&#123;_parameter&#125;    &lt;/select&gt;        &lt;!-- Emp getEmpByEidAndEname(String eid, String ename); --&gt;    &lt;select id=&quot;getEmpByEidAndEname&quot; resultType=&quot;Emp&quot;&gt;        &lt;!-- select eid,ename,age,sex from emp where eid=#&#123;0&#125; and ename=#&#123;1&#125; --&gt;        &lt;!-- select eid,ename,age,sex from emp where eid=#&#123;param1&#125; and ename=#&#123;param2&#125; --&gt;                select eid,ename,age,sex from emp where eid=$&#123;param1&#125; and ename=&#39;$&#123;param2&#125;&#39;        &lt;!-- select eid,ename,age,sex from emp where eid=$&#123;0&#125; and ename=$&#123;1&#125; --&gt;&lt;!-- 不可行 --&gt;    &lt;/select&gt;        &lt;!-- Emp getEmpByMap(Map&lt;String, Object&gt; map); --&gt;    &lt;select id=&quot;getEmpByMap&quot; resultType=&quot;Emp&quot;&gt;        select eid,ename,age,sex from emp where eid=$&#123;eid&#125; and ename=&#39;$&#123;ename&#125;&#39;    &lt;/select&gt;        &lt;!-- Emp getEmpByEidAndEnameByParam(@Param(&quot;eid&quot;)String eid, @Param(&quot;ename&quot;)String ename); --&gt;    &lt;select id=&quot;getEmpByEidAndEnameByParam&quot; resultType=&quot;Emp&quot;&gt;        select eid,ename,age,sex from emp where eid=#&#123;eid&#125; and ename=#&#123;ename&#125;    &lt;/select&gt;    &lt;/mapper&gt;</code></pre><p>4.TestParam.java</p><pre><code>package com.atguigu.test;import java.io.IOException;import java.io.InputStream;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.Test;import com.atguigu.bean.Emp;import com.atguigu.mapper.ParamMapper;public class TestParam &#123;    @Test    public void testCRUD() throws IOException&#123;        InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);//        SqlSession sqlSession = sqlSessionFactory.openSession();//需要手动处理事务        SqlSession sqlSession = sqlSessionFactory.openSession(true);//自动处理事务        ParamMapper mapper = sqlSession.getMapper(ParamMapper.class);                //获取名字中包含admin的所有员工信息(模糊查询)//        List&lt;Emp&gt; allEmp = mapper.getAllEmp(&quot;admin&quot;);//        System.out.println(allEmp);                //删除名字中包含admin的所有员工信息(批量删除)//        mapper.deleteEmp(&quot;admin&quot;);                //        Emp emp = new Emp(null, &quot;admin&quot;, 23, &quot;男&quot;);//        mapper.insertEmp(emp);//        System.out.println(emp.getEid());        //        Emp emp = mapper.getEmpByEid(&quot;1&quot;);//        System.out.println(emp);        //        Emp emp = mapper.getEmpByEidAndEname(&quot;1&quot;, &quot;张三&quot;);//        System.out.println(emp);        //        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();//        map.put(&quot;eid&quot;, &quot;1&quot;);//        map.put(&quot;ename&quot;, &quot;张三&quot;);//        Emp emp = mapper.getEmpByMap(map);//        System.out.println(emp);                Emp emp = mapper.getEmpByEidAndEnameByParam(&quot;1&quot;, &quot;张三&quot;);        System.out.println(emp);    &#125;&#125; </code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;MyBatis获取参数值的两种方式&quot;&gt;&lt;a href=&quot;#MyBatis获取参数值的两种方式&quot; class=&quot;headerlink&quot; title=&quot;MyBatis获取参数值的两种方式&quot;&gt;&lt;/a&gt;MyBatis获取参数值的两种方式&lt;/h1&gt;&lt;p&gt;1.${}:insert into emp values(null,admin,23,男)&lt;br&gt;Statement:&lt;br&gt;    必须使用字符串拼接的方式操作SQL，一定要注意单引号问题&lt;br&gt;    不能防止SQL注入&lt;br&gt;2.#{}:insert into emp values(null,?,?,?)&lt;br&gt;PreparedStatement：&lt;br&gt;    可以使用通配符操作SQL，因为在为String赋值时可以自动加单引号，因此不需要注意单引号问题&lt;br&gt;    &lt;strong&gt;可以防止SQL注入&lt;/strong&gt;&lt;br&gt;使用建议：**建议使用#{}**，在特殊情况下，需要使用${}，例如模糊查询和批量删除&lt;/p&gt;
&lt;h2 id=&quot;不同的参数类型，-和-的不同取值方式：&quot;&gt;&lt;a href=&quot;#不同的参数类型，-和-的不同取值方式：&quot; class=&quot;headerlink&quot; title=&quot;不同的参数类型，${}和#{}的不同取值方式：&quot;&gt;&lt;/a&gt;不同的参数类型，${}和#{}的不同取值方式：&lt;/h2&gt;&lt;p&gt;1、当传输参数为单个String或基本数据类型和其包装类型&lt;br&gt;#{}：可以以任意的名字获取参数值&lt;br&gt;${}：只能以${value}或${_parameter}获取&lt;br&gt;2、当传输参数为JavaBean时&lt;br&gt;#{}和${}都可以通过属性名直接获取属性值，但是要注意${}的单引号问题&lt;br&gt;3、当传输多个参数时，mybatis会默认将这些参数放在map集合中&lt;br&gt;两种方式：&lt;br&gt;（1）键为0，1，2，3…N-1,以参数为值&lt;br&gt;（2）键为param1,param2,param3…paramN，以参数为值&lt;br&gt;#{}:#{0}、#{1}；#{param1}、#{param2}&lt;br&gt;${}:#{param1}、{param2}，但是要注意${}的单引号问题&lt;br&gt;4、当传输Map参数时&lt;br&gt;#{}和${}都可以通过键的名字直接获取值，但是要注意${}的单引号问题&lt;br&gt;5、命名参数&lt;br&gt;可以通过@Param(“key”)为map集合指定键的名字&lt;br&gt;Emp getEmpByEidAndEnameByParam(@Param(“eid”)String eid, @Param(“ename”)String ename);&lt;br&gt;6、当传输参数为List或Array,mybatis会将List或Array放在map中&lt;br&gt;List以list为键，Array以array为键&lt;/p&gt;
&lt;h2 id=&quot;Statement与PreparedStatement&quot;&gt;&lt;a href=&quot;#Statement与PreparedStatement&quot; class=&quot;headerlink&quot; title=&quot;Statement与PreparedStatement&quot;&gt;&lt;/a&gt;Statement与PreparedStatement&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;package com.atguigu.test;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.Statement;

import com.atguigu.bean.Emp;

public class TestJDBC &amp;#123;
    public static void main(String[] args) throws Exception &amp;#123;
        Class.forName(&amp;quot;&amp;quot;);
        Connection conn = DriverManager.getConnection(&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;);
        //可以使用通配符赋值
        PreparedStatement ps = conn.prepareStatement(&amp;quot;insert into emp values(null, ?, ?,?&amp;quot;);
        ps.setString(1, &amp;quot;root&amp;quot;);
        ps.setString(2, &amp;quot;23&amp;quot;);
        ps.setString(3, &amp;quot;男&amp;quot;);
        ps.executeUpdate();
        
        Statement statement = conn.createStatement();
        Emp emp = new Emp(null, &amp;quot;a&amp;quot;, 1, &amp;quot;b&amp;quot;);
        //不可以使用通配符赋值
        statement.executeUpdate(&amp;quot;insert into emp values(null, &amp;#39;&amp;quot;+emp.getEname()+&amp;quot;&amp;#39;, &amp;quot;+emp.getAge()+&amp;quot;, &amp;#39;&amp;quot;+emp.getSex()+&amp;quot;&amp;#39;)&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyBatis" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/"/>
    
    <category term="MyBatis获取参数值的两种方式" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/MyBatis%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E5%80%BC%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    
    
    <category term="Mybatis" scheme="http://example.com/tags/Mybatis/"/>
    
  </entry>
  
</feed>
