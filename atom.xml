<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Victory&#39;s Blog</title>
  
  <subtitle>非淡泊无以明志，非宁静无以致远</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-21T04:50:47.892Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>victory-liao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis | 集群搭建</title>
    <link href="http://example.com/2022/05/20/Redis%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2022/05/20/Redis%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</id>
    <published>2022-05-21T04:19:56.000Z</published>
    <updated>2022-05-21T04:50:47.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis集群搭建"><a href="#Redis集群搭建" class="headerlink" title="Redis集群搭建"></a>Redis集群搭建</h1><p>1.下载Redis并将redis放到linux目录/opt下<br>2.在opt下创建myRedis文件夹,并备份redis.conf到此处<br>3.安装ruby环境<br>（1）yum install ruby<br>（2）yum install rubygems<br>4.创建6个实例（此处使用相同主机的不同端口来模拟多个节点）<br>通过include引入备份文件redis.conf（redis.conf中需要修改配置：protected-mode no   daemonize yes   appendonly no）的内容并修改每个节点不同的信息<br>(1)redis6379.conf</p><pre><code>include /opt/myRedis/redis.confpidfile &quot;/var/run/redis6379.pid&quot;port 6379dbfilename &quot;dump6379.rdb&quot;cluster-enabled yescluster-config-file nodes-6379.confcluster-node-timeout 15000</code></pre><p>(2)redis6380.conf</p><pre><code>include /opt/myRedis/redis.confpidfile &quot;/var/run/redis6380.pid&quot;port 6380dbfilename &quot;dump6380.rdb&quot;cluster-enabled yescluster-config-file nodes-6380.confcluster-node-timeout 15000</code></pre><p>(3)redis6381.conf</p><pre><code>include /opt/myRedis/redis.confpidfile &quot;/var/run/redis6381.pid&quot;port 6381dbfilename &quot;dump6381.rdb&quot;cluster-enabled yescluster-config-file nodes-6381.confcluster-node-timeout 15000</code></pre><p>(4)redis6389.conf</p><pre><code>include /opt/myRedis/redis.confpidfile &quot;/var/run/redis6389.pid&quot;port 6389dbfilename &quot;dump6389.rdb&quot;cluster-enabled yescluster-config-file nodes-6389.confcluster-node-timeout 15000</code></pre><p>(5)redis6390.conf</p><pre><code>include /opt/myRedis/redis.confpidfile &quot;/var/run/redis6390.pid&quot;port 6390dbfilename &quot;dump6390.rdb&quot;cluster-enabled yescluster-config-file nodes-6390.confcluster-node-timeout 15000</code></pre><p>(6)redis6391.conf</p><pre><code>include /opt/myRedis/redis.confpidfile &quot;/var/run/redis6391.pid&quot;port 6391dbfilename &quot;dump6391.rdb&quot;cluster-enabled yescluster-config-file nodes-6391.confcluster-node-timeout 15000</code></pre><p>5.启动所有redis实例，nodes-xxxx.conf文件都生成正常。<br><img src="/2022/05/20/Redis%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/1.PNG"><br>6.将六个实例组合到一个集群当中</p><pre><code>redis-cli --cluster create 192.168.1.108:6379 192.168.1.108:6380 192.168.1.108:6381 192.168.1.108:6389 192.168.1.108:6390 192.168.1.108:6391 --cluster-replicas 1</code></pre><p>7.启动客户端并查看集群<br><img src="/2022/05/20/Redis%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/2.PNG"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis集群搭建&quot;&gt;&lt;a href=&quot;#Redis集群搭建&quot; class=&quot;headerlink&quot; title=&quot;Redis集群搭建&quot;&gt;&lt;/a&gt;Redis集群搭建&lt;/h1&gt;&lt;p&gt;1.下载Redis并将redis放到linux目录/opt下&lt;br&gt;2.在opt下创</summary>
      
    
    
    
    <category term="Redis" scheme="http://example.com/categories/Redis/"/>
    
    <category term="集群搭建" scheme="http://example.com/categories/Redis/%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
    <category term="集群" scheme="http://example.com/tags/%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>Redis | 关闭服务报错</title>
    <link href="http://example.com/2022/05/15/Redis%E5%85%B3%E9%97%AD%E6%9C%8D%E5%8A%A1%E6%8A%A5%E9%94%99/"/>
    <id>http://example.com/2022/05/15/Redis%E5%85%B3%E9%97%AD%E6%9C%8D%E5%8A%A1%E6%8A%A5%E9%94%99/</id>
    <published>2022-05-16T06:20:38.000Z</published>
    <updated>2022-05-16T06:28:15.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis关闭服务报错"><a href="#Redis关闭服务报错" class="headerlink" title="Redis关闭服务报错"></a>Redis关闭服务报错</h1><p>在linux中执行redis-cli shutdown命令来关闭redis服务时报错：</p><pre><code>(error) ERR Errors trying to SHUTDOWN. Check logs.</code></pre><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>1)执行vim命令打开redis.conf文件</p><pre><code>vim redis.conf</code></pre><p>2)在配置文件中找到logfile “”，并修改为 logfile “/opt/myRedis/redis_log.log”<br>3)修改日志文件redis_log.log的文件权限</p><pre><code>sudo chmod 777 /opt/myRedis/redis_log.log</code></pre><p>4)强制关闭redis服务</p><pre><code>kill -9 当前redis服务的进程号</code></pre><p>5)重启redis服务(案例将redis的配置文件做了备份，放在/opt/myRedis/目录下)</p><pre><code>redis-server redis.conf</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis关闭服务报错&quot;&gt;&lt;a href=&quot;#Redis关闭服务报错&quot; class=&quot;headerlink&quot; title=&quot;Redis关闭服务报错&quot;&gt;&lt;/a&gt;Redis关闭服务报错&lt;/h1&gt;&lt;p&gt;在linux中执行redis-cli shutdown命令来关闭re</summary>
      
    
    
    
    <category term="Redis" scheme="http://example.com/categories/Redis/"/>
    
    <category term="关闭服务报错" scheme="http://example.com/categories/Redis/%E5%85%B3%E9%97%AD%E6%9C%8D%E5%8A%A1%E6%8A%A5%E9%94%99/"/>
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
    <category term="关闭服务报错" scheme="http://example.com/tags/%E5%85%B3%E9%97%AD%E6%9C%8D%E5%8A%A1%E6%8A%A5%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>Redis | 集群</title>
    <link href="http://example.com/2022/05/13/Redis%E9%9B%86%E7%BE%A4/"/>
    <id>http://example.com/2022/05/13/Redis%E9%9B%86%E7%BE%A4/</id>
    <published>2022-05-13T10:06:31.000Z</published>
    <updated>2022-05-13T10:17:50.079Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h1><ol><li>问题<br>1）服务器内存容量不够，redis如何进行扩容？<br>2）大量并发写操作， redis如何分摊？</li><li>集群<br>Redis 集群实现了对Redis的水平扩容，即<strong>启动N个redis节点，将整个数据库分布存储在这N个节点中，每个节点存储总数据的1/N</strong>。<br>注：Redis 集群通过分区（partition）来提供一定程度的可用性（availability）： 即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求。</li><li>slots<br>一个 Redis 集群包含 16384 个插槽（hash slot）， 数据库中的每个键都属于这 16384 个插槽的其中一个， 集群使用公式 CRC16(key) % 16384 来计算键 key 属于哪个槽， 其中 CRC16(key) 语句用于计算键 key 的 CRC16 校验和 。<br>集群中的每个节点负责处理一部分插槽。举个例子， 如果一个集群可以有主节点，其中：节点A负责处理0号至5500号插槽，节点B负责处理5501号至11000号插槽，节点C负责处理11001号至16383号插槽。</li><li>集群的优点<br>1）实现扩容<br>2）分摊压力<br>3）无中心配置相对简单</li><li>集群的缺点<br>1）多键操作是不被支持的（这些键有可能存在不同的服务器上，可以通过{}来定义组的概念，从而使key中{}内相同内容的键值对放到一个slot中去。）<br>2）多键的Redis事务是不被支持的。lua脚本不被支持。<br>3）由于集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分片的方案想要迁移至redis cluster，需要整体迁移而不是逐步过渡，复杂度较大。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis集群&quot;&gt;&lt;a href=&quot;#Redis集群&quot; class=&quot;headerlink&quot; title=&quot;Redis集群&quot;&gt;&lt;/a&gt;Redis集群&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;问题&lt;br&gt;1）服务器内存容量不够，redis如何进行扩容？&lt;br&gt;2）大量并发写操作，</summary>
      
    
    
    
    <category term="Redis" scheme="http://example.com/categories/Redis/"/>
    
    <category term="集群" scheme="http://example.com/categories/Redis/%E9%9B%86%E7%BE%A4/"/>
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
    <category term="集群" scheme="http://example.com/tags/%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>Redis | 主从复制</title>
    <link href="http://example.com/2022/05/13/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <id>http://example.com/2022/05/13/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</id>
    <published>2022-05-13T08:26:24.000Z</published>
    <updated>2022-05-13T10:05:21.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h1><ol><li>主从复制<br>主机数据更新后根据配置和策略，自动同步到备机的master/slaver机制，master以写为主，slave以读为主<br><img src="/2022/05/13/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/1.PNG"></li><li>复制原理<br>（1）每次从机联通后，都会给主机发送sync指令<br>（2）主机立刻进行存盘操作并发送RDB文给从机<br>（3）从机收到RDB文件后，进行全盘加载<br>（4）之后每次主机的写操作，都会立刻发送给从机，从机执行相同的命令<br><img src="/2022/05/13/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/2.PNG"></li><li>哨兵模式<br>能够后台监控主机是否故障，如果故障了根据投票数自动将从机转换为主机<br><img src="/2022/05/13/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/3.PNG"></li><li>故障恢复<br>（1）如果发生故障，从下线的主服务的所有从服务里挑选一个从服务，将其转成主服务<br>选择条件：<br>1）选择优先级靠前的（优先级可以在redis.conf中设置slave-priority）<br>2）选择偏移量最大的(偏移量最大指获得原主服务数据最多的服务)<br>3）选择runid最小的从服务（每个Redis实例启动后都会随机生成一个40为的runid）</li><li>优点<br>（1）读写分离<br>（2）容灾快速恢复</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis主从复制&quot;&gt;&lt;a href=&quot;#Redis主从复制&quot; class=&quot;headerlink&quot; title=&quot;Redis主从复制&quot;&gt;&lt;/a&gt;Redis主从复制&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;主从复制&lt;br&gt;主机数据更新后根据配置和策略，自动同步到备机的maste</summary>
      
    
    
    
    <category term="Redis" scheme="http://example.com/categories/Redis/"/>
    
    <category term="主从复制" scheme="http://example.com/categories/Redis/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
    <category term="主从复制" scheme="http://example.com/tags/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Redis | 持久化方式</title>
    <link href="http://example.com/2022/05/09/Redis%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2022/05/09/Redis%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E5%BC%8F/</id>
    <published>2022-05-09T13:45:48.000Z</published>
    <updated>2022-05-12T07:03:25.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis持久化方式"><a href="#Redis持久化方式" class="headerlink" title="Redis持久化方式"></a>Redis持久化方式</h1><ol><li>两个不同形式得持久化方式<br>RDB(Redis DataBase)<br>AOF(Append Of File)</li><li>RDB</li><li>1 RDB<br>在指定的时间间隔内将内存中的数据集快照(Snapshot)写入磁盘,恢复时将快照文件直接读到内存中。</li><li>2 备份<br>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能；</li><li>3 适用<br>大规模数据的恢复且对于数据恢复的完整性不是非常敏感</li><li>4 优点<br>1）节省磁盘空间<br>2）恢复速度快</li><li>5 缺点<br>1）虽然Redis在fork时使用了写时拷贝技术,但是如果数据庞大时还是比较消耗性能。<br>2）在备份周期在一定间隔时间做一次备份，所以如果Redis意外down掉的话，就会丢失最后一次快照后的所有修改。</li><li>AOF</li><li>1 AOF<br>以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来(读操作不记录)，只许追加文件但不可以改写文件，Redis启动之初会读取该文件重新构建数据，换言之，Redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</li><li>2 AOF同步频率设置：<br>1）始终同步<br>2）每秒同步<br>3）不主动进行同步</li><li>3 Rewrite:<br>AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制,当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集.可以使用命令bgrewriteaof。</li></ol><p><strong>如何实现重写？</strong><br>AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)，遍历新进程的内存中数据，每条记录有一条的Set语句。重写aof文件的操作，并没有读取旧的aof文件，而是<strong>将整个内存中的数据库内容用命令的方式重写了一个新的aof文件</strong>，这点和快照有点类似。<br><strong>何时重写</strong><br>系统载入时或者上次重写完毕时，Redis会记录此时AOF大小，设为base_size,如果Redis的AOF当前大小&gt;= base_size +base_size*100% (默认)或当前大小&gt;=64mb(默认)的情况下，Redis会对AOF进行重写。<br>3.4 AOF的优点：<br>1）备份机制更稳健，丢失数据概率更低。<br>2）可读的日志文本，通过操作AOF文件，可以处理误操作。<br>3.5 AOF的缺点：<br>1）比起RDB占用更多的磁盘空间。<br>2）恢复备份速度要慢。<br>3）每次读写都同步的话，有一定的性能压力。<br>4）存在个别Bug，造成不能恢复。<br><strong>注意：</strong><br>1）AOF和RDB同时开启，系统默认取AOF的数据<br>2）推荐AOF和RDB都使用<br>3）如果对数据不敏感，可以选单独用RDB<br>4）不建议单独用 AOF，因为可能会出现Bug<br>5）如果只是做纯内存缓存，可以都不用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis持久化方式&quot;&gt;&lt;a href=&quot;#Redis持久化方式&quot; class=&quot;headerlink&quot; title=&quot;Redis持久化方式&quot;&gt;&lt;/a&gt;Redis持久化方式&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;两个不同形式得持久化方式&lt;br&gt;RDB(Redis DataBa</summary>
      
    
    
    
    <category term="Redis" scheme="http://example.com/categories/Redis/"/>
    
    <category term="持久化方式" scheme="http://example.com/categories/Redis/%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E5%BC%8F/"/>
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
    <category term="持久化方式" scheme="http://example.com/tags/%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Redis | 秒杀</title>
    <link href="http://example.com/2022/05/07/%E7%A7%92%E6%9D%80/"/>
    <id>http://example.com/2022/05/07/%E7%A7%92%E6%9D%80/</id>
    <published>2022-05-07T12:14:29.000Z</published>
    <updated>2022-05-09T12:00:11.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="秒杀"><a href="#秒杀" class="headerlink" title="秒杀"></a>秒杀</h1><h2 id="秒杀需要解决的问题"><a href="#秒杀需要解决的问题" class="headerlink" title="秒杀需要解决的问题"></a>秒杀需要解决的问题</h2><p>解决商品库存计数器和秒杀成功的用户记录的事务操作</p><h2 id="秒杀遇到的三个问题"><a href="#秒杀遇到的三个问题" class="headerlink" title="秒杀遇到的三个问题"></a>秒杀遇到的三个问题</h2><p>1.连接超时问题 —&gt; 使用Redis连接池<br>2.超卖（卖出的商品数量超过商品库存数量） —&gt; 使用事务<br>3.库存遗留问题（并发的请求中只有一个请求能够秒杀成功造成库存遗留） —&gt; 使用lua脚本</p><span id="more"></span><p>1.index.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;iPhoneXsMAX !!!  1元秒杀！！！&lt;/h1&gt;&lt;form id=&quot;msform&quot; action=&quot;$&#123;pageContext.request.contextPath&#125;/doseckill&quot; enctype=&quot;application/x-www-form-urlencoded&quot;&gt;    &lt;input type=&quot;hidden&quot; id=&quot;prodid&quot; name=&quot;prodid&quot; value=&quot;0101&quot;&gt;    &lt;input type=&quot;button&quot;  id=&quot;miaosha_btn&quot; name=&quot;seckill_btn&quot; value=&quot;秒杀点我&quot;/&gt;&lt;/form&gt;&lt;/body&gt;&lt;script  type=&quot;text/javascript&quot; src=&quot;$&#123;pageContext.request.contextPath&#125;/script/jquery/jquery-3.1.0.js&quot;&gt;&lt;/script&gt;&lt;script  type=&quot;text/javascript&quot;&gt;$(function()&#123;    $(&quot;#miaosha_btn&quot;).click(function()&#123;             var url=$(&quot;#msform&quot;).attr(&quot;action&quot;);         $.post(url,$(&quot;#msform&quot;).serialize(),function(data)&#123;            if(data==&quot;false&quot;)&#123;                alert(&quot;抢光了&quot; );                $(&quot;#miaosha_btn&quot;).attr(&quot;disabled&quot;,true);            &#125;        &#125; );        &#125;)&#125;)&lt;/script&gt;&lt;/html&gt;</code></pre><p>2.SeckillServlet.java</p><pre><code>public class SecKillServlet extends HttpServlet &#123;    private static final long serialVersionUID = 1L;           /**     * @see HttpServlet#HttpServlet()     */    public SecKillServlet() &#123;        super();        // TODO Auto-generated constructor stub    &#125;    /**     * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)     */    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;        // TODO Auto-generated method stub         String userid = new Random().nextInt(50000) +&quot;&quot; ;         String prodid =request.getParameter(&quot;prodid&quot;);                boolean if_success=SecKill_redisByScript.doSecKill(userid,prodid);         response.getWriter().print(if_success);    &#125;&#125;</code></pre><p>3.JedisPoolUtil.java</p><pre><code>package com.atguigu;import redis.clients.jedis.Jedis;import redis.clients.jedis.JedisPool;import redis.clients.jedis.JedisPoolConfig;public class JedisPoolUtil &#123;    private static volatile JedisPool jedisPool = null;     private JedisPoolUtil() &#123;    &#125;    public static JedisPool getJedisPoolInstance() &#123;        if (null == jedisPool) &#123;            synchronized (JedisPoolUtil.class) &#123;                if (null == jedisPool) &#123;                    JedisPoolConfig poolConfig = new JedisPoolConfig();                    poolConfig.setMaxTotal(200);                    poolConfig.setMaxIdle(32);                    poolConfig.setMaxWaitMillis(100*1000);                    poolConfig.setBlockWhenExhausted(true);                    poolConfig.setTestOnBorrow(true);  // ping  PONG                                     jedisPool = new JedisPool(poolConfig, &quot;192.168.223.132&quot;, 6379, 60000 );                             &#125;            &#125;        &#125;        return jedisPool;    &#125;    public static void release(JedisPool jedisPool, Jedis jedis) &#123;        if (null != jedis) &#123;            jedisPool.returnResource(jedis);        &#125;    &#125;&#125;</code></pre><p>4.Seckill_redisByScript.java</p><pre><code>public class SecKill_redisByScript &#123;        private static final  org.slf4j.Logger logger =LoggerFactory.getLogger(SecKill_redisByScript.class) ;    public static void main(String[] args) &#123;          JedisPool jedispool =  JedisPoolUtil.getJedisPoolInstance();         Jedis jedis=jedispool.getResource();        System.out.println(jedis.ping());                Set&lt;HostAndPort&gt; set=new HashSet&lt;HostAndPort&gt;();            //    doSecKill(&quot;201&quot;,&quot;sk:0101&quot;);    &#125;        static String secKillScript =&quot;local userid=KEYS[1];\r\n&quot; +             &quot;local prodid=KEYS[2];\r\n&quot; +             &quot;local qtkey=&#39;Seckill:&#39;..prodid..\&quot;:kc\&quot;;\r\n&quot; +             &quot;local usersKey=&#39;Seckill:&#39;..prodid..\&quot;:user\&quot;;\r\n&quot; +             &quot;local userExists=redis.call(\&quot;sismember\&quot;,usersKey,userid);\r\n&quot; +             &quot;if tonumber(userExists)==1 then \r\n&quot; +             &quot;   return 2;\r\n&quot; +             &quot;end\r\n&quot; +             &quot;local num= redis.call(\&quot;get\&quot; ,qtkey);\r\n&quot; +             &quot;if tonumber(num)&lt;=0 then \r\n&quot; +             &quot;   return 0;\r\n&quot; +             &quot;else \r\n&quot; +             &quot;   redis.call(\&quot;decr\&quot;,qtkey);\r\n&quot; +             &quot;   redis.call(\&quot;sadd\&quot;,usersKey,userid);\r\n&quot; +             &quot;end\r\n&quot; +             &quot;return 1&quot; ;                 static String secKillScript2 =             &quot;local userExists=redis.call(\&quot;sismember\&quot;,\&quot;&#123;sk&#125;:0101:usr\&quot;,userid);\r\n&quot; +            &quot; return 1&quot;;         public static boolean doSecKill(String uid,String prodid) throws IOException &#123;                JedisPool jedisPool = JedisPoolUtil.getJedisPoolInstance();                                Jedis jedis = jedisPool.getResource();                                String sha1=  jedis.scriptLoad(secKillScript);                                 Object result= jedis.evalsha(sha1, 2, uid,prodid);                    String reString=String.valueOf(result);                if (&quot;0&quot;.equals( reString )  ) &#123;                    System.err.println(&quot;已抢空！！&quot;);                &#125;else if(&quot;1&quot;.equals( reString )  )  &#123;                    System.out.println(&quot;抢购成功！！！！&quot;);                &#125;else if(&quot;2&quot;.equals( reString )  )  &#123;                    System.err.println(&quot;该用户已抢过！！&quot;);                &#125;else&#123;                    System.err.println(&quot;抢购异常！！&quot;);                &#125;                jedis.close();        return true;             &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;秒杀&quot;&gt;&lt;a href=&quot;#秒杀&quot; class=&quot;headerlink&quot; title=&quot;秒杀&quot;&gt;&lt;/a&gt;秒杀&lt;/h1&gt;&lt;h2 id=&quot;秒杀需要解决的问题&quot;&gt;&lt;a href=&quot;#秒杀需要解决的问题&quot; class=&quot;headerlink&quot; title=&quot;秒杀需要解决的问题&quot;&gt;&lt;/a&gt;秒杀需要解决的问题&lt;/h2&gt;&lt;p&gt;解决商品库存计数器和秒杀成功的用户记录的事务操作&lt;/p&gt;
&lt;h2 id=&quot;秒杀遇到的三个问题&quot;&gt;&lt;a href=&quot;#秒杀遇到的三个问题&quot; class=&quot;headerlink&quot; title=&quot;秒杀遇到的三个问题&quot;&gt;&lt;/a&gt;秒杀遇到的三个问题&lt;/h2&gt;&lt;p&gt;1.连接超时问题 —&amp;gt; 使用Redis连接池&lt;br&gt;2.超卖（卖出的商品数量超过商品库存数量） —&amp;gt; 使用事务&lt;br&gt;3.库存遗留问题（并发的请求中只有一个请求能够秒杀成功造成库存遗留） —&amp;gt; 使用lua脚本&lt;/p&gt;</summary>
    
    
    
    <category term="Redis" scheme="http://example.com/categories/Redis/"/>
    
    <category term="秒杀" scheme="http://example.com/categories/Redis/%E7%A7%92%E6%9D%80/"/>
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
    <category term="秒杀" scheme="http://example.com/tags/%E7%A7%92%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>Redis | 事务</title>
    <link href="http://example.com/2022/05/07/%E4%BA%8B%E5%8A%A1-2/"/>
    <id>http://example.com/2022/05/07/%E4%BA%8B%E5%8A%A1-2/</id>
    <published>2022-05-07T12:03:15.000Z</published>
    <updated>2022-05-07T12:11:56.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="Redis中事务的定义"><a href="#Redis中事务的定义" class="headerlink" title="Redis中事务的定义"></a>Redis中事务的定义</h2><p>Redis事务是一个单独的隔离操作：<strong>事务中的所有命令都会序列化、按顺序地执行</strong>。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断<br>Redis事务的主要作用就是<strong>串联多个命令防止别的命令插队</strong>。</p><h2 id="事务相关的命令-multi、exec、discard"><a href="#事务相关的命令-multi、exec、discard" class="headerlink" title="事务相关的命令(multi、exec、discard)"></a>事务相关的命令(multi、exec、discard)</h2><p>1.从输入Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行，至到输入Exec后，Redis会将之前的命令队列中的命令依次执行。<br>2.组队的过程中可以通过discard来放弃组队。 </p><span id="more"></span><h2 id="事务中的错误处理"><a href="#事务中的错误处理" class="headerlink" title="事务中的错误处理"></a>事务中的错误处理</h2><p>1.组队中某个命令出现了报告错误，执行时整个的所有队列会都会被取消。<br>2.如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会执行，不会回滚。</p><h2 id="Redis事务的使用"><a href="#Redis事务的使用" class="headerlink" title="Redis事务的使用"></a>Redis事务的使用</h2><p>1.WATCH key[key….]<br>在执行multi之前，先执行watch key1 [key2],可以监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。<br>2.unwatch<br>取消 WATCH 命令对所有 key 的监视。<br>如果在执行 WATCH 命令之后， EXEC 命令或 DISCARD 命令先被执行了的话，那么就不需要再执行 UNWATCH 了。<br>3.三特性<br>3.1单独的隔离操作<br>事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。<br>3.2没有隔离级别的概念<br>队列中的命令没有提交之前都不会实际的被执行，因为事务提交前任何指令都不会被实际执行，也就不存在“事务内的查询要看到事务里的更新，在事务外查询不能看到”这个让人万分头痛的问题 <br>3.3不保证原子性<br>Redis同一个事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚 </p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h1&gt;&lt;h2 id=&quot;Redis中事务的定义&quot;&gt;&lt;a href=&quot;#Redis中事务的定义&quot; class=&quot;headerlink&quot; title=&quot;Redis中事务的定义&quot;&gt;&lt;/a&gt;Redis中事务的定义&lt;/h2&gt;&lt;p&gt;Redis事务是一个单独的隔离操作：&lt;strong&gt;事务中的所有命令都会序列化、按顺序地执行&lt;/strong&gt;。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断&lt;br&gt;Redis事务的主要作用就是&lt;strong&gt;串联多个命令防止别的命令插队&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;事务相关的命令-multi、exec、discard&quot;&gt;&lt;a href=&quot;#事务相关的命令-multi、exec、discard&quot; class=&quot;headerlink&quot; title=&quot;事务相关的命令(multi、exec、discard)&quot;&gt;&lt;/a&gt;事务相关的命令(multi、exec、discard)&lt;/h2&gt;&lt;p&gt;1.从输入Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行，至到输入Exec后，Redis会将之前的命令队列中的命令依次执行。&lt;br&gt;2.组队的过程中可以通过discard来放弃组队。 &lt;/p&gt;</summary>
    
    
    
    <category term="Redis" scheme="http://example.com/categories/Redis/"/>
    
    <category term="事务" scheme="http://example.com/categories/Redis/%E4%BA%8B%E5%8A%A1/"/>
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
    <category term="事务" scheme="http://example.com/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Redis | Jedis实现手机号验证码</title>
    <link href="http://example.com/2022/05/06/Jedis%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E5%8F%B7%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>http://example.com/2022/05/06/Jedis%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E5%8F%B7%E9%AA%8C%E8%AF%81%E7%A0%81/</id>
    <published>2022-05-07T02:19:55.000Z</published>
    <updated>2022-05-07T02:28:05.158Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jedis实现手机号验证码"><a href="#Jedis实现手机号验证码" class="headerlink" title="Jedis实现手机号验证码"></a>Jedis实现手机号验证码</h1><p><img src="/2022/05/06/Jedis%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E5%8F%B7%E9%AA%8C%E8%AF%81%E7%A0%81/1.PNG"><br><strong>要求</strong><br>1.输入手机号，点击发送后随机生成6位数字码，2分钟有效<br>2.输入验证码，点击验证，返回成功或失败<br>3.每个手机号每天只能输入3次</p><span id="more"></span><p>1.index.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=ISO-8859-1&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;script  src=&quot;/Verify_code/static/jquery/jquery-3.1.0.js&quot; &gt;&lt;/script&gt;&lt;link href=&quot;/Verify_code/static/bs/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; /&gt;&lt;script  src=&quot;/Verify_code/static/bs/js/bootstrap.min.js&quot;   &gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;   &lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;row&quot;&gt;            &lt;div id=&quot;alertdiv&quot; class=&quot;col-md-12&quot;&gt;                  &lt;form class=&quot;navbar-form navbar-left&quot; role=&quot;search&quot; id=&quot;codeform&quot;&gt;                  &lt;div class=&quot;form-group&quot;&gt;                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;填写手机号&quot; name=&quot;phone_no&quot;&gt;                    &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; id=&quot;sendCode&quot;&gt;发送验证码&lt;/button&gt;&lt;br&gt;                    &lt;font id=&quot;countdown&quot; color=&quot;red&quot; &gt;&lt;/font&gt;                    &lt;br&gt;                    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;填写验证码&quot; name=&quot;verify_code&quot;&gt;                    &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; id=&quot;verifyCode&quot;&gt;确定&lt;/button&gt;                    &lt;font id=&quot;result&quot; color=&quot;green&quot; &gt;&lt;/font&gt;&lt;font id=&quot;error&quot; color=&quot;red&quot; &gt;&lt;/font&gt;                    &lt;/div&gt;                    &lt;/form&gt;    &lt;/div&gt;   &lt;/div&gt;  &lt;/div&gt;&lt;/body&gt;&lt;script type=&quot;text/javascript&quot;&gt; var t=120;//设定倒计时的时间 var interval;function refer()&#123;      $(&quot;#countdown&quot;).text(&quot;请于&quot;+t+&quot;秒内填写验证码 &quot;); // 显示倒计时     t--; // 计数器递减     if(t&lt;=0)&#123;        clearInterval(interval);        $(&quot;#countdown&quot;).text(&quot;验证码已失效，请重新发送！ &quot;);    &#125;&#125; $(function()&#123;    $(&quot;#sendCode&quot;).click( function () &#123;                      $.post(&quot;/Verify_code/CodeSenderServlet&quot;,$(&quot;#codeform&quot;).serialize(),function(data)&#123;             if(data==&quot;true&quot;)&#123;                 t=120;                 clearInterval(interval);                 interval= setInterval(&quot;refer()&quot;,1000);//启动1秒定时               &#125;else if (data==&quot;limit&quot;)&#123;                clearInterval(interval);                $(&quot;#countdown&quot;).text(&quot;单日发送超过次数！ &quot;)             &#125;          &#125;);       &#125;);        $(&quot;#verifyCode&quot;).click( function () &#123;                   $.post(&quot;/Verify_code/CodeVerifyServlet&quot;,$(&quot;#codeform&quot;).serialize(),function(data)&#123;             if(data==&quot;true&quot;)&#123;                 $(&quot;#result&quot;).attr(&quot;color&quot;,&quot;green&quot;);                 $(&quot;#result&quot;).text(&quot;验证成功&quot;);                 clearInterval(interval);                 $(&quot;#countdown&quot;).text(&quot;&quot;);             &#125;else&#123;                 $(&quot;#result&quot;).attr(&quot;color&quot;,&quot;red&quot;);                 $(&quot;#result&quot;).text(&quot;验证失败&quot;);             &#125;          &#125;);       &#125;);        &#125;);&lt;/script&gt;&lt;/html&gt;</code></pre><p>2.CodeSenderServlet.java(发送验证码)</p><pre><code>@WebServlet(&quot;/CodeSenderServlet&quot;)public class CodeSenderServlet extends HttpServlet &#123;    private static final long serialVersionUID = 1L;           /**     * @see HttpServlet#HttpServlet()     */    public CodeSenderServlet() &#123;        super();        // TODO Auto-generated constructor stub    &#125;    /**     * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)     */    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;                //获取手机号        String phone_no = request.getParameter(&quot;phone_no&quot;);        //获取验证码        String code = getCode(6);        //拼接key        String codeKey = &quot;Verify_code:&quot; + phone_no + &quot;:code&quot;;//Verify_code:12345:code        String countKey = &quot;Verify_code:&quot; + phone_no + &quot;:count&quot;;                Jedis jedis = new Jedis(&quot;192.168.44.132&quot;, 6379);        //判断发送验证码的次数        String count = jedis.get(countKey);        if(count == null) &#123;            //代表第一次            jedis.setex(countKey, 24*60*60, &quot;1&quot;);        &#125;else if(Integer.parseInt(count) &lt;= 2) &#123;            jedis.incr(countKey);        &#125;else if(Integer.parseInt(count) &gt; 2) &#123;            response.getWriter().print(&quot;limit&quot;);            jedis.close();            return ;        &#125;                //向redis中进行存储，以手机号为键，以验证码为值        jedis.setex(codeKey, 120, code);        jedis.close();        response.getWriter().print(true);            &#125;            private String getCode(int length) &#123;        String code = &quot;&quot;;        Random random = new Random();        for(int i = 0; i &lt; length; i++) &#123;            int rand = random.nextInt(10);            code += rand;        &#125;        return code;    &#125;&#125;</code></pre><p>3.验证</p><pre><code>@WebServlet(&quot;/CodeVerifyServlet&quot;)public class CodeVerifyServlet extends HttpServlet &#123;    private static final long serialVersionUID = 1L;           /**     * @see HttpServlet#HttpServlet()     */    public CodeVerifyServlet() &#123;        super();        // TODO Auto-generated constructor stub    &#125;    /**     * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)     */    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;            //获取验证码和手机号        String phone_no = request.getParameter(&quot;phone_no&quot;);        String verify_code = request.getParameter(&quot;verify_code&quot;);        //拼接key        String codeKey = &quot;Verify_code:&quot; + phone_no + &quot;:code&quot;;        //从redis中获取手机号所对应的验证码        Jedis jedis = new Jedis(&quot;192.168.44.132&quot;, 6379);        String code = jedis.get(codeKey);        if(code.equals(verify_code)) &#123;            response.getWriter().print(true);        &#125;        jedis.close();            &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Jedis实现手机号验证码&quot;&gt;&lt;a href=&quot;#Jedis实现手机号验证码&quot; class=&quot;headerlink&quot; title=&quot;Jedis实现手机号验证码&quot;&gt;&lt;/a&gt;Jedis实现手机号验证码&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2022/05/06/Jedis%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E5%8F%B7%E9%AA%8C%E8%AF%81%E7%A0%81/1.PNG&quot;&gt;&lt;br&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;br&gt;1.输入手机号，点击发送后随机生成6位数字码，2分钟有效&lt;br&gt;2.输入验证码，点击验证，返回成功或失败&lt;br&gt;3.每个手机号每天只能输入3次&lt;/p&gt;</summary>
    
    
    
    <category term="Redis" scheme="http://example.com/categories/Redis/"/>
    
    <category term="Jedis实现手机号验证码" scheme="http://example.com/categories/Redis/Jedis%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E5%8F%B7%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
    <category term="Jedis" scheme="http://example.com/tags/Jedis/"/>
    
    <category term="手机号验证码" scheme="http://example.com/tags/%E6%89%8B%E6%9C%BA%E5%8F%B7%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Java | 创建线程的三种方式</title>
    <link href="http://example.com/2022/04/24/%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2022/04/24/%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2022-04-25T01:05:43.000Z</published>
    <updated>2022-04-25T01:08:26.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建线程的三种方式"><a href="#创建线程的三种方式" class="headerlink" title="创建线程的三种方式"></a>创建线程的三种方式</h1><p>创建线程有三种方式，分别是继承Thread类、实现Runnable接口、实现Callable接口。</p><p>1.通过继承Thread类来创建并启动线程的步骤如下：<br>1.1定义Thread类的子类，并重写该类的run()方法，该run()方法将作为线程执行体。<br>1.2创建Thread子类的实例，即创建了线程对象。<br>1.3调用线程对象的start()方法来启动该线程。<br>2.通过实现Runnable接口来创建并启动线程的步骤如下：<br>2.1定义Runnable接口的实现类，并实现该接口的run()方法，该run()方法将作为线程执行体。<br>2.2创建Runnable实现类的实例，并将其作为Thread的target来创建Thread对象，Thread对象为线程对象。<br>2.3调用线程对象的start()方法来启动该线程。<br>3.通过实现Callable接口来创建并启动线程的步骤如下：<br>3.1创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，且该call()方法有返回值。然后再创建Callable实现类的实例。<br>3.2使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值。<br>3.3使用FutureTask对象作为Thread对象的target创建并启动新线程。<br>3.4调用FutureTask对象的get()方法来获得子线程执行结束后的返回值。</p><span id="more"></span><p><strong>代码</strong></p><pre><code>import java.util.concurrent.Callable;import java.util.concurrent.ExecutionException;import java.util.concurrent.FutureTask;class MyThread extends Thread&#123;    @Override    public void run()&#123;        System.out.println(Thread.currentThread().getName());    &#125;&#125;class MyThread1 implements Runnable&#123;    @Override    public void run() &#123;        System.out.println(Thread.currentThread().getName());    &#125;&#125;class MyThread2 implements Callable&#123;    @Override    public Object call() throws Exception &#123;        return &quot;success&quot;;    &#125;&#125;public class ThreadTest &#123;    public static void main(String[] args) throws ExecutionException &#123;        for(int i=0;i&lt;10;i++)&#123;            //继承Thread类            //new MyThread().start();                        //实现Runnable接口            //new Thread(new MyThread1()).start();                        //实现Callable接口            FutureTask&lt;String&gt; task = new FutureTask&lt;&gt;(new MyThread2());            new Thread(task).start();                    try &#123;                System.out.println(task.get());            &#125; catch (InterruptedException e) &#123;                e.printStackTrace();            &#125;        &#125;        &#125;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;创建线程的三种方式&quot;&gt;&lt;a href=&quot;#创建线程的三种方式&quot; class=&quot;headerlink&quot; title=&quot;创建线程的三种方式&quot;&gt;&lt;/a&gt;创建线程的三种方式&lt;/h1&gt;&lt;p&gt;创建线程有三种方式，分别是继承Thread类、实现Runnable接口、实现Callable接口。&lt;/p&gt;
&lt;p&gt;1.通过继承Thread类来创建并启动线程的步骤如下：&lt;br&gt;1.1定义Thread类的子类，并重写该类的run()方法，该run()方法将作为线程执行体。&lt;br&gt;1.2创建Thread子类的实例，即创建了线程对象。&lt;br&gt;1.3调用线程对象的start()方法来启动该线程。&lt;br&gt;2.通过实现Runnable接口来创建并启动线程的步骤如下：&lt;br&gt;2.1定义Runnable接口的实现类，并实现该接口的run()方法，该run()方法将作为线程执行体。&lt;br&gt;2.2创建Runnable实现类的实例，并将其作为Thread的target来创建Thread对象，Thread对象为线程对象。&lt;br&gt;2.3调用线程对象的start()方法来启动该线程。&lt;br&gt;3.通过实现Callable接口来创建并启动线程的步骤如下：&lt;br&gt;3.1创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，且该call()方法有返回值。然后再创建Callable实现类的实例。&lt;br&gt;3.2使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值。&lt;br&gt;3.3使用FutureTask对象作为Thread对象的target创建并启动新线程。&lt;br&gt;3.4调用FutureTask对象的get()方法来获得子线程执行结束后的返回值。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="基础" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="创建线程的三种方式" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="多线程" scheme="http://example.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="线程" scheme="http://example.com/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java | 创建线程池的7种方式</title>
    <link href="http://example.com/2022/04/24/%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%847%E4%B8%AD%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2022/04/24/%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%847%E4%B8%AD%E6%96%B9%E5%BC%8F/</id>
    <published>2022-04-24T09:57:42.000Z</published>
    <updated>2022-04-24T09:58:52.626Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建线程池的7种方式"><a href="#创建线程池的7种方式" class="headerlink" title="创建线程池的7种方式"></a>创建线程池的7种方式</h1><pre><code>import java.util.Date;import java.util.concurrent.ArrayBlockingQueue;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.Future;import java.util.concurrent.ScheduledExecutorService;import java.util.concurrent.ThreadPoolExecutor;import java.util.concurrent.TimeUnit;public class ThreadPoolCreationTest &#123;    public static void fixedThreadPool()&#123;//        ExecutorService threadPool = Executors.newFixedThreadPool(2);//        //        Runnable runnable = new Runnable()&#123;//            @Override//            public void run()&#123;//                System.out.println(&quot;任务被执行，线程：&quot; + Thread.currentThread().getName());//            &#125;//        &#125;;//        //        Future&lt;?&gt; submit = threadPool.submit(runnable);////        System.out.println(submit);////        System.out.println(submit.isDone());//        threadPool.execute(runnable);//        threadPool.execute(runnable);//        threadPool.execute(runnable);                ExecutorService threadPool = Executors.newFixedThreadPool(2);        for(int i = 0; i &lt; 4; i++)&#123;            threadPool.execute(() -&gt; &#123;                System.out.println(&quot;任务被执行，线程：&quot; + Thread.currentThread().getName());            &#125;);        &#125;    &#125;        public static void cachedThreadPool()&#123;        ExecutorService threadPool = Executors.newCachedThreadPool();        for(int i=0;i&lt;10;i++)&#123;            threadPool.execute(() -&gt; &#123;                System.out.println(&quot;任务被执行，线程：&quot; + Thread.currentThread().getName());            &#125;);        &#125;    &#125;        public static void singleThreadPool()&#123;        ExecutorService threadPool = Executors.newSingleThreadExecutor();        for(int i = 0; i &lt; 10; i++)&#123;            threadPool.execute(() -&gt; &#123;                System.out.println(&quot;任务被执行，线程：&quot; + Thread.currentThread().getName());            &#125;);        &#125;    &#125;        public static void scheduledThreadPool()&#123;        ScheduledExecutorService threadPool = Executors.newScheduledThreadPool(5);        System.out.println(&quot;添加任务，时间：&quot;+new Date());        threadPool.schedule(()-&gt;&#123;            System.out.println(&quot;任务被执行，时间：&quot;+new Date());            try &#123;                TimeUnit.SECONDS.sleep(1);            &#125; catch (InterruptedException e) &#123;                e.printStackTrace();            &#125;        &#125;, 1, TimeUnit.SECONDS);    &#125;        public static void singleThreadScheduledPool()&#123;        ScheduledExecutorService threadPool = Executors.newSingleThreadScheduledExecutor();        System.out.println(&quot;添加任务，时间：&quot;+new Date());        threadPool.schedule(()-&gt;&#123;            System.out.println(&quot;任务被执行，时间：&quot;+new Date());            try &#123;                TimeUnit.SECONDS.sleep(1);            &#125; catch (InterruptedException e) &#123;                e.printStackTrace();            &#125;        &#125;, 2, TimeUnit.SECONDS);    &#125;        public static void workStealingPool()&#123;        ExecutorService threadPool = Executors.newWorkStealingPool();        for(int i = 0; i &lt; 10; i++)&#123;            final int index = i;            threadPool.execute(() -&gt;&#123;                System.out.println(index + &quot;被执行，线程名&quot;+Thread.currentThread().getName());            &#125;);        &#125;        while(!threadPool.isTerminated())&#123;                    &#125;    &#125;        //推荐使用    //阿里巴巴开发手册：线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。    public static void myThreadPoolExecutor()&#123;        final int CORE_POOL_SIZE = 5;          final int MAX_POOL_SIZE = 10;        final int QUEUE_CAPACITY = 100;        final Long KEEP_ALIVE_TIME = 1L;        ThreadPoolExecutor threadPool = new ThreadPoolExecutor(                CORE_POOL_SIZE,                MAX_POOL_SIZE,                KEEP_ALIVE_TIME,                TimeUnit.SECONDS,                new ArrayBlockingQueue&lt;&gt;(QUEUE_CAPACITY),                new ThreadPoolExecutor.CallerRunsPolicy()                );        for(int i = 0; i &lt; 10; i++)&#123;            final int index = i;            threadPool.execute(() -&gt; &#123;                System.out.println(index+&quot;被执行，线程名：&quot;+Thread.currentThread().getName());                try &#123;                    Thread.sleep(1000);                &#125; catch (InterruptedException e) &#123;                    e.printStackTrace();                &#125;            &#125;);        &#125;            &#125;            public static void main(String[] args) &#123;        //fixedThreadPool();        //cachedThreadPool();        //singleThreadPool();        //scheduledThreadPool();        //singleThreadScheduledPool();        //workStealingPool();        myThreadPoolExecutor();    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创建线程池的7种方式&quot;&gt;&lt;a href=&quot;#创建线程池的7种方式&quot; class=&quot;headerlink&quot; title=&quot;创建线程池的7种方式&quot;&gt;&lt;/a&gt;创建线程池的7种方式&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;import java.util.Date;
import </summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="基础" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="创建线程池的7种方式" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%847%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="线程池" scheme="http://example.com/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>Java | ThreadLocal</title>
    <link href="http://example.com/2022/04/23/ThreadLocal/"/>
    <id>http://example.com/2022/04/23/ThreadLocal/</id>
    <published>2022-04-24T04:07:49.000Z</published>
    <updated>2022-04-24T04:10:42.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ThreadLocal示例"><a href="#ThreadLocal示例" class="headerlink" title="ThreadLocal示例"></a>ThreadLocal示例</h1><p>ThreadLocal:<br>通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。如果想实现每一个线程都有自己的专属本地变量该如何解决呢？ JDK 中提供的ThreadLocal类正是为了解决这样的问题。<br>ThreadLocal类主要解决的就是让每个线程绑定自己的值，可以将ThreadLocal类形象的比喻成存放数据的盒子，盒子中可以存储每个线程的私有数据。<br>如果你创建了一个ThreadLocal变量，那么访问这个变量的每个线程都会有这个变量的本地副本，这也是ThreadLocal变量名的由来。他们可以使用 get（） 和 set（） 方法来获取默认值或将修改其值，从而避免了线程安全问题。</p><p><strong>代码：</strong></p><pre><code>import java.text.SimpleDateFormat;import java.util.Random;public class ThreadLocalTest implements Runnable&#123;    //private static final ThreadLocal&lt;SimpleDateFormat&gt; formatter = ThreadLocal.withInitial(()-&gt;new SimpleDateFormat(&quot;yyyyMMdd HHmm&quot;));    private static final ThreadLocal&lt;SimpleDateFormat&gt; formatter = new ThreadLocal&lt;SimpleDateFormat&gt;()&#123;        @Override        protected SimpleDateFormat initialValue()&#123;            return new SimpleDateFormat(&quot;yyyyMMdd HHmm&quot;);        &#125;    &#125;;        @Override    public void run() &#123;        System.out.println(&quot;Thread Name=&quot;+Thread.currentThread().getName()+&quot; default formatter=&quot;+formatter.get().toPattern());        try &#123;            Thread.sleep(new Random().nextInt(1000));        &#125; catch (InterruptedException e) &#123;            e.printStackTrace();        &#125;        formatter.set(new SimpleDateFormat());        System.out.println(&quot;Thread Name=&quot;+Thread.currentThread().getName()+&quot; current formatter=&quot;+formatter.get().toPattern());            &#125;        public static void main(String[] args) throws InterruptedException&#123;        ThreadLocalTest obj = new ThreadLocalTest();        for(int i=0;i&lt;10;i++)&#123;            Thread t = new Thread(obj, &quot;&quot;+i);            Thread.sleep(new Random().nextInt(1000));            t.start();        &#125;    &#125;    &#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ThreadLocal示例&quot;&gt;&lt;a href=&quot;#ThreadLocal示例&quot; class=&quot;headerlink&quot; title=&quot;ThreadLocal示例&quot;&gt;&lt;/a&gt;ThreadLocal示例&lt;/h1&gt;&lt;p&gt;ThreadLocal:&lt;br&gt;通常情况下，我们创建</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="基础" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="ThreadLocal" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/ThreadLocal/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="ThreadLocal" scheme="http://example.com/tags/ThreadLocal/"/>
    
  </entry>
  
  <entry>
    <title>单例模式 | 双重检验锁方式实现单例模式</title>
    <link href="http://example.com/2022/04/23/%E5%8F%8C%E9%87%8D%E6%A3%80%E9%AA%8C%E9%94%81%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/04/23/%E5%8F%8C%E9%87%8D%E6%A3%80%E9%AA%8C%E9%94%81%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-04-24T02:43:26.000Z</published>
    <updated>2022-04-24T02:56:03.079Z</updated>
    
    <content type="html"><![CDATA[<p><a href>参考资料</a></p><pre><code>package SingletonTest;class Singleton&#123;    private volatile static Singleton instance;        private Singleton()&#123;            &#125;        public static Singleton getInstance()&#123;        if(instance == null)&#123;            synchronized (Singleton.class) &#123;                if(instance == null)&#123;                    instance = new Singleton();                &#125;                //instance = new Singleton();            &#125;        &#125;        return instance;    &#125;&#125;public class MyThread extends Thread&#123;    @Override    public void run()&#123;        System.out.println(Singleton.getInstance().hashCode());    &#125;        public static void main(String[] args)&#123;        MyThread[] myThread = new MyThread[10];        for(int i=0;i&lt;myThread.length;i++)&#123;            myThread[i] = new MyThread();        &#125;                for(int i=0;i&lt;myThread.length;i++)&#123;            myThread[i].start();        &#125;    &#125;&#125;</code></pre><p><strong>双重锁的运行结果：</strong></p><pre><code>1156205522115620552211562055221156205522115620552211562055221156205522115620552211562055221156205522</code></pre><p><strong>去掉第二重锁的运行结果（产生了多例）：</strong></p><pre><code>1700548907148620290814862029081700548907148620290814862029081700548907148620290814862029081700548907</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href&gt;参考资料&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package SingletonTest;

class Singleton&amp;#123;
    private volatile static Singleton instance;
    
    pr</summary>
      
    
    
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="单例模式" scheme="http://example.com/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="双重检验锁方式实现单例模式" scheme="http://example.com/tags/%E5%8F%8C%E9%87%8D%E6%A3%80%E9%AA%8C%E9%94%81%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java | HashMap的七种遍历方式</title>
    <link href="http://example.com/2022/04/23/HashMap%E7%9A%84%E4%B8%83%E7%A7%8D%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2022/04/23/HashMap%E7%9A%84%E4%B8%83%E7%A7%8D%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F/</id>
    <published>2022-04-23T13:00:26.000Z</published>
    <updated>2022-04-23T13:20:32.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HashMap的七种遍历方式"><a href="#HashMap的七种遍历方式" class="headerlink" title="HashMap的七种遍历方式"></a>HashMap的七种遍历方式</h1><p><a href="https://mp.weixin.qq.com/s/zQBN3UvJDhRTKP6SzcZFKw">参考资料</a></p><pre><code>import java.util.HashMap;import java.util.Iterator;import java.util.Map;import java.util.Map.Entry;public class HashMapTraversalMethodsTest &#123;    public static void main(String[] args) &#123;                Map&lt;Integer, String&gt; map = new HashMap();        map.put(1, &quot;Java&quot;);        map.put(2, &quot;Python&quot;);        map.put(3, &quot;C&quot;);        map.put(4, &quot;C++&quot;);        map.put(5, &quot;JavaScript&quot;);                //迭代器EntrySet（推荐使用）//        Iterator&lt;Entry&lt;Integer, String&gt;&gt; iterator = map.entrySet().iterator();//        while(iterator.hasNext())&#123;//            Entry&lt;Integer, String&gt; entry = iterator.next();//            System.out.println(entry.getKey());//            System.out.println(entry.getValue());//        &#125;                //迭代器KeySet//        Iterator&lt;Integer&gt; iterator = map.keySet().iterator();//        while(iterator.hasNext())&#123;//            Integer key = iterator.next();//            System.out.println(key);//            System.out.println(map.get(key));//        &#125;                //ForEach EntrySet//        for(Entry&lt;Integer, String&gt; entry:map.entrySet())&#123;//            System.out.println(entry.getKey());//            System.out.println(entry.getValue());//        &#125;                //ForEach KeySet//        for(Integer key:map.keySet())&#123;//            System.out.println(key);//            System.out.println(map.get(key));//        &#125;                //Lambda//        map.forEach((key, value) -&gt; &#123;//            System.out.println(key);//            System.out.println(value);//        &#125;);                //Streams API单线程//        map.entrySet().stream().forEach((entry) -&gt; &#123;//            System.out.println(entry.getKey());//            System.out.println(entry.getValue());//        &#125;);                //Streams API多线程        map.entrySet().parallelStream().forEach((entry) -&gt;&#123;            System.out.println(entry.getKey());            System.out.println(entry.getValue());        &#125;);    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HashMap的七种遍历方式&quot;&gt;&lt;a href=&quot;#HashMap的七种遍历方式&quot; class=&quot;headerlink&quot; title=&quot;HashMap的七种遍历方式&quot;&gt;&lt;/a&gt;HashMap的七种遍历方式&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://mp.we</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="基础" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="HashMap的七种遍历方式" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/HashMap%E7%9A%84%E4%B8%83%E7%A7%8D%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F/"/>
    
    
    <category term="HashMap" scheme="http://example.com/tags/HashMap/"/>
    
    <category term="遍历" scheme="http://example.com/tags/%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>SSM | 批量删除</title>
    <link href="http://example.com/2022/04/18/SSM-%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4/"/>
    <id>http://example.com/2022/04/18/SSM-%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4/</id>
    <published>2022-04-19T02:27:24.000Z</published>
    <updated>2022-04-19T02:32:27.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h1><p>1.list.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;展示员工信息&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;$&#123;pageContext.servletContext.contextPath&#125;/css/index_work.css&quot;/&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;$&#123;pageContext.servletContext.contextPath&#125;/js/jquery-1.8.2.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;    $(function()&#123;        $(&quot;#selectAll&quot;).click(function()&#123;            $(&quot;[name=&#39;eid&#39;]&quot;).prop(&quot;checked&quot;, $(this).prop(&quot;checked&quot;));        &#125;);                $(&quot;#deleteMore&quot;).click(function()&#123;            $(&quot;form&quot;).attr(&quot;action&quot;, $(this).attr(&quot;href&quot;)).submit();            return false;//关闭默认跳转        &#125;);    &#125;);&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;form method=&quot;post&quot;&gt;        &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;DELETE&quot;/&gt;        &lt;table&gt;            &lt;tr&gt;                &lt;th&gt;                    &lt;input type=&quot;checkbox&quot; id=&quot;selectAll&quot;&gt;                &lt;/th&gt;                &lt;th&gt;EID&lt;/th&gt;                &lt;th&gt;ENAME&lt;/th&gt;                &lt;th&gt;AGE&lt;/th&gt;                &lt;th&gt;SEX&lt;/th&gt;                &lt;th&gt;DEPARTMENTNAME&lt;/th&gt;                &lt;th&gt;OPTIONS&lt;/th&gt;            &lt;/tr&gt;            &lt;c:forEach items=&quot;$&#123;empList&#125;&quot; var=&quot;emp&quot;&gt;                &lt;tr&gt;                    &lt;td&gt;                        &lt;input type=&quot;checkbox&quot; name=&quot;eid&quot; value=&quot;$&#123;emp.eid&#125;&quot;/&gt;                    &lt;/td&gt;                    &lt;td&gt;$&#123;emp.eid&#125;&lt;/td&gt;                    &lt;td&gt;$&#123;emp.ename&#125;&lt;/td&gt;                    &lt;td&gt;$&#123;emp.age&#125;&lt;/td&gt;                    &lt;td&gt;$&#123;emp.sex == 0 ? &#39;女&#39;:&#39;男&#39;&#125;&lt;/td&gt;                    &lt;td&gt;$&#123;emp.dept.dname&#125;&lt;/td&gt;                    &lt;td&gt;                        &lt;a href=&quot;emp&quot;&gt;删除&lt;/a&gt;                        &lt;a href=&quot;$&#123;pageContext.servletContext.contextPath&#125;/emp/$&#123;emp.eid&#125;&quot;&gt;修改&lt;/a&gt;                    &lt;/td&gt;                &lt;/tr&gt;            &lt;/c:forEach&gt;            &lt;tr&gt;                &lt;td colspan=&quot;10&quot;&gt;                    &lt;a id=&quot;deleteMore&quot; href=&quot;$&#123;pageContext.servletContext.contextPath&#125;/emps&quot;&gt;批量删除&lt;/a&gt;&amp;nbsp;                    $&#123;page&#125;                &lt;/td&gt;            &lt;/tr&gt;        &lt;/table&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>2.EmpMapper.java</p><pre><code>public interface EmpMapper &#123;    //获取所有的员工信息    List&lt;Emp&gt; getAllEmp();        ......        void deleteMore(String eids);&#125;</code></pre><p>3.EmpMapper.xml</p><pre><code>&lt;!-- void deleteMore(String eids); --&gt;&lt;delete id=&quot;deleteMore&quot;&gt;    delete from emp where eid in ($&#123;value&#125;)&lt;/delete&gt;</code></pre><p>4.EmpService.java</p><pre><code>public interface EmpService &#123;    ......        void deleteMore(String eids);&#125;</code></pre><p>5.EmpServiceImpl.java</p><pre><code>@Servicepublic class EmpServiceImpl implements EmpService&#123;    @Autowired    private EmpMapper empMapper;        ......    @Override    public void deleteMore(String eids) &#123;        // TODO Auto-generated method stub        empMapper.deleteMore(eids);    &#125;&#125;</code></pre><p>6.EmpController.java</p><pre><code>@Controllerpublic class EmpController &#123;    @Autowired    private EmpService service;        ......        @RequestMapping(value=&quot;/emps&quot;, method=RequestMethod.DELETE)    public String deleteMore(String eid)&#123;        //获取客户端name属性相同的多个元素的值，可以通过字符串直接获取，每个值以逗号分隔，也可以以数组直接获取        System.out.println(eid);        service.deleteMore(eid);        return &quot;redirect:/emps/1&quot;;    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;批量删除&quot;&gt;&lt;a href=&quot;#批量删除&quot; class=&quot;headerlink&quot; title=&quot;批量删除&quot;&gt;&lt;/a&gt;批量删除&lt;/h1&gt;&lt;p&gt;1.list.jsp&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;%@ page language=&amp;quot;java&amp;quot</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SSM" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SSM/"/>
    
    <category term="批量删除" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SSM/%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="SSM" scheme="http://example.com/tags/SSM/"/>
    
    <category term="批量删除" scheme="http://example.com/tags/%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4/"/>
    
  </entry>
  
  <entry>
    <title>SSM | 修改</title>
    <link href="http://example.com/2022/04/18/SSM-%E4%BF%AE%E6%94%B9/"/>
    <id>http://example.com/2022/04/18/SSM-%E4%BF%AE%E6%94%B9/</id>
    <published>2022-04-19T01:07:54.000Z</published>
    <updated>2022-04-19T01:13:39.260Z</updated>
    
    <content type="html"><![CDATA[<h1 id="修改员工信息"><a href="#修改员工信息" class="headerlink" title="修改员工信息"></a>修改员工信息</h1><p>1.list.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;展示员工信息&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;$&#123;pageContext.servletContext.contextPath&#125;/css/index_work.css&quot;/&gt;&lt;/head&gt;&lt;body&gt;    &lt;table&gt;        &lt;tr&gt;            &lt;th&gt;EID&lt;/th&gt;            &lt;th&gt;ENAME&lt;/th&gt;            &lt;th&gt;AGE&lt;/th&gt;            &lt;th&gt;SEX&lt;/th&gt;            &lt;th&gt;DEPARTMENTNAME&lt;/th&gt;            &lt;th&gt;OPTIONS&lt;/th&gt;        &lt;/tr&gt;        &lt;c:forEach items=&quot;$&#123;empList&#125;&quot; var=&quot;emp&quot;&gt;            &lt;tr&gt;                &lt;td&gt;$&#123;emp.eid&#125;&lt;/td&gt;                &lt;td&gt;$&#123;emp.ename&#125;&lt;/td&gt;                &lt;td&gt;$&#123;emp.age&#125;&lt;/td&gt;                &lt;td&gt;$&#123;emp.sex == 0 ? &#39;女&#39;:&#39;男&#39;&#125;&lt;/td&gt;                &lt;td&gt;$&#123;emp.dept.dname&#125;&lt;/td&gt;                &lt;td&gt;                    &lt;a href=&quot;emp&quot;&gt;删除&lt;/a&gt;                    &lt;a href=&quot;$&#123;pageContext.servletContext.contextPath&#125;/emp/$&#123;emp.eid&#125;&quot;&gt;修改&lt;/a&gt;                &lt;/td&gt;            &lt;/tr&gt;        &lt;/c:forEach&gt;        &lt;tr&gt;            &lt;td colspan=&quot;10&quot;&gt;                $&#123;page&#125;            &lt;/td&gt;        &lt;/tr&gt;    &lt;/table&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>2.update.jsp</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%@taglib uri=&quot;http://www.springframework.org/tags/form&quot; prefix=&quot;form&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;修改员工信息&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;$&#123;pageContext.servletContext.contextPath&#125;/css/index_work.css&quot;/&gt;&lt;/head&gt;&lt;body&gt;    &lt;form:form action=&quot;$&#123;pageContext.servletContext.contextPath&#125;/emp&quot; method=&quot;post&quot; modelAttribute=&quot;emp&quot;&gt;        &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;PUT&quot;/&gt;        &lt;form:hidden path=&quot;eid&quot;/&gt;        &lt;table&gt;            &lt;tr&gt;                &lt;th colspan=&quot;2&quot;&gt;UPDATE EMP INFO&lt;/th&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;ENAME&lt;/td&gt;                &lt;td&gt;                    &lt;form:input path=&quot;ename&quot;/&gt;                &lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;AGE&lt;/td&gt;                &lt;td&gt;                    &lt;form:input path=&quot;age&quot;/&gt;                &lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;sex&lt;/td&gt;                &lt;td&gt;                    &lt;form:radiobuttons path=&quot;sex&quot; items=&quot;$&#123;sex&#125;&quot;/&gt;                &lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;DEPARTMENT&lt;/td&gt;                &lt;td&gt;                    &lt;form:select path=&quot;dept.did&quot; items=&quot;$&#123;deptList&#125;&quot; itemLabel=&quot;dname&quot; itemValue=&quot;did&quot;&gt;&lt;/form:select&gt;                &lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td colspan=&quot;2&quot;&gt;                    &lt;input type=&quot;submit&quot; value=&quot;修改&quot; /&gt;                &lt;/td&gt;            &lt;/tr&gt;        &lt;/table&gt;    &lt;/form:form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>3.EmpController.java</p><pre><code>@Controllerpublic class EmpController &#123;    @Autowired    private EmpService service;        @RequestMapping(value=&quot;/emp/&#123;eid&#125;&quot;, method=RequestMethod.GET)    public String toUpdate(@PathVariable(&quot;eid&quot;)String eid, Map&lt;String, Object&gt; map)&#123;        //要修改的员工信息        Emp emp = service.getEmpByEid(eid);                //所有的部门信息        List&lt;Dept&gt; deptList = service.getAllDept();                //获取存储性别的map集合        Map&lt;String, String&gt; sex = new HashMap&lt;&gt;();        sex.put(&quot;0&quot;, &quot;女&quot;);        sex.put(&quot;1&quot;, &quot;男&quot;);                map.put(&quot;emp&quot;, emp);        map.put(&quot;deptList&quot;, deptList);        map.put(&quot;sex&quot;, sex);                return &quot;update&quot;;    &#125;        @RequestMapping(value=&quot;/emp&quot;, method=RequestMethod.PUT)    public String updateEmp(Emp emp)&#123;        service.updateEmp(emp);        return &quot;redirect:/emps/1&quot;;    &#125;&#125;</code></pre><p>4.EmpService.java</p><pre><code>public interface EmpService &#123;    ......        List&lt;Dept&gt; getAllDept();&#125;</code></pre><p>5.EmpServiceImpl.java</p><pre><code>@Servicepublic class EmpServiceImpl implements EmpService&#123;    @Autowired    private EmpMapper empMapper;        @Autowired    private DeptMapper deptMapper;        ......        @Override    public List&lt;Dept&gt; getAllDept() &#123;        // TODO Auto-generated method stub        return deptMapper.getAllDept();    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;修改员工信息&quot;&gt;&lt;a href=&quot;#修改员工信息&quot; class=&quot;headerlink&quot; title=&quot;修改员工信息&quot;&gt;&lt;/a&gt;修改员工信息&lt;/h1&gt;&lt;p&gt;1.list.jsp&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;%@ page language=&amp;quot;j</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SSM" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SSM/"/>
    
    <category term="修改" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SSM/%E4%BF%AE%E6%94%B9/"/>
    
    
    <category term="SSM" scheme="http://example.com/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>Java | 反射</title>
    <link href="http://example.com/2022/04/18/%E5%8F%8D%E5%B0%84/"/>
    <id>http://example.com/2022/04/18/%E5%8F%8D%E5%B0%84/</id>
    <published>2022-04-19T00:07:36.000Z</published>
    <updated>2022-04-19T00:13:00.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>1.反射<br><strong>运行时分析类</strong>并调用类中的属性和方法<br>2.反射的应用场景<br>（1）spring、springboot等<strong>框架</strong>的实现<br>（2）动态代理<br>（3）注解<br>3.反射的优缺点<br>3.1优点<br>（1）灵活<br>（2）不安全（比如无视泛型参数的安全检查）<br>3.2缺点<br>性能稍差<br>4.获取Class对象的四种方式<br>（1）类.class<br>（2）Class.forName(类的全限定名)<br>（3）Instance.getClass()<br>（4）xxxClassLoader.loadClass()</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;反射&quot;&gt;&lt;a href=&quot;#反射&quot; class=&quot;headerlink&quot; title=&quot;反射&quot;&gt;&lt;/a&gt;反射&lt;/h1&gt;&lt;p&gt;1.反射&lt;br&gt;&lt;strong&gt;运行时分析类&lt;/strong&gt;并调用类中的属性和方法&lt;br&gt;2.反射的应用场景&lt;br&gt;（1）spring、s</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="基础" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="反射" scheme="http://example.com/categories/Java/%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%B0%84/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="反射" scheme="http://example.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>SSM | SSM项目搭建</title>
    <link href="http://example.com/2022/04/18/SSM%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2022/04/18/SSM%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</id>
    <published>2022-04-18T08:51:25.000Z</published>
    <updated>2022-04-18T08:57:23.778Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSM整合步骤："><a href="#SSM整合步骤：" class="headerlink" title="SSM整合步骤："></a>SSM整合步骤：</h2><p>1.导入jar包<br>    spring:<br>    springMVC:<br>    mybatis:<br>    第三方支持:log4j,pageHelper,AspectJ,jackson,jstl<br><img src="/2022/04/18/SSM%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1.PNG"><br>2.搭建springMVC<br>    (1)web.xml<br>        CharacterEncodingFilter:filter<br>        HiddenHttpMethodFilter:filter<br>        DispatcherServlet:servlet<br>    (2)springMVC.xml<br>        扫描控制层组件：<a href="context:component-scan">context:component-scan</a><br>        视图解析器:InternalResourceViewResolver<br>        Default Servlet:<a href="mvc:default-servlet-handler/">mvc:default-servlet-handler/</a><br>        MVC驱动:&lt;mvc:annotation-driven /&gt;<br>        可选：MultipartResolver,拦截器</p><span id="more"></span><p>3.整合springMVC和spring<br>    (1)web.xml<br>        ContextLoaderListener:listener<br>        context-param<br>    (2)spring.xml<br>        扫描组件（排除控制层）<br>4.搭建mybatis<br>    核心配置文件mybatis-config.xml<br>    mapper接口和mapper映射文件<br>5.spring整合mybatis<br>    spring.xml:<br>        properties文件的引入<br>        DataSource数据源的配置：xxxDataSource<br>        事务管理器：DataSourceTransactionManager<br>        开启事务驱动:<a href="tx:annotation-driven">tx:annotation-driven</a><br>        SqlSessionFactoryBean:管理SqlSession<br>        MypperScannerConfigurer:自动生成Mapper接口的代理实现类<br>6.REST CRUD<br>    查询+分页<br>    修改（form）<br><strong>项目目录</strong><br><img src="/2022/04/18/SSM%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/2.PNG"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;SSM整合步骤：&quot;&gt;&lt;a href=&quot;#SSM整合步骤：&quot; class=&quot;headerlink&quot; title=&quot;SSM整合步骤：&quot;&gt;&lt;/a&gt;SSM整合步骤：&lt;/h2&gt;&lt;p&gt;1.导入jar包&lt;br&gt;    spring:&lt;br&gt;    springMVC:&lt;br&gt;    mybatis:&lt;br&gt;    第三方支持:log4j,pageHelper,AspectJ,jackson,jstl&lt;br&gt;&lt;img src=&quot;/2022/04/18/SSM%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1.PNG&quot;&gt;&lt;br&gt;2.搭建springMVC&lt;br&gt;    (1)web.xml&lt;br&gt;        CharacterEncodingFilter:filter&lt;br&gt;        HiddenHttpMethodFilter:filter&lt;br&gt;        DispatcherServlet:servlet&lt;br&gt;    (2)springMVC.xml&lt;br&gt;        扫描控制层组件：&lt;a href=&quot;context:component-scan&quot;&gt;context:component-scan&lt;/a&gt;&lt;br&gt;        视图解析器:InternalResourceViewResolver&lt;br&gt;        Default Servlet:&lt;a href=&quot;mvc:default-servlet-handler/&quot;&gt;mvc:default-servlet-handler/&lt;/a&gt;&lt;br&gt;        MVC驱动:&amp;lt;mvc:annotation-driven /&amp;gt;&lt;br&gt;        可选：MultipartResolver,拦截器&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SSM" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SSM/"/>
    
    <category term="SSM项目搭建" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SSM/SSM%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="SSM" scheme="http://example.com/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>SSM | 列表及分页</title>
    <link href="http://example.com/2022/04/18/SSM-%E5%88%97%E8%A1%A8%E5%8F%8A%E5%88%86%E9%A1%B5/"/>
    <id>http://example.com/2022/04/18/SSM-%E5%88%97%E8%A1%A8%E5%8F%8A%E5%88%86%E9%A1%B5/</id>
    <published>2022-04-18T08:50:35.000Z</published>
    <updated>2022-04-18T09:16:01.226Z</updated>
    
    <content type="html"><![CDATA[<h1 id="列表及分页"><a href="#列表及分页" class="headerlink" title="列表及分页"></a>列表及分页</h1><p>1.index.jsp(请求)</p><pre><code>......&lt;a href=&quot;emps/1&quot;&gt;展示员工信息&lt;/a&gt;......</code></pre><span id="more"></span><p>2.PageUtil.java</p><pre><code>package com.atguigu.ssm.util;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import com.atguigu.ssm.bean.Emp;import com.github.pagehelper.PageInfo;/** * 首页 上一页 1 2 3 4 5 下一页 末页 */public class PageUtil &#123;    public static String getPageInfo(PageInfo&lt;?&gt; pageInfo, HttpServletRequest request)&#123;        String path = request.getContextPath() + &quot;/&quot;;                StringBuilder builder = new StringBuilder();                //拼接首页        builder.append(&quot;&lt;a href=&#39;&quot;+path+&quot;emps/1&#39;&gt;首页&lt;/a&gt;&quot;);        builder.append(&quot;&amp;nbsp;&quot;);                //拼接上一页        if(pageInfo.isHasPreviousPage())&#123;            builder.append(&quot;&lt;a href=&#39;&quot;+path+&quot;emps/&quot;+pageInfo.getPrePage()+&quot;&#39;&gt;上一页 &lt;/a&gt;&quot;);            builder.append(&quot;&amp;nbsp;&quot;);        &#125;else&#123;            builder.append(&quot;上一页&quot;);            builder.append(&quot;&amp;nbsp;&quot;);        &#125;                //拼接页码        int[] nums = pageInfo.getNavigatepageNums();        for(int i : nums)&#123;            if(i == pageInfo.getPageNum())&#123;                builder.append(&quot;&lt;a style=&#39;color:red;&#39; href=&#39;&quot;+path+&quot;emps/&quot;+i+&quot;&#39;&gt;&quot;+i+&quot;&lt;/a&gt;&quot;);                builder.append(&quot;&amp;nbsp;&quot;);            &#125;else&#123;                builder.append(&quot;&lt;a href=&#39;&quot;+path+&quot;emps/&quot;+i+&quot;&#39;&gt;&quot;+i+&quot;&lt;/a&gt;&quot;);                builder.append(&quot;&amp;nbsp;&quot;);            &#125;        &#125;                //拼接下一页        if(pageInfo.isHasNextPage())&#123;            builder.append(&quot;&lt;a href=&#39;&quot;+path+&quot;emps/&quot;+pageInfo.getNextPage()+&quot;&#39;&gt;下一页&lt;/a&gt;&quot;);            builder.append(&quot;&amp;nbsp;&quot;);        &#125;else&#123;            builder.append(&quot;下一页&quot;);            builder.append(&quot;&amp;nbsp;&quot;);        &#125;                //拼接尾页        builder.append(&quot;&lt;a href=&#39;&quot;+path+&quot;emps/&quot;+pageInfo.getPages()+&quot;&#39;&gt;尾页&lt;/a&gt;&quot;);        builder.append(&quot;&amp;nbsp;&quot;);                return builder.toString();    &#125;&#125;</code></pre><p>3.EmpController.java</p><pre><code>package com.atguigu.ssm.controller;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import com.atguigu.ssm.bean.Emp;import com.atguigu.ssm.service.EmpService;import com.atguigu.ssm.util.PageUtil;import com.github.pagehelper.PageHelper;import com.github.pagehelper.PageInfo;@Controllerpublic class EmpController &#123;    @Autowired    private EmpService service;        @RequestMapping(value=&quot;/emps/&#123;pageNum&#125;&quot;, method=RequestMethod.GET)    public String getAllEmp(Map&lt;String, Object&gt; map, @PathVariable(&quot;pageNum&quot;)Integer pageNum, HttpServletRequest request)&#123;        PageHelper.startPage(pageNum, 1);        List&lt;Emp&gt; empList = service.getAllEmp();        PageInfo&lt;Emp&gt; pageInfo = new PageInfo&lt;&gt;(empList, 5);        String page = PageUtil.getPageInfo(pageInfo, request);        map.put(&quot;empList&quot;, empList);        map.put(&quot;page&quot;, page);        return &quot;list&quot;;    &#125;&#125;</code></pre><p>4.EmpService(Service接口)</p><pre><code>package com.atguigu.ssm.service;import java.util.List;import com.atguigu.ssm.bean.Emp;public interface EmpService &#123;    List&lt;Emp&gt; getAllEmp();        Emp getEmpByEid(String eid);        void updateEmp(Emp emp);&#125;</code></pre><p>5.EmpServiceImpl.java(Service实现类)</p><pre><code>package com.atguigu.ssm.service.impl;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.atguigu.ssm.bean.Emp;import com.atguigu.ssm.mapper.EmpMapper;import com.atguigu.ssm.service.EmpService;@Servicepublic class EmpServiceImpl implements EmpService&#123;    @Autowired    private EmpMapper mapper;    @Override    public List&lt;Emp&gt; getAllEmp() &#123;        // TODO Auto-generated method stub        return mapper.getAllEmp();    &#125;    @Override    public Emp getEmpByEid(String eid) &#123;        // TODO Auto-generated method stub        return mapper.getEmpByEid(eid);    &#125;    @Override    public void updateEmp(Emp emp) &#123;        // TODO Auto-generated method stub        mapper.updateEmp(emp);    &#125;&#125;</code></pre><p>6.Emp.java(Emp Bean)</p><pre><code>package com.atguigu.ssm.bean;public class Dept &#123;    private Integer did;    private String dname;    public Integer getDid() &#123;        return did;    &#125;    public void setDid(Integer did) &#123;        this.did = did;    &#125;    public String getDname() &#123;        return dname;    &#125;    public void setDname(String dname) &#123;        this.dname = dname;    &#125;&#125;</code></pre><p>7.Dept.java(Dept Bean)</p><pre><code>package com.atguigu.ssm.bean;public class Emp &#123;    private Integer eid;    private String ename;    private Integer age;    private String sex;    private Dept dept;    public Integer getEid() &#123;        return eid;    &#125;    public void setEid(Integer eid) &#123;        this.eid = eid;    &#125;    public String getEname() &#123;        return ename;    &#125;    public void setEname(String ename) &#123;        this.ename = ename;    &#125;    public Integer getAge() &#123;        return age;    &#125;    public void setAge(Integer age) &#123;        this.age = age;    &#125;    public String getSex() &#123;        return sex;    &#125;    public void setSex(String sex) &#123;        this.sex = sex;    &#125;    public Dept getDept() &#123;        return dept;    &#125;    public void setDept(Dept dept) &#123;        this.dept = dept;    &#125;&#125;</code></pre><p>8.EmpMapper.java(Emp Mapper接口)</p><pre><code>package com.atguigu.ssm.mapper;import java.util.List;import com.atguigu.ssm.bean.Emp;public interface EmpMapper &#123;    //获取所有的员工信息    List&lt;Emp&gt; getAllEmp();        //根据eid获取员工信息    Emp getEmpByEid(String eid);        //修改员工信息    void updateEmp(Emp emp);&#125;</code></pre><p>9.DeptMapper.java(Dept Mapper接口)</p><pre><code>package com.atguigu.ssm.mapper;import java.util.List;import com.atguigu.ssm.bean.Dept;public interface DeptMapper &#123;    //获取所有的部门信息    List&lt;Dept&gt; getAllDept();&#125;</code></pre><p>10.EmpMapper.xml(Emp映射文件)</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.atguigu.ssm.mapper.EmpMapper&quot;&gt;    &lt;!--         //获取所有的员工信息        List&lt;Emp&gt; getAllEmp();     --&gt;    &lt;resultMap type=&quot;Emp&quot; id=&quot;empMap&quot;&gt;        &lt;id column=&quot;eid&quot; property=&quot;eid&quot; /&gt;        &lt;result column=&quot;ename&quot; property=&quot;ename&quot;/&gt;        &lt;result column=&quot;age&quot; property=&quot;age&quot;/&gt;        &lt;result column=&quot;sex&quot; property=&quot;sex&quot;/&gt;        &lt;association property=&quot;dept&quot; javaType=&quot;Dept&quot;&gt;            &lt;id column=&quot;did&quot; property=&quot;did&quot;/&gt;            &lt;result column=&quot;dname&quot; property=&quot;dname&quot;/&gt;        &lt;/association&gt;    &lt;/resultMap&gt;    &lt;select id=&quot;getAllEmp&quot; resultMap=&quot;empMap&quot;&gt;        select         e.eid,e.ename,e.age,e.sex,d.did,d.dname        from emp e         left join         dept d        on         e.did = d.did    &lt;/select&gt;        &lt;!--         //根据eid获取员工信息        Emp getEmpByEid(String eid);     --&gt;    &lt;select id=&quot;getEmpByEid&quot; resultMap=&quot;empMap&quot;&gt;        select         e.eid,e.ename,e.age,e.sex,d.did,d.dname        from emp e         left join         dept d        on         e.did = d.did        where e.eid = #&#123;eid&#125;    &lt;/select&gt;        &lt;!--         //修改员工信息        void updateEmp(Emp emp);     --&gt;    &lt;update id=&quot;updateEmp&quot;&gt;        update emp set        ename = #&#123;ename&#125;,        age = #&#123;age&#125;,        sex = #&#123;sex&#125;,        did = #&#123;dept.did&#125;        where eid = #&#123;eid&#125;    &lt;/update&gt;&lt;/mapper&gt;</code></pre><p>11.DeptMapper.xml(Dept映射文件)</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.atguigu.ssm.mapper.DeptMapper&quot;&gt;    &lt;!--         //获取所有的部门信息        List&lt;Dept&gt; getAllDept();     --&gt;    &lt;select id=&quot;getAllDept&quot; resultType=&quot;Dept&quot;&gt;        select did,dname from dept    &lt;/select&gt;     &lt;/mapper&gt;</code></pre><p><strong>结果展示</strong><br><img src="/2022/04/18/SSM-%E5%88%97%E8%A1%A8%E5%8F%8A%E5%88%86%E9%A1%B5/1.PNG"></p><p><img src="/2022/04/18/SSM-%E5%88%97%E8%A1%A8%E5%8F%8A%E5%88%86%E9%A1%B5/2.PNG"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;列表及分页&quot;&gt;&lt;a href=&quot;#列表及分页&quot; class=&quot;headerlink&quot; title=&quot;列表及分页&quot;&gt;&lt;/a&gt;列表及分页&lt;/h1&gt;&lt;p&gt;1.index.jsp(请求)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;......
&amp;lt;a href=&amp;quot;emps/1&amp;quot;&amp;gt;展示员工信息&amp;lt;/a&amp;gt;
......
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SSM" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SSM/"/>
    
    <category term="列表及分页" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/SSM/%E5%88%97%E8%A1%A8%E5%8F%8A%E5%88%86%E9%A1%B5/"/>
    
    
    <category term="SSM" scheme="http://example.com/tags/SSM/"/>
    
    <category term="分页" scheme="http://example.com/tags/%E5%88%86%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis | 分页插件PageHelper及PageHelper模拟分页</title>
    <link href="http://example.com/2022/04/17/%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6PageHelper%E5%8F%8APageHelper%E6%A8%A1%E6%8B%9F%E5%88%86%E9%A1%B5/"/>
    <id>http://example.com/2022/04/17/%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6PageHelper%E5%8F%8APageHelper%E6%A8%A1%E6%8B%9F%E5%88%86%E9%A1%B5/</id>
    <published>2022-04-17T08:14:54.000Z</published>
    <updated>2022-04-17T08:21:21.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分页插件PageHelper及PageHelper模拟分页"><a href="#分页插件PageHelper及PageHelper模拟分页" class="headerlink" title="分页插件PageHelper及PageHelper模拟分页"></a>分页插件PageHelper及PageHelper模拟分页</h1><p>1.导入相关包<br>1)pagehelper-x.x.x.jar<br>2)jsqlparser-0.9.5.jar<br>2)在MyBatis全局配置文件mybatis-config.xml中配置分页插件<br><plugins><br>    <plugin interceptor="com.github.pagehelper.PageInterceptor"></plugin><br></plugins><br>3)使用PageHelper提供的方法进行分页<br>4)可以使用更强大的PageInfo封装返回结果</p><h2 id="模拟分页"><a href="#模拟分页" class="headerlink" title="模拟分页"></a>模拟分页</h2><p><strong>PageUtil.java</strong></p><pre><code>package com.atguigu.test;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import com.atguigu.bean.Emp;import com.github.pagehelper.PageInfo;/** * 首页 上一页 1 2 3 4 5 下一页 末页 */public class PageUtil &#123;    public static String getPageInfo(PageInfo&lt;Emp&gt; pageInfo, HttpServletRequest request)&#123;        //String path = request.getContextPath() + &quot;/&quot;;        String path = &quot;/SSM/&quot;;                StringBuilder builder = new StringBuilder();                //拼接首页        builder.append(&quot;&lt;a href=&#39;&quot;+path+&quot;emps/1&#39;&gt;首页&lt;/a&gt;&quot;);        builder.append(&quot;&amp;nbsp;&quot;);                //拼接上一页        if(pageInfo.isHasPreviousPage())&#123;            builder.append(&quot;&lt;a href=&#39;&quot;+path+&quot;emps/&quot;+pageInfo.getPrePage()+&quot;&#39;&gt;上一页 &lt;/a&gt;&quot;);            builder.append(&quot;&amp;nbsp;&quot;);        &#125;else&#123;            builder.append(&quot;上一页&quot;);            builder.append(&quot;&amp;nbsp;&quot;);        &#125;                //拼接页码        int[] nums = pageInfo.getNavigatepageNums();        for(int i : nums)&#123;            if(i == pageInfo.getPageNum())&#123;                builder.append(&quot;&lt;a style=&#39;color:red;&#39; href=&#39;&quot;+path+&quot;emps/&quot;+i+&quot;&#39;&gt;&quot;+i+&quot;&lt;/a&gt;&quot;);                builder.append(&quot;&amp;nbsp;&quot;);            &#125;else&#123;                builder.append(&quot;&lt;a href=&#39;&quot;+path+&quot;emps/&quot;+i+&quot;&#39;&gt;&quot;+i+&quot;&lt;/a&gt;&quot;);                builder.append(&quot;&amp;nbsp;&quot;);            &#125;        &#125;                //拼接下一页        if(pageInfo.isHasNextPage())&#123;            builder.append(&quot;&lt;a href=&#39;&quot;+path+&quot;emps/&quot;+pageInfo.getNextPage()+&quot;&#39;&gt;下一页&lt;/a&gt;&quot;);            builder.append(&quot;&amp;nbsp;&quot;);        &#125;else&#123;            builder.append(&quot;下一页&quot;);            builder.append(&quot;&amp;nbsp;&quot;);        &#125;                //拼接尾页        builder.append(&quot;&lt;a href=&#39;&quot;+path+&quot;emps/&quot;+pageInfo.getPages()+&quot;&#39;&gt;尾页&lt;/a&gt;&quot;);        builder.append(&quot;&amp;nbsp;&quot;);                return builder.toString();    &#125;&#125;</code></pre><p><strong>TestPage.java</strong></p><pre><code>package com.atguigu.test;import java.io.InputStream;import java.util.Arrays;import java.util.List;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.Test;import com.atguigu.bean.Emp;import com.atguigu.mapper.EmpMapper;import com.github.pagehelper.PageHelper;import com.github.pagehelper.PageInfo;public class TestPage &#123;    @Test    public void testPage() throws Exception&#123;        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();        SqlSession sqlSession = sqlSessionFactory.openSession(true);        EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);        PageHelper.startPage(2, 2);        List&lt;Emp&gt; list = mapper.getAllEmp();                PageInfo&lt;Emp&gt; pageInfo = new PageInfo&lt;&gt;(list, 5);//        System.out.println(pageInfo);//        System.out.println(Arrays.toString(pageInfo.getNavigatepageNums()));                System.out.println(PageUtil.getPageInfo(pageInfo, null));                        for (Emp emp : list) &#123;            System.out.println(emp);        &#125;    &#125;        public SqlSessionFactory getSqlSessionFactory() throws Exception&#123;        InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);        return sqlSessionFactory;    &#125;&#125;</code></pre><p><strong>返回结果</strong><br>字符串：</p><pre><code>&lt;a href=&#39;/SSM/emps/1&#39;&gt;首页&lt;/a&gt;&amp;nbsp;&lt;a href=&#39;/SSM/emps/1&#39;&gt;上一页 &lt;/a&gt;&amp;nbsp;&lt;a href=&#39;/SSM/emps/1&#39;&gt;1&lt;/a&gt;&amp;nbsp;&lt;a style=&#39;color:red;&#39; href=&#39;/SSM/emps/2&#39;&gt;2&lt;/a&gt;&amp;nbsp;&lt;a href=&#39;/SSM/emps/3&#39;&gt;3&lt;/a&gt;&amp;nbsp;&lt;a href=&#39;/SSM/emps/4&#39;&gt;4&lt;/a&gt;&amp;nbsp;&lt;a href=&#39;/SSM/emps/5&#39;&gt;5&lt;/a&gt;&amp;nbsp;&lt;a href=&#39;/SSM/emps/3&#39;&gt;下一页&lt;/a&gt;&amp;nbsp;&lt;a href=&#39;/SSM/emps/6&#39;&gt;尾页&lt;/a&gt;&amp;nbsp;</code></pre><p>浏览器显示：<br><img src="/2022/04/17/%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6PageHelper%E5%8F%8APageHelper%E6%A8%A1%E6%8B%9F%E5%88%86%E9%A1%B5/1.PNG"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分页插件PageHelper及PageHelper模拟分页&quot;&gt;&lt;a href=&quot;#分页插件PageHelper及PageHelper模拟分页&quot; class=&quot;headerlink&quot; title=&quot;分页插件PageHelper及PageHelper模拟分页&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyBatis" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/"/>
    
    <category term="分页插件PageHelper及PageHelper模拟分页" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6PageHelper%E5%8F%8APageHelper%E6%A8%A1%E6%8B%9F%E5%88%86%E9%A1%B5/"/>
    
    
    <category term="MyBatis" scheme="http://example.com/tags/MyBatis/"/>
    
    <category term="分页插件PageHelper" scheme="http://example.com/tags/%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6PageHelper/"/>
    
    <category term="PageHelper模拟分页" scheme="http://example.com/tags/PageHelper%E6%A8%A1%E6%8B%9F%E5%88%86%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis | 逆向工程</title>
    <link href="http://example.com/2022/04/16/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    <id>http://example.com/2022/04/16/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/</id>
    <published>2022-04-17T02:04:43.000Z</published>
    <updated>2022-04-17T02:11:11.920Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h1><p>1.项目目录<br><img src="/2022/04/16/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/1.PNG"><br>2.导入逆向工程的jar包</p><pre><code>mybatis-generator-core-1.3.2.jar</code></pre><p>3.编写MBG的配置文件</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration  PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;  &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;&lt;generatorConfiguration&gt;  &lt;context id=&quot;DB2Tables&quot; targetRuntime=&quot;MyBatis3&quot;&gt;    &lt;!-- 设置连接数据库的信息 --&gt;    &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;        connectionURL=&quot;jdbc:mysql://localhost:3306/ssm&quot;        userId=&quot;root&quot;        password=&quot;root&quot;&gt;    &lt;/jdbcConnection&gt;    &lt;javaTypeResolver &gt;      &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot; /&gt;    &lt;/javaTypeResolver&gt;    &lt;!-- javabean的生成策略 --&gt;    &lt;javaModelGenerator targetPackage=&quot;com.atguigu.bean&quot; targetProject=&quot;.\src&quot;&gt;      &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt;      &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt;    &lt;/javaModelGenerator&gt;    &lt;!-- 映射文件的生成策略 --&gt;    &lt;sqlMapGenerator targetPackage=&quot;com.atguigu.mapper&quot;  targetProject=&quot;.\conf&quot;&gt;      &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt;    &lt;/sqlMapGenerator&gt;    &lt;!-- mapper接口的生成策略 --&gt;    &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.atguigu.mapper&quot;  targetProject=&quot;.\src&quot;&gt;      &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt;    &lt;/javaClientGenerator&gt;    &lt;!-- 设置要将数据库中的哪张表逆向生成哪一个javabean --&gt;    &lt;table tableName=&quot;emp&quot; domainObjectName=&quot;Emp&quot;&gt;&lt;/table&gt;    &lt;table tableName=&quot;dept&quot; domainObjectName=&quot;Dept&quot;&gt;&lt;/table&gt;  &lt;/context&gt;&lt;/generatorConfiguration&gt;</code></pre><p>4.运行代码生成器生成代码</p><pre><code>@Testpublic void testMBG() throws Exception &#123;   List&lt;String&gt; warnings = new ArrayList&lt;String&gt;();   boolean overwrite = true;   File configFile = new File(&quot;mbg.xml&quot;);   ConfigurationParser cp = new ConfigurationParser(warnings);   Configuration config = cp.parseConfiguration(configFile);   DefaultShellCallback callback = new DefaultShellCallback(overwrite);   MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings);   myBatisGenerator.generate(null);&#125;</code></pre><p>5.逆向工程的使用<br>基本查询与带条件查询测试</p><pre><code>@Test    public void testCRUD() throws Exception&#123;        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();        SqlSession sqlSession = sqlSessionFactory.openSession(true);        EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);        //        Emp emp = mapper.selectByPrimaryKey(2);//        System.out.println(emp);                EmpExample example = new EmpExample();                Criteria c1 = example.createCriteria();        c1.andEnameLike(&quot;%a%&quot;);        c1.andSexEqualTo(&quot;1&quot;);                Criteria c2 = example.createCriteria();        c2.andDidEqualTo(2);                example.or(c2);                List&lt;Emp&gt; list = mapper.selectByExample(example);        for (Emp emp : list) &#123;            System.out.println(emp);        &#125;                //查询全部//        List&lt;Emp&gt; list1 = mapper.selectByExample(null);//        for (Emp emp : list1) &#123;//            System.out.println(emp);//        &#125;    &#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;逆向工程&quot;&gt;&lt;a href=&quot;#逆向工程&quot; class=&quot;headerlink&quot; title=&quot;逆向工程&quot;&gt;&lt;/a&gt;逆向工程&lt;/h1&gt;&lt;p&gt;1.项目目录&lt;br&gt;&lt;img src=&quot;/2022/04/16/%E9%80%86%E5%90%91%E5%B7%A5%E7</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="框架" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyBatis" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/"/>
    
    <category term="逆向工程" scheme="http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/MyBatis/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    
    <category term="逆向工程" scheme="http://example.com/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
</feed>
